{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"./Container\";\nimport { List, ListDisposer } from \"./utils/List\";\nimport { OrderedListTemplate } from \"./utils/SortedList\";\nimport { Dictionary } from \"./utils/Dictionary\";\nimport { Disposer, MultiDisposer } from \"./utils/Disposer\";\nimport { DataSource } from \"./data/DataSource\";\nimport { Responsive } from \"./utils/Responsive\";\nimport { system } from \"./System\";\nimport { DataItem } from \"./DataItem\";\nimport { registry } from \"./Registry\";\nimport * as $math from \"./utils/Math\";\nimport * as $array from \"./utils/Array\";\nimport * as $ease from \"./utils/Ease\";\nimport * as $utils from \"./utils/Utils\";\nimport * as $iter from \"./utils/Iterator\";\nimport * as $object from \"./utils/Object\";\nimport * as $type from \"./utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * A Component represents an independent functional element or control, that\r\n * can have it's own behavior, children, data, etc.\r\n *\r\n * A few examples of a Component: [[Legend]], [[Series]], [[Scrollbar]].\r\n *\r\n * @see {@link IComponentEvents} for a list of available events\r\n * @see {@link IComponentAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar Component = /** @class */function (_super) {\n  __extends(Component, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Component() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * Holds data field names.\r\n     *\r\n     * Data fields define connection beween [[DataItem]] and actual properties\r\n     * in raw data.\r\n     */\n    _this.dataFields = {};\n    /**\r\n     * A list of [[DataSource]] definitions of external data source.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._dataSources = {};\n    /**\r\n     * This is used when only new data is invalidated (if added using `addData`\r\n     * method).\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._parseDataFrom = 0;\n    /**\r\n     * Holds the disposers for the dataItems and dataUsers\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._dataDisposers = [];\n    /**\r\n     * Currently selected \"data set\".\r\n     *\r\n     * If it's set to `\"\"`, main data set (unaggregated data) is used.\r\n     */\n    _this._currentDataSetId = \"\";\n    /**\r\n     * [_start description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._start = 0;\n    /**\r\n     * [_end description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._end = 1;\n    /**\r\n     * If set to `true`, changing data range in element will not trigger\r\n     * `daterangechanged` event.\r\n     */\n    _this.skipRangeEvent = false;\n    /**\r\n     * Whenever selected scope changes (chart is zoomed or panned), for example\r\n     * by interaction from a Scrollbar, or API, a chart needs to reposition\r\n     * its contents.\r\n     *\r\n     * `rangeChangeDuration` influences how this is performed.\r\n     *\r\n     * If set to zero (0), the change will happen instantenously.\r\n     *\r\n     * If set to non-zero value, the chart will gradually animate into new\r\n     * position for the set amount of milliseconds.\r\n     *\r\n     * @default 0\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n    _this.rangeChangeDuration = 0;\n    /**\r\n     * An easing function to use for range change animation.\r\n     *\r\n     * @see {@link Ease}\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n    _this.rangeChangeEasing = $ease.cubicOut;\n    /**\r\n     * A duration (ms) of each data parsing step. A Component parses its data in\r\n     * chunks in order to avoid completely freezing the machine when large data\r\n     * sets are used. This setting will control how many milliseconds should pass\r\n     * when parsing data until parser stops for a brief moment to let other\r\n     * processes catch up.\r\n     */\n    _this.parsingStepDuration = 50;\n    /**\r\n     * [dataInvalid description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n    _this.dataInvalid = false;\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this.rawDataInvalid = false;\n    /**\r\n     * [dataRangeInvalid description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n    _this.dataRangeInvalid = false;\n    /**\r\n     * [dataItemsInvalid description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n    _this.dataItemsInvalid = false;\n    /**\r\n     * If set to a non-zero number the element will \"animate\" data values of its\r\n     * children.\r\n     *\r\n     * This will happen on first load and whenever data values change.\r\n     *\r\n     * Enabling interpolation will mean that elements will transit smoothly into\r\n     * new values rather than updating instantly.\r\n     *\r\n     * @default 0\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n    _this.interpolationDuration = 0;\n    /**\r\n     * An easing function to use for interpolating values when transiting from\r\n     * one source value to another.\r\n     *\r\n     * @default cubicOut\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     * @see {@link Ease}\r\n     */\n    _this.interpolationEasing = $ease.cubicOut;\n    /**\r\n     * Indicates whether transition between data item's values should start and\r\n     * play out all at once, or with a small delay (as defined by\r\n     * `sequencedInterpolationDelay`) for each subsequent data item.\r\n     *\r\n     * @default true\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n    _this.sequencedInterpolation = true;\n    /**\r\n     * A delay (ms) to wait between animating each subsequent data item's\r\n     * interpolation animation.\r\n     *\r\n     * Relative only if `sequencedInterpolation = true`.\r\n     *\r\n     * @default 0\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n    _this.sequencedInterpolationDelay = 0;\n    /**\r\n     * A progress (0-1) for the data validation process.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this.dataValidationProgress = 0;\n    _this._addAllDataItems = true;\n    _this._usesData = true;\n    _this.className = \"Component\";\n    _this.minZoomCount = 1;\n    _this.maxZoomCount = 0;\n    _this._dataItems = new OrderedListTemplate(_this.createDataItem());\n    _this._dataItems.events.on(\"inserted\", _this.handleDataItemAdded, _this, false);\n    _this._dataItems.events.on(\"removed\", _this.handleDataItemRemoved, _this, false);\n    _this._disposers.push(new ListDisposer(_this._dataItems));\n    _this._disposers.push(_this._dataItems.template);\n    _this.invalidateData();\n    // TODO what about remove ?\n    _this.dataUsers.events.on(\"inserted\", _this.handleDataUserAdded, _this, false);\n    // Set up disposers\n    _this._disposers.push(new MultiDisposer(_this._dataDisposers));\n    _this._start = 0;\n    _this._end = 1;\n    _this.maxZoomDeclination = 1;\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n  Component.prototype.createDataItem = function () {\n    return new DataItem();\n  };\n  /**\r\n   * [handleDataUserAdded description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param event Event object\r\n   */\n  Component.prototype.handleDataUserAdded = function (event) {\n    var dataUser = event.newValue;\n    dataUser.dataProvider = this;\n  };\n  /**\r\n   * [handleDataItemValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n  Component.prototype.handleDataItemValueChange = function (dataItem, name) {\n    if (!this.dataItemsInvalid) {\n      this.invalidateDataItems();\n    }\n  };\n  /**\r\n   * [handleDataItemWorkingValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {};\n  /**\r\n   * [handleDataItemWorkingLocationChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.handleDataItemWorkingLocationChange = function (dataItem, name) {};\n  /**\r\n   * [handleDataItemCalculatedValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.handleDataItemCalculatedValueChange = function (dataItem, name) {};\n  /**\r\n   * [handleDataItemPropertyChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.handleDataItemPropertyChange = function (dataItem, name) {};\n  /**\r\n   * Populates a [[DataItem]] width data from data source.\r\n   *\r\n   * Loops through all the fields and if such a field is found in raw data\r\n   * object, a corresponding value on passed in `dataItem` is set.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param item\r\n   */\n  Component.prototype.processDataItem = function (dataItem, dataContext) {\n    var _this = this;\n    if (dataItem) {\n      if (!dataContext) {\n        dataContext = {};\n      }\n      // store reference to original data item\n      dataItem.dataContext = dataContext;\n      var hasSomeValues_1 = false;\n      $object.each(this.dataFields, function (key, fieldValue) {\n        var fieldName = key;\n        var value = dataContext[fieldValue];\n        // Apply adapters to a retrieved value\n        if (_this._adapterO) {\n          if (_this._adapterO.isEnabled(\"dataContextValue\")) {\n            value = _this._adapterO.apply(\"dataContextValue\", {\n              field: fieldName,\n              value: value,\n              dataItem: dataItem\n            }).value;\n          }\n        }\n        if ($type.hasValue(value)) {\n          hasSomeValues_1 = true;\n          if (dataItem.hasChildren[fieldName]) {\n            var template = _this.createDataItem();\n            template.copyFrom(_this.mainDataSet.template);\n            var children = new OrderedListTemplate(template);\n            children.events.on(\"inserted\", _this.handleDataItemAdded, _this, false);\n            children.events.on(\"removed\", _this.handleDataItemRemoved, _this, false);\n            _this._dataDisposers.push(new ListDisposer(children));\n            var count = value.length;\n            for (var i = 0; i < count; i++) {\n              var rawDataItem = value[i];\n              var childDataItem = children.create();\n              childDataItem.parent = dataItem;\n              _this.processDataItem(childDataItem, rawDataItem);\n            }\n            var anyDataItem = dataItem;\n            anyDataItem[fieldName] = children;\n          } else {\n            // data is converted to numbers/dates in each dataItem\n            dataItem[fieldName] = value;\n          }\n        }\n      });\n      $object.each(this.propertyFields, function (key, fieldValue) {\n        var f = key;\n        var value = dataContext[fieldValue];\n        if ($type.hasValue(value)) {\n          hasSomeValues_1 = true;\n          dataItem.setProperty(f, value);\n        }\n      });\n      // @todo we might need some flag which would tell whether we should create empty data items or not.\n      if (!this._addAllDataItems && !hasSomeValues_1) {\n        this.mainDataSet.remove(dataItem);\n      }\n    }\n  };\n  /**\r\n   *\r\n   * When validating raw data, instead of processing data item, we update it\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param item\r\n   */\n  Component.prototype.updateDataItem = function (dataItem) {\n    var _this = this;\n    if (dataItem) {\n      var dataContext_1 = dataItem.dataContext;\n      $object.each(this.dataFields, function (key, fieldValue) {\n        var fieldName = key;\n        var value = dataContext_1[fieldValue];\n        // Apply adapters to a retrieved value\n        if (_this._adapterO) {\n          value = _this._adapterO.apply(\"dataContextValue\", {\n            field: fieldName,\n            value: value,\n            dataItem: dataItem\n          }).value;\n        }\n        if ($type.hasValue(value)) {\n          if (dataItem.hasChildren[fieldName]) {\n            var anyDataItem = dataItem;\n            var children = anyDataItem[fieldName];\n            children.each(function (child) {\n              _this.updateDataItem(child);\n            });\n          } else {\n            // data is converted to numbers/dates in each dataItem\t\t\t\t\t\n            dataItem[fieldName] = value;\n          }\n        }\n      });\n      $object.each(this.propertyFields, function (key, fieldValue) {\n        var f = key;\n        var value = dataContext_1[fieldValue];\n        if ($type.hasValue(value)) {\n          dataItem.setProperty(f, value);\n        }\n      });\n    }\n  };\n  /**\r\n   * [validateDataElements description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n  Component.prototype.validateDataElements = function () {\n    var count = this.endIndex;\n    for (var i = this.startIndex; i < count; i++) {\n      var dataItem = this.dataItems.getIndex(i);\n      // TODO is this correct\n      if (dataItem) {\n        this.validateDataElement(dataItem);\n      }\n    }\n  };\n  /**\r\n   * Validates this element and its related elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.validate = function () {\n    this.validateDataElements();\n    _super.prototype.validate.call(this);\n  };\n  /**\r\n   * [validateDataElement description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem [description]\r\n   */\n  Component.prototype.validateDataElement = function (dataItem) {};\n  /**\r\n   * Adds one or several (array) of data items to the existing data.\r\n   *\r\n   * @param rawDataItem One or many raw data item objects\r\n   */\n  Component.prototype.addData = function (rawDataItem, removeCount, skipRaw) {\n    var _this = this;\n    // need to check if data is invalid, as addData might be called multiple times\n    if (!this.dataInvalid && this.inited) {\n      this._parseDataFrom = this.data.length; // save length of parsed data\n    }\n\n    if (!skipRaw) {\n      if (rawDataItem instanceof Array) {\n        // can't use concat because new array is returned\n        $array.each(rawDataItem, function (dataItem) {\n          _this.data.push(dataItem);\n        });\n      } else {\n        this.data.push(rawDataItem); // add to raw data array\n      }\n    }\n\n    if (this.inited) {\n      this.removeData(removeCount, skipRaw);\n    } else {\n      if ($type.isNumber(removeCount)) {\n        while (removeCount > 0) {\n          this.data.shift();\n          removeCount--;\n        }\n      }\n    }\n    this.invalidateData();\n  };\n  /**\r\n   * Removes elements from the beginning of data\r\n   *\r\n   * @param count number of elements to remove\r\n   */\n  Component.prototype.removeData = function (count, skipRaw) {\n    if ($type.isNumber(count) && count > 0) {\n      while (count > 0) {\n        var dataItem = this.mainDataSet.getIndex(0);\n        if (dataItem) {\n          this.mainDataSet.remove(dataItem);\n        }\n        this.dataUsers.each(function (dataUser) {\n          if (!dataUser.data || dataUser.data.length == 0) {\n            var dataItem_1 = dataUser.mainDataSet.getIndex(0);\n            if (dataItem_1) {\n              dataUser.mainDataSet.remove(dataItem_1);\n            }\n          }\n        });\n        if (!skipRaw) {\n          this.data.shift();\n        }\n        if (this._parseDataFrom > 0) {\n          this._parseDataFrom--;\n        }\n        count--;\n      }\n      // changed from invalidateData since 4.7.19 to solve #51551\n      this.invalidateDataItems();\n    }\n  };\n  /**\r\n   * Triggers a data (re)parsing.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.invalidateData = function () {\n    if (this.disabled || this.isTemplate) {\n      return;\n    }\n    //if(!this.dataInvalid){\n    registry.addToInvalidComponents(this);\n    system.requestFrame();\n    this.dataInvalid = true;\n    $iter.each(this.dataUsers.iterator(), function (x) {\n      x.invalidateDataItems();\n    });\n    //}\n  };\n  /**\r\n   * [invalidateDataUsers description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n  Component.prototype.invalidateDataUsers = function () {\n    $iter.each(this.dataUsers.iterator(), function (x) {\n      x.invalidate();\n    });\n  };\n  /**\r\n   * Invalidates data values. When data array is not changed, but values within\r\n   * it changes, we invalidate data so that component would process changes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.invalidateDataItems = function () {\n    if (this.disabled || this.isTemplate) {\n      return;\n    }\n    //if(!this.dataItemsInvalid){\n    $array.move(registry.invalidDataItems, this);\n    system.requestFrame();\n    this.dataItemsInvalid = true;\n    $iter.each(this.dataUsers.iterator(), function (x) {\n      x.invalidateDataItems();\n    });\n    //}\n  };\n  /**\r\n   * Invalidates data range. This is done when data which must be shown\r\n   * changes (chart is zoomed for example).\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.invalidateDataRange = function () {\n    if (this.disabled || this.isTemplate) {\n      return;\n    }\n    //if(!this.dataRangeInvalid){\n    this.dataRangeInvalid = true;\n    $array.move(registry.invalidDataRange, this);\n    system.requestFrame();\n    //}\n  };\n  /**\r\n   * Processes data range.\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.validateDataRange = function () {\n    $array.remove(registry.invalidDataRange, this);\n    this.dataRangeInvalid = false;\n    if (this.startIndex != this._prevStartIndex || this.endIndex != this._prevEndIndex) {\n      this.rangeChangeUpdate();\n      this.appendDataItems();\n      this.invalidate();\n      this.dispatchImmediately(\"datarangechanged\");\n    }\n  };\n  /**\r\n   * [sliceData description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.sliceData = function () {\n    this._workingStartIndex = this.startIndex;\n    this._workingEndIndex = this.endIndex;\n  };\n  /**\r\n   * [rangeChangeUpdate description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.rangeChangeUpdate = function () {\n    this.sliceData();\n    this._prevStartIndex = this.startIndex;\n    this._prevEndIndex = this.endIndex;\n  };\n  /**\r\n   * [appendDataItems description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.appendDataItems = function () {\n    // TODO use an iterator instead\n    var count = this.endIndex;\n    for (var i = this.startIndex; i < count; i++) {\n      // data item\n      var dataItem = this.dataItems.getIndex(i);\n      if (dataItem) {\n        dataItem.__disabled = false;\n      }\n    }\n    for (var i = 0; i < this.startIndex; i++) {\n      var dataItem = this.dataItems.getIndex(i);\n      if (dataItem) {\n        dataItem.__disabled = true;\n      }\n    }\n    for (var i = this.endIndex; i < this.dataItems.length; i++) {\n      var dataItem = this.dataItems.getIndex(i);\n      if (dataItem) {\n        dataItem.__disabled = true;\n      }\n    }\n  };\n  /**\r\n   * If you want to have a smooth transition from one data values to another, you change your raw data and then you must call this method.\r\n   * then instead of redrawing everything, the chart will check raw data and smoothly transit from previous to new data\r\n   */\n  Component.prototype.invalidateRawData = function () {\n    if (this.disabled || this.isTemplate) {\n      return;\n    }\n    //if(!this.rawDataInvalid){\n    $array.move(registry.invalidRawDatas, this);\n    system.requestFrame();\n    this.rawDataInvalid = true;\n    $iter.each(this.dataUsers.iterator(), function (x) {\n      x.invalidateRawData();\n    });\n    //}\n  };\n  /**\r\n   * @ignore\r\n   */\n  Component.prototype.validateRawData = function () {\n    var _this = this;\n    $array.remove(registry.invalidRawDatas, this);\n    $iter.each(this.mainDataSet.iterator(), function (dataItem) {\n      if (dataItem) {\n        _this.updateDataItem(dataItem);\n      }\n    });\n  };\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n  Component.prototype.dispose = function () {\n    var _this = this;\n    this.mainDataSet.template.clones.clear();\n    $object.each(this._dataSources, function (key, source) {\n      _this.removeDispose(source);\n    });\n    this.disposeData();\n    _super.prototype.dispose.call(this);\n  };\n  /**\r\n   * @ignore\r\n   */\n  Component.prototype.disposeData = function () {\n    this.mainDataSet.template.clones.clear();\n    $array.each(this._dataDisposers, function (x) {\n      x.dispose();\n    });\n    // and for all components\n    $iter.each(this.dataUsers.iterator(), function (dataUser) {\n      dataUser.disposeData();\n    });\n    this._dataDisposers.length = 0;\n    this._startIndex = undefined;\n    this._endIndex = undefined;\n    // dispose old\n    this.mainDataSet.clear();\n    this.mainDataSet.template.clones.clear();\n    if (this._dataSets) {\n      this._dataSets.clear();\n    }\n  };\n  Component.prototype.getDataItem = function (dataContext) {\n    return this.mainDataSet.create();\n  };\n  /**\r\n   * Validates (processes) data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.validateData = function () {\n    this.dispatchImmediately(\"beforedatavalidated\");\n    this.dataInvalid = false;\n    registry.removeFromInvalidComponents(this);\n    if (this.__disabled) {\n      return;\n    }\n    this.dataValidationProgress = 0;\n    // need this to slice new data\n    this._prevStartIndex = undefined;\n    this._prevEndIndex = undefined;\n    // todo: this needs some overthinking, maybe some extra settings like zoomOotonDataupdate like in v3 or so. some charts like pie chart probably should act like this always\n    this._startIndex = undefined;\n    this._endIndex = undefined;\n    if (this.dataFields.data && this.dataItem) {\n      var dataContext = this.dataItem.dataContext;\n      this._data = dataContext[this.dataFields.data];\n    }\n    // data items array is reset only if all data is validated, if _parseDataFrom is not 0, we append new data only\n    // check heatmap demo if uncommented\n    // fixed both issues by adding && this.data.length > 0\n    // check adding series example if changed\n    if (this._parseDataFrom === 0 && this.data.length > 0) {\n      this.disposeData();\n    }\n    if (this.data.length > 0) {\n      var preloader = this.preloader;\n      // and for all components\n      $iter.each(this.dataUsers.iterator(), function (dataUser) {\n        // todo: this needs some overthinking, maybe some extra settings like zoomOUtonDataupdate like in v3 or so. some charts like pie chart probably should act like this always\n        dataUser._startIndex = undefined;\n        dataUser._endIndex = undefined;\n      });\n      var counter = 0;\n      var startTime = Date.now();\n      // parse data\n      var i = this._parseDataFrom;\n      var n = this.data.length;\n      var _loop_1 = function () {\n        var rawDataItem = this_1.data[i];\n        if (this_1._usesData) {\n          var dataItem = this_1.getDataItem(rawDataItem);\n          this_1.processDataItem(dataItem, rawDataItem);\n        }\n        this_1.dataUsers.each(function (dataUser) {\n          if (dataUser.data.length == 0) {\n            // checking if data is not set directly\n            var dataUserDataItem = dataUser.getDataItem(rawDataItem);\n            dataUser.processDataItem(dataUserDataItem, rawDataItem);\n          }\n        });\n        counter++;\n        // show preloader if this takes too many time\n        if (counter == 100) {\n          // no need to check it on each data item\n          counter = 0;\n          var elapsed = Date.now() - startTime;\n          if (elapsed > this_1.parsingStepDuration) {\n            if (i < this_1.data.length - 10) {\n              this_1._parseDataFrom = i + 1;\n              // update preloader\n              if (preloader) {\n                if (i / this_1.data.length > 0.5 && !preloader.visible) {\n                  // do not start showing\n                } else {\n                  preloader.progress = i / this_1.data.length;\n                }\n              }\n              this_1.dataValidationProgress = i / this_1.data.length;\n              i = this_1.data.length; // stops cycle\n              this_1.invalidateData();\n              return {\n                value: void 0\n              };\n            }\n          }\n        }\n      };\n      var this_1 = this;\n      for (i; i < n; i++) {\n        var state_1 = _loop_1();\n        if (typeof state_1 === \"object\") return state_1.value;\n      }\n      if (preloader) {\n        preloader.progress = 1;\n      }\n      this.dataUsers.each(function (dataUser) {\n        if (dataUser.hidden || dataUser.appeared && !dataUser.visible && dataUser.stacked) {\n          dataUser.hide(0);\n        }\n      });\n    }\n    this.dataValidationProgress = 1;\n    this._parseDataFrom = 0; // reset this index, it is set to dataItems.length if addData() method was used.\n    this.invalidateDataItems();\n    if (!this._internalDefaultsApplied) {\n      this.applyInternalDefaults();\n    }\n    this.dispatch(\"datavalidated\"); // can't zoom chart if dispatched immediately\n  };\n  /**\r\n   * Validates (processes) data items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.validateDataItems = function () {\n    $array.remove(registry.invalidDataItems, this);\n    this.dataItemsInvalid = false;\n    this.invalidateDataRange();\n    this.invalidate();\n    this.dispatch(\"dataitemsvalidated\");\n  };\n  Object.defineProperty(Component.prototype, \"data\", {\n    /**\r\n     * Returns element's source (raw) data.\r\n     *\r\n     * @return Data\r\n     */\n    get: function () {\n      if (!this._data) {\n        this._data = [];\n      }\n      if (!this._adapterO) {\n        return this._data;\n      } else {\n        return this._adapterO.apply(\"data\", this._data);\n      }\n    },\n    /**\r\n     * Sets source (raw) data for the element. The \"data\" is always an `Array`\r\n     * of objects.\r\n     *\r\n     * IMPORTANT: The order of data items in `data` array is important as it\r\n     * might affect chart look and behavior. [More details](https://www.amcharts.com/docs/v4/concepts/data/#Order_of_data_items).\r\n     *\r\n     * @param value Data\r\n     */\n    set: function (value) {\n      this.setData(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Component.prototype.setData = function (value) {\n    // array might be the same, but there might be items added\n    // todo: check if array changed, toString maybe?\n    if (!this.isDisposed()) {\n      this._parseDataFrom = 0;\n      this.disposeData();\n      this._data = value;\n      if (value && value.length > 0) {\n        this.invalidateData();\n      } else {\n        this.dispatchImmediately(\"beforedatavalidated\");\n        this.dispatch(\"datavalidated\");\n      }\n    }\n  };\n  /**\r\n   * Returns (creates if necessary) a [[DataSource]] bound to any specific\r\n   * property.\r\n   *\r\n   * For example if I want to bind `data` to an external JSON file, I'd create\r\n   * a DataSource for it.\r\n   *\r\n   * @param property  Property to bind external data to\r\n   * @return A DataSource for property\r\n   */\n  Component.prototype.getDataSource = function (property) {\n    var _this = this;\n    if (!$type.hasValue(this._dataSources[property])) {\n      this._dataSources[property] = new DataSource();\n      this._dataSources[property].component = this;\n      this.setDataSourceEvents(this._dataSources[property], property);\n      this._dataSources[property].adapter.add(\"dateFields\", function (val) {\n        return _this.dataSourceDateFields(val);\n      });\n      this._dataSources[property].adapter.add(\"numberFields\", function (val) {\n        return _this.dataSourceNumberFields(val);\n      });\n      this.events.on(\"inited\", function () {\n        _this.loadData(property);\n      }, this, false);\n    }\n    return this._dataSources[property];\n  };\n  Object.defineProperty(Component.prototype, \"dataSource\", {\n    /**\r\n     * @return Data source\r\n     */\n    get: function () {\n      if (!this._dataSources[\"data\"]) {\n        this.getDataSource(\"data\");\n      }\n      return this._dataSources[\"data\"];\n    },\n    /**\r\n     *A [[DataSource]] to be used for loading Component's data.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/loading-external-data/} for more on loading external data\r\n     * @param value  Data source\r\n     */\n    set: function (value) {\n      var _this = this;\n      if (this._dataSources[\"data\"]) {\n        this.removeDispose(this._dataSources[\"data\"]);\n      }\n      this._dataSources[\"data\"] = value;\n      this._dataSources[\"data\"].component = this;\n      this.events.on(\"inited\", function () {\n        _this.loadData(\"data\");\n      }, this, false);\n      this.setDataSourceEvents(value, \"data\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Initiates loading of the external data via [[DataSource]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.loadData = function (property) {\n    this._dataSources[property].load();\n  };\n  /**\r\n   * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n   * so that particular chart types can popuplate this setting with their\r\n   * own type-specific data fields so they are parsed properly.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Array of date fields\r\n   * @return Array of date fields populated with chart's date fields\r\n   */\n  Component.prototype.dataSourceDateFields = function (value) {\n    return value;\n  };\n  /**\r\n   * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n   * so that particular chart types can popuplate this setting with their\r\n   * own type-specific data fields so they are parsed properly.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Array of number fields\r\n   * @return Array of number fields populated with chart's number fields\r\n   */\n  Component.prototype.dataSourceNumberFields = function (value) {\n    return value;\n  };\n  /**\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param list        [description]\r\n   * @param dataFields  [description]\r\n   * @param targetList  [description]\r\n   * @return [description]\r\n   */\n  Component.prototype.populateDataSourceFields = function (list, dataFields, targetList) {\n    $array.each(targetList, function (value) {\n      if (dataFields[value] && $array.indexOf(list, dataFields[value]) === -1) {\n        list.push(dataFields[value]);\n      }\n    });\n    return list;\n  };\n  /**\r\n   * Sets events on a [[DataSource]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.setDataSourceEvents = function (ds, property) {\n    var _this = this;\n    ds.events.on(\"started\", function (ev) {\n      var preloader = _this.preloader;\n      if (preloader) {\n        preloader.progress = 0;\n        //preloader.label.text = this.language.translate(\"Loading\");\n      }\n    }, undefined, false);\n    ds.events.on(\"loadstarted\", function (ev) {\n      var preloader = _this.preloader;\n      if (preloader) {\n        preloader.progress = 0.25;\n      }\n    }, undefined, false);\n    ds.events.on(\"loadended\", function (ev) {\n      var preloader = _this.preloader;\n      if (preloader) {\n        preloader.progress = 0.5;\n      }\n    }, undefined, false);\n    ds.events.on(\"parseended\", function (ev) {\n      var preloader = _this.preloader;\n      if (preloader) {\n        preloader.progress = 0.75;\n      }\n    }, undefined, false);\n    ds.events.on(\"ended\", function (ev) {\n      var preloader = _this.preloader;\n      if (preloader) {\n        preloader.progress = 1;\n      }\n    }, undefined, false);\n    ds.events.on(\"error\", function (ev) {\n      var preloader = _this.preloader;\n      if (preloader) {\n        preloader.progress = 1;\n      }\n      _this.openModal(ev.message);\n    }, undefined, false);\n    if (property) {\n      ds.events.on(\"done\", function (ev) {\n        var preloader = _this.preloader;\n        if (preloader) {\n          preloader.progress = 1;\n        }\n        if (property == \"data\" && !$type.isArray(ev.data)) {\n          ev.data = [ev.data];\n        }\n        if (ds.incremental && property == \"data\" && _this.data.length) {\n          _this.addData(ev.data, ds.keepCount ? ev.data.length : 0);\n        } else if (ds.updateCurrentData && property == \"data\" && _this.data.length) {\n          // cycle through existing data items\n          $array.each(_this.data, function (item, index) {\n            if ($type.hasValue(ev.data[index])) {\n              $object.each(item, function (key, val) {\n                if ($type.hasValue(ev.data[index][key])) {\n                  item[key] = ev.data[index][key];\n                }\n              });\n            }\n          });\n          _this.invalidateRawData();\n        } else {\n          _this[property] = ev.data;\n        }\n      });\n    }\n  };\n  Object.defineProperty(Component.prototype, \"responsive\", {\n    /**\r\n     * @return Responsive rules handler\r\n     */\n    get: function () {\n      if (!this._responsive) {\n        this._responsive = new Responsive();\n        this._responsive.component = this;\n      }\n      return this._responsive;\n    },\n    /**\r\n     * A [[Responsive]] instance to be used when applying conditional\r\n     * property values.\r\n     *\r\n     * NOTE: Responsive features are currently in development and may not work\r\n     * as expected, if at all.\r\n     *\r\n     * @param value  Responsive rules handler\r\n     */\n    set: function (value) {\n      this._responsive = value;\n      this._responsive.component = this;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets current zoom.\r\n   *\r\n   * The range uses relative values from 0 to 1, with 0 marking beginning and 1\r\n   * marking end of the available data range.\r\n   *\r\n   * This method will not have any effect when called on a chart object.\r\n   * Since the chart can have a number of axes and series, each with its own\r\n   * data, the meaning of \"range\" is very ambiguous.\r\n   *\r\n   * To zoom the chart use `zoom*` methods on its respective axes.\r\n   *\r\n   * @param range          Range\r\n   * @param skipRangeEvent Should rangechanged event not be triggered?\r\n   * @param instantly      Do not animate?\r\n   * @return Actual modidied range (taking `maxZoomFactor` into account)\r\n   */\n  Component.prototype.zoom = function (range, skipRangeEvent, instantly, declination) {\n    var _this = this;\n    if (skipRangeEvent === void 0) {\n      skipRangeEvent = false;\n    }\n    if (instantly === void 0) {\n      instantly = false;\n    }\n    var start = range.start;\n    var end = range.end;\n    var priority = range.priority;\n    if (range.start == range.end) {\n      range.start = range.start - 0.5 / this.maxZoomFactor;\n      range.end = range.end + 0.5 / this.maxZoomFactor;\n    }\n    if (priority == \"end\" && end == 1 && start != 0) {\n      if (start < this.start) {\n        priority = \"start\";\n      }\n    }\n    if (priority == \"start\" && start == 0) {\n      if (end > this.end) {\n        priority = \"end\";\n      }\n    }\n    if (!$type.isNumber(declination)) {\n      declination = this.maxZoomDeclination;\n    }\n    if (!$type.isNumber(start) || !$type.isNumber(end)) {\n      return {\n        start: this.start,\n        end: this.end\n      };\n    }\n    if (this._finalStart != start || this._finalEnd != end) {\n      var maxZoomFactor = this.maxZoomFactor / this.minZoomCount;\n      var minZoomFactor = this.maxZoomFactor / this.maxZoomCount;\n      // most likely we are dragging left scrollbar grip here, so we tend to modify end\n      if (priority == \"start\") {\n        if (this.maxZoomCount > 0) {\n          // add to the end\n          if (1 / (end - start) < minZoomFactor) {\n            end = start + 1 / minZoomFactor;\n          }\n        }\n        // add to the end\n        if (1 / (end - start) > maxZoomFactor) {\n          end = start + 1 / maxZoomFactor;\n        }\n        //unless end is > 0\n        if (end > 1 && end - start < 1 / maxZoomFactor) {\n          //end = 1;\n          start = end - 1 / maxZoomFactor;\n        }\n      }\n      // most likely we are dragging right, so we modify left\n      else {\n        if (this.maxZoomCount > 0) {\n          // add to the end\n          if (1 / (end - start) < minZoomFactor) {\n            start = end - 1 / minZoomFactor;\n          }\n        }\n        // remove from start\n        if (1 / (end - start) > maxZoomFactor) {\n          if (start <= 0) {\n            end = start + 1 / maxZoomFactor;\n          } else {\n            start = end - 1 / maxZoomFactor;\n          }\n        }\n        if (start < 0 && end - start < 1 / maxZoomFactor) {\n          //start = 0;\n          end = start + 1 / maxZoomFactor;\n        }\n      }\n      if (start < -declination) {\n        start = -declination;\n      }\n      if (1 / (end - start) > maxZoomFactor) {\n        end = start + 1 / maxZoomFactor;\n      }\n      if (end > 1 + declination) {\n        end = 1 + declination;\n      }\n      if (1 / (end - start) > maxZoomFactor) {\n        start = end - 1 / maxZoomFactor;\n      }\n      this._finalEnd = end;\n      this._finalStart = start;\n      this.skipRangeEvent = skipRangeEvent;\n      this.dispatchImmediately(\"rangechangestarted\");\n      if (this.rangeChangeDuration > 0 && !instantly) {\n        // todo: maybe move this to Animation\n        var rangeChangeAnimation = this.rangeChangeAnimation;\n        if (rangeChangeAnimation && rangeChangeAnimation.progress < 1) {\n          var options = rangeChangeAnimation.animationOptions;\n          if (options.length > 1) {\n            if (options[0].to == start && options[1].to == end) {\n              return {\n                start: start,\n                end: end\n              };\n            } else {\n              if (!rangeChangeAnimation.isDisposed()) {\n                rangeChangeAnimation.stop();\n              }\n            }\n          }\n        }\n        if (this.rangeChangeAnimation) {\n          this.rangeChangeAnimation.kill();\n        }\n        rangeChangeAnimation = this.animate([{\n          property: \"start\",\n          to: start\n        }, {\n          property: \"end\",\n          to: end\n        }], this.rangeChangeDuration, this.rangeChangeEasing);\n        this.rangeChangeAnimation = rangeChangeAnimation;\n        if (rangeChangeAnimation && !rangeChangeAnimation.isFinished()) {\n          rangeChangeAnimation.events.on(\"animationended\", function () {\n            _this.dispatchImmediately(\"rangechangeended\");\n          });\n        } else {\n          this.dispatchImmediately(\"rangechangeended\");\n        }\n      } else {\n        this.start = start;\n        this.end = end;\n        this.dispatch(\"rangechangeended\");\n      }\n    }\n    return {\n      start: start,\n      end: end\n    };\n  };\n  /**\r\n   * Zooms to specific data items using their index in data.\r\n   *\r\n   * This method will not have any effect when called on a chart object.\r\n   * Since the chart can have a number of axes and series, each with its own\r\n   * data, the meaning of \"index\" is very ambiguous.\r\n   *\r\n   * To zoom the chart use `zoom*` methods on its respective axes.\r\n   *\r\n   * @param startIndex     Index of the starting data item\r\n   * @param endIndex       Index of the ending data item\r\n   * @param skipRangeEvent Should rangechanged event not be triggered?\r\n   * @param instantly      Do not animate?\r\n   */\n  Component.prototype.zoomToIndexes = function (startIndex, endIndex, skipRangeEvent, instantly) {\n    if (!$type.isNumber(startIndex) || !$type.isNumber(endIndex)) {\n      return;\n    }\n    var start = startIndex / this.dataItems.length;\n    var end = endIndex / this.dataItems.length;\n    this.zoom({\n      start: start,\n      end: end\n    }, skipRangeEvent, instantly);\n  };\n  Object.defineProperty(Component.prototype, \"zoomFactor\", {\n    /**\r\n     * A current zoom factor (0-1). 1 meaning fully zoomed out. (showing all of\r\n     * the available data)\r\n     *\r\n     * @return Zoom factor\r\n     */\n    get: function () {\n      return $math.fitToRange(1 / (this.end - this.start), 1, this.maxZoomFactor);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"maxZoomFactor\", {\n    /**\r\n     * @return Maximum zoomFactor\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxZoomFactor\");\n    },\n    /**\r\n     * Max available `zoomFactor`.\r\n     *\r\n     * The element will not allow zoom to occur beyond this factor.\r\n     *\r\n     * [[DateAxis]] and [[CategoryAxis]] calculate this atutomatically so that\r\n     * category axis could be zoomed to one category and date axis allows to be\r\n     * zoomed up to one base interval.\r\n     *\r\n     * In case you want to restrict category or date axis to be zoomed to more\r\n     * than one category or more than one base interval, use `minZoomCount`\r\n     * property (set it to `> 1`).\r\n     *\r\n     * Default value of [[ValueAxis]]'s `maxZoomFactor` is `1000`.\r\n     *\r\n     * Feel free to modify it to allow bigger zoom or to restrict zooming.\r\n     *\r\n     * @param value  Maximum zoomFactor\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"maxZoomFactor\", value)) {\n        if (value == 1) {\n          this.maxZoomDeclination = 0;\n        }\n        this.invalidateDataRange();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"maxZoomDeclination\", {\n    /**\r\n     * @ignore\r\n     * @return Maximum zoom declination\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxZoomDeclination\");\n    },\n    /**\r\n     * Max zoom declination.\r\n     *\r\n     * @ignore\r\n     * @default 1\r\n     * @param value  Maximum zoom declination\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"maxZoomDeclination\", value)) {\n        this.invalidateDataRange();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"startIndex\", {\n    /**\r\n     * Current starting index.\r\n     *\r\n     * @return Start index\r\n     */\n    get: function () {\n      if (!$type.isNumber(this._startIndex)) {\n        this._startIndex = 0;\n      }\n      return this._startIndex;\n    },\n    /**\r\n     * Sets current starting index.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Start index\r\n     */\n    set: function (value) {\n      this._startIndex = $math.fitToRange(Math.round(value), 0, this.dataItems.length);\n      //this._workingStartIndex = this._startIndex; // not good, breaks adjusted working start index of line series\n      this.start = this.indexToPosition(this._startIndex);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   * @todo:review description\r\n   * returns item's relative position by the index of the item\r\n   * @param index\r\n   */\n  Component.prototype.indexToPosition = function (index) {\n    return index / this.dataItems.length;\n  };\n  Object.defineProperty(Component.prototype, \"endIndex\", {\n    /**\r\n     * Current ending index.\r\n     *\r\n     * @return End index\r\n     */\n    get: function () {\n      var count = this.dataItems.length;\n      if (!$type.isNumber(this._endIndex) || this._endIndex > count) {\n        this._endIndex = count;\n      }\n      return this._endIndex;\n    },\n    /**\r\n     * Sets current ending index.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value End index\r\n     */\n    set: function (value) {\n      this._endIndex = $math.fitToRange(Math.round(value), 0, this.dataItems.length);\n      //this._workingEndIndex = this._endIndex; // not good, breaks adjusted workingend index of line series\n      this.end = this.indexToPosition(this._endIndex);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"start\", {\n    /**\r\n     * @return Start (0-1)\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        return this._start;\n      } else {\n        return this._adapterO.apply(\"start\", this._start);\n      }\n    },\n    /**\r\n     * Start of the current data range (zoom).\r\n     *\r\n     * These are relative values from 0 (beginning) to 1 (end).\r\n     *\r\n     * @param value Start (0-1)\r\n     */\n    set: function (value) {\n      // value = $math.round(value, 10); not good\n      //if (1 / (this.end - value) > this.maxZoomFactor) {\n      //\tvalue = this.end - 1 / this.maxZoomFactor;\n      //}\n      if (this._start != value) {\n        this._start = value;\n        var startIndex = Math.max(0, Math.floor(this.dataItems.length * value) || 0);\n        this._startIndex = Math.min(startIndex, this.dataItems.length);\n        this.invalidateDataRange();\n        this.invalidate();\n        this.dispatchImmediately(\"startchanged\");\n        this.dispatch(\"startendchanged\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"end\", {\n    /**\r\n     * @return End (0-1)\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        return this._end;\n      } else {\n        return this._adapterO.apply(\"end\", this._end);\n      }\n    },\n    /**\r\n     * End of the current data range (zoom).\r\n     *\r\n     * These are relative values from 0 (beginning) to 1 (end).\r\n     *\r\n     * @param value End (0-1)\r\n     */\n    set: function (value) {\n      // value = $math.round(value, 10); // not good\n      //if (1 / (value - this.start) > this.maxZoomFactor) {\n      //\tvalue = 1 / this.maxZoomFactor + this.start;\n      //}\n      if (this._end != value) {\n        this._end = value;\n        this._endIndex = Math.min(this.dataItems.length, Math.ceil(this.dataItems.length * value) || 0);\n        this.invalidateDataRange();\n        this.invalidate();\n        this.dispatchImmediately(\"endchanged\");\n        this.dispatch(\"startendchanged\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * [removeFromInvalids description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n  Component.prototype.removeFromInvalids = function () {\n    _super.prototype.removeFromInvalids.call(this);\n    registry.removeFromInvalidComponents(this);\n    $array.remove(registry.invalidDataItems, this);\n    $array.remove(registry.invalidDataRange, this);\n    $array.remove(registry.invalidRawDatas, this);\n  };\n  Object.defineProperty(Component.prototype, \"dataItems\", {\n    /**\r\n     * Returns a list of source [[DataItem]] objects currently used in the chart.\r\n     *\r\n     * @return List of data items\r\n     */\n    get: function () {\n      if (this._currentDataSetId != \"\") {\n        var dataItems = this.dataSets.getKey(this._currentDataSetId);\n        if (dataItems) {\n          return dataItems;\n        }\n      }\n      return this._dataItems;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"dataSets\", {\n    /**\r\n     * Holds data items for data sets (usually aggregated data).\r\n     *\r\n     * @ignore\r\n     * @since 4.7.0\r\n     * @return  Data sets\r\n     */\n    get: function () {\n      if (!this._dataSets) {\n        this._dataSets = new Dictionary();\n      }\n      return this._dataSets;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Makes the chart use particular data set.\r\n   *\r\n   * If `id` is not provided or there is no such data set, main data will be\r\n   * used.\r\n   *\r\n   * @ignore\r\n   * @since 4.7.0\r\n   * @param  id  Data set id\r\n   */\n  Component.prototype.setDataSet = function (id) {\n    if (this._currentDataSetId != id) {\n      var dataSet = this.dataSets.getKey(id);\n      if (!dataSet) {\n        if (this._currentDataSetId != \"\") {\n          this.dataItems.each(function (dataItem) {\n            dataItem.__disabled = true;\n          });\n          this._currentDataSetId = \"\";\n          this.invalidateDataRange();\n          this._prevStartIndex = undefined;\n          this.dataItems.each(function (dataItem) {\n            dataItem.__disabled = false;\n          });\n          return true;\n        }\n      } else {\n        this.dataItems.each(function (dataItem) {\n          dataItem.__disabled = true;\n        });\n        this._currentDataSetId = id;\n        this.invalidateDataRange();\n        this._prevStartIndex = undefined;\n        this.dataItems.each(function (dataItem) {\n          dataItem.__disabled = false;\n        });\n        return true;\n      }\n    }\n    return false;\n  };\n  Object.defineProperty(Component.prototype, \"currentDataSetId\", {\n    /**\r\n     * Returns id of the currently used data set, or `undefined` if main data set\r\n     * is in use.\r\n     *\r\n     * @since 4.7.0\r\n     * @return Current data set id\r\n     */\n    get: function () {\n      return this._currentDataSetId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"mainDataSet\", {\n    /**\r\n     * Returns reference to \"main\" data set (unaggregated data as it was supplied\r\n     * in `data`).\r\n     *\r\n     * @since 4.7.0\r\n     * @return Main data set\r\n     */\n    get: function () {\n      return this._dataItems;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates the indexes for the dataItems\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype._updateDataItemIndexes = function (startIndex) {\n    var dataItems = this.mainDataSet.values;\n    var length = dataItems.length;\n    for (var i = startIndex; i < length; ++i) {\n      dataItems[i]._index = i;\n    }\n  };\n  /**\r\n   * Processes newly added [[DataItem]] as well as triggers data re-validation.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event [description]\r\n   */\n  Component.prototype.handleDataItemAdded = function (event) {\n    event.newValue.component = this;\n    this._updateDataItemIndexes(event.index);\n    if (!this.dataItemsInvalid) {\n      this.invalidateDataItems();\n    }\n  };\n  /**\r\n   * removes [[DataItem]] as well as triggers data re-validation.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event [description]\r\n   */\n  Component.prototype.handleDataItemRemoved = function (event) {\n    //\t\tevent.oldValue.component = undefined; // not good, as some items might be not removed from component lists\n    this._updateDataItemIndexes(event.index);\n    if (!this.dataItemsInvalid) {\n      this.invalidateDataItems();\n    }\n  };\n  /**\r\n   * Binds a data element's field to a specific field in raw data.\r\n   * For example, for the very basic column chart you'd want to bind a `value`\r\n   * field to a field in data, such as `price`.\r\n   *\r\n   * Some more advanced Components, like [[CandlestickSeries]] need several\r\n   * data fields bound to data, such as ones for open, high, low and close\r\n   * values.\r\n   *\r\n   * @todo Example\r\n   * @param field  Field name\r\n   * @param value  Field name in data\r\n   */\n  Component.prototype.bindDataField = function (field, value) {\n    this.dataFields[field] = value;\n    this.invalidateDataRange();\n  };\n  /**\r\n   * Invalidates processed data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.invalidateProcessedData = function () {\n    this.resetProcessedRange();\n    this.invalidateDataRange();\n  };\n  /**\r\n   * [resetProcessedRange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n  Component.prototype.resetProcessedRange = function () {\n    this._prevEndIndex = null;\n    this._prevStartIndex = null;\n  };\n  Object.defineProperty(Component.prototype, \"dataUsers\", {\n    /**\r\n     * Returns all other [[Component]] objects that are using this element's\r\n     * data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @return [description]\r\n     */\n    get: function () {\n      var _this = this;\n      if (!this._dataUsers) {\n        this._dataUsers = new List();\n        //this._disposers.push(new ListDisposer(this._dataUsers));\n        // TODO better way of handling this? e.g. move into another module ?\n        this._disposers.push(new Disposer(function () {\n          // TODO clear the list ?\n          $iter.each(_this._dataUsers.iterator(), function (x) {\n            x.dispose();\n          });\n        }));\n      }\n      return this._dataUsers;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a clone of this element.\r\n   *\r\n   * @return Clone\r\n   */\n  Component.prototype.clone = function () {\n    var component = _super.prototype.clone.call(this);\n    component.dataFields = $utils.copyProperties(this.dataFields, {});\n    return component;\n  };\n  /**\r\n   * Copies all parameters from another [[Component]].\r\n   *\r\n   * @param source Source Component\r\n   */\n  Component.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    this.data = source.data;\n    this.sequencedInterpolation = source.sequencedInterpolation;\n    this.sequencedInterpolationDelay = source.sequencedInterpolationDelay;\n    this.interpolationDuration = source.interpolationDuration;\n    this.interpolationEasing = source.interpolationEasing;\n  };\n  /**\r\n   * Invalidates the whole element, including all its children, causing\r\n   * complete re-parsing of data and redraw.\r\n   *\r\n   * Use sparingly!\r\n   */\n  Component.prototype.reinit = function () {\n    this._inited = false;\n    this.deepInvalidate();\n  };\n  /**\r\n   * Add an adapter for data.\r\n   *\r\n   * @return Exporting\r\n   */\n  Component.prototype.getExporting = function () {\n    var _export = _super.prototype.getExporting.call(this);\n    if (!_export.adapter.has(\"data\", this._exportData, -1, this)) {\n      _export.adapter.add(\"data\", this._exportData, -1, this);\n      this.events.on(\"datavalidated\", function (ev) {\n        _export.handleDataUpdated();\n      });\n    }\n    return _export;\n  };\n  Component.prototype._exportData = function (arg) {\n    arg.data = this.data;\n    return arg;\n  };\n  Component.prototype.setDisabled = function (value) {\n    var changed = _super.prototype.setDisabled.call(this, value);\n    if (changed) {\n      this.invalidateData();\n    }\n    return changed;\n  };\n  /**\r\n   * @ignore\r\n   */\n  Component.prototype.setShowOnInit = function (value) {\n    if (value != this.getPropertyValue(\"showOnInit\")) {\n      if (value && !this.inited && !this.hidden) {\n        this._showOnInitDisposer2 = this.events.once(\"dataitemsvalidated\", this.hideInitially, this, false);\n        this._disposers.push(this._showOnInitDisposer2);\n      } else {\n        if (this._showOnInitDisposer2) {\n          this.removeDispose(this._showOnInitDisposer2);\n        }\n      }\n    }\n    // important order here\n    _super.prototype.setShowOnInit.call(this, value);\n  };\n  Component.prototype.setBaseId = function (value) {\n    if (value != this._baseId) {\n      if (this.dataInvalid) {\n        this.dataInvalid = false;\n        registry.removeFromInvalidComponents(this);\n        this._baseId = value;\n        this.invalidateData();\n      }\n    }\n    _super.prototype.setBaseId.call(this, value);\n  };\n  Object.defineProperty(Component.prototype, \"minZoomCount\", {\n    /**\r\n     * @return Min zoom count\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minZoomCount\");\n    },\n    /**\r\n     * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n     *\r\n     * Allows restricting zoom in beyond certain number of categories or base\r\n     * intervals.\r\n     *\r\n     * @default 1\r\n     * @param value  Min zoom count\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"minZoomCount\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"maxZoomCount\", {\n    /**\r\n     * @return Max zoom count\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxZoomCount\");\n    },\n    /**\r\n     * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n     *\r\n     * Limits how many categories or base intervals can be shown at the same\r\n     * time.\r\n     *\r\n     * If there are more items in the chart, the chart will auto-zoom.\r\n     *\r\n     * @default 0 (no limit)\r\n     * @since 4.6.2\r\n     * @param value  Max zoom count\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"maxZoomCount\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Called during the System.update method\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype._systemCheckIfValidate = function () {\n    if (this.dataInvalid || this.dataProvider && this.dataProvider.dataInvalid) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n  /**\r\n   * Adds easing functions to \"function\" fields.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as function?\r\n   */\n  Component.prototype.asFunction = function (field) {\n    return field == \"interpolationEasing\" || field == \"rangeChangeEasing\" || _super.prototype.asIs.call(this, field);\n  };\n  return Component;\n}(Container);\nexport { Component };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Component\"] = Component;","map":{"version":3,"mappings":"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","names":["Container","List","ListDisposer","OrderedListTemplate","Dictionary","Disposer","MultiDisposer","DataSource","Responsive","system","DataItem","registry","$math","$array","$ease","$utils","$iter","$object","$type","__extends","_super","_this","cubicOut","className","minZoomCount","maxZoomCount","_dataItems","createDataItem","events","on","handleDataItemAdded","handleDataItemRemoved","_disposers","push","template","invalidateData","dataUsers","handleDataUserAdded","_dataDisposers","_start","_end","maxZoomDeclination","applyTheme","Component","event","dataUser","newValue","dataProvider","dataItem","name","dataItemsInvalid","invalidateDataItems","dataContext","hasSomeValues_1","each","dataFields","key","fieldValue","fieldName","value","_adapterO","isEnabled","apply","field","hasValue","hasChildren","copyFrom","mainDataSet","children","count","length","i","rawDataItem","childDataItem","create","parent","processDataItem","anyDataItem","propertyFields","f","setProperty","_addAllDataItems","remove","dataContext_1","child","updateDataItem","endIndex","startIndex","dataItems","getIndex","validateDataElement","validateDataElements","validate","removeCount","skipRaw","dataInvalid","inited","_parseDataFrom","data","Array","removeData","isNumber","shift","dataItem_1","disabled","isTemplate","addToInvalidComponents","requestFrame","iterator","x","invalidate","move","invalidDataItems","dataRangeInvalid","invalidDataRange","_prevStartIndex","_prevEndIndex","rangeChangeUpdate","appendDataItems","dispatchImmediately","_workingStartIndex","_workingEndIndex","sliceData","__disabled","invalidRawDatas","rawDataInvalid","invalidateRawData","clones","clear","_dataSources","source","removeDispose","disposeData","dispose","_startIndex","undefined","_endIndex","_dataSets","removeFromInvalidComponents","dataValidationProgress","_data","preloader","counter","startTime","Date","now","n","this_1","_usesData","getDataItem","dataUserDataItem","elapsed","parsingStepDuration","visible","progress","hidden","appeared","stacked","hide","_internalDefaultsApplied","applyInternalDefaults","dispatch","invalidateDataRange","Object","setData","isDisposed","property","component","setDataSourceEvents","adapter","add","val","dataSourceDateFields","dataSourceNumberFields","loadData","getDataSource","load","list","targetList","indexOf","ds","ev","openModal","message","isArray","incremental","addData","keepCount","updateCurrentData","item","index","_responsive","range","skipRangeEvent","instantly","declination","start","end","priority","maxZoomFactor","_finalStart","_finalEnd","minZoomFactor","rangeChangeDuration","rangeChangeAnimation","options","animationOptions","to","stop","kill","animate","rangeChangeEasing","isFinished","zoom","fitToRange","getPropertyValue","setPropertyValue","Math","round","indexToPosition","max","floor","min","ceil","removeFromInvalids","_currentDataSetId","dataSets","getKey","id","dataSet","values","_index","_updateDataItemIndexes","resetProcessedRange","_dataUsers","clone","copyProperties","sequencedInterpolation","sequencedInterpolationDelay","interpolationDuration","interpolationEasing","_inited","deepInvalidate","_export","getExporting","has","_exportData","handleDataUpdated","arg","changed","setDisabled","_showOnInitDisposer2","once","hideInitially","setShowOnInit","_baseId","setBaseId","asIs","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\core\\Component.ts"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"./Container\";\r\nimport { List, IListEvents, ListDisposer } from \"./utils/List\";\r\nimport { OrderedListTemplate, ISortedListEvents } from \"./utils/SortedList\";\r\nimport { Animation } from \"./utils/Animation\";\r\nimport { Dictionary } from \"./utils/Dictionary\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"./utils/Disposer\";\r\nimport { Export, IExportAdapters } from \"./export/Export\";\r\nimport { DataSource } from \"./data/DataSource\";\r\nimport { Responsive } from \"./utils/Responsive\";\r\nimport { system } from \"./System\";\r\n\r\nimport { DataItem } from \"./DataItem\";\r\nimport { registry } from \"./Registry\";\r\nimport { Preloader } from \"./elements/Preloader\";\r\nimport { IRange } from \"./defs/IRange\";\r\n\r\nimport * as $math from \"./utils/Math\";\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $ease from \"./utils/Ease\";\r\nimport * as $utils from \"./utils/Utils\";\r\nimport * as $iter from \"./utils/Iterator\";\r\nimport * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A list of available types for calculated values.\r\n */\r\nexport type CalculatedValue =\r\n\t\"value\" |\r\n\t\"percent\" |\r\n\t\"change\" |\r\n\t\"changePercent\" |\r\n\t\"startChangePercent\" |\r\n\t\"startChange\" |\r\n\t\"previousChangePercent\" |\r\n\t\"previousChange\" |\r\n\t\"sum\" |\r\n\t\"absoluteSum\" |\r\n\t\"average\" |\r\n\t\"open\" |\r\n\t\"close\" |\r\n\t\"low\" |\r\n\t\"high\" |\r\n\t\"count\" |\r\n\t\"total\" |\r\n\t\"totalPercent\" |\r\n\t\"stack\" |\r\n\t\"stackTrue\"\r\n\r\n/**\r\n * Defines properties for [[Component]].\r\n */\r\nexport interface IComponentProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Maximum zoom factor of a component.\r\n\t */\r\n\tmaxZoomFactor?: number;\r\n\r\n\t/**\r\n\t * Maximum zoom declination (how much out of 0-1 range it will allow to step out)\r\n\t *\r\n\t * @ignore\r\n\t * @default 0.5\r\n\t */\r\n\tmaxZoomDeclination?: number;\r\n\r\n\t/**\r\n\t * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * Allows restricting zoom in beyond certain number of categories or base\r\n\t * intervals.\r\n\t *\r\n\t * The chart will not zoom in beyond this number of items.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tminZoomCount?: number;\r\n\r\n\t/**\r\n\t * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * Limits how many categories or base intervals can be shown at the same\r\n\t * time.\r\n\t *\r\n\t * If there are more items in the chart, the chart will auto-zoom.\r\n\t *\r\n\t * @default 0 (no limit)\r\n\t */\r\n\tmaxZoomCount?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines data fields for [[Component]].\r\n */\r\nexport interface IComponentDataFields {\r\n\r\n\t/**\r\n\t * Data.\r\n\t */\r\n\tdata?: string;\r\n\r\n\t/**\r\n\t * ID.\r\n\t */\r\n\tid?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Component]].\r\n */\r\nexport interface IComponentEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when range of the currently selected data is validated.\r\n\t *\r\n\t * @todo: change to datarangevalidated?\r\n\t */\r\n\tdatarangechanged: {};\r\n\r\n\t/**\r\n\t * Invoked when the raw data for the component changes.\r\n\t */\r\n\tdatavalidated: {};\r\n\r\n\t/**\r\n\t * Invoked when value(s) of the element's data items are validated.\r\n\t */\r\n\tdataitemsvalidated: {};\r\n\r\n\t/**\r\n\t * Invoked just before element is validated (after changes).\r\n\t */\r\n\tbeforedatavalidated: {};\r\n\r\n\t/**\r\n\t * Invoked when range change animation starts\r\n\t */\r\n\trangechangestarted: {};\r\n\r\n\t/**\r\n\t * Invoked when range change animation ends\r\n\t */\r\n\trangechangeended: {};\r\n\r\n\t/**\r\n\t * Invoked when start position changes.\r\n\t *\r\n\t * Please note that `startchanged` event is dispatched immediately after\r\n\t * zoom occurs, so some related properties (e.g. `minZoomed` on [[ValueAxis]])\r\n\t * might not be yet updated.\r\n\t *\r\n\t * Use `startendchanged` event instead if you need to rely on updated\r\n\t * zoom-related values.\r\n\t */\r\n\tstartchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when end position changes\r\n\t *\r\n\t * Please note that `endhanged` event is dispatched immediately after\r\n\t * zoom occurs, so some related properties (e.g. `maxZoomed` on [[ValueAxis]])\r\n\t * might not be yet updated.\r\n\t *\r\n\t * Use `startendchanged` event instead if you need to rely on updated\r\n\t * zoom-related values.\r\n\t */\r\n\tendchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when start or end position changes, unlike startchanged/endchanged\r\n\t * this event is fired not immediately but at the end of a cycle.\r\n\t */\r\n\tstartendchanged: {};\r\n}\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IComponentAdapters extends IContainerAdapters, IComponentProperties {\r\n\r\n\t/**\r\n\t * Applied after [[Component]] retrieves data value from data context\r\n\t * (raw data), but before it is provided to [[DataItem]].\r\n\t */\r\n\tdataContextValue: {\r\n\t\tvalue: any,\r\n\t\tfield: string,\r\n\t\tdataItem: DataItem\r\n\t};\r\n\r\n\t/**\r\n\t * Applied to chart's data before it is retrieved for use.\r\n\t */\r\n\tdata: any[];\r\n\r\n\tstart: number;\r\n\r\n\tend: number;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A Component represents an independent functional element or control, that\r\n * can have it's own behavior, children, data, etc.\r\n *\r\n * A few examples of a Component: [[Legend]], [[Series]], [[Scrollbar]].\r\n *\r\n * @see {@link IComponentEvents} for a list of available events\r\n * @see {@link IComponentAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class Component extends Container {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields!: IComponentDataFields;\r\n\r\n\t/**\r\n\t * Holds data field names.\r\n\t *\r\n\t * Data fields define connection beween [[DataItem]] and actual properties\r\n\t * in raw data.\r\n\t */\r\n\tpublic dataFields: this[\"_dataFields\"] = {};\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IComponentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IComponentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IComponentEvents;\r\n\r\n\t/**\r\n\t * Holds the data for the component.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _data: $type.Optional<any[]>;\r\n\r\n\t/**\r\n\t * A [[Component]] which provides data to this component (like Chart provides\r\n\t * data for Series).\r\n\t */\r\n\tpublic dataProvider: $type.Optional<Component>;\r\n\r\n\t/**\r\n\t * A list of [[DataSource]] definitions of external data source.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _dataSources: { [index: string]: DataSource } = {};\r\n\r\n\t/**\r\n\t * An instance of [[Responsive]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _responsive: $type.Optional<Responsive>;\r\n\r\n\t/**\r\n\t * This is used when only new data is invalidated (if added using `addData`\r\n\t * method).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _parseDataFrom: number = 0;\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _dataUsers: $type.Optional<List<Component>>;\r\n\r\n\t/**\r\n\t * Holds the disposers for the dataItems and dataUsers\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _dataDisposers: Array<IDisposer> = [];\r\n\r\n\r\n\t/**\r\n\t * Identifies the type of the [[DataItem]] used in this element.\r\n\t */\r\n\tpublic _dataItem!: DataItem;\r\n\r\n\t/**\r\n\t * List of element's source data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _dataItems: $type.Optional<OrderedListTemplate<this[\"_dataItem\"]>>;\r\n\r\n\t/**\r\n\t * Holds aggregated data items.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic _dataSets: Dictionary<string, OrderedListTemplate<this[\"_dataItem\"]>>;\r\n\r\n\t/**\r\n\t * Currently selected \"data set\".\r\n\t *\r\n\t * If it's set to `\"\"`, main data set (unaggregated data) is used.\r\n\t */\r\n\tprotected _currentDataSetId: string = \"\";\r\n\r\n\t/**\r\n\t * [_startIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _startIndex: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * [_endIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _endIndex: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * [_start description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _start: number = 0;\r\n\r\n\t/**\r\n\t * [_end description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _end: number = 1;\r\n\r\n\t/**\r\n\t * [_finalStart description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _finalStart: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * [_finalEnd description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _finalEnd: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * If set to `true`, changing data range in element will not trigger\r\n\t * `daterangechanged` event.\r\n\t */\r\n\tpublic skipRangeEvent: boolean = false;\r\n\r\n\t/**\r\n\t * Whenever selected scope changes (chart is zoomed or panned), for example\r\n\t * by interaction from a Scrollbar, or API, a chart needs to reposition\r\n\t * its contents.\r\n\t *\r\n\t * `rangeChangeDuration` influences how this is performed.\r\n\t *\r\n\t * If set to zero (0), the change will happen instantenously.\r\n\t *\r\n\t * If set to non-zero value, the chart will gradually animate into new\r\n\t * position for the set amount of milliseconds.\r\n\t *\r\n\t * @default 0\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n\t */\r\n\tpublic rangeChangeDuration: number = 0;\r\n\r\n\t/**\r\n\t * An easing function to use for range change animation.\r\n\t *\r\n\t * @see {@link Ease}\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n\t */\r\n\tpublic rangeChangeEasing: (value: number) => number = $ease.cubicOut;\r\n\r\n\t/**\r\n\t * A reference to a currently playing range change [[Animation]] object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rangeChangeAnimation: $type.Optional<Animation>;\r\n\r\n\t/**\r\n\t * A duration (ms) of each data parsing step. A Component parses its data in\r\n\t * chunks in order to avoid completely freezing the machine when large data\r\n\t * sets are used. This setting will control how many milliseconds should pass\r\n\t * when parsing data until parser stops for a brief moment to let other\r\n\t * processes catch up.\r\n\t */\r\n\tpublic parsingStepDuration: number = 50;\r\n\r\n\t/**\r\n\t * [dataInvalid description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataInvalid: boolean = false;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rawDataInvalid: boolean = false;\r\n\r\n\t/**\r\n\t * [dataRangeInvalid description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataRangeInvalid: boolean = false;\r\n\r\n\t/**\r\n\t * [dataItemsInvalid description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataItemsInvalid: boolean = false;\r\n\r\n\t/**\r\n\t * If set to a non-zero number the element will \"animate\" data values of its\r\n\t * children.\r\n\t *\r\n\t * This will happen on first load and whenever data values change.\r\n\t *\r\n\t * Enabling interpolation will mean that elements will transit smoothly into\r\n\t * new values rather than updating instantly.\r\n\t *\r\n\t * @default 0\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n\t */\r\n\tpublic interpolationDuration: number = 0;\r\n\r\n\t/**\r\n\t * An easing function to use for interpolating values when transiting from\r\n\t * one source value to another.\r\n\t *\r\n\t * @default cubicOut\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n\t * @see {@link Ease}\r\n\t */\r\n\tpublic interpolationEasing: (value: number) => number = $ease.cubicOut;\r\n\r\n\t/**\r\n\t * Indicates whether transition between data item's values should start and\r\n\t * play out all at once, or with a small delay (as defined by\r\n\t * `sequencedInterpolationDelay`) for each subsequent data item.\r\n\t *\r\n\t * @default true\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n\t */\r\n\tpublic sequencedInterpolation: boolean = true;\r\n\r\n\t/**\r\n\t * A delay (ms) to wait between animating each subsequent data item's\r\n\t * interpolation animation.\r\n\t *\r\n\t * Relative only if `sequencedInterpolation = true`.\r\n\t *\r\n\t * @default 0\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n\t */\r\n\tpublic sequencedInterpolationDelay: number = 0;\r\n\r\n\t/**\r\n\t * A progress (0-1) for the data validation process.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic dataValidationProgress: number = 0;\r\n\r\n\t/**\r\n\t * [_prevStartIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _prevStartIndex: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * [_prevEndIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _prevEndIndex: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * Sometimes we need to process more dataItems then actually is\r\n\t * selected (for example, not to cut lines at the end/beginning).\r\n\t * However when calculating averages, min, max, etc we need not to include\r\n\t * them. So we store `workingStartIndex` and `workingEndIndex` to know which\r\n\t * dataItems should be included and which should not.\r\n\t */\r\n\r\n\t/**\r\n\t * [_workingStartIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _workingStartIndex: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * [_workingEndIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _workingEndIndex: $type.Optional<number>;\r\n\r\n\tprotected _addAllDataItems: boolean = true;\r\n\r\n\tprotected _showOnInitDisposer2: IDisposer;\r\n\r\n\tprotected _usesData: boolean = true;\r\n\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Component\";\r\n\r\n\t\tthis.minZoomCount = 1;\r\n\t\tthis.maxZoomCount = 0;\r\n\r\n\t\tthis._dataItems = new OrderedListTemplate<DataItem>(this.createDataItem());\r\n\t\tthis._dataItems.events.on(\"inserted\", this.handleDataItemAdded, this, false);\r\n\t\tthis._dataItems.events.on(\"removed\", this.handleDataItemRemoved, this, false);\r\n\t\tthis._disposers.push(new ListDisposer(this._dataItems));\r\n\t\tthis._disposers.push(this._dataItems.template);\r\n\r\n\t\tthis.invalidateData();\r\n\r\n\t\t// TODO what about remove ?\r\n\t\tthis.dataUsers.events.on(\"inserted\", this.handleDataUserAdded, this, false);\r\n\r\n\t\t// Set up disposers\r\n\t\tthis._disposers.push(new MultiDisposer(this._dataDisposers));\r\n\r\n\t\tthis._start = 0;\r\n\t\tthis._end = 1;\r\n\r\n\t\tthis.maxZoomDeclination = 1;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new DataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataUserAdded description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param event Event object\r\n\t */\r\n\tprotected handleDataUserAdded(event: IListEvents<Component>[\"inserted\"]) {\r\n\t\tlet dataUser = event.newValue;\r\n\t\tdataUser.dataProvider = this;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleDataItemValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (!this.dataItemsInvalid) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingLocationChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingLocationChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemCalculatedValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemCalculatedValueChange(dataItem?: this[\"_dataItem\"], name?: string) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemPropertyChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemPropertyChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Populates a [[DataItem]] width data from data source.\r\n\t *\r\n\t * Loops through all the fields and if such a field is found in raw data\r\n\t * object, a corresponding value on passed in `dataItem` is set.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\tif (dataItem) {\r\n\t\t\tif (!dataContext) {\r\n\t\t\t\tdataContext = {};\r\n\t\t\t}\r\n\r\n\t\t\t// store reference to original data item\r\n\t\t\tdataItem.dataContext = dataContext;\r\n\r\n\t\t\tlet hasSomeValues = false;\r\n\r\n\t\t\t$object.each(this.dataFields, (key, fieldValue) => {\r\n\t\t\t\tconst fieldName: string = <string>key;\r\n\r\n\t\t\t\tlet value: any = (<any>dataContext)[fieldValue];\r\n\t\t\t\t// Apply adapters to a retrieved value\r\n\t\t\t\tif (this._adapterO) {\r\n\t\t\t\t\tif (this._adapterO.isEnabled(\"dataContextValue\")) {\r\n\t\t\t\t\t\tvalue = this._adapterO.apply(\"dataContextValue\", {\r\n\t\t\t\t\t\t\tfield: fieldName,\r\n\t\t\t\t\t\t\tvalue: value,\r\n\t\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t\t}).value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\t\thasSomeValues = true;\r\n\r\n\t\t\t\t\tif (dataItem.hasChildren[fieldName]) {\r\n\t\t\t\t\t\tlet template = this.createDataItem();\r\n\t\t\t\t\t\ttemplate.copyFrom(this.mainDataSet.template);\r\n\t\t\t\t\t\tlet children = new OrderedListTemplate<DataItem>(template);\r\n\t\t\t\t\t\tchildren.events.on(\"inserted\", this.handleDataItemAdded, this, false);\r\n\t\t\t\t\t\tchildren.events.on(\"removed\", this.handleDataItemRemoved, this, false);\r\n\t\t\t\t\t\tthis._dataDisposers.push(new ListDisposer(children));\r\n\t\t\t\t\t\tlet count = value.length;\r\n\t\t\t\t\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\t\t\t\t\tlet rawDataItem = value[i];\r\n\t\t\t\t\t\t\tlet childDataItem: this[\"_dataItem\"] = children.create();\r\n\t\t\t\t\t\t\tchildDataItem.parent = dataItem;\r\n\t\t\t\t\t\t\tthis.processDataItem(childDataItem, rawDataItem);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlet anyDataItem = <any>dataItem;\r\n\t\t\t\t\t\tanyDataItem[fieldName] = <any>children;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// data is converted to numbers/dates in each dataItem\r\n\t\t\t\t\t\t(<any>dataItem)[fieldName] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t$object.each(this.propertyFields, (key, fieldValue) => {\r\n\t\t\t\tconst f: string = <string>key;\r\n\t\t\t\tlet value: any = (<any>dataContext)[fieldValue];\r\n\r\n\t\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\t\thasSomeValues = true;\r\n\t\t\t\t\tdataItem.setProperty(f, value);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// @todo we might need some flag which would tell whether we should create empty data items or not.\r\n\t\t\tif (!this._addAllDataItems && !hasSomeValues) {\r\n\t\t\t\tthis.mainDataSet.remove(dataItem);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * When validating raw data, instead of processing data item, we update it\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item\r\n\t */\r\n\tprotected updateDataItem(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif (dataItem) {\r\n\r\n\t\t\tlet dataContext = dataItem.dataContext;\r\n\r\n\t\t\t$object.each(this.dataFields, (key, fieldValue) => {\r\n\t\t\t\tconst fieldName: string = <string>key;\r\n\r\n\t\t\t\tlet value: any = (<any>dataContext)[fieldValue];\r\n\t\t\t\t// Apply adapters to a retrieved value\r\n\t\t\t\tif (this._adapterO) {\r\n\t\t\t\t\tvalue = this._adapterO.apply(\"dataContextValue\", {\r\n\t\t\t\t\t\tfield: fieldName,\r\n\t\t\t\t\t\tvalue: value,\r\n\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t}).value;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\t\tif (dataItem.hasChildren[fieldName]) {\r\n\t\t\t\t\t\tlet anyDataItem = <any>dataItem;\r\n\t\t\t\t\t\tlet children = <OrderedListTemplate<this[\"_dataItem\"]>><any>(anyDataItem[fieldName]);\r\n\t\t\t\t\t\tchildren.each((child) => {\r\n\t\t\t\t\t\t\tthis.updateDataItem(child);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// data is converted to numbers/dates in each dataItem\t\t\t\t\t\r\n\t\t\t\t\t\t(<any>dataItem)[fieldName] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t$object.each(this.propertyFields, (key, fieldValue) => {\r\n\t\t\t\tconst f: string = <string>key;\r\n\t\t\t\tlet value: any = (<any>dataContext)[fieldValue];\r\n\t\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\t\tdataItem.setProperty(f, value);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected validateDataElements() {\r\n\t\tlet count = this.endIndex;\r\n\r\n\t\tfor (let i = this.startIndex; i < count; i++) {\r\n\t\t\tconst dataItem = this.dataItems.getIndex(i);\r\n\r\n\t\t\t// TODO is this correct\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates this element and its related elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tthis.validateDataElements();\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem [description]\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds one or several (array) of data items to the existing data.\r\n\t *\r\n\t * @param rawDataItem One or many raw data item objects\r\n\t */\r\n\tpublic addData(rawDataItem: Object | Object[], removeCount?: number, skipRaw?: boolean): void {\r\n\r\n\t\t// need to check if data is invalid, as addData might be called multiple times\r\n\t\tif (!this.dataInvalid && this.inited) {\r\n\t\t\tthis._parseDataFrom = this.data.length; // save length of parsed data\r\n\t\t}\r\n\r\n\t\tif (!skipRaw) {\r\n\t\t\tif (rawDataItem instanceof Array) {\r\n\t\t\t\t// can't use concat because new array is returned\r\n\t\t\t\t$array.each(rawDataItem, (dataItem) => {\r\n\t\t\t\t\tthis.data.push(dataItem);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.data.push(rawDataItem); // add to raw data array\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.inited) {\r\n\t\t\tthis.removeData(removeCount, skipRaw);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif ($type.isNumber(removeCount)) {\r\n\t\t\t\twhile (removeCount > 0) {\r\n\t\t\t\t\tthis.data.shift();\r\n\t\t\t\t\tremoveCount--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.invalidateData();\r\n\t}\r\n\r\n\t/**\r\n\t * Removes elements from the beginning of data\r\n\t *\r\n\t * @param count number of elements to remove\r\n\t */\r\n\tpublic removeData(count: $type.Optional<number>, skipRaw?: boolean) {\r\n\t\tif ($type.isNumber(count) && count > 0) {\r\n\t\t\twhile (count > 0) {\r\n\t\t\t\tlet dataItem = this.mainDataSet.getIndex(0);\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tthis.mainDataSet.remove(dataItem);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.dataUsers.each((dataUser) => {\r\n\t\t\t\t\tif (!dataUser.data || dataUser.data.length == 0) {\r\n\t\t\t\t\t\tlet dataItem = dataUser.mainDataSet.getIndex(0);\r\n\t\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\t\tdataUser.mainDataSet.remove(dataItem);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tif (!skipRaw) {\r\n\t\t\t\t\tthis.data.shift();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this._parseDataFrom > 0) {\r\n\t\t\t\t\tthis._parseDataFrom--;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcount--;\r\n\t\t\t}\r\n\t\t\t// changed from invalidateData since 4.7.19 to solve #51551\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a data (re)parsing.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateData(): void {\r\n\t\tif (this.disabled || this.isTemplate) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//if(!this.dataInvalid){\r\n\t\tregistry.addToInvalidComponents(this);\r\n\t\tsystem.requestFrame();\r\n\t\tthis.dataInvalid = true;\r\n\r\n\t\t$iter.each(this.dataUsers.iterator(), (x) => {\r\n\t\t\tx.invalidateDataItems();\r\n\t\t});\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * [invalidateDataUsers description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic invalidateDataUsers(): void {\r\n\t\t$iter.each(this.dataUsers.iterator(), (x) => {\r\n\t\t\tx.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates data values. When data array is not changed, but values within\r\n\t * it changes, we invalidate data so that component would process changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateDataItems(): void {\r\n\t\tif (this.disabled || this.isTemplate) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//if(!this.dataItemsInvalid){\r\n\t\t$array.move(registry.invalidDataItems, this);\r\n\t\tsystem.requestFrame();\r\n\r\n\t\tthis.dataItemsInvalid = true;\r\n\r\n\t\t$iter.each(this.dataUsers.iterator(), (x) => {\r\n\t\t\tx.invalidateDataItems();\r\n\t\t});\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates data range. This is done when data which must be shown\r\n\t * changes (chart is zoomed for example).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateDataRange(): void {\r\n\t\tif (this.disabled || this.isTemplate) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//if(!this.dataRangeInvalid){\r\n\t\tthis.dataRangeInvalid = true;\r\n\t\t$array.move(registry.invalidDataRange, this);\r\n\t\tsystem.requestFrame();\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data range.\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\t\t$array.remove(registry.invalidDataRange, this);\r\n\t\tthis.dataRangeInvalid = false;\r\n\r\n\t\tif (this.startIndex != this._prevStartIndex || this.endIndex != this._prevEndIndex) {\r\n\t\t\tthis.rangeChangeUpdate();\r\n\t\t\tthis.appendDataItems();\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.dispatchImmediately(\"datarangechanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [sliceData description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected sliceData() {\r\n\t\tthis._workingStartIndex = this.startIndex;\r\n\t\tthis._workingEndIndex = this.endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * [rangeChangeUpdate description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected rangeChangeUpdate() {\r\n\t\tthis.sliceData();\r\n\t\tthis._prevStartIndex = this.startIndex;\r\n\t\tthis._prevEndIndex = this.endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * [appendDataItems description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected appendDataItems() {\r\n\t\t// TODO use an iterator instead\r\n\t\tlet count = this.endIndex;\r\n\t\tfor (let i: number = this.startIndex; i < count; i++) {\r\n\r\n\t\t\t// data item\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < this.startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i = this.endIndex; i < this.dataItems.length; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * If you want to have a smooth transition from one data values to another, you change your raw data and then you must call this method.\r\n\t * then instead of redrawing everything, the chart will check raw data and smoothly transit from previous to new data\r\n\t */\r\n\tpublic invalidateRawData(): void {\r\n\t\tif (this.disabled || this.isTemplate) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//if(!this.rawDataInvalid){\r\n\t\t$array.move(registry.invalidRawDatas, this);\r\n\t\tsystem.requestFrame();\r\n\r\n\t\tthis.rawDataInvalid = true;\r\n\r\n\t\t$iter.each(this.dataUsers.iterator(), (x) => {\r\n\t\t\tx.invalidateRawData();\r\n\t\t});\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic validateRawData() {\r\n\t\t$array.remove(registry.invalidRawDatas, this);\r\n\t\t$iter.each(this.mainDataSet.iterator(), (dataItem) => {\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tthis.updateDataItem(dataItem);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose() {\r\n\t\tthis.mainDataSet.template.clones.clear();\r\n\t\t$object.each(this._dataSources, (key, source) => {\r\n\t\t\tthis.removeDispose(source);\r\n\t\t});\r\n\t\tthis.disposeData();\r\n\t\tsuper.dispose();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tthis.mainDataSet.template.clones.clear();\r\n\r\n\t\t$array.each(this._dataDisposers, (x) => {\r\n\t\t\tx.dispose();\r\n\t\t});\r\n\r\n\t\t// and for all components\r\n\t\t$iter.each(this.dataUsers.iterator(), (dataUser) => {\r\n\t\t\tdataUser.disposeData();\r\n\t\t});\r\n\r\n\t\tthis._dataDisposers.length = 0;\r\n\r\n\t\tthis._startIndex = undefined;\r\n\t\tthis._endIndex = undefined;\r\n\r\n\t\t// dispose old\r\n\t\tthis.mainDataSet.clear();\r\n\r\n\t\tthis.mainDataSet.template.clones.clear();\r\n\r\n\t\tif (this._dataSets) {\r\n\t\t\tthis._dataSets.clear();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected getDataItem(dataContext?: any): this[\"_dataItem\"] {\r\n\t\treturn this.mainDataSet.create();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis.dispatchImmediately(\"beforedatavalidated\");\r\n\r\n\t\tthis.dataInvalid = false;\r\n\r\n\t\tregistry.removeFromInvalidComponents(this);\r\n\r\n\t\tif (this.__disabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.dataValidationProgress = 0;\r\n\t\t// need this to slice new data\r\n\t\tthis._prevStartIndex = undefined;\r\n\t\tthis._prevEndIndex = undefined;\r\n\r\n\t\t// todo: this needs some overthinking, maybe some extra settings like zoomOotonDataupdate like in v3 or so. some charts like pie chart probably should act like this always\r\n\t\tthis._startIndex = undefined;\r\n\t\tthis._endIndex = undefined;\r\n\r\n\t\tif (this.dataFields.data && this.dataItem) {\r\n\t\t\tlet dataContext = <any>this.dataItem.dataContext;\r\n\t\t\tthis._data = dataContext[this.dataFields.data];\r\n\t\t}\r\n\r\n\t\t// data items array is reset only if all data is validated, if _parseDataFrom is not 0, we append new data only\r\n\t\t// check heatmap demo if uncommented\r\n\t\t// fixed both issues by adding && this.data.length > 0\r\n\t\t// check adding series example if changed\r\n\t\tif (this._parseDataFrom === 0 && this.data.length > 0) {\r\n\t\t\tthis.disposeData();\r\n\t\t}\r\n\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tlet preloader: $type.Optional<Preloader> = this.preloader;\r\n\r\n\t\t\t// and for all components\r\n\t\t\t$iter.each(this.dataUsers.iterator(), (dataUser) => {\r\n\t\t\t\t// todo: this needs some overthinking, maybe some extra settings like zoomOUtonDataupdate like in v3 or so. some charts like pie chart probably should act like this always\r\n\t\t\t\tdataUser._startIndex = undefined;\r\n\t\t\t\tdataUser._endIndex = undefined;\r\n\t\t\t});\r\n\r\n\t\t\tlet counter: number = 0;\r\n\t\t\tlet startTime: number = Date.now();\r\n\t\t\t// parse data\r\n\t\t\tlet i = this._parseDataFrom;\r\n\t\t\tlet n = this.data.length;\r\n\r\n\t\t\tfor (i; i < n; i++) {\r\n\t\t\t\tlet rawDataItem = this.data[i];\r\n\t\t\t\tif (this._usesData) {\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.getDataItem(rawDataItem);\r\n\t\t\t\t\tthis.processDataItem(dataItem, rawDataItem);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.dataUsers.each((dataUser) => {\r\n\t\t\t\t\tif (dataUser.data.length == 0) { // checking if data is not set directly\r\n\t\t\t\t\t\tlet dataUserDataItem: DataItem = dataUser.getDataItem(rawDataItem);\r\n\t\t\t\t\t\tdataUser.processDataItem(dataUserDataItem, rawDataItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tcounter++;\r\n\r\n\t\t\t\t// show preloader if this takes too many time\r\n\t\t\t\tif (counter == 100) { // no need to check it on each data item\r\n\t\t\t\t\tcounter = 0;\r\n\t\t\t\t\tlet elapsed: number = Date.now() - startTime;\r\n\r\n\t\t\t\t\tif (elapsed > this.parsingStepDuration) {\r\n\t\t\t\t\t\tif (i < this.data.length - 10) {\r\n\t\t\t\t\t\t\tthis._parseDataFrom = i + 1;\r\n\r\n\t\t\t\t\t\t\t// update preloader\r\n\t\t\t\t\t\t\tif (preloader) {\r\n\t\t\t\t\t\t\t\tif (i / this.data.length > 0.5 && !preloader.visible) {\r\n\t\t\t\t\t\t\t\t\t// do not start showing\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tpreloader.progress = i / this.data.length;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tthis.dataValidationProgress = i / this.data.length;\r\n\r\n\t\t\t\t\t\t\ti = this.data.length; // stops cycle\r\n\t\t\t\t\t\t\tthis.invalidateData();\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (preloader) {\r\n\t\t\t\tpreloader.progress = 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.each((dataUser:any) => {\r\n\t\t\t\tif (dataUser.hidden || (dataUser.appeared && !dataUser.visible && dataUser.stacked)) {\r\n\t\t\t\t\tdataUser.hide(0);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.dataValidationProgress = 1;\r\n\t\tthis._parseDataFrom = 0; // reset this index, it is set to dataItems.length if addData() method was used.\r\n\r\n\t\tthis.invalidateDataItems();\r\n\r\n\t\tif (!this._internalDefaultsApplied) {\r\n\t\t\tthis.applyInternalDefaults();\r\n\t\t}\r\n\r\n\t\tthis.dispatch(\"datavalidated\"); // can't zoom chart if dispatched immediately\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\t$array.remove(registry.invalidDataItems, this);\r\n\r\n\t\tthis.dataItemsInvalid = false;\r\n\r\n\t\tthis.invalidateDataRange();\r\n\t\tthis.invalidate();\r\n\t\tthis.dispatch(\"dataitemsvalidated\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets source (raw) data for the element. The \"data\" is always an `Array`\r\n\t * of objects.\r\n\t *\r\n\t * IMPORTANT: The order of data items in `data` array is important as it\r\n\t * might affect chart look and behavior. [More details](https://www.amcharts.com/docs/v4/concepts/data/#Order_of_data_items).\r\n\t *\r\n\t * @param value Data\r\n\t */\r\n\tpublic set data(value: any[]) {\r\n\t\tthis.setData(value);\r\n\t}\r\n\r\n\tprotected setData(value: any[]) {\r\n\t\t// array might be the same, but there might be items added\r\n\t\t// todo: check if array changed, toString maybe?\r\n\t\tif (!this.isDisposed()) {\r\n\t\t\tthis._parseDataFrom = 0;\r\n\t\t\tthis.disposeData();\r\n\t\t\tthis._data = value;\r\n\t\t\tif (value && value.length > 0) {\r\n\t\t\t\tthis.invalidateData();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.dispatchImmediately(\"beforedatavalidated\");\r\n\t\t\t\tthis.dispatch(\"datavalidated\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's source (raw) data.\r\n\t *\r\n\t * @return Data\r\n\t */\r\n\tpublic get data(): any[] {\r\n\t\tif (!this._data) {\r\n\t\t\tthis._data = [];\r\n\t\t}\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn this._data;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"data\", this._data);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns (creates if necessary) a [[DataSource]] bound to any specific\r\n\t * property.\r\n\t *\r\n\t * For example if I want to bind `data` to an external JSON file, I'd create\r\n\t * a DataSource for it.\r\n\t *\r\n\t * @param property  Property to bind external data to\r\n\t * @return A DataSource for property\r\n\t */\r\n\tpublic getDataSource(property: string): DataSource {\r\n\t\tif (!$type.hasValue(this._dataSources[property])) {\r\n\t\t\tthis._dataSources[property] = new DataSource();\r\n\t\t\tthis._dataSources[property].component = this;\r\n\t\t\tthis.setDataSourceEvents(this._dataSources[property], property);\r\n\t\t\tthis._dataSources[property].adapter.add(\"dateFields\", (val) => {\r\n\t\t\t\treturn this.dataSourceDateFields(val);\r\n\t\t\t});\r\n\t\t\tthis._dataSources[property].adapter.add(\"numberFields\", (val) => {\r\n\t\t\t\treturn this.dataSourceNumberFields(val);\r\n\t\t\t});\r\n\t\t\tthis.events.on(\"inited\", () => {\r\n\t\t\t\tthis.loadData(property);\r\n\t\t\t}, this, false);\r\n\t\t}\r\n\t\treturn this._dataSources[property];\r\n\t}\r\n\r\n\t/**\r\n\t *A [[DataSource]] to be used for loading Component's data.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/loading-external-data/} for more on loading external data\r\n\t * @param value  Data source\r\n\t */\r\n\tpublic set dataSource(value: DataSource) {\r\n\t\tif (this._dataSources[\"data\"]) {\r\n\t\t\tthis.removeDispose(this._dataSources[\"data\"]);\r\n\t\t}\r\n\t\tthis._dataSources[\"data\"] = value;\r\n\t\tthis._dataSources[\"data\"].component = this;\r\n\t\tthis.events.on(\"inited\", () => {\r\n\t\t\tthis.loadData(\"data\")\r\n\t\t}, this, false);\r\n\t\tthis.setDataSourceEvents(value, \"data\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Data source\r\n\t */\r\n\tpublic get dataSource(): DataSource {\r\n\t\tif (!this._dataSources[\"data\"]) {\r\n\t\t\tthis.getDataSource(\"data\");\r\n\t\t}\r\n\t\treturn this._dataSources[\"data\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Initiates loading of the external data via [[DataSource]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected loadData(property: string): void {\r\n\t\tthis._dataSources[property].load();\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Array of date fields\r\n\t * @return Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(value: string[]): string[] {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Array of number fields\r\n\t * @return Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(value: string[]): string[] {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param list        [description]\r\n\t * @param dataFields  [description]\r\n\t * @param targetList  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected populateDataSourceFields(list: string[], dataFields: { [index: string]: string }, targetList: string[]): string[] {\r\n\t\t$array.each(targetList, (value: string) => {\r\n\t\t\tif (dataFields[value] && $array.indexOf(list, dataFields[value]) === -1) {\r\n\t\t\t\tlist.push(dataFields[value]);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn list;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets events on a [[DataSource]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected setDataSourceEvents(ds: DataSource, property?: string): void {\r\n\t\tds.events.on(\"started\", (ev) => {\r\n\t\t\tconst preloader = this.preloader;\r\n\t\t\tif (preloader) {\r\n\t\t\t\tpreloader.progress = 0;\r\n\t\t\t\t//preloader.label.text = this.language.translate(\"Loading\");\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\t\tds.events.on(\"loadstarted\", (ev) => {\r\n\t\t\tconst preloader = this.preloader;\r\n\t\t\tif (preloader) {\r\n\t\t\t\tpreloader.progress = 0.25;\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\t\tds.events.on(\"loadended\", (ev) => {\r\n\t\t\tconst preloader = this.preloader;\r\n\t\t\tif (preloader) {\r\n\t\t\t\tpreloader.progress = 0.5;\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\t\tds.events.on(\"parseended\", (ev) => {\r\n\t\t\tconst preloader = this.preloader;\r\n\t\t\tif (preloader) {\r\n\t\t\t\tpreloader.progress = 0.75;\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\t\tds.events.on(\"ended\", (ev) => {\r\n\t\t\tconst preloader = this.preloader;\r\n\t\t\tif (preloader) {\r\n\t\t\t\tpreloader.progress = 1;\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\t\tds.events.on(\"error\", (ev) => {\r\n\t\t\tconst preloader = this.preloader;\r\n\t\t\tif (preloader) {\r\n\t\t\t\tpreloader.progress = 1;\r\n\t\t\t}\r\n\t\t\tthis.openModal(ev.message);\r\n\t\t}, undefined, false);\r\n\r\n\t\tif (property) {\r\n\t\t\tds.events.on(\"done\", (ev) => {\r\n\t\t\t\tconst preloader = this.preloader;\r\n\t\t\t\tif (preloader) {\r\n\t\t\t\t\tpreloader.progress = 1;\r\n\t\t\t\t}\r\n\t\t\t\tif (property == \"data\" && !$type.isArray(ev.data)) {\r\n\t\t\t\t\tev.data = [ev.data];\r\n\t\t\t\t}\r\n\t\t\t\tif (ds.incremental && property == \"data\" && this.data.length) {\r\n\t\t\t\t\tthis.addData(ev.data, ds.keepCount ? ev.data.length : 0);\r\n\t\t\t\t}\r\n\t\t\t\telse if (ds.updateCurrentData && property == \"data\" && this.data.length) {\r\n\t\t\t\t\t// cycle through existing data items\r\n\t\t\t\t\t$array.each(this.data, (item, index) => {\r\n\t\t\t\t\t\tif ($type.hasValue(ev.data[index])) {\r\n\t\t\t\t\t\t\t$object.each(item, (key, val) => {\r\n\t\t\t\t\t\t\t\tif ($type.hasValue(ev.data[index][key])) {\r\n\t\t\t\t\t\t\t\t\titem[key] = ev.data[index][key];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthis.invalidateRawData();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t(<any>this)[property] = ev.data;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Responsive]] instance to be used when applying conditional\r\n\t * property values.\r\n\t *\r\n\t * NOTE: Responsive features are currently in development and may not work\r\n\t * as expected, if at all.\r\n\t *\r\n\t * @param value  Responsive rules handler\r\n\t */\r\n\tpublic set responsive(value: Responsive) {\r\n\t\tthis._responsive = value;\r\n\t\tthis._responsive.component = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Responsive rules handler\r\n\t */\r\n\tpublic get responsive(): Responsive {\r\n\t\tif (!this._responsive) {\r\n\t\t\tthis._responsive = new Responsive();\r\n\t\t\tthis._responsive.component = this;\r\n\t\t}\r\n\t\treturn this._responsive;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets current zoom.\r\n\t *\r\n\t * The range uses relative values from 0 to 1, with 0 marking beginning and 1\r\n\t * marking end of the available data range.\r\n\t *\r\n\t * This method will not have any effect when called on a chart object.\r\n\t * Since the chart can have a number of axes and series, each with its own\r\n\t * data, the meaning of \"range\" is very ambiguous.\r\n\t *\r\n\t * To zoom the chart use `zoom*` methods on its respective axes.\r\n\t *\r\n\t * @param range          Range\r\n\t * @param skipRangeEvent Should rangechanged event not be triggered?\r\n\t * @param instantly      Do not animate?\r\n\t * @return Actual modidied range (taking `maxZoomFactor` into account)\r\n\t */\r\n\tpublic zoom(range: IRange, skipRangeEvent: boolean = false, instantly: boolean = false, declination?: number): IRange {\r\n\t\tlet start: $type.Optional<number> = range.start;\r\n\t\tlet end = range.end;\r\n\t\tlet priority = range.priority;\r\n\r\n\t\tif (range.start == range.end) {\r\n\t\t\trange.start = range.start - 0.5 / this.maxZoomFactor;\r\n\t\t\trange.end = range.end + 0.5 / this.maxZoomFactor;\r\n\t\t}\r\n\r\n\t\tif (priority == \"end\" && end == 1 && start != 0) {\r\n\t\t\tif (start < this.start) {\r\n\t\t\t\tpriority = \"start\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (priority == \"start\" && start == 0) {\r\n\t\t\tif (end > this.end) {\r\n\t\t\t\tpriority = \"end\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(declination)) {\r\n\t\t\tdeclination = this.maxZoomDeclination;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(start) || !$type.isNumber(end)) {\r\n\t\t\treturn { start: this.start, end: this.end };\r\n\t\t}\r\n\r\n\t\tif (this._finalStart != start || this._finalEnd != end) {\r\n\r\n\t\t\tlet maxZoomFactor: number = this.maxZoomFactor / this.minZoomCount;\r\n\t\t\tlet minZoomFactor: number = this.maxZoomFactor / this.maxZoomCount;\r\n\r\n\t\t\t// most likely we are dragging left scrollbar grip here, so we tend to modify end\r\n\r\n\t\t\tif (priority == \"start\") {\r\n\r\n\t\t\t\tif (this.maxZoomCount > 0) {\r\n\t\t\t\t\t// add to the end\r\n\t\t\t\t\tif (1 / (end - start) < minZoomFactor) {\r\n\t\t\t\t\t\tend = start + 1 / minZoomFactor;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// add to the end\r\n\t\t\t\tif (1 / (end - start) > maxZoomFactor) {\r\n\t\t\t\t\tend = start + 1 / maxZoomFactor;\r\n\t\t\t\t}\r\n\t\t\t\t//unless end is > 0\r\n\t\t\t\tif (end > 1 && end - start < 1 / maxZoomFactor) {\r\n\t\t\t\t\t//end = 1;\r\n\t\t\t\t\tstart = end - 1 / maxZoomFactor;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// most likely we are dragging right, so we modify left\r\n\t\t\telse {\r\n\r\n\t\t\t\tif (this.maxZoomCount > 0) {\r\n\t\t\t\t\t// add to the end\r\n\t\t\t\t\tif (1 / (end - start) < minZoomFactor) {\r\n\t\t\t\t\t\tstart = end - 1 / minZoomFactor;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// remove from start\r\n\t\t\t\tif (1 / (end - start) > maxZoomFactor) {\r\n\t\t\t\t\tif(start <= 0){\r\n\t\t\t\t\t\tend = start + 1 / maxZoomFactor;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tstart = end - 1 / maxZoomFactor;\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tif (start < 0 && end - start < 1 / maxZoomFactor) {\r\n\t\t\t\t\t//start = 0;\r\n\t\t\t\t\tend = start + 1 / maxZoomFactor;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (start < - declination) {\r\n\t\t\t\tstart = - declination;\r\n\t\t\t}\r\n\r\n\t\t\tif (1 / (end - start) > maxZoomFactor) {\t\t\t\t\r\n\t\t\t\tend = start + 1 / maxZoomFactor;\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\tif (end > 1 + declination) {\r\n\t\t\t\tend = 1 + declination;\r\n\t\t\t}\r\n\r\n\t\t\tif (1 / (end - start) > maxZoomFactor) {\r\n\t\t\t\tstart = end - 1 / maxZoomFactor;\r\n\t\t\t}\r\n\r\n\t\t\tthis._finalEnd = end;\r\n\t\t\tthis._finalStart = start;\r\n\r\n\t\t\tthis.skipRangeEvent = skipRangeEvent;\r\n\r\n\t\t\tthis.dispatchImmediately(\"rangechangestarted\");\r\n\r\n\t\t\tif (this.rangeChangeDuration > 0 && !instantly) {\r\n\r\n\t\t\t\t// todo: maybe move this to Animation\r\n\t\t\t\tlet rangeChangeAnimation: $type.Optional<Animation> = this.rangeChangeAnimation;\r\n\t\t\t\tif (rangeChangeAnimation && rangeChangeAnimation.progress < 1) {\r\n\t\t\t\t\tlet options = rangeChangeAnimation.animationOptions;\r\n\t\t\t\t\tif (options.length > 1) {\r\n\t\t\t\t\t\tif (options[0].to == start && options[1].to == end) {\r\n\t\t\t\t\t\t\treturn { start: start, end: end };\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (!rangeChangeAnimation.isDisposed()) {\r\n\t\t\t\t\t\t\t\trangeChangeAnimation.stop();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.rangeChangeAnimation) {\r\n\t\t\t\t\tthis.rangeChangeAnimation.kill();\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeChangeAnimation = this.animate([{ property: \"start\", to: start }, { property: \"end\", to: end }], this.rangeChangeDuration, this.rangeChangeEasing);\r\n\t\t\t\tthis.rangeChangeAnimation = rangeChangeAnimation;\r\n\r\n\t\t\t\tif (rangeChangeAnimation && !rangeChangeAnimation.isFinished()) {\r\n\t\t\t\t\trangeChangeAnimation.events.on(\"animationended\", () => {\r\n\t\t\t\t\t\tthis.dispatchImmediately(\"rangechangeended\");\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.dispatchImmediately(\"rangechangeended\");\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.start = start;\r\n\t\t\t\tthis.end = end;\r\n\t\t\t\tthis.dispatch(\"rangechangeended\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to specific data items using their index in data.\r\n\t *\r\n\t * This method will not have any effect when called on a chart object.\r\n\t * Since the chart can have a number of axes and series, each with its own\r\n\t * data, the meaning of \"index\" is very ambiguous.\r\n\t *\r\n\t * To zoom the chart use `zoom*` methods on its respective axes.\r\n\t *\r\n\t * @param startIndex     Index of the starting data item\r\n\t * @param endIndex       Index of the ending data item\r\n\t * @param skipRangeEvent Should rangechanged event not be triggered?\r\n\t * @param instantly      Do not animate?\r\n\t */\r\n\tpublic zoomToIndexes(startIndex: number, endIndex: number, skipRangeEvent?: boolean, instantly?: boolean) {\r\n\t\tif (!$type.isNumber(startIndex) || !$type.isNumber(endIndex)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet start: number = startIndex / this.dataItems.length;\r\n\t\tlet end: number = endIndex / this.dataItems.length;\r\n\r\n\t\tthis.zoom({ start: start, end: end }, skipRangeEvent, instantly);\r\n\t}\r\n\r\n\t/**\r\n\t * A current zoom factor (0-1). 1 meaning fully zoomed out. (showing all of\r\n\t * the available data)\r\n\t *\r\n\t * @return Zoom factor\r\n\t */\r\n\tpublic get zoomFactor(): number {\r\n\t\treturn $math.fitToRange(1 / (this.end - this.start), 1, this.maxZoomFactor);\r\n\t}\r\n\r\n\t/**\r\n\t * Max available `zoomFactor`.\r\n\t *\r\n\t * The element will not allow zoom to occur beyond this factor.\r\n\t *\r\n\t * [[DateAxis]] and [[CategoryAxis]] calculate this atutomatically so that\r\n\t * category axis could be zoomed to one category and date axis allows to be\r\n\t * zoomed up to one base interval.\r\n\t *\r\n\t * In case you want to restrict category or date axis to be zoomed to more\r\n\t * than one category or more than one base interval, use `minZoomCount`\r\n\t * property (set it to `> 1`).\r\n\t *\r\n\t * Default value of [[ValueAxis]]'s `maxZoomFactor` is `1000`.\r\n\t *\r\n\t * Feel free to modify it to allow bigger zoom or to restrict zooming.\r\n\t *\r\n\t * @param value  Maximum zoomFactor\r\n\t */\r\n\tpublic set maxZoomFactor(value: number) {\r\n\t\tif (this.setPropertyValue(\"maxZoomFactor\", value)) {\r\n\t\t\tif (value == 1) {\r\n\t\t\t\tthis.maxZoomDeclination = 0;\r\n\t\t\t}\r\n\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Maximum zoomFactor\r\n\t */\r\n\tpublic get maxZoomFactor(): number {\r\n\t\treturn this.getPropertyValue(\"maxZoomFactor\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Max zoom declination.\r\n\t *\r\n\t * @ignore\r\n\t * @default 1\r\n\t * @param value  Maximum zoom declination\r\n\t */\r\n\tpublic set maxZoomDeclination(value: number) {\r\n\t\tif (this.setPropertyValue(\"maxZoomDeclination\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @return Maximum zoom declination\r\n\t */\r\n\tpublic get maxZoomDeclination(): number {\r\n\t\treturn this.getPropertyValue(\"maxZoomDeclination\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets current starting index.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Start index\r\n\t */\r\n\tpublic set startIndex(value: number) {\r\n\t\tthis._startIndex = $math.fitToRange(Math.round(value), 0, this.dataItems.length);\r\n\t\t//this._workingStartIndex = this._startIndex; // not good, breaks adjusted working start index of line series\r\n\t\tthis.start = this.indexToPosition(this._startIndex);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @todo:review description\r\n\t * returns item's relative position by the index of the item\r\n\t * @param index\r\n\t */\r\n\tpublic indexToPosition(index: number) {\r\n\t\treturn index / this.dataItems.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Current starting index.\r\n\t *\r\n\t * @return Start index\r\n\t */\r\n\tpublic get startIndex(): number {\r\n\t\tif (!$type.isNumber(this._startIndex)) {\r\n\t\t\tthis._startIndex = 0;\r\n\t\t}\r\n\r\n\t\treturn this._startIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets current ending index.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value End index\r\n\t */\r\n\tpublic set endIndex(value: number) {\r\n\t\tthis._endIndex = $math.fitToRange(Math.round(value), 0, this.dataItems.length);\r\n\t\t//this._workingEndIndex = this._endIndex; // not good, breaks adjusted workingend index of line series\r\n\t\tthis.end = this.indexToPosition(this._endIndex);\r\n\t}\r\n\r\n\t/**\r\n\t * Current ending index.\r\n\t *\r\n\t * @return End index\r\n\t */\r\n\tpublic get endIndex(): number {\r\n\t\tlet count = this.dataItems.length;\r\n\t\tif (!$type.isNumber(this._endIndex) || this._endIndex > count) {\r\n\t\t\tthis._endIndex = count;\r\n\t\t}\r\n\t\treturn this._endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * Start of the current data range (zoom).\r\n\t *\r\n\t * These are relative values from 0 (beginning) to 1 (end).\r\n\t *\r\n\t * @param value Start (0-1)\r\n\t */\r\n\tpublic set start(value: number) {\r\n\t\t// value = $math.round(value, 10); not good\r\n\r\n\t\t//if (1 / (this.end - value) > this.maxZoomFactor) {\r\n\t\t//\tvalue = this.end - 1 / this.maxZoomFactor;\r\n\t\t//}\r\n\t\tif (this._start != value) {\r\n\t\t\tthis._start = value;\r\n\t\t\tlet startIndex = Math.max(0, Math.floor(this.dataItems.length * value) || 0);\r\n\t\t\tthis._startIndex = Math.min(startIndex, this.dataItems.length);\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.dispatchImmediately(\"startchanged\");\r\n\t\t\tthis.dispatch(\"startendchanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start (0-1)\r\n\t */\r\n\tpublic get start(): number {\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn this._start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"start\", this._start);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * End of the current data range (zoom).\r\n\t *\r\n\t * These are relative values from 0 (beginning) to 1 (end).\r\n\t *\r\n\t * @param value End (0-1)\r\n\t */\r\n\tpublic set end(value: number) {\r\n\t\t// value = $math.round(value, 10); // not good\r\n\r\n\t\t//if (1 / (value - this.start) > this.maxZoomFactor) {\r\n\t\t//\tvalue = 1 / this.maxZoomFactor + this.start;\r\n\t\t//}\r\n\r\n\t\tif (this._end != value) {\r\n\t\t\tthis._end = value;\r\n\t\t\tthis._endIndex = Math.min(this.dataItems.length, Math.ceil(this.dataItems.length * value) || 0);\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.dispatchImmediately(\"endchanged\");\r\n\t\t\tthis.dispatch(\"startendchanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End (0-1)\r\n\t */\r\n\tpublic get end(): number {\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn this._end;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"end\", this._end);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [removeFromInvalids description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected removeFromInvalids(): void {\r\n\t\tsuper.removeFromInvalids();\r\n\t\tregistry.removeFromInvalidComponents(this);\r\n\t\t$array.remove(registry.invalidDataItems, this);\r\n\t\t$array.remove(registry.invalidDataRange, this);\r\n\t\t$array.remove(registry.invalidRawDatas, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a list of source [[DataItem]] objects currently used in the chart.\r\n\t *\r\n\t * @return List of data items\r\n\t */\r\n\tpublic get dataItems(): OrderedListTemplate<this[\"_dataItem\"]> {\r\n\t\tif (this._currentDataSetId != \"\") {\r\n\t\t\tlet dataItems = this.dataSets.getKey(this._currentDataSetId);\r\n\t\t\tif (dataItems) {\r\n\t\t\t\treturn dataItems;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._dataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * Holds data items for data sets (usually aggregated data).\r\n\t *\r\n\t * @ignore\r\n\t * @since 4.7.0\r\n\t * @return  Data sets\r\n\t */\r\n\tpublic get dataSets(): Dictionary<string, OrderedListTemplate<this[\"_dataItem\"]>> {\r\n\t\tif (!this._dataSets) {\r\n\t\t\tthis._dataSets = new Dictionary();\r\n\t\t}\r\n\t\treturn this._dataSets;\r\n\t}\r\n\r\n\t/**\r\n\t * Makes the chart use particular data set.\r\n\t *\r\n\t * If `id` is not provided or there is no such data set, main data will be\r\n\t * used.\r\n\t *\r\n\t * @ignore\r\n\t * @since 4.7.0\r\n\t * @param  id  Data set id\r\n\t */\r\n\tpublic setDataSet(id: string): boolean {\r\n\r\n\t\tif (this._currentDataSetId != id) {\r\n\t\t\tlet dataSet = this.dataSets.getKey(id);\r\n\t\t\tif (!dataSet) {\r\n\t\t\t\tif (this._currentDataSetId != \"\") {\r\n\t\t\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tthis._currentDataSetId = \"\";\r\n\r\n\t\t\t\t\tthis.invalidateDataRange();\r\n\r\n\t\t\t\t\tthis._prevStartIndex = undefined;\r\n\r\n\t\t\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t})\r\n\r\n\t\t\t\tthis._currentDataSetId = id;\r\n\r\n\t\t\t\tthis.invalidateDataRange();\r\n\r\n\t\t\t\tthis._prevStartIndex = undefined;\r\n\r\n\t\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t})\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false\r\n\t}\r\n\r\n\t/**\r\n\t * Returns id of the currently used data set, or `undefined` if main data set\r\n\t * is in use.\r\n\t *\r\n\t * @since 4.7.0\r\n\t * @return Current data set id\r\n\t */\r\n\tpublic get currentDataSetId(): string {\r\n\t\treturn this._currentDataSetId;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns reference to \"main\" data set (unaggregated data as it was supplied\r\n\t * in `data`).\r\n\t *\r\n\t * @since 4.7.0\r\n\t * @return Main data set\r\n\t */\r\n\tpublic get mainDataSet(): OrderedListTemplate<this[\"_dataItem\"]> {\r\n\t\treturn this._dataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the indexes for the dataItems\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _updateDataItemIndexes(startIndex: number): void {\r\n\t\tconst dataItems = this.mainDataSet.values;\r\n\t\tconst length = dataItems.length;\r\n\r\n\t\tfor (let i = startIndex; i < length; ++i) {\r\n\t\t\tdataItems[i]._index = i;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes newly added [[DataItem]] as well as triggers data re-validation.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event [description]\r\n\t */\r\n\tprotected handleDataItemAdded(event: ISortedListEvents<DataItem>[\"inserted\"]) {\r\n\t\tevent.newValue.component = this;\r\n\r\n\t\tthis._updateDataItemIndexes(event.index);\r\n\r\n\t\tif (!this.dataItemsInvalid) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * removes [[DataItem]] as well as triggers data re-validation.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event [description]\r\n\t */\r\n\tprotected handleDataItemRemoved(event: ISortedListEvents<DataItem>[\"removed\"]) {\r\n\t\t//\t\tevent.oldValue.component = undefined; // not good, as some items might be not removed from component lists\r\n\r\n\t\tthis._updateDataItemIndexes(event.index);\r\n\r\n\t\tif (!this.dataItemsInvalid) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Binds a data element's field to a specific field in raw data.\r\n\t * For example, for the very basic column chart you'd want to bind a `value`\r\n\t * field to a field in data, such as `price`.\r\n\t *\r\n\t * Some more advanced Components, like [[CandlestickSeries]] need several\r\n\t * data fields bound to data, such as ones for open, high, low and close\r\n\t * values.\r\n\t *\r\n\t * @todo Example\r\n\t * @param field  Field name\r\n\t * @param value  Field name in data\r\n\t */\r\n\tpublic bindDataField<Key extends keyof this[\"_dataFields\"]>(field: Key, value: this[\"_dataFields\"][Key]) {\r\n\t\tthis.dataFields[field] = value;\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates processed data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateProcessedData(): void {\r\n\t\tthis.resetProcessedRange();\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * [resetProcessedRange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic resetProcessedRange(): void {\r\n\t\tthis._prevEndIndex = null;\r\n\t\tthis._prevStartIndex = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns all other [[Component]] objects that are using this element's\r\n\t * data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @return [description]\r\n\t */\r\n\tpublic get dataUsers(): List<Component> {\r\n\t\tif (!this._dataUsers) {\r\n\t\t\tthis._dataUsers = new List<Component>();\r\n\r\n\t\t\t//this._disposers.push(new ListDisposer(this._dataUsers));\r\n\r\n\t\t\t// TODO better way of handling this? e.g. move into another module ?\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t// TODO clear the list ?\r\n\t\t\t\t$iter.each(this._dataUsers.iterator(), (x) => {\r\n\t\t\t\t\tx.dispose();\r\n\t\t\t\t});\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\treturn this._dataUsers;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a clone of this element.\r\n\t *\r\n\t * @return Clone\r\n\t */\r\n\tpublic clone(): this {\r\n\t\tlet component: this = super.clone();\r\n\t\tcomponent.dataFields = $utils.copyProperties(this.dataFields, {});\r\n\t\treturn component;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Component]].\r\n\t *\r\n\t * @param source Source Component\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.data = source.data;\r\n\t\tthis.sequencedInterpolation = source.sequencedInterpolation;\r\n\t\tthis.sequencedInterpolationDelay = source.sequencedInterpolationDelay;\r\n\t\tthis.interpolationDuration = source.interpolationDuration;\r\n\t\tthis.interpolationEasing = source.interpolationEasing;\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates the whole element, including all its children, causing\r\n\t * complete re-parsing of data and redraw.\r\n\t *\r\n\t * Use sparingly!\r\n\t */\r\n\tpublic reinit(): void {\r\n\t\tthis._inited = false;\r\n\t\tthis.deepInvalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Add an adapter for data.\r\n\t *\r\n\t * @return Exporting\r\n\t */\r\n\tprotected getExporting(): Export {\r\n\t\tconst _export = super.getExporting();\r\n\t\tif (!_export.adapter.has(\"data\", this._exportData, -1, this)) {\r\n\t\t\t_export.adapter.add(\"data\", this._exportData, -1, this);\r\n\t\t\tthis.events.on(\"datavalidated\", (ev) => {\r\n\t\t\t\t_export.handleDataUpdated();\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn _export;\r\n\t}\r\n\r\n\tprivate _exportData(arg: IExportAdapters[\"data\"]): IExportAdapters[\"data\"] {\r\n\t\targ.data = this.data;\r\n\t\treturn arg;\r\n\t}\r\n\r\n\tprotected setDisabled(value: boolean): boolean {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (changed) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setShowOnInit(value: boolean) {\r\n\t\tif (value != this.getPropertyValue(\"showOnInit\")) {\r\n\t\t\tif (value && !this.inited && !this.hidden) {\r\n\t\t\t\tthis._showOnInitDisposer2 = this.events.once(\"dataitemsvalidated\", this.hideInitially, this, false);\r\n\t\t\t\tthis._disposers.push(this._showOnInitDisposer2);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._showOnInitDisposer2) {\r\n\t\t\t\t\tthis.removeDispose(this._showOnInitDisposer2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// important order here\r\n\t\tsuper.setShowOnInit(value);\r\n\t}\r\n\r\n\tprotected setBaseId(value: string) {\r\n\t\tif (value != this._baseId) {\r\n\t\t\tif (this.dataInvalid) {\r\n\t\t\t\tthis.dataInvalid = false;\r\n\t\t\t\tregistry.removeFromInvalidComponents(this);\r\n\t\t\t\tthis._baseId = value;\r\n\t\t\t\tthis.invalidateData();\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.setBaseId(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * Allows restricting zoom in beyond certain number of categories or base\r\n\t * intervals.\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Min zoom count\r\n\t */\r\n\tpublic set minZoomCount(value: number) {\r\n\t\tthis.setPropertyValue(\"minZoomCount\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min zoom count\r\n\t */\r\n\tpublic get minZoomCount(): number {\r\n\t\treturn this.getPropertyValue(\"minZoomCount\");\r\n\t}\r\n\r\n\t/**\r\n\t * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * Limits how many categories or base intervals can be shown at the same\r\n\t * time.\r\n\t *\r\n\t * If there are more items in the chart, the chart will auto-zoom.\r\n\t *\r\n\t * @default 0 (no limit)\r\n\t * @since 4.6.2\r\n\t * @param value  Max zoom count\r\n\t */\r\n\tpublic set maxZoomCount(value: number) {\r\n\t\tthis.setPropertyValue(\"maxZoomCount\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Max zoom count\r\n\t */\r\n\tpublic get maxZoomCount(): number {\r\n\t\treturn this.getPropertyValue(\"maxZoomCount\");\r\n\t}\r\n\r\n\t/**\r\n\t * Called during the System.update method\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _systemCheckIfValidate(): boolean {\r\n\t\tif (this.dataInvalid || (this.dataProvider && this.dataProvider.dataInvalid)) {\r\n\t\t\treturn false;\r\n\r\n\t\t} else {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds easing functions to \"function\" fields.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as function?\r\n\t */\r\n\tprotected asFunction(field: string): boolean {\r\n\t\treturn field == \"interpolationEasing\" || field == \"rangeChangeEasing\" || super.asIs(field);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Component\"] = Component;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}