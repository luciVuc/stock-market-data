{"ast":null,"code":"/**\r\n * Functionality for any series-based elements, like Line Series (graphs),\r\n * Pie slice lists, etc.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Component } from \"../../core/Component\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { List, ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { Dictionary, DictionaryDisposer } from \"../../core/utils/Dictionary\";\nimport { DataItem } from \"../../core/DataItem\";\nimport { Container } from \"../../core/Container\";\nimport { Tooltip } from \"../../core/elements/Tooltip\";\nimport { Bullet } from \"../elements/Bullet\";\nimport { LegendSettings } from \"../Legend\";\nimport { options } from \"../../core/Options\";\nimport { Color } from \"../../core/utils/Color\";\nimport { registry } from \"../../core/Registry\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $ease from \"../../core/utils/Ease\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $object from \"../../core/utils/Object\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $colors from \"../../core/utils/Colors\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[Series]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar SeriesDataItem = /** @class */function (_super) {\n  __extends(SeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function SeriesDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"SeriesDataItem\";\n    //@todo Should we make `bullets` list disposable?\n    //this._disposers.push(new DictionaryDisposer(this.bullets));\n    _this.values.value = {};\n    _this.values.value = {};\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(SeriesDataItem.prototype, \"bullets\", {\n    /**\r\n     * A dictionary of data items bullets, where key is uid of a bullet template.\r\n     */\n    get: function () {\n      if (!this._bullets) {\n        this._bullets = new Dictionary();\n        this._disposers.push(new DictionaryDisposer(this._bullets));\n      }\n      return this._bullets;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n  SeriesDataItem.prototype.dispose = function () {\n    this.bullets.clear();\n    _super.prototype.dispose.call(this);\n  };\n  Object.defineProperty(SeriesDataItem.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.values.value.value;\n    },\n    /**\r\n     * data items's numeric value.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setValue(\"value\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return SeriesDataItem;\n}(DataItem);\nexport { SeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines base class for any kind of serial data.\r\n *\r\n * @see {@link ISeriesEvents} for a list of available Events\r\n * @see {@link ISeriesAdapters} for a list of available Adapters\r\n * @todo Separate axis-related stuff to some other class so that MapSeries would not have unrelated stuff\r\n */\nvar Series = /** @class */function (_super) {\n  __extends(Series, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Series() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Should this series excluded from the axis scale calculations?\r\n     *\r\n     * @default false\r\n     */\n    _this._ignoreMinMax = false;\n    /**\r\n     * Should series' bullets?\r\n     *\r\n     * @default true\r\n     */\n    _this._showBullets = true;\n    /**\r\n     * Settings for the appearance of the related legend items.\r\n     */\n    _this.legendSettings = new LegendSettings();\n    /**\r\n     * Lowest overal values by type.\r\n     */\n    _this._tmin = new Dictionary();\n    /**\r\n     * Highest overal values by type.\r\n     */\n    _this._tmax = new Dictionary();\n    /**\r\n     * Lowest values in current selection by type.\r\n     */\n    _this._smin = new Dictionary();\n    /**\r\n     * Highest values in current selection by type.\r\n     */\n    _this._smax = new Dictionary();\n    /**\r\n     * [dataItemsByAxis description]\r\n     *\r\n     * Both by category and date.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n    _this.dataItemsByAxis = new Dictionary();\n    /**\r\n     * Normally series items are focusable using keyboard, so that people can\r\n     * select them with a TAB key. However, if there are a lot of data points on\r\n     * screen it might be long and useless to tab through all o fthem.\r\n     *\r\n     * This is where `skipFocusThreshold` comes in. If there are more items than\r\n     * the value set here, we will not make those focusable and rather let screen\r\n     * reader software rely on the series summary, or authors provide alternative\r\n     * detailed information display, such as HTML table.\r\n     *\r\n     * Different series might have different threshold defaults.\r\n     */\n    _this.skipFocusThreshold = 20;\n    /**\r\n     * Used to indicate if `itemReaderText` was changed \"from the outside\".\r\n     */\n    _this._itemReaderTextChanged = false;\n    /**\r\n     * Most of the series use absolute values. However sometimes various\r\n     * calculated percent values are need, e.g. item's percent representation\r\n     * across all values in series, etc.\r\n     *\r\n     * It's a resource-intensive operation, so it is disabled by default.\r\n     *\r\n     * If you need percents to be calculated, e.g. for showing them in tooltips,\r\n     * or creating 100% stacks, this setting needs to be set to `true`.\r\n     *\r\n     * NOTE: `PieChart`, which relies on slice percentages, has this\r\n     * automatically set to `true`.\r\n     *\r\n     * @default false\r\n     */\n    _this.calculatePercent = false;\n    /**\r\n     * When `calculatePercent` is enabled and data item's percent value is\r\n     * calculated, last item's real value is used instead of its working value.\r\n     *\r\n     * This is done for the animations when last item in series (e.g. slice in\r\n     * a `PieSeries`) is hidden or shown. (if we would use real value, the\r\n     * calculated percent would always be 100%).\r\n     *\r\n     * Sometimes there is a need (e.g. for drill-down Sunburst) to disable this\r\n     * hack by setting `usePercentHack` to `false`.\r\n     *\r\n     * @since 4.9.13\r\n     * @default true\r\n     */\n    _this.usePercentHack = true;\n    /**\r\n     * Specifies if series should be automatically disposed when removing from\r\n     * chart's `series` list.\r\n     *\r\n     * @default true\r\n     */\n    _this.autoDispose = true;\n    /**\r\n     * When chart/series' data is processed, all kinds of derivative values are\r\n     * calculated. E.g. sum, min, max, change, etc. This is a potentially\r\n     * time-consuming operation, especially prominent in data-heavy charts.\r\n     *\r\n     * If your chart does not need those values, and you have a lot of data,\r\n     * setting this to `true` might give a dramatic increase in initial chart\r\n     * load speed.\r\n     *\r\n     * Please note, regular column and line series usage scenarios do not\r\n     * require derivative values. Those come into play only when you do advanced\r\n     * functionality like coloring segments of charts in different colors\r\n     * depending on change between open and close values, have stacked series, or\r\n     * display any of the derived values, like percent, in tooltips or bullets.\r\n     *\r\n     * @default false\r\n     */\n    _this.simplifiedProcessing = false;\n    if (_this.constructor === Series) {\n      throw new Error(\"'Series' cannot be instantiated directly. Please use a specific series type.\");\n    }\n    _this.className = \"Series\";\n    _this.isMeasured = false;\n    _this.layout = \"none\";\n    _this.shouldClone = false;\n    _this.setPropertyValue(\"hidden\", false);\n    _this.axisRanges = new List();\n    _this.axisRanges.events.on(\"inserted\", _this.processAxisRange, _this, false);\n    _this.minBulletDistance = 0; // otherwise we'll have a lot of cases when people won't see bullets and think it's a bug\n    _this.mainContainer = _this.createChild(Container);\n    _this.mainContainer.shouldClone = false;\n    _this.mainContainer.mask = _this.createChild(Sprite);\n    _this._disposers.push(_this.mainContainer);\n    // all bullets should go on top of lines/fills. So we add a separate container for bullets and later set it's parent to chart.bulletsContainer\n    var bulletsContainer = _this.mainContainer.createChild(Container);\n    _this._shouldBeReady.push(bulletsContainer);\n    bulletsContainer.shouldClone = false;\n    bulletsContainer.layout = \"none\";\n    bulletsContainer.virtualParent = _this;\n    _this._disposers.push(bulletsContainer);\n    _this.bulletsContainer = bulletsContainer;\n    _this.tooltip = new Tooltip();\n    _this.tooltip.virtualParent = _this;\n    _this._disposers.push(_this.tooltip);\n    _this.hiddenState.transitionEasing = $ease.cubicIn;\n    // this data item holds sums, averages, etc\n    _this.dataItem = _this.createDataItem();\n    _this._disposers.push(_this.dataItem);\n    _this.dataItem.component = _this;\n    // Apply accessibility\n    _this.role = \"group\";\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * We need this here so that class names can be applied to bullets container.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Series.prototype.applyTheme = function () {\n    _super.prototype.applyTheme.call(this);\n    if (options.autoSetClassName && this.bulletsContainer) {\n      this.bulletsContainer.className = this.className + \"-bullets\";\n      this.bulletsContainer.setClassName();\n    }\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n  Series.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Series\");\n    }\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n  Series.prototype.createDataItem = function () {\n    return new SeriesDataItem();\n  };\n  Object.defineProperty(Series.prototype, \"chart\", {\n    /**\r\n     * @return Chart\r\n     */\n    get: function () {\n      return this._chart;\n    },\n    /**\r\n     * Chart series is used on.\r\n     *\r\n     * @param value  Chart\r\n     */\n    set: function (value) {\n      this._chart = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Positions bullet.\r\n   *\r\n   * @param bullet  Sprite\r\n   */\n  Series.prototype.positionBullet = function (bullet) {\n    // Placeholder method for extending classes to override.\n  };\n  /**\r\n   * Decorates newly created bullet after it has been instert into the list.\r\n   *\r\n   * @param event  List event\r\n   * @todo investigate why itemReaderText is undefined\r\n   */\n  Series.prototype.processBullet = function (event) {\n    var _this = this;\n    var bullet = event.newValue;\n    bullet.isTemplate = true;\n    // Add accessibility options to bullet\n    // If there are relatively few bullets, make them focusable\n    this.events.once(\"datavalidated\", function (ev) {\n      if (_this.itemsFocusable()) {\n        bullet.focusable = true;\n      }\n    });\n    this.invalidate();\n  };\n  /**\r\n   * removes bullets\r\n   *\r\n   * @param event  List event\r\n   */\n  Series.prototype.removeBullet = function (event) {\n    var bullet = event.oldValue;\n    this.dataItems.each(function (dataItem) {\n      var eachBullet = dataItem.bullets.getKey(bullet.uid);\n      if (eachBullet) {\n        eachBullet.dispose();\n      }\n    });\n    this.invalidate();\n  };\n  /**\r\n   * Validates data items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Series.prototype.validateDataItems = function () {\n    _super.prototype.validateDataItems.call(this);\n    this.processValues(false);\n  };\n  /**\r\n   * Returns first value for the specific key in the series.\r\n   *\r\n   * @param key  Key\r\n   * @return Value\r\n   * @todo Description\r\n   * @todo Convert to propert object property iterator\r\n   */\n  Series.prototype.getFirstValue = function (key, startIndex) {\n    // find first\n    /*\r\n    return $iter.findMap(this.dataItems.iterator(), (dataItem) => {\r\n        for (let key in dataItem.values) {\r\n            if ($object.hasKey(dataItem.values, key)) {\r\n                let value: number = dataItem.values[key].workingValue;\r\n                if ($type.isNumber(value)) {\r\n                    return value;\r\n                }\r\n            }\r\n        }\r\n          return null;\r\n    });*/\n    //if (startIndex > 0 && startIndex < this.dataItems.length - 1) {\n    //startIndex++;\n    //}\n    for (var i = startIndex; i >= 0; i--) {\n      var dataItem = this.dataItems.getIndex(i);\n      var value = dataItem.getActualWorkingValue(key);\n      if ($type.isNumber(value)) {\n        return value;\n      }\n    }\n    return null;\n  };\n  /**\r\n   * Returns first value for the specific key in the series.\r\n   *\r\n   * @param key  Key\r\n   * @return Value\r\n   * @todo Description\r\n   * @todo Convert to propert object property iterator\r\n   */\n  Series.prototype.getAbsoluteFirstValue = function (key) {\n    for (var i = 0; i < this.dataItems.length; i++) {\n      var dataItem = this.dataItems.getIndex(i);\n      var value = dataItem.values[key].value;\n      if ($type.isNumber(value)) {\n        return value;\n      }\n    }\n    return null;\n  };\n  /**\r\n   * [rangeChangeUpdate description]\r\n   *\r\n   * @todo Description\r\n   */\n  Series.prototype.rangeChangeUpdate = function () {\n    _super.prototype.rangeChangeUpdate.call(this);\n    this.processValues(true);\n  };\n  /**\r\n   * [processValues description]\r\n   *\r\n   * @todo Description\r\n   * @todo Convert to propert object property iterator\r\n   * @param dataItems [description]\r\n   */\n  Series.prototype.processValues = function (working) {\n    var _this = this;\n    if (!this.simplifiedProcessing) {\n      var dataItems = this.dataItems;\n      var count_1 = {};\n      var sum_1 = {};\n      var absoluteSum_1 = {};\n      var low_1 = {};\n      var high_1 = {};\n      var open_1 = {};\n      var close_1 = {};\n      var previous_1 = {};\n      var first_1 = {};\n      var absoluteFirst_1 = {};\n      //let duration: number = 0; // todo: check if series uses selection.change or selection.change.percent and set duration to interpolationduration\n      var startIndex_1 = $math.max(0, this.startIndex);\n      startIndex_1 = $math.min(startIndex_1, this.dataItems.length);\n      var endIndex = $math.min(this.endIndex, this.dataItems.length);\n      if (!$type.isNumber(startIndex_1)) {\n        startIndex_1 = 0;\n      }\n      if (!$type.isNumber(endIndex)) {\n        endIndex = this.dataItems.length;\n      }\n      if (startIndex_1 > 0) {\n        var dataItem_1 = dataItems.getIndex(startIndex_1 - 1);\n        $object.each(dataItem_1.values, function (key, values) {\n          var value = dataItem_1.getActualWorkingValue(key);\n          if ($type.isNumber(value)) {\n            // save previous\n            previous_1[key] = value;\n          }\n        });\n      }\n      var _loop_1 = function (i) {\n        var dataItem_2 = dataItems.getIndex(i);\n        $object.each(dataItem_2.values, function (key, values) {\n          var value = dataItem_2.getActualWorkingValue(key);\n          //if (i >= startIndex && i <= endIndex) { // do not add to count, sum etc if it is not within start/end index\n          if ($type.isNumber(value)) {\n            // count values\n            if (!$type.isNumber(count_1[key])) {\n              count_1[key] = 0;\n            }\n            count_1[key]++;\n            // sum values\n            if (!$type.isNumber(sum_1[key])) {\n              sum_1[key] = 0;\n            }\n            sum_1[key] += value;\n            // absolute sum values\n            if (!$type.isNumber(absoluteSum_1[key])) {\n              absoluteSum_1[key] = 0;\n            }\n            absoluteSum_1[key] += Math.abs(value);\n            // open\n            if (!$type.isNumber(open_1[key])) {\n              open_1[key] = value;\n            }\n            // close\n            close_1[key] = value;\n            // low\n            if (!$type.isNumber(low_1[key])) {\n              low_1[key] = value;\n            } else {\n              if (low_1[key] > value) {\n                low_1[key] = value;\n              }\n            }\n            // high\n            if (!$type.isNumber(high_1[key])) {\n              high_1[key] = value;\n            } else {\n              if (high_1[key] < value) {\n                high_1[key] = value;\n              }\n            }\n            if (!$type.isNumber(first_1[key])) {\n              first_1[key] = _this.getFirstValue(key, startIndex_1);\n            }\n            if (!$type.isNumber(absoluteFirst_1[key])) {\n              absoluteFirst_1[key] = _this.getAbsoluteFirstValue(key);\n            }\n            // change\n            dataItem_2.setCalculatedValue(key, value - first_1[key], \"change\");\n            // change from start percent\n            // will fail if first value is 0\n            dataItem_2.setCalculatedValue(key, (value - first_1[key]) / first_1[key] * 100, \"changePercent\");\n            dataItem_2.setCalculatedValue(key, value - absoluteFirst_1[key], \"startChange\");\n            dataItem_2.setCalculatedValue(key, (value - absoluteFirst_1[key]) / absoluteFirst_1[key] * 100, \"startChangePercent\");\n            // previous change\n            var prevValue = previous_1[key];\n            if (!$type.isNumber(prevValue)) {\n              prevValue = value;\n            }\n            dataItem_2.setCalculatedValue(key, value - prevValue, \"previousChange\");\n            // previous change percent\n            dataItem_2.setCalculatedValue(key, (value - prevValue) / prevValue * 100, \"previousChangePercent\");\n            // save previous\n            previous_1[key] = value;\n          }\n        });\n      };\n      for (var i = startIndex_1; i < endIndex; i++) {\n        _loop_1(i);\n      }\n      if (this.calculatePercent) {\n        var _loop_2 = function (i) {\n          var dataItem_3 = dataItems.getIndex(i);\n          $object.each(dataItem_3.values, function (key) {\n            var ksum = absoluteSum_1[key];\n            var value = dataItem_3.getActualWorkingValue(key);\n            if ($type.isNumber(value)) {\n              if (ksum > 0) {\n                if (_this.usePercentHack) {\n                  // this hack is made in order to make it possible to animate single slice to 0\n                  // if there is only one slice left, percent value is always 100%, so it won't animate\n                  // so we use real value of a slice instead of current value\n                  if (value == ksum) {\n                    ksum = dataItem_3.values[key].value;\n                  }\n                }\n                var percent = value / ksum * 100;\n                dataItem_3.setCalculatedValue(key, percent, \"percent\");\n              } else {\n                dataItem_3.setCalculatedValue(key, 0, \"percent\");\n              }\n            }\n          });\n        };\n        for (var i = startIndex_1; i < endIndex; i++) {\n          _loop_2(i);\n        }\n      }\n      // calculate one before first (cant do that in cycle, as we don't know open yet\n      // when drawing line chart we should draw line to the invisible data point to the left, otherwise the line will always look like it starts from the selected point\n      // so we do startIndex - 1\n      if (startIndex_1 > 0) {\n        var zeroItem_1 = dataItems.getIndex(startIndex_1 - 1);\n        $object.each(zeroItem_1.values, function (key) {\n          var value = zeroItem_1.values[key].value;\n          // change\n          zeroItem_1.setCalculatedValue(key, value - open_1[key], \"change\");\n          // change percent\n          zeroItem_1.setCalculatedValue(key, (value - open_1[key]) / open_1[key] * 100, \"changePercent\");\n        });\n      }\n      // we save various data like sum, average to dataPoint of the series\n      var dataItem_4 = this.dataItem;\n      $object.each(dataItem_4.values, function (key) {\n        dataItem_4.setCalculatedValue(key, sum_1[key], \"sum\");\n        dataItem_4.setCalculatedValue(key, absoluteSum_1[key], \"absoluteSum\");\n        dataItem_4.setCalculatedValue(key, sum_1[key] / count_1[key], \"average\");\n        dataItem_4.setCalculatedValue(key, open_1[key], \"open\");\n        dataItem_4.setCalculatedValue(key, close_1[key], \"close\");\n        dataItem_4.setCalculatedValue(key, low_1[key], \"low\");\n        dataItem_4.setCalculatedValue(key, high_1[key], \"high\");\n        dataItem_4.setCalculatedValue(key, count_1[key], \"count\");\n      });\n    }\n  };\n  /**\r\n   * (Re)validates the whole series, effectively causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Series.prototype.validate = function () {\n    if ($utils.isIE()) {\n      this.filters.clear();\n    }\n    $iter.each(this.axisRanges.iterator(), function (axisRange) {\n      //axisRange.contents.disposeChildren(); // not good for columns, as they are reused\n      //\t\t\taxisRange.appendChildren();\n      axisRange.validate();\n    });\n    _super.prototype.validate.call(this);\n    var bulletsContainer = this.bulletsContainer;\n    bulletsContainer.fill = this.fill;\n    bulletsContainer.stroke = this.stroke;\n    bulletsContainer.x = this.pixelX;\n    bulletsContainer.y = this.pixelY;\n    if (this.bulletsContainer.children.length > 0) {\n      if (this._showBullets) {\n        for (var i = 0; i < this.startIndex; i++) {\n          var dataItem = this.dataItems.getIndex(i);\n          if (dataItem) {\n            dataItem.bullets.each(function (key, bullet) {\n              bullet.__disabled = true;\n            });\n          }\n        }\n        for (var i = this.dataItems.length - 1; i > this.endIndex; i--) {\n          var dataItem = this.dataItems.getIndex(i);\n          if (dataItem) {\n            dataItem.bullets.each(function (key, bullet) {\n              bullet.__disabled = true;\n            });\n          }\n        }\n      } else {\n        this.bulletsContainer.children.each(function (bullet) {\n          bullet.__disabled = true;\n        });\n      }\n    }\n    this.updateTooltipBounds();\n  };\n  /**\r\n   * @ignore\r\n   */\n  Series.prototype.updateTooltipBounds = function () {\n    if (this.topParent) {\n      var x = 0;\n      var y = 0;\n      var w = this.topParent.maxWidth;\n      var h = this.topParent.maxHeight;\n      var rect = {\n        x: x,\n        y: y,\n        width: w,\n        height: h\n      };\n      this.tooltip.setBounds(rect);\n    }\n  };\n  Series.prototype.shouldCreateBullet = function (dataItem, bulletTemplate) {\n    return true;\n  };\n  /**\r\n   * Validates data item's element, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n  Series.prototype.validateDataElement = function (dataItem) {\n    var _this = this;\n    _super.prototype.validateDataElement.call(this, dataItem);\n    if (this._showBullets) {\n      if (!this.isHidden) {\n        this.bulletsContainer.visible = true;\n      }\n      this.bullets.each(function (bulletTemplate) {\n        // always better to use the same, this helps to avoid redrawing\n        var bullet = dataItem.bullets.getKey(bulletTemplate.uid);\n        if (_this.shouldCreateBullet(dataItem, bulletTemplate)) {\n          if (!bullet) {\n            var disabledField = bulletTemplate.propertyFields.disabled;\n            var dataContext = dataItem.dataContext;\n            if (disabledField && dataContext && dataContext[disabledField] === false) {\n              bulletTemplate.applyOnClones = false;\n              bulletTemplate.disabled = false;\n              bullet = bulletTemplate.clone();\n              bulletTemplate.disabled = true;\n              bulletTemplate.applyOnClones = true;\n            } else {\n              bullet = bulletTemplate.clone();\n            }\n            bullet.shouldClone = false;\n            dataItem.addSprite(bullet);\n            if (!_this.visible || _this.isHiding) {\n              bullet.hide(0);\n            }\n          }\n          var currentDataItem = bullet.dataItem;\n          if (currentDataItem != dataItem) {\n            // set to undefined in order not to reuse\n            if (currentDataItem) {\n              currentDataItem.bullets.setKey(bulletTemplate.uid, undefined);\n            }\n            var readerText_1 = _this.itemReaderText;\n            if (bullet instanceof Bullet) {\n              if (!readerText_1) {\n                readerText_1 = \"{\" + bullet.xField + \"}: {\" + bullet.yField + \"}\";\n              }\n              if (bullet.isDynamic) {\n                dataItem.events.on(\"workingvaluechanged\", bullet.deepInvalidate, bullet, false);\n                //dataItem.events.on(\"calculatedvaluechanged\", bullet.deepInvalidate, bullet, false);\n                _this.dataItem.events.on(\"workingvaluechanged\", bullet.deepInvalidate, bullet, false);\n              }\n              bullet.deepInvalidate();\n            }\n            // Add accessibility to bullet\n            if (bullet.focusable) {\n              bullet.events.on(\"focus\", function (ev) {\n                bullet.readerTitle = _this.populateString(readerText_1, bullet.dataItem);\n              }, undefined, false);\n              bullet.events.on(\"blur\", function (ev) {\n                bullet.readerTitle = \"\";\n              }, undefined, false);\n            }\n            if (bullet.hoverable) {\n              bullet.events.on(\"over\", function (ev) {\n                bullet.readerTitle = _this.populateString(readerText_1, bullet.dataItem);\n              }, undefined, false);\n              bullet.events.on(\"out\", function (ev) {\n                bullet.readerTitle = \"\";\n              }, undefined, false);\n            }\n          }\n          bullet.parent = _this.bulletsContainer;\n          dataItem.bullets.setKey(bulletTemplate.uid, bullet);\n          // pass max w/h so we'd know if we should show/hide somethings\n          bullet.maxWidth = dataItem.itemWidth;\n          bullet.maxHeight = dataItem.itemHeight;\n          bullet.__disabled = false;\n          _this.positionBullet(bullet);\n        } else {\n          if (bullet) {\n            bullet.__disabled = true;\n          }\n        }\n      });\n    } else {\n      this.bulletsContainer.visible = false;\n    }\n  };\n  /**\r\n   * [handleDataItemWorkingValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Series.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\n    if (!this.dataRangeInvalid) {\n      this.invalidateProcessedData();\n    }\n  };\n  Object.defineProperty(Series.prototype, \"ignoreMinMax\", {\n    /**\r\n     * @return Exclude from calculations?\r\n     */\n    get: function () {\n      return this._ignoreMinMax;\n    },\n    /**\r\n     * Should this series excluded from the axis scale calculations?\r\n     *\r\n     * @default false\r\n     * @param value  Exclude from calculations?\r\n     */\n    set: function (value) {\n      this._ignoreMinMax = value;\n      this.invalidateDataItems();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Create a mask for the series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Series.prototype.createMask = function () {\n    // A placeholder method for extending classes to override.\n  };\n  /**\r\n   * Process axis range after it has been added to the list.\r\n   *\r\n   * @param event  Event\r\n   */\n  Series.prototype.processAxisRange = function (event) {\n    // create container if not existing\n    if (!this.rangesContainer) {\n      this.rangesContainer = this.createChild(Container);\n      this.rangesContainer.shouldClone = false;\n      this.rangesContainer.isMeasured = false;\n    }\n    var axisRange = event.newValue;\n    if (axisRange) {\n      axisRange.contents.parent = this.rangesContainer;\n      axisRange.isRange = true;\n      axisRange.events.on(\"valuechanged\", this.invalidateDataItems, this, false);\n    }\n  };\n  /**\r\n   * [getAxisField description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param axis  [description]\r\n   * @return [description]\r\n   */\n  Series.prototype.getAxisField = function (axis) {\n    return;\n  };\n  /**\r\n   * Shows the tooltip at specific position.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param xPosition  X\r\n   * @param yPosition  Y\r\n   */\n  Series.prototype.showTooltipAtPosition = function (xPosition, yPosition) {\n    // Placeholder method for extending classes to override.\n  };\n  Object.defineProperty(Series.prototype, \"minBulletDistance\", {\n    /**\r\n     * @return Distance (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minBulletDistance\");\n    },\n    /**\r\n     * Minimal distance between data points in pixels.\r\n     *\r\n     * If distance gets smaller than this, bullets are turned off to avoid\r\n     * overlapping.\r\n     *\r\n     * `0` (zero) disables this behavior.\r\n     *\r\n     * IMPORTANT: This setting will work only when Series' base axis\r\n     * is [[CategoryAxis]] or [[DateAxis]]. If base axis is [[ValueAxis]] the\r\n     * setting will be ignored, because it would be a huge overhead to measure\r\n     * distance between each and every bullet.\r\n     *\r\n     * @default 0\r\n     * @param value  Distance (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"minBulletDistance\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Series.prototype, \"bullets\", {\n    /**\r\n     * A list of bullets that will be added to each and every items in the\r\n     * series.\r\n     *\r\n     * You can push any object that is a descendant of a [[Sprite]] here. All\r\n     * items added to this list will be copied and used as a bullet on all data\r\n     * items, including their properties, events, etc.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/bullets/} for more info about the concept of Bullets\r\n     * @return List of bullets.\r\n     */\n    get: function () {\n      if (!this._bullets) {\n        this._bullets = new ListTemplate(new Bullet());\n        this._bullets.template.virtualParent = this;\n        this._bullets.events.on(\"inserted\", this.processBullet, this, false);\n        this._bullets.events.on(\"removed\", this.removeBullet, this, false);\n        this._disposers.push(new ListDisposer(this._bullets));\n        this._disposers.push(this._bullets.template);\n      }\n      return this._bullets;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Binds related legend data item's visual settings to this series' visual\r\n   * settings.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param marker  Legend item container\r\n   */\n  Series.prototype.createLegendMarker = function (marker) {\n    // This is a placeholder method for extending classes to override.\n  };\n  Object.defineProperty(Series.prototype, \"hiddenInLegend\", {\n    /**\r\n     * @return Hidden in legend?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"hiddenInLegend\");\n    },\n    /**\r\n     * Should the series be hidden in legend?\r\n     *\r\n     * @param value Hidden in legend?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"hiddenInLegend\", value)) {\n        if (this.chart) {\n          this.chart.feedLegend();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Series.prototype, \"name\", {\n    /**\r\n     * @return Name\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"name\");\n    },\n    /**\r\n     * Series' name.\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"name\", value);\n      var legendDataItem = this.legendDataItem;\n      if (legendDataItem) {\n        legendDataItem.component.invalidate();\n        legendDataItem.component.invalidateRawData();\n      }\n      this.readerTitle = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Series.prototype, \"itemReaderText\", {\n    /**\r\n     * @return Screen reader text template\r\n     */\n    get: function () {\n      // Get explicitly set reader text\n      var readerText = this._itemReaderText;\n      // Not set? Let's try something else\n      if (!readerText) {\n        // Tooltip text?\n        if (this.tooltipText) {\n          readerText = $utils.plainText(this.tooltipText);\n        } else if (this.tooltipHTML) {\n          readerText = $utils.plainText(this.tooltipHTML);\n        }\n      }\n      if (!this._adapterO) {\n        return readerText;\n      } else {\n        return this._adapterO.apply(\"itemReaderText\", readerText);\n      }\n    },\n    /**\r\n     * Screen reader text to be applied to each individual data item, such\r\n     * as bullets, columns or slices.\r\n     *\r\n     * The template can contain field reference meta codes, i.e. `{dateX}`,\r\n     * `{valueY}`, etc.\r\n     *\r\n     * Any text formatting options, e.g. `[bold]` will be ignored.\r\n     *\r\n     * @param value Screen reader text template\r\n     */\n    set: function (value) {\n      this._itemReaderText = value;\n      this._itemReaderTextChanged = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns if number of data items in the series are beyond non-focusable\r\n   * count and should not be available for TAB-through.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Items focusable?\r\n   */\n  Series.prototype.itemsFocusable = function () {\n    return this.dataItems.length >= this.skipFocusThreshold ? false : true;\n  };\n  Object.defineProperty(Series.prototype, \"legendDataItem\", {\n    /**\r\n     * @return Data item\r\n     */\n    get: function () {\n      return this._legendDataItem;\n    },\n    /**\r\n     * Legend data item that corresponds to this series.\r\n     *\r\n     * @param value  Data item\r\n     */\n    set: function (value) {\n      this._legendDataItem = value;\n      this._legendDataItem.itemContainer.deepInvalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates corresponding legend data item with current values.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n  Series.prototype.updateLegendValue = function (dataItem, notRange) {\n    // if this series has legend item\n    if (this.legendDataItem) {\n      var legendSettings = this.legendSettings;\n      var legendDataItem = this.legendDataItem;\n      var label = legendDataItem.label;\n      var valueLabel = legendDataItem.valueLabel;\n      // update legend\n      if (dataItem && !dataItem.isDisposed() || notRange) {\n        if (valueLabel) {\n          if (legendSettings.itemValueText) {\n            valueLabel.text = legendSettings.itemValueText;\n          }\n          valueLabel.dataItem = dataItem;\n        }\n        if (label) {\n          if (legendSettings.itemLabelText) {\n            label.text = legendSettings.itemLabelText;\n          }\n          label.dataItem = dataItem;\n        }\n      } else {\n        if (label) {\n          // if itemLabelText is set, means we have to reset label even if labelText is not set\n          if (legendSettings.labelText || legendSettings.itemLabelText != undefined) {\n            label.text = legendSettings.labelText;\n          }\n          label.dataItem = this.dataItem;\n        }\n        if (valueLabel) {\n          if (legendSettings.valueText || legendSettings.itemValueText != undefined) {\n            valueLabel.text = legendSettings.valueText;\n          }\n          valueLabel.dataItem = this.dataItem;\n        }\n      }\n    }\n  };\n  /**\r\n   * Copies all properties from another instance of [[Series]].\r\n   *\r\n   * @param source  Source series\r\n   */\n  Series.prototype.copyFrom = function (source) {\n    this.bullets.copyFrom(source.bullets);\n    this.bulletsContainer.copyFrom(source.bulletsContainer);\n    this.calculatePercent = source.calculatePercent;\n    this.usePercentHack = source.usePercentHack;\n    this.simplifiedProcessing = source.simplifiedProcessing;\n    _super.prototype.copyFrom.call(this, source);\n  };\n  /**\r\n   * Displays a modal or console message with error, and halts any further\r\n   * processing of this element.\r\n   *\r\n   * @param e Error\r\n   */\n  Series.prototype.raiseCriticalError = function (e) {\n    if (this._chart && this._chart.modal) {\n      this._chart.modal.content = this._chart.adapter.apply(\"criticalError\", e).message;\n      this._chart.modal.closable = false;\n      if (!options.suppressErrors) {\n        this._chart.modal.open();\n      }\n      this._chart.disabled = true;\n    }\n    if (options.verbose) {\n      console.log(e);\n    }\n  };\n  /**\r\n   * Applies filters to the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Series.prototype.applyFilters = function () {\n    var _this = this;\n    _super.prototype.applyFilters.call(this);\n    this.bulletsContainer.filters.clear();\n    // copyFrom of a list copies, does not clone\n    $iter.each(this.filters.iterator(), function (filter) {\n      _this.bulletsContainer.filters.push(filter.clone());\n    });\n  };\n  Object.defineProperty(Series.prototype, \"heatRules\", {\n    /**\r\n     * A list of heat rules to apply to series' elements based on the value\r\n     * of the data item.\r\n     *\r\n     * Heat rules can be any \"numeric\" (including `Color`) property, and can also\r\n     * be applied to child objects of series, like columns, bullets, etc.\r\n     *\r\n     * E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * series.heatRules.push({\r\n     *  \"target\": series.columns.template,\r\n     *  \"property\": \"fill\",\r\n     *  \"min\": am4core.color(\"#F5DBCB\"),\r\n     *  \"max\": am4core.color(\"#ED7B84\"),\r\n     *  \"dataField\": \"valueY\"\r\n     *});\r\n     *```\r\n     * ```Javacript\r\n     * series.heatRules.push({\r\n     *  \"target\": series.columns.template,\r\n     *  \"property\": \"fill\",\r\n     *  \"min\": am4core.color(\"#F5DBCB\"),\r\n     *  \"max\": am4core.color(\"#ED7B84\"),\r\n     *  \"dataField\": \"valueY\"\r\n     *});\r\n     *```\r\n     *```JSON\r\n     *{\r\n     *  // ...\r\n     *  \"series\": [{\r\n     *    \"type\": \"ColumnSeries\",\r\n     *    \"heatRules\": [{\r\n     *      \"target\": \"columns.template\",\r\n     *      \"property\": \"fill\",\r\n     *      \"min\": \"#F5DBCB\",\r\n     *      \"max\": \"#ED7B84\",\r\n     *      \"dataField\": \"valueY\"\r\n     *    }]\r\n     *  }]\r\n     *}\r\n     *```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/series/#Heat_maps} for more about heat rules\r\n     * @return  Heat rules\r\n     */\n    get: function () {\n      var _this = this;\n      if (!this._heatRules) {\n        this._heatRules = new List();\n        this._heatRules.events.on(\"inserted\", function (event) {\n          var heatRule = event.newValue;\n          var target = heatRule.target;\n          if (target) {\n            var dataField_1 = heatRule.dataField;\n            if (!$type.hasValue(dataField_1)) {\n              dataField_1 = \"value\";\n            }\n            var seriesDataItem_1 = _this.dataItem;\n            var property_1 = heatRule.property;\n            var minValue = $type.toNumber(heatRule.minValue);\n            var maxValue = $type.toNumber(heatRule.maxValue);\n            if (!$type.isNumber(minValue) && !$type.isNumber(maxValue)) {\n              _this.dataItem.events.on(\"calculatedvaluechanged\", function (event) {\n                if (event.property == dataField_1) {\n                  $iter.each(_this.dataItems.iterator(), function (dataItem) {\n                    var foundSprite = false;\n                    $array.each(dataItem.sprites, function (sprite) {\n                      if (sprite.clonedFrom == target) {\n                        var anySprite = sprite;\n                        anySprite[property_1] = anySprite[property_1];\n                        foundSprite = true;\n                      }\n                    });\n                    if (!foundSprite) {\n                      $array.each(dataItem.sprites, function (sprite) {\n                        if (sprite instanceof Container) {\n                          $iter.each(sprite.children.iterator(), function (child) {\n                            if (child.className == target.className) {\n                              var anyChild = child;\n                              anyChild[property_1] = anyChild[property_1];\n                            }\n                            // giveup here\n                            else if (child instanceof Container) {\n                              child.deepInvalidate();\n                            }\n                          });\n                        }\n                      });\n                    }\n                  });\n                }\n              });\n            }\n            _this.dataItems.template.events.on(\"workingvaluechanged\", function (event) {\n              if (event.property == dataField_1) {\n                var dataItem = event.target;\n                var foundSprite_1 = false;\n                $array.each(dataItem.sprites, function (sprite) {\n                  if (sprite.clonedFrom == target) {\n                    var anySprite = sprite;\n                    anySprite[property_1] = anySprite[property_1];\n                    foundSprite_1 = true;\n                  }\n                });\n                if (!foundSprite_1) {\n                  $array.each(dataItem.sprites, function (sprite) {\n                    if (sprite instanceof Container) {\n                      $iter.each(sprite.children.iterator(), function (child) {\n                        if (child.className == target.className) {\n                          var anyChild = child;\n                          anyChild[property_1] = anyChild[property_1];\n                        }\n                        // givup here\n                        else if (child instanceof Container) {\n                          child.deepInvalidate();\n                        }\n                      });\n                    }\n                  });\n                }\n              }\n            });\n            target.adapter.add(property_1, function (value, ruleTarget, property) {\n              var minValue = $type.toNumber(heatRule.minValue);\n              var maxValue = $type.toNumber(heatRule.maxValue);\n              var min = heatRule.min;\n              var max = heatRule.max;\n              if (ruleTarget instanceof Sprite) {\n                var anySprite = ruleTarget;\n                var propertyField = anySprite.propertyFields[property];\n                if (propertyField && ruleTarget.dataItem) {\n                  var dataContext = ruleTarget.dataItem.dataContext;\n                  if (dataContext && $type.hasValue(dataContext[propertyField])) {\n                    return value;\n                  }\n                }\n              }\n              var dataItem = ruleTarget.dataItem;\n              if (!$type.isNumber(minValue)) {\n                minValue = seriesDataItem_1.values[dataField_1].low;\n              }\n              if (!$type.isNumber(maxValue)) {\n                maxValue = seriesDataItem_1.values[dataField_1].high;\n              }\n              if (dataItem) {\n                var fieldValues = dataItem.values[dataField_1];\n                if (fieldValues) {\n                  var workingValue = dataItem.getActualWorkingValue(dataField_1);\n                  if ($type.hasValue(min) && $type.hasValue(max) && $type.isNumber(minValue) && $type.isNumber(maxValue) && $type.isNumber(workingValue)) {\n                    var percent = void 0;\n                    if (heatRule.logarithmic) {\n                      percent = (Math.log(workingValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E) / (Math.log(maxValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E);\n                    } else {\n                      percent = (workingValue - minValue) / (maxValue - minValue);\n                    }\n                    if ($type.isNumber(workingValue) && (!$type.isNumber(percent) || Math.abs(percent) == Infinity)) {\n                      percent = 0.5;\n                    }\n                    // fixes problems if all values are the same\n                    if ($type.isNumber(min)) {\n                      return min + (max - min) * percent;\n                    } else if (min instanceof Color) {\n                      return new Color($colors.interpolate(min.rgb, max.rgb, percent));\n                    }\n                  }\n                }\n              }\n              return value;\n            });\n          }\n        });\n      }\n      return this._heatRules;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n  Series.prototype.processConfig = function (config) {\n    var heatRules;\n    if (config) {\n      // Set up bullets\n      if ($type.hasValue(config.bullets) && $type.isArray(config.bullets)) {\n        for (var i = 0, len = config.bullets.length; i < len; i++) {\n          var bullets = config.bullets[i];\n          if (!$type.hasValue(bullets.type)) {\n            bullets.type = \"Bullet\";\n          }\n        }\n      }\n      // Let's take heatRules out of the config, so that we can process\n      // them later, when bullets are already there\n      if ($type.hasValue(config.heatRules) && $type.isArray(config.heatRules)) {\n        heatRules = config.heatRules;\n        delete config.heatRules;\n      }\n    }\n    _super.prototype.processConfig.call(this, config);\n    // Process heat rules again, when all other elements are ready\n    if (heatRules) {\n      for (var i = 0, len = heatRules.length; i < len; i++) {\n        var rule = heatRules[i];\n        // Resolve target\n        var target = this;\n        if ($type.hasValue(rule.target) && $type.isString(rule.target)) {\n          // Check if we can find this element by id\n          if (this.map.hasKey(rule.target)) {\n            target = this.map.getKey(rule.target);\n          } else {\n            var parts = rule.target.split(\".\");\n            for (var x = 0; x < parts.length; x++) {\n              if (target instanceof List) {\n                var listitem = target.getIndex($type.toNumber(parts[x]));\n                if (!listitem) {\n                  target = target[parts[x]];\n                } else {\n                  target = listitem;\n                }\n              } else {\n                var maybeIndex = parts[x].match(/^(.*)\\[([0-9]+)\\]/);\n                if (maybeIndex) {\n                  if (target[maybeIndex[1]] instanceof List) {\n                    target = target[maybeIndex[1]].getIndex($type.toNumber(maybeIndex[2]));\n                  } else {\n                    target = target[maybeIndex[1]][$type.toNumber(maybeIndex[2])];\n                  }\n                } else {\n                  target = target[parts[x]];\n                }\n              }\n            }\n          }\n        }\n        rule.target = target;\n        // Resolve colors and percents\n        if ($type.hasValue(rule.min)) {\n          rule.min = this.maybeColorOrPercent(rule.min);\n        }\n        if ($type.hasValue(rule.max)) {\n          rule.max = this.maybeColorOrPercent(rule.max);\n        }\n      }\n      _super.prototype.processConfig.call(this, {\n        heatRules: heatRules\n      });\n    }\n  };\n  /**\r\n   * Returns visibility value\r\n   * @ignore\r\n   */\n  /*\r\n      protected getVisibility(): boolean {\r\n          let hidden = this.getPropertyValue(\"hidden\");\r\n          if (hidden) {\r\n              return false;\r\n          }\r\n          else {\r\n              return super.getVisibility();\r\n          }\r\n      }*/\n  /**\r\n   * This function is used to sort element's JSON config properties, so that\r\n   * some properties that absolutely need to be processed last, can be put at\r\n   * the end.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param a  Element 1\r\n   * @param b  Element 2\r\n   * @return Sorting number\r\n   */\n  Series.prototype.configOrder = function (a, b) {\n    if (a == b) {\n      return 0;\n    }\n    // Must come last\n    else if (a == \"heatRules\") {\n      return 1;\n    } else if (b == \"heatRules\") {\n      return -1;\n    } else {\n      return _super.prototype.configOrder.call(this, a, b);\n    }\n  };\n  /**\r\n   * Sets `visibility` property:\r\n   *\r\n   * * `true` - visible\r\n   * * `false` - hidden\r\n   *\r\n   * @param value  true - visible, false - hidden\r\n   * @return Current visibility\r\n   */\n  Series.prototype.setVisibility = function (value) {\n    _super.prototype.setVisibility.call(this, value);\n    this.bulletsContainer.visible = value;\n  };\n  return Series;\n}(Component);\nexport { Series };\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Series\"] = Series;\nregistry.registeredClasses[\"SeriesDataItem\"] = SeriesDataItem;","map":{"version":3,"mappings":"AAAA;;;;;AAKA;;;;;;AAMA,SAASA,SAAS,QAA0F,sBAAsB;AAElI,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,SAASC,IAAI,EAAEC,YAAY,EAAeC,YAAY,QAAQ,uBAAuB;AACrF,SAASC,UAAU,EAAEC,kBAAkB,QAAQ,6BAA6B;AAC5E,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,SAAS,QAAQ,sBAAsB;AAIhD,SAASC,OAAO,QAAQ,6BAA6B;AACrD,SAASC,MAAM,QAAQ,oBAAoB;AAC3C,SAAyBC,cAAc,QAAQ,WAAW;AAC1D,SAASC,OAAO,QAAQ,oBAAoB;AAE5C,SAASC,KAAK,QAAQ,wBAAwB;AAC9C,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,OAAO,KAAKC,KAAK,MAAM,2BAA2B;AAClD,OAAO,KAAKC,KAAK,MAAM,uBAAuB;AAC9C,OAAO,KAAKC,KAAK,MAAM,uBAAuB;AAC9C,OAAO,KAAKC,MAAM,MAAM,wBAAwB;AAChD,OAAO,KAAKC,OAAO,MAAM,yBAAyB;AAClD,OAAO,KAAKC,KAAK,MAAM,uBAAuB;AAC9C,OAAO,KAAKC,MAAM,MAAM,wBAAwB;AAChD,OAAO,KAAKC,OAAO,MAAM,yBAAyB;AAclD;;;;;;AAOA;;;;;AAKA;EAAoCC;EAkDnC;;;EAGA;IAAA,YACCC,iBAAO;IACPC,KAAI,CAACC,SAAS,GAAG,gBAAgB;IACjC;IACA;IAEAD,KAAI,CAACE,MAAM,CAACC,KAAK,GAAG,EAAE;IACtBH,KAAI,CAACE,MAAM,CAACC,KAAK,GAAG,EAAE;IAEtBH,KAAI,CAACI,UAAU,EAAE;;EAClB;EAtBAC,sBAAWC,mCAAO;IAHlB;;;SAGA;MACC,IAAI,CAAC,IAAI,CAACC,QAAQ,EAAE;QACnB,IAAI,CAACA,QAAQ,GAAG,IAAI3B,UAAU,EAAkB;QAChD,IAAI,CAAC4B,UAAU,CAACC,IAAI,CAAC,IAAI5B,kBAAkB,CAAC,IAAI,CAAC0B,QAAQ,CAAC,CAAC;;MAE5D,OAAO,IAAI,CAACA,QAAQ;IACrB,CAAC;;;;EAkBD;;;EAGOD,gCAAO,GAAd;IACC,IAAI,CAACI,OAAO,CAACC,KAAK,EAAE;IACpBZ,iBAAMa,OAAO,WAAE;EAChB,CAAC;EAODP,sBAAWC,iCAAK;IAIhB;;;SAGA;MACC,OAAO,IAAI,CAACJ,MAAM,CAACC,KAAK,CAACA,KAAK;IAC/B,CAAC;IAdD;;;;;SAKA,UAAiBA,KAAa;MAC7B,IAAI,CAACU,QAAQ,CAAC,OAAO,EAAEV,KAAK,CAAC;IAC9B,CAAC;;;;EAQF,qBAAC;AAAD,CAAC,CAxFmCrB,QAAQ;;AAkL5C;;;;;;AAOA;;;;;;;AAOA;EAA4BgB;EA8N3B;;;EAGA;IAAA,YACCC,iBAAO;IAlMR;;;;;IAKUC,mBAAa,GAAY,KAAK;IASxC;;;;;IAKUA,kBAAY,GAAY,IAAI;IA+BtC;;;IAGOA,oBAAc,GAAmB,IAAId,cAAc,EAAE;IAE5D;;;IAGUc,WAAK,GAAG,IAAIpB,UAAU,EAAkB;IAElD;;;IAGUoB,WAAK,GAAG,IAAIpB,UAAU,EAAkB;IAElD;;;IAGUoB,WAAK,GAAG,IAAIpB,UAAU,EAAkB;IAElD;;;IAGUoB,WAAK,GAAG,IAAIpB,UAAU,EAAkB;IAElD;;;;;;;;IAQOoB,qBAAe,GAAG,IAAIpB,UAAU,EAAiD;IAExF;;;;;;;;;;;;IAYOoB,wBAAkB,GAAW,EAAE;IAYtC;;;IAGUA,4BAAsB,GAAY,KAAK;IAkBjD;;;;;;;;;;;;;;;IAeOA,sBAAgB,GAAY,KAAK;IAExC;;;;;;;;;;;;;;IAcOA,oBAAc,GAAY,IAAI;IAErC;;;;;;IAMOA,iBAAW,GAAY,IAAI;IAElC;;;;;;;;;;;;;;;;;IAiBOA,0BAAoB,GAAY,KAAK;IAQ3C,IAAIA,KAAI,CAACc,WAAW,KAAKC,MAAM,EAAE;MAChC,MAAM,IAAIC,KAAK,CAAC,8EAA8E,CAAC;;IAGhGhB,KAAI,CAACC,SAAS,GAAG,QAAQ;IACzBD,KAAI,CAACiB,UAAU,GAAG,KAAK;IAEvBjB,KAAI,CAACkB,MAAM,GAAG,MAAM;IACpBlB,KAAI,CAACmB,WAAW,GAAG,KAAK;IACxBnB,KAAI,CAACoB,gBAAgB,CAAC,QAAQ,EAAE,KAAK,CAAC;IAEtCpB,KAAI,CAACqB,UAAU,GAAG,IAAI5C,IAAI,EAAgB;IAC1CuB,KAAI,CAACqB,UAAU,CAACC,MAAM,CAACC,EAAE,CAAC,UAAU,EAAEvB,KAAI,CAACwB,gBAAgB,EAAExB,KAAI,EAAE,KAAK,CAAC;IAEzEA,KAAI,CAACyB,iBAAiB,GAAG,CAAC,CAAC,CAAC;IAC5BzB,KAAI,CAAC0B,aAAa,GAAG1B,KAAI,CAAC2B,WAAW,CAAC5C,SAAS,CAAC;IAChDiB,KAAI,CAAC0B,aAAa,CAACP,WAAW,GAAG,KAAK;IACtCnB,KAAI,CAAC0B,aAAa,CAACE,IAAI,GAAG5B,KAAI,CAAC2B,WAAW,CAACnD,MAAM,CAAC;IAElDwB,KAAI,CAACQ,UAAU,CAACC,IAAI,CAACT,KAAI,CAAC0B,aAAa,CAAC;IAExC;IACA,IAAIG,gBAAgB,GAAG7B,KAAI,CAAC0B,aAAa,CAACC,WAAW,CAAC5C,SAAS,CAAC;IAChEiB,KAAI,CAAC8B,cAAc,CAACrB,IAAI,CAACoB,gBAAgB,CAAC;IAC1CA,gBAAgB,CAACV,WAAW,GAAG,KAAK;IACpCU,gBAAgB,CAACX,MAAM,GAAG,MAAM;IAChCW,gBAAgB,CAACE,aAAa,GAAG/B,KAAI;IACrCA,KAAI,CAACQ,UAAU,CAACC,IAAI,CAACoB,gBAAgB,CAAC;IACtC7B,KAAI,CAAC6B,gBAAgB,GAAGA,gBAAgB;IAExC7B,KAAI,CAACgC,OAAO,GAAG,IAAIhD,OAAO,EAAE;IAC5BgB,KAAI,CAACgC,OAAO,CAACD,aAAa,GAAG/B,KAAI;IACjCA,KAAI,CAACQ,UAAU,CAACC,IAAI,CAACT,KAAI,CAACgC,OAAO,CAAC;IAElChC,KAAI,CAACiC,WAAW,CAACC,gBAAgB,GAAG1C,KAAK,CAAC2C,OAAO;IAEjD;IACAnC,KAAI,CAACoC,QAAQ,GAAGpC,KAAI,CAACqC,cAAc,EAAE;IACrCrC,KAAI,CAACQ,UAAU,CAACC,IAAI,CAACT,KAAI,CAACoC,QAAQ,CAAC;IACnCpC,KAAI,CAACoC,QAAQ,CAACE,SAAS,GAAGtC,KAAI;IAE9B;IACAA,KAAI,CAACuC,IAAI,GAAG,OAAO;IAEnBvC,KAAI,CAACI,UAAU,EAAE;;EAClB;EAEA;;;;;EAKOW,2BAAU,GAAjB;IACChB,iBAAMK,UAAU,WAAE;IAClB,IAAIjB,OAAO,CAACqD,gBAAgB,IAAI,IAAI,CAACX,gBAAgB,EAAE;MACtD,IAAI,CAACA,gBAAgB,CAAC5B,SAAS,GAAG,IAAI,CAACA,SAAS,GAAG,UAAU;MAC7D,IAAI,CAAC4B,gBAAgB,CAACY,YAAY,EAAE;;EAEtC,CAAC;EAED;;;;EAIU1B,sCAAqB,GAA/B;IACChB,iBAAM2C,qBAAqB,WAAE;IAC7B,IAAI,CAAC/C,KAAK,CAACgD,QAAQ,CAAC,IAAI,CAACC,WAAW,CAAC,EAAE;MACtC,IAAI,CAACA,WAAW,GAAG,IAAI,CAACC,QAAQ,CAACC,SAAS,CAAC,QAAQ,CAAC;;EAEtD,CAAC;EAED;;;;;;EAMU/B,+BAAc,GAAxB;IACC,OAAO,IAAIT,cAAc,EAAE;EAC5B,CAAC;EAODD,sBAAWU,yBAAK;IAIhB;;;SAGA;MACC,OAAO,IAAI,CAACgC,MAAM;IACnB,CAAC;IAdD;;;;;SAKA,UAAiB5C,KAAqB;MACrC,IAAI,CAAC4C,MAAM,GAAG5C,KAAK;IACpB,CAAC;;;;EASD;;;;;EAKOY,+BAAc,GAArB,UAAsBiC,MAAc;IAEnC;EAAA,CAEA;EAED;;;;;;EAMUjC,8BAAa,GAAvB,UAAwBkC,KAAsC;IAA9D;IACC,IAAID,MAAM,GAAWC,KAAK,CAACC,QAAQ;IACnCF,MAAM,CAACG,UAAU,GAAG,IAAI;IACxB;IACA;IACA,IAAI,CAAC7B,MAAM,CAAC8B,IAAI,CAAC,eAAe,EAAE,UAACC,EAAE;MACpC,IAAIrD,KAAI,CAACsD,cAAc,EAAE,EAAE;QAC1BN,MAAM,CAACO,SAAS,GAAG,IAAI;;IAEzB,CAAC,CAAC;IAEF,IAAI,CAACC,UAAU,EAAE;EAClB,CAAC;EAED;;;;;EAKUzC,6BAAY,GAAtB,UAAuBkC,KAAqC;IAC3D,IAAID,MAAM,GAAWC,KAAK,CAACQ,QAAQ;IAEnC,IAAI,CAACC,SAAS,CAACC,IAAI,CAAC,UAACvB,QAAQ;MAC5B,IAAIwB,UAAU,GAAGxB,QAAQ,CAAC1B,OAAO,CAACmD,MAAM,CAACb,MAAM,CAACc,GAAG,CAAC;MACpD,IAAIF,UAAU,EAAE;QACfA,UAAU,CAAChD,OAAO,EAAE;;IAEtB,CAAC,CAAC;IAEF,IAAI,CAAC4C,UAAU,EAAE;EAClB,CAAC;EAED;;;;;EAKOzC,kCAAiB,GAAxB;IACChB,iBAAMgE,iBAAiB,WAAE;IACzB,IAAI,CAACC,aAAa,CAAC,KAAK,CAAC;EAC1B,CAAC;EAED;;;;;;;;EAQUjD,8BAAa,GAAvB,UAAwBkD,GAAW,EAAEC,UAAkB;IACtD;IACA;;;;;;;;;;;;IAcA;IACA;IACA;IACA,KAAK,IAAIC,CAAC,GAAGD,UAAU,EAAEC,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MACrC,IAAI/B,QAAQ,GAAG,IAAI,CAACsB,SAAS,CAACU,QAAQ,CAACD,CAAC,CAAC;MACzC,IAAIhE,KAAK,GAAWiC,QAAQ,CAACiC,qBAAqB,CAACJ,GAAG,CAAC;MACvD,IAAItE,KAAK,CAAC2E,QAAQ,CAACnE,KAAK,CAAC,EAAE;QAC1B,OAAOA,KAAK;;;IAGd,OAAO,IAAI;EACZ,CAAC;EAED;;;;;;;;EAQUY,sCAAqB,GAA/B,UAAgCkD,GAAW;IAC1C,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACT,SAAS,CAACa,MAAM,EAAEJ,CAAC,EAAE,EAAE;MAC/C,IAAI/B,QAAQ,GAAG,IAAI,CAACsB,SAAS,CAACU,QAAQ,CAACD,CAAC,CAAC;MACzC,IAAIhE,KAAK,GAAWiC,QAAQ,CAAClC,MAAM,CAAC+D,GAAG,CAAC,CAAC9D,KAAK;MAC9C,IAAIR,KAAK,CAAC2E,QAAQ,CAACnE,KAAK,CAAC,EAAE;QAC1B,OAAOA,KAAK;;;IAGd,OAAO,IAAI;EACZ,CAAC;EAED;;;;;EAKUY,kCAAiB,GAA3B;IACChB,iBAAMyE,iBAAiB,WAAE;IACzB,IAAI,CAACR,aAAa,CAAC,IAAI,CAAC;EACzB,CAAC;EAED;;;;;;;EAOUjD,8BAAa,GAAvB,UAAwB0D,OAAgB;IAAxC;IACC,IAAI,CAAC,IAAI,CAACC,oBAAoB,EAAE;MAC/B,IAAIhB,SAAS,GAAG,IAAI,CAACA,SAAS;MAE9B,IAAIiB,OAAK,GAAgC,EAAE;MAC3C,IAAIC,KAAG,GAAgC,EAAE;MACzC,IAAIC,aAAW,GAAgC,EAAE;MACjD,IAAIC,KAAG,GAAgC,EAAE;MACzC,IAAIC,MAAI,GAAgC,EAAE;MAC1C,IAAIC,MAAI,GAAgC,EAAE;MAC1C,IAAIC,OAAK,GAAgC,EAAE;MAC3C,IAAIC,UAAQ,GAAgC,EAAE;MAC9C,IAAIC,OAAK,GAAgC,EAAE;MAC3C,IAAIC,eAAa,GAAgC,EAAE;MAEnD;MAEA,IAAIC,YAAU,GAAW9F,KAAK,CAAC+F,GAAG,CAAC,CAAC,EAAE,IAAI,CAACpB,UAAU,CAAC;MACtDmB,YAAU,GAAG9F,KAAK,CAACgG,GAAG,CAACF,YAAU,EAAE,IAAI,CAAC3B,SAAS,CAACa,MAAM,CAAC;MAEzD,IAAIiB,QAAQ,GAAWjG,KAAK,CAACgG,GAAG,CAAC,IAAI,CAACC,QAAQ,EAAE,IAAI,CAAC9B,SAAS,CAACa,MAAM,CAAC;MAEtE,IAAI,CAAC5E,KAAK,CAAC2E,QAAQ,CAACe,YAAU,CAAC,EAAE;QAChCA,YAAU,GAAG,CAAC;;MAGf,IAAI,CAAC1F,KAAK,CAAC2E,QAAQ,CAACkB,QAAQ,CAAC,EAAE;QAC9BA,QAAQ,GAAG,IAAI,CAAC9B,SAAS,CAACa,MAAM;;MAGjC,IAAIc,YAAU,GAAG,CAAC,EAAE;QACnB,IAAII,UAAQ,GAAG/B,SAAS,CAACU,QAAQ,CAACiB,YAAU,GAAG,CAAC,CAAC;QAEjD3F,OAAO,CAACiE,IAAI,CAAC8B,UAAQ,CAACvF,MAAM,EAAE,UAAC+D,GAAG,EAAE/D,MAAM;UACzC,IAAIC,KAAK,GAAWsF,UAAQ,CAACpB,qBAAqB,CAACJ,GAAG,CAAC;UAEvD,IAAItE,KAAK,CAAC2E,QAAQ,CAACnE,KAAK,CAAC,EAAE;YAC1B;YACA+E,UAAQ,CAACjB,GAAG,CAAC,GAAG9D,KAAK;;QAEvB,CAAC,CAAC;;8BAGMgE,CAAC;QACT,IAAIuB,UAAQ,GAAGhC,SAAS,CAACU,QAAQ,CAACD,CAAC,CAAC;QAEpCzE,OAAO,CAACiE,IAAI,CAAC+B,UAAQ,CAACxF,MAAM,EAAE,UAAC+D,GAAG,EAAE/D,MAAM;UACzC,IAAIC,KAAK,GAAWuF,UAAQ,CAACrB,qBAAqB,CAACJ,GAAG,CAAC;UAEvD;UACA,IAAItE,KAAK,CAAC2E,QAAQ,CAACnE,KAAK,CAAC,EAAE;YAE1B;YACA,IAAI,CAACR,KAAK,CAAC2E,QAAQ,CAACK,OAAK,CAACV,GAAG,CAAC,CAAC,EAAE;cAChCU,OAAK,CAACV,GAAG,CAAC,GAAG,CAAC;;YAEfU,OAAK,CAACV,GAAG,CAAC,EAAE;YAEZ;YACA,IAAI,CAACtE,KAAK,CAAC2E,QAAQ,CAACM,KAAG,CAACX,GAAG,CAAC,CAAC,EAAE;cAC9BW,KAAG,CAACX,GAAG,CAAC,GAAG,CAAC;;YAEbW,KAAG,CAACX,GAAG,CAAC,IAAI9D,KAAK;YAEjB;YACA,IAAI,CAACR,KAAK,CAAC2E,QAAQ,CAACO,aAAW,CAACZ,GAAG,CAAC,CAAC,EAAE;cACtCY,aAAW,CAACZ,GAAG,CAAC,GAAG,CAAC;;YAErBY,aAAW,CAACZ,GAAG,CAAC,IAAI0B,IAAI,CAACC,GAAG,CAACzF,KAAK,CAAC;YAEnC;YACA,IAAI,CAACR,KAAK,CAAC2E,QAAQ,CAACU,MAAI,CAACf,GAAG,CAAC,CAAC,EAAE;cAC/Be,MAAI,CAACf,GAAG,CAAC,GAAG9D,KAAK;;YAGlB;YACA8E,OAAK,CAAChB,GAAG,CAAC,GAAG9D,KAAK;YAElB;YACA,IAAI,CAACR,KAAK,CAAC2E,QAAQ,CAACQ,KAAG,CAACb,GAAG,CAAC,CAAC,EAAE;cAC9Ba,KAAG,CAACb,GAAG,CAAC,GAAG9D,KAAK;aAChB,MACI;cACJ,IAAI2E,KAAG,CAACb,GAAG,CAAC,GAAG9D,KAAK,EAAE;gBACrB2E,KAAG,CAACb,GAAG,CAAC,GAAG9D,KAAK;;;YAIlB;YACA,IAAI,CAACR,KAAK,CAAC2E,QAAQ,CAACS,MAAI,CAACd,GAAG,CAAC,CAAC,EAAE;cAC/Bc,MAAI,CAACd,GAAG,CAAC,GAAG9D,KAAK;aACjB,MACI;cACJ,IAAI4E,MAAI,CAACd,GAAG,CAAC,GAAG9D,KAAK,EAAE;gBACtB4E,MAAI,CAACd,GAAG,CAAC,GAAG9D,KAAK;;;YAInB,IAAI,CAACR,KAAK,CAAC2E,QAAQ,CAACa,OAAK,CAAClB,GAAG,CAAC,CAAC,EAAE;cAChCkB,OAAK,CAAClB,GAAG,CAAC,GAAGjE,KAAI,CAAC6F,aAAa,CAAC5B,GAAG,EAAEoB,YAAU,CAAC;;YAGjD,IAAI,CAAC1F,KAAK,CAAC2E,QAAQ,CAACc,eAAa,CAACnB,GAAG,CAAC,CAAC,EAAE;cACxCmB,eAAa,CAACnB,GAAG,CAAC,GAAGjE,KAAI,CAAC8F,qBAAqB,CAAC7B,GAAG,CAAC;;YAGrD;YACAyB,UAAQ,CAACK,kBAAkB,CAAC9B,GAAG,EAAE9D,KAAK,GAAGgF,OAAK,CAAClB,GAAG,CAAC,EAAE,QAAQ,CAAC;YAC9D;YACA;YACAyB,UAAQ,CAACK,kBAAkB,CAAC9B,GAAG,EAAE,CAAC9D,KAAK,GAAGgF,OAAK,CAAClB,GAAG,CAAC,IAAIkB,OAAK,CAAClB,GAAG,CAAC,GAAG,GAAG,EAAE,eAAe,CAAC;YAE1FyB,UAAQ,CAACK,kBAAkB,CAAC9B,GAAG,EAAG9D,KAAK,GAAGiF,eAAa,CAACnB,GAAG,CAAC,EAAG,aAAa,CAAC;YAE7EyB,UAAQ,CAACK,kBAAkB,CAAC9B,GAAG,EAAE,CAAC9D,KAAK,GAAGiF,eAAa,CAACnB,GAAG,CAAC,IAAImB,eAAa,CAACnB,GAAG,CAAC,GAAG,GAAG,EAAE,oBAAoB,CAAC;YAE/G;YACA,IAAI+B,SAAS,GAAWd,UAAQ,CAACjB,GAAG,CAAC;YACrC,IAAI,CAACtE,KAAK,CAAC2E,QAAQ,CAAC0B,SAAS,CAAC,EAAE;cAC/BA,SAAS,GAAG7F,KAAK;;YAGlBuF,UAAQ,CAACK,kBAAkB,CAAC9B,GAAG,EAAE9D,KAAK,GAAG6F,SAAS,EAAE,gBAAgB,CAAC;YACrE;YACAN,UAAQ,CAACK,kBAAkB,CAAC9B,GAAG,EAAE,CAAC9D,KAAK,GAAG6F,SAAS,IAAIA,SAAS,GAAG,GAAG,EAAE,uBAAuB,CAAC;YAEhG;YACAd,UAAQ,CAACjB,GAAG,CAAC,GAAG9D,KAAK;;QAEvB,CAAC,CAAC;;MAtFH,KAAK,IAAIgE,CAAC,GAAGkB,YAAU,EAAElB,CAAC,GAAGqB,QAAQ,EAAErB,CAAC,EAAE;gBAAjCA,CAAC;;MAyFV,IAAI,IAAI,CAAC8B,gBAAgB,EAAE;gCACjB9B,CAAC;UACT,IAAI+B,UAAQ,GAAGxC,SAAS,CAACU,QAAQ,CAACD,CAAC,CAAC;UAEpCzE,OAAO,CAACiE,IAAI,CAACuC,UAAQ,CAAChG,MAAM,EAAE,UAAC+D,GAAG;YACjC,IAAIkC,IAAI,GAAWtB,aAAW,CAACZ,GAAG,CAAC;YAEnC,IAAI9D,KAAK,GAAW+F,UAAQ,CAAC7B,qBAAqB,CAACJ,GAAG,CAAC;YAEvD,IAAItE,KAAK,CAAC2E,QAAQ,CAACnE,KAAK,CAAC,EAAE;cAC1B,IAAIgG,IAAI,GAAG,CAAC,EAAE;gBACb,IAAInG,KAAI,CAACoG,cAAc,EAAE;kBACxB;kBACA;kBACA;kBACA,IAAIjG,KAAK,IAAIgG,IAAI,EAAE;oBAClBA,IAAI,GAAGD,UAAQ,CAAChG,MAAM,CAAC+D,GAAG,CAAC,CAAC9D,KAAK;;;gBAInC,IAAIkG,OAAO,GAAGlG,KAAK,GAAGgG,IAAI,GAAG,GAAG;gBAEhCD,UAAQ,CAACH,kBAAkB,CAAC9B,GAAG,EAAEoC,OAAO,EAAE,SAAS,CAAC;eACpD,MACI;gBACJH,UAAQ,CAACH,kBAAkB,CAAC9B,GAAG,EAAE,CAAC,EAAE,SAAS,CAAC;;;UAGjD,CAAC,CAAC;;QA3BH,KAAK,IAAIE,CAAC,GAAGkB,YAAU,EAAElB,CAAC,GAAGqB,QAAQ,EAAErB,CAAC,EAAE;kBAAjCA,CAAC;;;MAgCX;MACA;MACA;MACA,IAAIkB,YAAU,GAAG,CAAC,EAAE;QACnB,IAAIiB,UAAQ,GAAsB5C,SAAS,CAACU,QAAQ,CAACiB,YAAU,GAAG,CAAC,CAAC;QAEpE3F,OAAO,CAACiE,IAAI,CAAC2C,UAAQ,CAACpG,MAAM,EAAE,UAAC+D,GAAG;UACjC,IAAI9D,KAAK,GAAGmG,UAAQ,CAACpG,MAAM,CAAC+D,GAAG,CAAC,CAAC9D,KAAK;UACtC;UACAmG,UAAQ,CAACP,kBAAkB,CAAC9B,GAAG,EAAE9D,KAAK,GAAG6E,MAAI,CAACf,GAAG,CAAC,EAAE,QAAQ,CAAC;UAC7D;UACAqC,UAAQ,CAACP,kBAAkB,CAAC9B,GAAG,EAAE,CAAC9D,KAAK,GAAG6E,MAAI,CAACf,GAAG,CAAC,IAAIe,MAAI,CAACf,GAAG,CAAC,GAAG,GAAG,EAAE,eAAe,CAAC;QACzF,CAAC,CAAC;;MAGH;MACA,IAAIsC,UAAQ,GAAa,IAAI,CAACnE,QAAQ;MACtC1C,OAAO,CAACiE,IAAI,CAAC4C,UAAQ,CAACrG,MAAM,EAAE,UAAC+D,GAAG;QACjCsC,UAAQ,CAACR,kBAAkB,CAAC9B,GAAG,EAAEW,KAAG,CAACX,GAAG,CAAC,EAAE,KAAK,CAAC;QACjDsC,UAAQ,CAACR,kBAAkB,CAAC9B,GAAG,EAAEY,aAAW,CAACZ,GAAG,CAAC,EAAE,aAAa,CAAC;QACjEsC,UAAQ,CAACR,kBAAkB,CAAC9B,GAAG,EAAEW,KAAG,CAACX,GAAG,CAAC,GAAGU,OAAK,CAACV,GAAG,CAAC,EAAE,SAAS,CAAC;QAClEsC,UAAQ,CAACR,kBAAkB,CAAC9B,GAAG,EAAEe,MAAI,CAACf,GAAG,CAAC,EAAE,MAAM,CAAC;QACnDsC,UAAQ,CAACR,kBAAkB,CAAC9B,GAAG,EAAEgB,OAAK,CAAChB,GAAG,CAAC,EAAE,OAAO,CAAC;QACrDsC,UAAQ,CAACR,kBAAkB,CAAC9B,GAAG,EAAEa,KAAG,CAACb,GAAG,CAAC,EAAE,KAAK,CAAC;QACjDsC,UAAQ,CAACR,kBAAkB,CAAC9B,GAAG,EAAEc,MAAI,CAACd,GAAG,CAAC,EAAE,MAAM,CAAC;QACnDsC,UAAQ,CAACR,kBAAkB,CAAC9B,GAAG,EAAEU,OAAK,CAACV,GAAG,CAAC,EAAE,OAAO,CAAC;MACtD,CAAC,CAAC;;EAEJ,CAAC;EAED;;;;;EAKOlD,yBAAQ,GAAf;IAEC,IAAItB,MAAM,CAAC+G,IAAI,EAAE,EAAE;MAClB,IAAI,CAACC,OAAO,CAAC9F,KAAK,EAAE;;IAGrBrB,KAAK,CAACqE,IAAI,CAAC,IAAI,CAACtC,UAAU,CAACqF,QAAQ,EAAE,EAAE,UAACC,SAAS;MAChD;MACA;MACAA,SAAS,CAACC,QAAQ,EAAE;IACrB,CAAC,CAAC;IAEF7G,iBAAM6G,QAAQ,WAAE;IAChB,IAAI/E,gBAAgB,GAAG,IAAI,CAACA,gBAAgB;IAC5CA,gBAAgB,CAACgF,IAAI,GAAG,IAAI,CAACA,IAAI;IACjChF,gBAAgB,CAACiF,MAAM,GAAG,IAAI,CAACA,MAAM;IACrCjF,gBAAgB,CAACkF,CAAC,GAAG,IAAI,CAACC,MAAM;IAChCnF,gBAAgB,CAACoF,CAAC,GAAG,IAAI,CAACC,MAAM;IAEhC,IAAI,IAAI,CAACrF,gBAAgB,CAACsF,QAAQ,CAAC5C,MAAM,GAAG,CAAC,EAAE;MAC9C,IAAI,IAAI,CAAC6C,YAAY,EAAE;QAEtB,KAAK,IAAIjD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACD,UAAU,EAAEC,CAAC,EAAE,EAAE;UACzC,IAAI/B,QAAQ,GAAG,IAAI,CAACsB,SAAS,CAACU,QAAQ,CAACD,CAAC,CAAC;UACzC,IAAI/B,QAAQ,EAAE;YACbA,QAAQ,CAAC1B,OAAO,CAACiD,IAAI,CAAC,UAACM,GAAG,EAAEjB,MAAM;cACjCA,MAAM,CAACqE,UAAU,GAAG,IAAI;YACzB,CAAC,CAAC;;;QAIJ,KAAK,IAAIlD,CAAC,GAAG,IAAI,CAACT,SAAS,CAACa,MAAM,GAAG,CAAC,EAAEJ,CAAC,GAAG,IAAI,CAACqB,QAAQ,EAAErB,CAAC,EAAE,EAAE;UAC/D,IAAI/B,QAAQ,GAAG,IAAI,CAACsB,SAAS,CAACU,QAAQ,CAACD,CAAC,CAAC;UACzC,IAAI/B,QAAQ,EAAE;YACbA,QAAQ,CAAC1B,OAAO,CAACiD,IAAI,CAAC,UAACM,GAAG,EAAEjB,MAAM;cACjCA,MAAM,CAACqE,UAAU,GAAG,IAAI;YACzB,CAAC,CAAC;;;OAIJ,MACI;QACJ,IAAI,CAACxF,gBAAgB,CAACsF,QAAQ,CAACxD,IAAI,CAAC,UAACX,MAAM;UAC1CA,MAAM,CAACqE,UAAU,GAAG,IAAI;QACzB,CAAC,CAAC;;;IAIJ,IAAI,CAACC,mBAAmB,EAAE;EAC3B,CAAC;EAED;;;EAGOvG,oCAAmB,GAA1B;IACC,IAAI,IAAI,CAACwG,SAAS,EAAE;MACnB,IAAIR,CAAC,GAAG,CAAC;MACT,IAAIE,CAAC,GAAG,CAAC;MACT,IAAIO,CAAC,GAAG,IAAI,CAACD,SAAS,CAACE,QAAQ;MAC/B,IAAIC,CAAC,GAAG,IAAI,CAACH,SAAS,CAACI,SAAS;MAChC,IAAIC,IAAI,GAAG;QAAEb,CAAC,EAAEA,CAAC;QAAEE,CAAC,EAAEA,CAAC;QAAEY,KAAK,EAAEL,CAAC;QAAEM,MAAM,EAAEJ;MAAC,CAAE;MAE9C,IAAI,CAAC1F,OAAO,CAAC+F,SAAS,CAACH,IAAI,CAAC;;EAE9B,CAAC;EAGS7G,mCAAkB,GAA5B,UAA6BqB,QAA2B,EAAE4F,cAAsB;IAC/E,OAAO,IAAI;EACZ,CAAC;EAGD;;;;;;EAMOjH,oCAAmB,GAA1B,UAA2BqB,QAA2B;IAAtD;IACCrC,iBAAMkI,mBAAmB,YAAC7F,QAAQ,CAAC;IAEnC,IAAI,IAAI,CAACgF,YAAY,EAAE;MACtB,IAAI,CAAC,IAAI,CAACc,QAAQ,EAAE;QACnB,IAAI,CAACrG,gBAAgB,CAACsG,OAAO,GAAG,IAAI;;MAErC,IAAI,CAACzH,OAAO,CAACiD,IAAI,CAAC,UAACqE,cAAc;QAChC;QACA,IAAIhF,MAAM,GAAmBZ,QAAQ,CAAC1B,OAAO,CAACmD,MAAM,CAACmE,cAAc,CAAClE,GAAG,CAAC;QAExE,IAAI9D,KAAI,CAACoI,kBAAkB,CAAChG,QAAQ,EAAE4F,cAAc,CAAC,EAAE;UACtD,IAAI,CAAChF,MAAM,EAAE;YAEZ,IAAIqF,aAAa,GAAGL,cAAc,CAACM,cAAc,CAACC,QAAQ;YAC1D,IAAIC,WAAW,GAAQpG,QAAQ,CAACoG,WAAW;YAC3C,IAAIH,aAAa,IAAIG,WAAW,IAAIA,WAAW,CAACH,aAAa,CAAC,KAAK,KAAK,EAAE;cACzEL,cAAc,CAACS,aAAa,GAAG,KAAK;cACpCT,cAAc,CAACO,QAAQ,GAAG,KAAK;cAC/BvF,MAAM,GAAGgF,cAAc,CAACU,KAAK,EAAE;cAC/BV,cAAc,CAACO,QAAQ,GAAG,IAAI;cAC9BP,cAAc,CAACS,aAAa,GAAG,IAAI;aACnC,MACI;cACJzF,MAAM,GAAGgF,cAAc,CAACU,KAAK,EAAE;;YAGhC1F,MAAM,CAAC7B,WAAW,GAAG,KAAK;YAC1BiB,QAAQ,CAACuG,SAAS,CAAC3F,MAAM,CAAC;YAE1B,IAAI,CAAChD,KAAI,CAACmI,OAAO,IAAInI,KAAI,CAAC4I,QAAQ,EAAE;cACnC5F,MAAM,CAAC6F,IAAI,CAAC,CAAC,CAAC;;;UAIhB,IAAIC,eAAe,GAAyC9F,MAAM,CAACZ,QAAQ;UAC3E,IAAI0G,eAAe,IAAI1G,QAAQ,EAAE;YAChC;YACA,IAAI0G,eAAe,EAAE;cACpBA,eAAe,CAACpI,OAAO,CAACqI,MAAM,CAACf,cAAc,CAAClE,GAAG,EAAEkF,SAAS,CAAC;;YAG9D,IAAIC,YAAU,GAAGjJ,KAAI,CAACkJ,cAAc;YAEpC,IAAIlG,MAAM,YAAY/D,MAAM,EAAE;cAC7B,IAAI,CAACgK,YAAU,EAAE;gBAChBA,YAAU,GAAI,GAAG,GAAGjG,MAAM,CAACmG,MAAM,GAAG,MAAM,GAAGnG,MAAM,CAACoG,MAAM,GAAG,GAAI;;cAGlE,IAAIpG,MAAM,CAACqG,SAAS,EAAE;gBACrBjH,QAAQ,CAACd,MAAM,CAACC,EAAE,CAAC,qBAAqB,EAAEyB,MAAM,CAACsG,cAAc,EAAEtG,MAAM,EAAE,KAAK,CAAC;gBAC/E;gBACAhD,KAAI,CAACoC,QAAQ,CAACd,MAAM,CAACC,EAAE,CAAC,qBAAqB,EAAEyB,MAAM,CAACsG,cAAc,EAAEtG,MAAM,EAAE,KAAK,CAAC;;cAErFA,MAAM,CAACsG,cAAc,EAAE;;YAGxB;YACA,IAAItG,MAAM,CAACO,SAAS,EAAE;cACrBP,MAAM,CAAC1B,MAAM,CAACC,EAAE,CAAC,OAAO,EAAE,UAAC8B,EAAE;gBAC5BL,MAAM,CAACJ,WAAW,GAAG5C,KAAI,CAACuJ,cAAc,CAACN,YAAU,EAAEjG,MAAM,CAACZ,QAAQ,CAAC;cACtE,CAAC,EAAE4G,SAAS,EAAE,KAAK,CAAC;cACpBhG,MAAM,CAAC1B,MAAM,CAACC,EAAE,CAAC,MAAM,EAAE,UAAC8B,EAAE;gBAC3BL,MAAM,CAACJ,WAAW,GAAG,EAAE;cACxB,CAAC,EAAEoG,SAAS,EAAE,KAAK,CAAC;;YAErB,IAAIhG,MAAM,CAACwG,SAAS,EAAE;cACrBxG,MAAM,CAAC1B,MAAM,CAACC,EAAE,CAAC,MAAM,EAAE,UAAC8B,EAAE;gBAC3BL,MAAM,CAACJ,WAAW,GAAG5C,KAAI,CAACuJ,cAAc,CAACN,YAAU,EAAEjG,MAAM,CAACZ,QAAQ,CAAC;cACtE,CAAC,EAAE4G,SAAS,EAAE,KAAK,CAAC;cACpBhG,MAAM,CAAC1B,MAAM,CAACC,EAAE,CAAC,KAAK,EAAE,UAAC8B,EAAE;gBAC1BL,MAAM,CAACJ,WAAW,GAAG,EAAE;cACxB,CAAC,EAAEoG,SAAS,EAAE,KAAK,CAAC;;;UAKtBhG,MAAM,CAACyG,MAAM,GAAGzJ,KAAI,CAAC6B,gBAAgB;UACrCO,QAAQ,CAAC1B,OAAO,CAACqI,MAAM,CAACf,cAAc,CAAClE,GAAG,EAAEd,MAAM,CAAC;UAEnD;UACAA,MAAM,CAACyE,QAAQ,GAAGrF,QAAQ,CAACsH,SAAS;UACpC1G,MAAM,CAAC2E,SAAS,GAAGvF,QAAQ,CAACuH,UAAU;UACtC3G,MAAM,CAACqE,UAAU,GAAG,KAAK;UAEzBrH,KAAI,CAAC4J,cAAc,CAAC5G,MAAM,CAAC;SAC3B,MACI;UACJ,IAAIA,MAAM,EAAE;YACXA,MAAM,CAACqE,UAAU,GAAG,IAAI;;;MAG3B,CAAC,CAAC;KACF,MACI;MACJ,IAAI,CAACxF,gBAAgB,CAACsG,OAAO,GAAG,KAAK;;EAEvC,CAAC;EAED;;;;;EAKOpH,iDAAgC,GAAvC,UAAwCqB,QAA4B,EAAEyH,IAAa;IAClF,IAAI,CAAC,IAAI,CAACC,gBAAgB,EAAE;MAC3B,IAAI,CAACC,uBAAuB,EAAE;;EAEhC,CAAC;EAQD1J,sBAAWU,gCAAY;IAKvB;;;SAGA;MACC,OAAO,IAAI,CAACiJ,aAAa;IAC1B,CAAC;IAhBD;;;;;;SAMA,UAAwB7J,KAAc;MACrC,IAAI,CAAC6J,aAAa,GAAG7J,KAAK;MAC1B,IAAI,CAAC8J,mBAAmB,EAAE;IAC3B,CAAC;;;;EASD;;;;;EAKOlJ,2BAAU,GAAjB;IAEC;EAAA,CAEA;EAED;;;;;EAKUA,iCAAgB,GAA1B,UAA2BkC,KAA4C;IACtE;IACA,IAAI,CAAC,IAAI,CAACiH,eAAe,EAAE;MAC1B,IAAI,CAACA,eAAe,GAAG,IAAI,CAACvI,WAAW,CAAC5C,SAAS,CAAC;MAClD,IAAI,CAACmL,eAAe,CAAC/I,WAAW,GAAG,KAAK;MACxC,IAAI,CAAC+I,eAAe,CAACjJ,UAAU,GAAG,KAAK;;IAGxC,IAAI0F,SAAS,GAAiB1D,KAAK,CAACC,QAAQ;IAC5C,IAAIyD,SAAS,EAAE;MACdA,SAAS,CAACwD,QAAQ,CAACV,MAAM,GAAG,IAAI,CAACS,eAAe;MAChDvD,SAAS,CAACyD,OAAO,GAAG,IAAI;MACxBzD,SAAS,CAACrF,MAAM,CAACC,EAAE,CAAC,cAAc,EAAE,IAAI,CAAC0I,mBAAmB,EAAE,IAAI,EAAE,KAAK,CAAC;;EAE5E,CAAC;EAED;;;;;;;;EAQOlJ,6BAAY,GAAnB,UAAoBsJ,IAAU;IAC7B;EACD,CAAC;EAED;;;;;;;EAOOtJ,sCAAqB,GAA5B,UAA6BuJ,SAAiB,EAAEC,SAAiB;IAEhE;EAAA,CAEA;EAkBDlK,sBAAWU,qCAAiB;IAI5B;;;SAGA;MACC,OAAO,IAAI,CAACyJ,gBAAgB,CAAC,mBAAmB,CAAC;IAClD,CAAC;IAzBD;;;;;;;;;;;;;;;;SAgBA,UAA6BrK,KAAa;MACzC,IAAI,CAACiB,gBAAgB,CAAC,mBAAmB,EAAEjB,KAAK,EAAE,IAAI,CAAC;IACxD,CAAC;;;;EAoBDE,sBAAWU,2BAAO;IAXlB;;;;;;;;;;;SAWA;MACC,IAAI,CAAC,IAAI,CAACR,QAAQ,EAAE;QACnB,IAAI,CAACA,QAAQ,GAAG,IAAI7B,YAAY,CAAS,IAAIO,MAAM,EAAE,CAAC;QACtD,IAAI,CAACsB,QAAQ,CAACkK,QAAQ,CAAC1I,aAAa,GAAG,IAAI;QAC3C,IAAI,CAACxB,QAAQ,CAACe,MAAM,CAACC,EAAE,CAAC,UAAU,EAAE,IAAI,CAACmJ,aAAa,EAAE,IAAI,EAAE,KAAK,CAAC;QACpE,IAAI,CAACnK,QAAQ,CAACe,MAAM,CAACC,EAAE,CAAC,SAAS,EAAE,IAAI,CAACoJ,YAAY,EAAE,IAAI,EAAE,KAAK,CAAC;QAElE,IAAI,CAACnK,UAAU,CAACC,IAAI,CAAC,IAAI9B,YAAY,CAAC,IAAI,CAAC4B,QAAQ,CAAC,CAAC;QACrD,IAAI,CAACC,UAAU,CAACC,IAAI,CAAC,IAAI,CAACF,QAAQ,CAACkK,QAAQ,CAAC;;MAE7C,OAAO,IAAI,CAAClK,QAAQ;IACrB,CAAC;;;;EAED;;;;;;;EAOOQ,mCAAkB,GAAzB,UAA0B6J,MAAiB;IAE1C;EAAA,CAEA;EAODvK,sBAAWU,kCAAc;IAQzB;;;SAGA;MACC,OAAO,IAAI,CAACyJ,gBAAgB,CAAC,gBAAgB,CAAC;IAC/C,CAAC;IAlBD;;;;;SAKA,UAA0BrK,KAAc;MACvC,IAAI,IAAI,CAACiB,gBAAgB,CAAC,gBAAgB,EAAEjB,KAAK,CAAC,EAAE;QACnD,IAAI,IAAI,CAAC0K,KAAK,EAAE;UACf,IAAI,CAACA,KAAK,CAACC,UAAU,EAAE;;;IAG1B,CAAC;;;;EAcDzK,sBAAWU,wBAAI;IAYf;;;SAGA;MACC,OAAO,IAAI,CAACyJ,gBAAgB,CAAC,MAAM,CAAC;IACrC,CAAC;IAtBD;;;;;SAKA,UAAgBrK,KAAa;MAC5B,IAAI,CAACiB,gBAAgB,CAAC,MAAM,EAAEjB,KAAK,CAAC;MAEpC,IAAI4K,cAAc,GAAG,IAAI,CAACA,cAAc;MACxC,IAAIA,cAAc,EAAE;QACnBA,cAAc,CAACzI,SAAS,CAACkB,UAAU,EAAE;QACrCuH,cAAc,CAACzI,SAAS,CAAC0I,iBAAiB,EAAE;;MAG7C,IAAI,CAACpI,WAAW,GAAGzC,KAAK;IACzB,CAAC;;;;EAoBDE,sBAAWU,kCAAc;IAKzB;;;SAGA;MAEC;MACA,IAAIkK,UAAU,GAAG,IAAI,CAACC,eAAe;MAErC;MACA,IAAI,CAACD,UAAU,EAAE;QAEhB;QACA,IAAI,IAAI,CAACE,WAAW,EAAE;UACrBF,UAAU,GAAGxL,MAAM,CAAC2L,SAAS,CAAC,IAAI,CAACD,WAAW,CAAC;SAC/C,MACI,IAAI,IAAI,CAACE,WAAW,EAAE;UAC1BJ,UAAU,GAAGxL,MAAM,CAAC2L,SAAS,CAAC,IAAI,CAACC,WAAW,CAAC;;;MAKjD,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;QACpB,OAAOL,UAAU;OACjB,MACI;QACJ,OAAO,IAAI,CAACK,SAAS,CAACC,KAAK,CAAC,gBAAgB,EAAEN,UAAU,CAAC;;IAG3D,CAAC;IA5CD;;;;;;;;;;;SAWA,UAA0B9K,KAAa;MACtC,IAAI,CAAC+K,eAAe,GAAG/K,KAAK;MAC5B,IAAI,CAACqL,sBAAsB,GAAG,IAAI;IACnC,CAAC;;;;EAgCD;;;;;;;EAOOzK,+BAAc,GAArB;IACC,OAAO,IAAI,CAAC2C,SAAS,CAACa,MAAM,IAAI,IAAI,CAACkH,kBAAkB,GAAG,KAAK,GAAG,IAAI;EACvE,CAAC;EAODpL,sBAAWU,kCAAc;IAKzB;;;SAGA;MACC,OAAO,IAAI,CAAC2K,eAAe;IAC5B,CAAC;IAfD;;;;;SAKA,UAA0BvL,KAAqB;MAC9C,IAAI,CAACuL,eAAe,GAAGvL,KAAK;MAC5B,IAAI,CAACuL,eAAe,CAACC,aAAa,CAACrC,cAAc,EAAE;IACpD,CAAC;;;;EASD;;;;;;EAMOvI,kCAAiB,GAAxB,UAAyBqB,QAA4B,EAAEwJ,QAAkB;IACxE;IACA,IAAI,IAAI,CAACb,cAAc,EAAE;MAExB,IAAIc,cAAc,GAAmB,IAAI,CAACA,cAAc;MACxD,IAAId,cAAc,GAAG,IAAI,CAACA,cAAc;MACxC,IAAIe,KAAK,GAAUf,cAAc,CAACe,KAAK;MACvC,IAAIC,UAAU,GAAUhB,cAAc,CAACgB,UAAU;MAEjD;MACA,IAAK3J,QAAQ,IAAI,CAACA,QAAQ,CAAC4J,UAAU,EAAE,IAAIJ,QAAQ,EAAE;QACpD,IAAIG,UAAU,EAAE;UACf,IAAIF,cAAc,CAACI,aAAa,EAAE;YACjCF,UAAU,CAACG,IAAI,GAAGL,cAAc,CAACI,aAAa;;UAE/CF,UAAU,CAAC3J,QAAQ,GAAGA,QAAQ;;QAE/B,IAAI0J,KAAK,EAAE;UACV,IAAID,cAAc,CAACM,aAAa,EAAE;YACjCL,KAAK,CAACI,IAAI,GAAGL,cAAc,CAACM,aAAa;;UAE1CL,KAAK,CAAC1J,QAAQ,GAAGA,QAAQ;;OAE1B,MACI;QACJ,IAAI0J,KAAK,EAAE;UACV;UACA,IAAID,cAAc,CAACO,SAAS,IAAIP,cAAc,CAACM,aAAa,IAAInD,SAAS,EAAE;YAC1E8C,KAAK,CAACI,IAAI,GAAGL,cAAc,CAACO,SAAS;;UAEtCN,KAAK,CAAC1J,QAAQ,GAAG,IAAI,CAACA,QAAQ;;QAE/B,IAAI2J,UAAU,EAAE;UACf,IAAIF,cAAc,CAACQ,SAAS,IAAIR,cAAc,CAACI,aAAa,IAAIjD,SAAS,EAAE;YAC1E+C,UAAU,CAACG,IAAI,GAAGL,cAAc,CAACQ,SAAS;;UAE3CN,UAAU,CAAC3J,QAAQ,GAAG,IAAI,CAACA,QAAQ;;;;EAIvC,CAAC;EAED;;;;;EAKOrB,yBAAQ,GAAf,UAAgBuL,MAAY;IAC3B,IAAI,CAAC5L,OAAO,CAAC6L,QAAQ,CAACD,MAAM,CAAC5L,OAAO,CAAC;IACrC,IAAI,CAACmB,gBAAgB,CAAC0K,QAAQ,CAACD,MAAM,CAACzK,gBAAgB,CAAC;IACvD,IAAI,CAACoE,gBAAgB,GAAGqG,MAAM,CAACrG,gBAAgB;IAC/C,IAAI,CAACG,cAAc,GAAGkG,MAAM,CAAClG,cAAc;IAC3C,IAAI,CAAC1B,oBAAoB,GAAG4H,MAAM,CAAC5H,oBAAoB;IACvD3E,iBAAMwM,QAAQ,YAACD,MAAM,CAAC;EACvB,CAAC;EAED;;;;;;EAMOvL,mCAAkB,GAAzB,UAA0ByL,CAAQ;IACjC,IAAI,IAAI,CAACzJ,MAAM,IAAI,IAAI,CAACA,MAAM,CAAC0J,KAAK,EAAE;MACrC,IAAI,CAAC1J,MAAM,CAAC0J,KAAK,CAACC,OAAO,GAAG,IAAI,CAAC3J,MAAM,CAAC4J,OAAO,CAACpB,KAAK,CAAC,eAAe,EAAEiB,CAAC,CAAC,CAACI,OAAO;MACjF,IAAI,CAAC7J,MAAM,CAAC0J,KAAK,CAACI,QAAQ,GAAG,KAAK;MAClC,IAAI,CAAC1N,OAAO,CAAC2N,cAAc,EAAE;QAC5B,IAAI,CAAC/J,MAAM,CAAC0J,KAAK,CAACM,IAAI,EAAE;;MAEzB,IAAI,CAAChK,MAAM,CAACwF,QAAQ,GAAG,IAAI;;IAG5B,IAAIpJ,OAAO,CAAC6N,OAAO,EAAE;MACpBC,OAAO,CAACC,GAAG,CAACV,CAAC,CAAC;;EAEhB,CAAC;EAGD;;;;;EAKUzL,6BAAY,GAAtB;IAAA;IACChB,iBAAMoN,YAAY,WAAE;IACpB,IAAI,CAACtL,gBAAgB,CAAC4E,OAAO,CAAC9F,KAAK,EAAE;IAErC;IACArB,KAAK,CAACqE,IAAI,CAAC,IAAI,CAAC8C,OAAO,CAACC,QAAQ,EAAE,EAAE,UAAC0G,MAAM;MAC1CpN,KAAI,CAAC6B,gBAAgB,CAAC4E,OAAO,CAAChG,IAAI,CAAC2M,MAAM,CAAC1E,KAAK,EAAE,CAAC;IACnD,CAAC,CAAC;EACH,CAAC;EAiDDrI,sBAAWU,6BAAS;IA/CpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA+CA;MAAA;MACC,IAAI,CAAC,IAAI,CAACsM,UAAU,EAAE;QACrB,IAAI,CAACA,UAAU,GAAG,IAAI5O,IAAI,EAAa;QACvC,IAAI,CAAC4O,UAAU,CAAC/L,MAAM,CAACC,EAAE,CAAC,UAAU,EAAE,UAAC0B,KAAK;UAC3C,IAAIqK,QAAQ,GAAGrK,KAAK,CAACC,QAAQ;UAC7B,IAAIqK,MAAM,GAAGD,QAAQ,CAACC,MAAM;UAE5B,IAAIA,MAAM,EAAE;YACX,IAAIC,WAAS,GAAGF,QAAQ,CAACG,SAAS;YAElC,IAAI,CAAC9N,KAAK,CAACgD,QAAQ,CAAC6K,WAAS,CAAC,EAAE;cAC/BA,WAAS,GAAG,OAAO;;YAGpB,IAAIE,gBAAc,GAAG1N,KAAI,CAACoC,QAAQ;YAClC,IAAIuL,UAAQ,GAAGL,QAAQ,CAACM,QAAQ;YAEhC,IAAIC,QAAQ,GAAGlO,KAAK,CAACmO,QAAQ,CAACR,QAAQ,CAACO,QAAQ,CAAC;YAChD,IAAIE,QAAQ,GAAGpO,KAAK,CAACmO,QAAQ,CAACR,QAAQ,CAACS,QAAQ,CAAC;YAEhD,IAAI,CAACpO,KAAK,CAAC2E,QAAQ,CAACuJ,QAAQ,CAAC,IAAI,CAAClO,KAAK,CAAC2E,QAAQ,CAACyJ,QAAQ,CAAC,EAAE;cAC3D/N,KAAI,CAACoC,QAAQ,CAACd,MAAM,CAACC,EAAE,CAAC,wBAAwB,EAAE,UAAC0B,KAAK;gBACvD,IAAIA,KAAK,CAAC2K,QAAQ,IAAIJ,WAAS,EAAE;kBAChClO,KAAK,CAACqE,IAAI,CAAC3D,KAAI,CAAC0D,SAAS,CAACgD,QAAQ,EAAE,EAAE,UAACtE,QAAQ;oBAC9C,IAAI4L,WAAW,GAAG,KAAK;oBACvBpO,MAAM,CAAC+D,IAAI,CAACvB,QAAQ,CAAC6L,OAAO,EAAE,UAACC,MAAM;sBACpC,IAAIA,MAAM,CAACC,UAAU,IAAIZ,MAAM,EAAE;wBAChC,IAAIa,SAAS,GAAQF,MAAM;wBAC3BE,SAAS,CAACT,UAAQ,CAAC,GAAGS,SAAS,CAACT,UAAQ,CAAC;wBACzCK,WAAW,GAAG,IAAI;;oBAEpB,CAAC,CAAC;oBAEF,IAAI,CAACA,WAAW,EAAE;sBACjBpO,MAAM,CAAC+D,IAAI,CAACvB,QAAQ,CAAC6L,OAAO,EAAE,UAACC,MAAM;wBACpC,IAAIA,MAAM,YAAYnP,SAAS,EAAE;0BAChCO,KAAK,CAACqE,IAAI,CAACuK,MAAM,CAAC/G,QAAQ,CAACT,QAAQ,EAAE,EAAE,UAAC2H,KAAK;4BAC5C,IAAIA,KAAK,CAACpO,SAAS,IAAIsN,MAAM,CAACtN,SAAS,EAAE;8BACxC,IAAIqO,QAAQ,GAAQD,KAAK;8BACzBC,QAAQ,CAACX,UAAQ,CAAC,GAAGW,QAAQ,CAACX,UAAQ,CAAC;;4BAExC;4BAAA,KACK,IAAIU,KAAK,YAAYtP,SAAS,EAAE;8BACpCsP,KAAK,CAAC/E,cAAc,EAAE;;0BAExB,CAAC,CAAC;;sBAEJ,CAAC,CAAC;;kBAEJ,CAAC,CAAC;;cAEJ,CAAC,CAAC;;YAGHtJ,KAAI,CAAC0D,SAAS,CAAC+G,QAAQ,CAACnJ,MAAM,CAACC,EAAE,CAAC,qBAAqB,EAAE,UAAC0B,KAAK;cAC9D,IAAIA,KAAK,CAAC2K,QAAQ,IAAIJ,WAAS,EAAE;gBAChC,IAAIpL,QAAQ,GAAGa,KAAK,CAACsK,MAAM;gBAC3B,IAAIgB,aAAW,GAAG,KAAK;gBACvB3O,MAAM,CAAC+D,IAAI,CAACvB,QAAQ,CAAC6L,OAAO,EAAE,UAACC,MAAM;kBACpC,IAAIA,MAAM,CAACC,UAAU,IAAIZ,MAAM,EAAE;oBAChC,IAAIa,SAAS,GAAQF,MAAM;oBAC3BE,SAAS,CAACT,UAAQ,CAAC,GAAGS,SAAS,CAACT,UAAQ,CAAC;oBACzCY,aAAW,GAAG,IAAI;;gBAEpB,CAAC,CAAC;gBAEF,IAAI,CAACA,aAAW,EAAE;kBACjB3O,MAAM,CAAC+D,IAAI,CAACvB,QAAQ,CAAC6L,OAAO,EAAE,UAACC,MAAM;oBACpC,IAAIA,MAAM,YAAYnP,SAAS,EAAE;sBAChCO,KAAK,CAACqE,IAAI,CAACuK,MAAM,CAAC/G,QAAQ,CAACT,QAAQ,EAAE,EAAE,UAAC2H,KAAK;wBAC5C,IAAIA,KAAK,CAACpO,SAAS,IAAIsN,MAAM,CAACtN,SAAS,EAAE;0BACxC,IAAIqO,QAAQ,GAAQD,KAAK;0BACzBC,QAAQ,CAACX,UAAQ,CAAC,GAAGW,QAAQ,CAACX,UAAQ,CAAC;;wBAExC;wBAAA,KACK,IAAIU,KAAK,YAAYtP,SAAS,EAAE;0BACpCsP,KAAK,CAAC/E,cAAc,EAAE;;sBAExB,CAAC,CAAC;;kBAEJ,CAAC,CAAC;;;YAGL,CAAC,CAAC;YAGFiE,MAAM,CAACZ,OAAO,CAAC6B,GAAG,CAAMb,UAAQ,EAAE,UAACxN,KAAK,EAAEsO,UAAU,EAAEb,QAAQ;cAE7D,IAAIC,QAAQ,GAAGlO,KAAK,CAACmO,QAAQ,CAACR,QAAQ,CAACO,QAAQ,CAAC;cAChD,IAAIE,QAAQ,GAAGpO,KAAK,CAACmO,QAAQ,CAACR,QAAQ,CAACS,QAAQ,CAAC;cAEhD,IAAIxI,GAAG,GAAG+H,QAAQ,CAAC/H,GAAG;cACtB,IAAID,GAAG,GAAGgI,QAAQ,CAAChI,GAAG;cAEtB,IAAImJ,UAAU,YAAYjQ,MAAM,EAAE;gBACjC,IAAI4P,SAAS,GAAQK,UAAU;gBAC/B,IAAIC,aAAa,GAAGN,SAAS,CAAC9F,cAAc,CAACsF,QAAQ,CAAC;gBACtD,IAAIc,aAAa,IAAID,UAAU,CAACrM,QAAQ,EAAE;kBACzC,IAAIoG,WAAW,GAAQiG,UAAU,CAACrM,QAAQ,CAACoG,WAAW;kBACtD,IAAIA,WAAW,IAAI7I,KAAK,CAACgD,QAAQ,CAAC6F,WAAW,CAACkG,aAAa,CAAC,CAAC,EAAE;oBAC9D,OAAOvO,KAAK;;;;cAKf,IAAIiC,QAAQ,GAAmCqM,UAAU,CAACrM,QAAQ;cAElE,IAAI,CAACzC,KAAK,CAAC2E,QAAQ,CAACuJ,QAAQ,CAAC,EAAE;gBAC9BA,QAAQ,GAAGH,gBAAc,CAACxN,MAAM,CAACsN,WAAS,CAAC,CAACmB,GAAG;;cAGhD,IAAI,CAAChP,KAAK,CAAC2E,QAAQ,CAACyJ,QAAQ,CAAC,EAAE;gBAC9BA,QAAQ,GAAGL,gBAAc,CAACxN,MAAM,CAACsN,WAAS,CAAC,CAACoB,IAAI;;cAGjD,IAAIxM,QAAQ,EAAE;gBACb,IAAIyM,WAAW,GAAGzM,QAAQ,CAAClC,MAAM,CAACsN,WAAS,CAAC;gBAC5C,IAAIqB,WAAW,EAAE;kBAChB,IAAIC,YAAY,GAAG1M,QAAQ,CAACiC,qBAAqB,CAACmJ,WAAS,CAAC;kBAC5D,IAAI7N,KAAK,CAACgD,QAAQ,CAAC4C,GAAG,CAAC,IAAI5F,KAAK,CAACgD,QAAQ,CAAC2C,GAAG,CAAC,IAAI3F,KAAK,CAAC2E,QAAQ,CAACuJ,QAAQ,CAAC,IAAIlO,KAAK,CAAC2E,QAAQ,CAACyJ,QAAQ,CAAC,IAAIpO,KAAK,CAAC2E,QAAQ,CAACwK,YAAY,CAAC,EAAE;oBAEvI,IAAIzI,OAAO,SAAQ;oBACnB,IAAIiH,QAAQ,CAACyB,WAAW,EAAE;sBACzB1I,OAAO,GAAG,CAACV,IAAI,CAACuH,GAAG,CAAC4B,YAAY,CAAC,GAAGnJ,IAAI,CAACqJ,MAAM,GAAGrJ,IAAI,CAACuH,GAAG,CAACW,QAAQ,CAAC,GAAGlI,IAAI,CAACqJ,MAAM,KAAMrJ,IAAI,CAACuH,GAAG,CAACa,QAAQ,CAAC,GAAGpI,IAAI,CAACqJ,MAAM,GAAGrJ,IAAI,CAACuH,GAAG,CAACW,QAAQ,CAAC,GAAGlI,IAAI,CAACqJ,MAAM,CAAE;qBAC7J,MACI;sBACJ3I,OAAO,GAAG,CAACyI,YAAY,GAAGjB,QAAQ,KAAKE,QAAQ,GAAGF,QAAQ,CAAC;;oBAG5D,IAAIlO,KAAK,CAAC2E,QAAQ,CAACwK,YAAY,CAAC,KAAK,CAACnP,KAAK,CAAC2E,QAAQ,CAAC+B,OAAO,CAAC,IAAIV,IAAI,CAACC,GAAG,CAACS,OAAO,CAAC,IAAI4I,QAAQ,CAAC,EAAE;sBAChG5I,OAAO,GAAG,GAAG;;oBAEd;oBACA,IAAI1G,KAAK,CAAC2E,QAAQ,CAACiB,GAAG,CAAC,EAAE;sBACxB,OAAOA,GAAG,GAAG,CAACD,GAAG,GAAGC,GAAG,IAAIc,OAAO;qBAClC,MACI,IAAId,GAAG,YAAYnG,KAAK,EAAE;sBAC9B,OAAO,IAAIA,KAAK,CAACS,OAAO,CAACqP,WAAW,CAAC3J,GAAG,CAAC4J,GAAG,EAAE7J,GAAG,CAAC6J,GAAG,EAAE9I,OAAO,CAAC,CAAC;;;;;cAKpE,OAAOlG,KAAK;YACb,CAAC,CAAC;;QAEJ,CAAC,CAAC;;MAEH,OAAO,IAAI,CAACkN,UAAU;IACvB,CAAC;;;;EAED;;;;;;EAMOtM,8BAAa,GAApB,UAAqBqO,MAAiC;IAErD,IAAIC,SAAS;IAEb,IAAID,MAAM,EAAE;MAEX;MACA,IAAIzP,KAAK,CAACgD,QAAQ,CAACyM,MAAM,CAAC1O,OAAO,CAAC,IAAIf,KAAK,CAAC2P,OAAO,CAACF,MAAM,CAAC1O,OAAO,CAAC,EAAE;QACpE,KAAK,IAAIyD,CAAC,GAAG,CAAC,EAAEoL,GAAG,GAAGH,MAAM,CAAC1O,OAAO,CAAC6D,MAAM,EAAEJ,CAAC,GAAGoL,GAAG,EAAEpL,CAAC,EAAE,EAAE;UAC1D,IAAIzD,OAAO,GAAG0O,MAAM,CAAC1O,OAAO,CAACyD,CAAC,CAAC;UAC/B,IAAI,CAACxE,KAAK,CAACgD,QAAQ,CAACjC,OAAO,CAAC8O,IAAI,CAAC,EAAE;YAClC9O,OAAO,CAAC8O,IAAI,GAAG,QAAQ;;;;MAK1B;MACA;MACA,IAAI7P,KAAK,CAACgD,QAAQ,CAACyM,MAAM,CAACC,SAAS,CAAC,IAAI1P,KAAK,CAAC2P,OAAO,CAACF,MAAM,CAACC,SAAS,CAAC,EAAE;QACxEA,SAAS,GAAGD,MAAM,CAACC,SAAS;QAC5B,OAAOD,MAAM,CAACC,SAAS;;;IAKzBtP,iBAAM0P,aAAa,YAACL,MAAM,CAAC;IAE3B;IACA,IAAIC,SAAS,EAAE;MACd,KAAK,IAAIlL,CAAC,GAAG,CAAC,EAAEoL,GAAG,GAAGF,SAAS,CAAC9K,MAAM,EAAEJ,CAAC,GAAGoL,GAAG,EAAEpL,CAAC,EAAE,EAAE;QACrD,IAAIuL,IAAI,GAAGL,SAAS,CAAClL,CAAC,CAAC;QAEvB;QACA,IAAIoJ,MAAM,GAAQ,IAAI;QACtB,IAAI5N,KAAK,CAACgD,QAAQ,CAAC+M,IAAI,CAACnC,MAAM,CAAC,IAAI5N,KAAK,CAACgQ,QAAQ,CAACD,IAAI,CAACnC,MAAM,CAAC,EAAE;UAG/D;UACA,IAAI,IAAI,CAACqC,GAAG,CAACC,MAAM,CAACH,IAAI,CAACnC,MAAM,CAAC,EAAE;YACjCA,MAAM,GAAG,IAAI,CAACqC,GAAG,CAAC/L,MAAM,CAAC6L,IAAI,CAACnC,MAAM,CAAC;WACrC,MACI;YACJ,IAAIuC,KAAK,GAAGJ,IAAI,CAACnC,MAAM,CAACwC,KAAK,CAAC,GAAG,CAAC;YAClC,KAAK,IAAIhJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+I,KAAK,CAACvL,MAAM,EAAEwC,CAAC,EAAE,EAAE;cACtC,IAAIwG,MAAM,YAAY9O,IAAI,EAAE;gBAC3B,IAAIuR,QAAQ,GAAGzC,MAAM,CAACnJ,QAAQ,CAACzE,KAAK,CAACmO,QAAQ,CAACgC,KAAK,CAAC/I,CAAC,CAAC,CAAC,CAAC;gBACxD,IAAI,CAACiJ,QAAQ,EAAE;kBACdzC,MAAM,GAASA,MAAO,CAACuC,KAAK,CAAC/I,CAAC,CAAC,CAAC;iBAChC,MACI;kBACJwG,MAAM,GAAGyC,QAAQ;;eAElB,MACI;gBACJ,IAAMC,UAAU,GAAGH,KAAK,CAAC/I,CAAC,CAAC,CAACmJ,KAAK,CAAC,mBAAmB,CAAC;gBACtD,IAAID,UAAU,EAAE;kBACf,IAAI1C,MAAM,CAAC0C,UAAU,CAAC,CAAC,CAAC,CAAC,YAAYxR,IAAI,EAAE;oBAC1C8O,MAAM,GAAGA,MAAM,CAAC0C,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC7L,QAAQ,CAACzE,KAAK,CAACmO,QAAQ,CAACmC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;mBACtE,MACI;oBACJ1C,MAAM,GAAGA,MAAM,CAAC0C,UAAU,CAAC,CAAC,CAAC,CAAC,CAACtQ,KAAK,CAACmO,QAAQ,CAACmC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;;iBAE9D,MACI;kBACJ1C,MAAM,GAAGA,MAAM,CAACuC,KAAK,CAAC/I,CAAC,CAAC,CAAC;;;;;;QAM9B2I,IAAI,CAACnC,MAAM,GAAGA,MAAM;QAEpB;QACA,IAAI5N,KAAK,CAACgD,QAAQ,CAAC+M,IAAI,CAACnK,GAAG,CAAC,EAAE;UAC7BmK,IAAI,CAACnK,GAAG,GAAG,IAAI,CAAC4K,mBAAmB,CAACT,IAAI,CAACnK,GAAG,CAAC;;QAE9C,IAAI5F,KAAK,CAACgD,QAAQ,CAAC+M,IAAI,CAACpK,GAAG,CAAC,EAAE;UAC7BoK,IAAI,CAACpK,GAAG,GAAG,IAAI,CAAC6K,mBAAmB,CAACT,IAAI,CAACpK,GAAG,CAAC;;;MAI/CvF,iBAAM0P,aAAa,YAAC;QACnBJ,SAAS,EAAEA;OACX,CAAC;;EAGJ,CAAC;EAED;;;;EAIA;;;;;;;;;;EAWA;;;;;;;;;;EAUUtO,4BAAW,GAArB,UAAsBqP,CAAS,EAAEC,CAAS;IACzC,IAAID,CAAC,IAAIC,CAAC,EAAE;MACX,OAAO,CAAC;;IAET;IAAA,KACK,IAAID,CAAC,IAAI,WAAW,EAAE;MAC1B,OAAO,CAAC;KACR,MACI,IAAIC,CAAC,IAAI,WAAW,EAAE;MAC1B,OAAO,CAAC,CAAC;KACT,MACI;MACJ,OAAOtQ,iBAAMuQ,WAAW,YAACF,CAAC,EAAEC,CAAC,CAAC;;EAEhC,CAAC;EAED;;;;;;;;;EASOtP,8BAAa,GAApB,UAAqBZ,KAAc;IAClCJ,iBAAMwQ,aAAa,YAACpQ,KAAK,CAAC;IAC1B,IAAI,CAAC0B,gBAAgB,CAACsG,OAAO,GAAGhI,KAAK;EACtC,CAAC;EACF,aAAC;AAAD,CAAC,CA1gD2B5B,SAAS;;AA4gDrC;;;;;;AAMAc,QAAQ,CAACmR,iBAAiB,CAAC,QAAQ,CAAC,GAAGzP,MAAM;AAC7C1B,QAAQ,CAACmR,iBAAiB,CAAC,gBAAgB,CAAC,GAAGlQ,cAAc","names":["Component","Sprite","List","ListTemplate","ListDisposer","Dictionary","DictionaryDisposer","DataItem","Container","Tooltip","Bullet","LegendSettings","options","Color","registry","$iter","$math","$ease","$utils","$object","$type","$array","$colors","__extends","_super","_this","className","values","value","applyTheme","Object","SeriesDataItem","_bullets","_disposers","push","bullets","clear","dispose","setValue","constructor","Series","Error","isMeasured","layout","shouldClone","setPropertyValue","axisRanges","events","on","processAxisRange","minBulletDistance","mainContainer","createChild","mask","bulletsContainer","_shouldBeReady","virtualParent","tooltip","hiddenState","transitionEasing","cubicIn","dataItem","createDataItem","component","role","autoSetClassName","setClassName","applyInternalDefaults","hasValue","readerTitle","language","translate","_chart","bullet","event","newValue","isTemplate","once","ev","itemsFocusable","focusable","invalidate","oldValue","dataItems","each","eachBullet","getKey","uid","validateDataItems","processValues","key","startIndex","i","getIndex","getActualWorkingValue","isNumber","length","rangeChangeUpdate","working","simplifiedProcessing","count_1","sum_1","absoluteSum_1","low_1","high_1","open_1","close_1","previous_1","first_1","absoluteFirst_1","startIndex_1","max","min","endIndex","dataItem_1","dataItem_2","Math","abs","getFirstValue","getAbsoluteFirstValue","setCalculatedValue","prevValue","calculatePercent","dataItem_3","ksum","usePercentHack","percent","zeroItem_1","dataItem_4","isIE","filters","iterator","axisRange","validate","fill","stroke","x","pixelX","y","pixelY","children","_showBullets","__disabled","updateTooltipBounds","topParent","w","maxWidth","h","maxHeight","rect","width","height","setBounds","bulletTemplate","validateDataElement","isHidden","visible","shouldCreateBullet","disabledField","propertyFields","disabled","dataContext","applyOnClones","clone","addSprite","isHiding","hide","currentDataItem","setKey","undefined","readerText_1","itemReaderText","xField","yField","isDynamic","deepInvalidate","populateString","hoverable","parent","itemWidth","itemHeight","positionBullet","name","dataRangeInvalid","invalidateProcessedData","_ignoreMinMax","invalidateDataItems","rangesContainer","contents","isRange","axis","xPosition","yPosition","getPropertyValue","template","processBullet","removeBullet","marker","chart","feedLegend","legendDataItem","invalidateRawData","readerText","_itemReaderText","tooltipText","plainText","tooltipHTML","_adapterO","apply","_itemReaderTextChanged","skipFocusThreshold","_legendDataItem","itemContainer","notRange","legendSettings","label","valueLabel","isDisposed","itemValueText","text","itemLabelText","labelText","valueText","source","copyFrom","e","modal","content","adapter","message","closable","suppressErrors","open","verbose","console","log","applyFilters","filter","_heatRules","heatRule","target","dataField_1","dataField","seriesDataItem_1","property_1","property","minValue","toNumber","maxValue","foundSprite","sprites","sprite","clonedFrom","anySprite","child","anyChild","foundSprite_1","add","ruleTarget","propertyField","low","high","fieldValues","workingValue","logarithmic","LOG10E","Infinity","interpolate","rgb","config","heatRules","isArray","len","type","processConfig","rule","isString","map","hasKey","parts","split","listitem","maybeIndex","match","maybeColorOrPercent","a","b","configOrder","setVisibility","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\series\\Series.ts"],"sourcesContent":["/**\r\n * Functionality for any series-based elements, like Line Series (graphs),\r\n * Pie slice lists, etc.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentDataFields, IComponentAdapters, IComponentEvents } from \"../../core/Component\";\r\nimport { AxisDataItem } from \"../axes/Axis\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { List, ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { LegendDataItem, LegendSettings } from \"../Legend\";\r\nimport { options } from \"../../core/Options\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $colors from \"../../core/utils/Colors\";\r\n\r\nexport interface IHeatRule {\r\n\ttarget: Sprite;\r\n\tproperty: string;\r\n\tmin: any;\r\n\tmax: any;\r\n\tdataField?: string;\r\n\tminValue?: number;\r\n\tmaxValue?: number;\r\n\tlogarithmic?: boolean;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[Series]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SeriesDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Related item's width in pixels.\r\n\t *\r\n\t * This is passed to bullets so that we'd know if the bullet (LabelBullet)\r\n\t * fits to max width/height.\r\n\t *\r\n\t * At the moment this is only used by column series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic itemWidth: number;\r\n\r\n\t/**\r\n\t * Related item's height in pixels.\r\n\t *\r\n\t * This is passed to bullets so that we'd know if the bullet (LabelBullet)\r\n\t * fits to max width/height.\r\n\t *\r\n\t * At the moment this is only used by column series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic itemHeight: number;\r\n\r\n\t/**\r\n\t * A dictionary of data items bullets, where key is uid of a bullet template.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _bullets: Dictionary<string, Sprite>;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: Series;\r\n\r\n\t/**\r\n\t * A dictionary of data items bullets, where key is uid of a bullet template.\r\n\t */\r\n\tpublic get bullets(): Dictionary<string, Sprite> {\r\n\t\tif (!this._bullets) {\r\n\t\t\tthis._bullets = new Dictionary<string, Sprite>();\r\n\t\t\tthis._disposers.push(new DictionaryDisposer(this._bullets));\r\n\t\t}\r\n\t\treturn this._bullets;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SeriesDataItem\";\r\n\t\t//@todo Should we make `bullets` list disposable?\r\n\t\t//this._disposers.push(new DictionaryDisposer(this.bullets));\r\n\r\n\t\tthis.values.value = {};\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose() {\r\n\t\tthis.bullets.clear();\r\n\t\tsuper.dispose();\r\n\t}\r\n\r\n\t/**\r\n\t * data items's numeric value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values.value.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[Series]].\r\n */\r\nexport interface ISeriesDataFields extends IComponentDataFields {\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds boolean flag if item should be hidden.\r\n\t */\r\n\thidden?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[Series]].\r\n */\r\nexport interface ISeriesProperties extends IComponentProperties {\r\n\r\n\t/**\r\n\t * Minimal distance between data points in pixels.\r\n\t *\r\n\t * If distance gets smaller than this, bullets are turned off to avoid\r\n\t * overlapping.\r\n\t *\r\n\t * `0` (zero) disables this behavior.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tminBulletDistance?: number;\r\n\r\n\t/**\r\n\t * Should series be hidden in chart's legend?\r\n\t */\r\n\thiddenInLegend?: boolean;\r\n\r\n\t/**\r\n\t * Series' name.\r\n\t */\r\n\tname?: string;\r\n}\r\n\r\n/**\r\n * Defines events for [[Series]].\r\n */\r\nexport interface ISeriesEvents extends IComponentEvents {\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tselectionextremeschanged: {};\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\textremeschanged: {};\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tdataitemchanged: {\r\n\t\tdataItem: DataItem\r\n\t};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Series]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISeriesAdapters extends IComponentAdapters, ISeriesProperties {\r\n\t/**\r\n\t * Applied to the name used by screen readers.\r\n\t */\r\n\titemReaderText: string\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines base class for any kind of serial data.\r\n *\r\n * @see {@link ISeriesEvents} for a list of available Events\r\n * @see {@link ISeriesAdapters} for a list of available Adapters\r\n * @todo Separate axis-related stuff to some other class so that MapSeries would not have unrelated stuff\r\n */\r\nexport class Series extends Component {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ISeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISeriesEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used for the series.\r\n\t */\r\n\tpublic _dataItem: SeriesDataItem;\r\n\r\n\t/**\r\n\t * A reference to the legend data item related to this series.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Should this series excluded from the axis scale calculations?\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tprotected _ignoreMinMax: boolean = false;\r\n\r\n\t/**\r\n\t * Container series' elements are placed in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic mainContainer: Container;\r\n\r\n\t/**\r\n\t * Should series' bullets?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tprotected _showBullets: boolean = true;\r\n\r\n\t/**\r\n\t * List of series' bullets.\r\n\t */\r\n\tprotected _bullets: ListTemplate<Sprite>;\r\n\r\n\t/**\r\n\t * Container bullets are placed in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic bulletsContainer: Container;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: SerialChart;\r\n\r\n\t/**\r\n\t * A container axis ranges are placed in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rangesContainer: Container;\r\n\r\n\t/**\r\n\t * A list of axis ranges for this series.\r\n\t */\r\n\tpublic axisRanges: List<AxisDataItem>;\r\n\r\n\t/**\r\n\t * Settings for the appearance of the related legend items.\r\n\t */\r\n\tpublic legendSettings: LegendSettings = new LegendSettings();\r\n\r\n\t/**\r\n\t * Lowest overal values by type.\r\n\t */\r\n\tprotected _tmin = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * Highest overal values by type.\r\n\t */\r\n\tprotected _tmax = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * Lowest values in current selection by type.\r\n\t */\r\n\tprotected _smin = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * Highest values in current selection by type.\r\n\t */\r\n\tprotected _smax = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * [dataItemsByAxis description]\r\n\t *\r\n\t * Both by category and date.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataItemsByAxis = new Dictionary<string, Dictionary<string, this[\"_dataItem\"]>>();\r\n\r\n\t/**\r\n\t * Normally series items are focusable using keyboard, so that people can\r\n\t * select them with a TAB key. However, if there are a lot of data points on\r\n\t * screen it might be long and useless to tab through all o fthem.\r\n\t *\r\n\t * This is where `skipFocusThreshold` comes in. If there are more items than\r\n\t * the value set here, we will not make those focusable and rather let screen\r\n\t * reader software rely on the series summary, or authors provide alternative\r\n\t * detailed information display, such as HTML table.\r\n\t *\r\n\t * Different series might have different threshold defaults.\r\n\t */\r\n\tpublic skipFocusThreshold: number = 20;\r\n\r\n\t/**\r\n\t * Holds a default screen reader text for series data items. It will be used\r\n\t * to generate information for screen readers. If not set, the series will\r\n\t * try to deduce reader text from `tooltipText` or `tooltipHTML`. If those\r\n\t * are not set either, a default reader text will be used which is relevant\r\n\t * for each Series type.\r\n\t */\r\n\tprotected _itemReaderText: string;\r\n\r\n\r\n\t/**\r\n\t * Used to indicate if `itemReaderText` was changed \"from the outside\".\r\n\t */\r\n\tprotected _itemReaderTextChanged: boolean = false;\r\n\r\n\t/*\r\n\t\tpublic heatMapfillRule: (fill:Color, column: Sprite) => any = function(fill:Color, sprite: Sprite) {\r\n\t\t\tlet dataItem: SeriesDataItem = <SeriesDataItem>sprite.dataItem;\r\n\r\n\t\t\tif (dataItem && dataItem.value) {\r\n\t\t\t\tlet series = dataItem.component;\r\n\t\t\t\tif($type.hasValue(series.minColor) &&  $type.hasValue(series.maxColor) && $type.isNumber(series.minValue) && $type.isNumber(series.maxValue)){\r\n\t\t\t\t\tlet percent = (dataItem.values.value.workingValue - series.minValue) / (series.maxValue - series.minValue);\r\n\t\t\t\t\treturn new Color($colors.interpolate(series.minColor.rgb, series.maxColor.rgb, percent));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t*/\r\n\r\n\tprotected _heatRules: List<IHeatRule>;\r\n\r\n\t/**\r\n\t * Most of the series use absolute values. However sometimes various\r\n\t * calculated percent values are need, e.g. item's percent representation\r\n\t * across all values in series, etc.\r\n\t *\r\n\t * It's a resource-intensive operation, so it is disabled by default.\r\n\t *\r\n\t * If you need percents to be calculated, e.g. for showing them in tooltips,\r\n\t * or creating 100% stacks, this setting needs to be set to `true`.\r\n\t *\r\n\t * NOTE: `PieChart`, which relies on slice percentages, has this\r\n\t * automatically set to `true`.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tpublic calculatePercent: boolean = false;\r\n\r\n\t/**\r\n\t * When `calculatePercent` is enabled and data item's percent value is\r\n\t * calculated, last item's real value is used instead of its working value.\r\n\t *\r\n\t * This is done for the animations when last item in series (e.g. slice in\r\n\t * a `PieSeries`) is hidden or shown. (if we would use real value, the\r\n\t * calculated percent would always be 100%).\r\n\t *\r\n\t * Sometimes there is a need (e.g. for drill-down Sunburst) to disable this\r\n\t * hack by setting `usePercentHack` to `false`.\r\n\t *\r\n\t * @since 4.9.13\r\n\t * @default true\r\n\t */\r\n\tpublic usePercentHack: boolean = true;\r\n\r\n\t/**\r\n\t * Specifies if series should be automatically disposed when removing from\r\n\t * chart's `series` list.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic autoDispose: boolean = true;\r\n\r\n\t/**\r\n\t * When chart/series' data is processed, all kinds of derivative values are\r\n\t * calculated. E.g. sum, min, max, change, etc. This is a potentially\r\n\t * time-consuming operation, especially prominent in data-heavy charts.\r\n\t *\r\n\t * If your chart does not need those values, and you have a lot of data,\r\n\t * setting this to `true` might give a dramatic increase in initial chart\r\n\t * load speed.\r\n\t *\r\n\t * Please note, regular column and line series usage scenarios do not\r\n\t * require derivative values. Those come into play only when you do advanced\r\n\t * functionality like coloring segments of charts in different colors\r\n\t * depending on change between open and close values, have stacked series, or\r\n\t * display any of the derived values, like percent, in tooltips or bullets.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tpublic simplifiedProcessing: boolean = false;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tif (this.constructor === Series) {\r\n\t\t\tthrow new Error(\"'Series' cannot be instantiated directly. Please use a specific series type.\");\r\n\t\t}\r\n\r\n\t\tthis.className = \"Series\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.shouldClone = false;\r\n\t\tthis.setPropertyValue(\"hidden\", false);\r\n\r\n\t\tthis.axisRanges = new List<AxisDataItem>();\r\n\t\tthis.axisRanges.events.on(\"inserted\", this.processAxisRange, this, false);\r\n\r\n\t\tthis.minBulletDistance = 0; // otherwise we'll have a lot of cases when people won't see bullets and think it's a bug\r\n\t\tthis.mainContainer = this.createChild(Container);\r\n\t\tthis.mainContainer.shouldClone = false;\r\n\t\tthis.mainContainer.mask = this.createChild(Sprite);\r\n\r\n\t\tthis._disposers.push(this.mainContainer);\r\n\r\n\t\t// all bullets should go on top of lines/fills. So we add a separate container for bullets and later set it's parent to chart.bulletsContainer\r\n\t\tlet bulletsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis._shouldBeReady.push(bulletsContainer);\r\n\t\tbulletsContainer.shouldClone = false;\r\n\t\tbulletsContainer.layout = \"none\";\r\n\t\tbulletsContainer.virtualParent = this;\r\n\t\tthis._disposers.push(bulletsContainer);\r\n\t\tthis.bulletsContainer = bulletsContainer;\r\n\r\n\t\tthis.tooltip = new Tooltip();\r\n\t\tthis.tooltip.virtualParent = this;\r\n\t\tthis._disposers.push(this.tooltip);\r\n\r\n\t\tthis.hiddenState.transitionEasing = $ease.cubicIn;\r\n\r\n\t\t// this data item holds sums, averages, etc\r\n\t\tthis.dataItem = this.createDataItem();\r\n\t\tthis._disposers.push(this.dataItem);\r\n\t\tthis.dataItem.component = this;\r\n\r\n\t\t// Apply accessibility\r\n\t\tthis.role = \"group\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * We need this here so that class names can be applied to bullets container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic applyTheme(): void {\r\n\t\tsuper.applyTheme();\r\n\t\tif (options.autoSetClassName && this.bulletsContainer) {\r\n\t\t\tthis.bulletsContainer.className = this.className + \"-bullets\";\r\n\t\t\tthis.bulletsContainer.setClassName();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new SeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Chart series is used on.\r\n\t *\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n\r\n\t/**\r\n\t * Positions bullet.\r\n\t *\r\n\t * @param bullet  Sprite\r\n\t */\r\n\tpublic positionBullet(bullet: Sprite): void {\r\n\r\n\t\t// Placeholder method for extending classes to override.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates newly created bullet after it has been instert into the list.\r\n\t *\r\n\t * @param event  List event\r\n\t * @todo investigate why itemReaderText is undefined\r\n\t */\r\n\tprotected processBullet(event: IListEvents<Sprite>[\"inserted\"]) {\r\n\t\tlet bullet: Sprite = event.newValue;\r\n\t\tbullet.isTemplate = true;\r\n\t\t// Add accessibility options to bullet\r\n\t\t// If there are relatively few bullets, make them focusable\r\n\t\tthis.events.once(\"datavalidated\", (ev) => {\r\n\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\tbullet.focusable = true;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * removes bullets\r\n\t *\r\n\t * @param event  List event\r\n\t */\r\n\tprotected removeBullet(event: IListEvents<Sprite>[\"removed\"]) {\r\n\t\tlet bullet: Sprite = event.oldValue;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet eachBullet = dataItem.bullets.getKey(bullet.uid);\r\n\t\t\tif (eachBullet) {\r\n\t\t\t\teachBullet.dispose();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.processValues(false);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns first value for the specific key in the series.\r\n\t *\r\n\t * @param key  Key\r\n\t * @return Value\r\n\t * @todo Description\r\n\t * @todo Convert to propert object property iterator\r\n\t */\r\n\tprotected getFirstValue(key: string, startIndex: number): number {\r\n\t\t// find first\r\n\t\t/*\r\n\t\treturn $iter.findMap(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tfor (let key in dataItem.values) {\r\n\t\t\t\tif ($object.hasKey(dataItem.values, key)) {\r\n\t\t\t\t\tlet value: number = dataItem.values[key].workingValue;\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t});*/\r\n\r\n\t\t//if (startIndex > 0 && startIndex < this.dataItems.length - 1) {\r\n\t\t//startIndex++;\r\n\t\t//}\r\n\t\tfor (let i = startIndex; i >= 0; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet value: number = dataItem.getActualWorkingValue(key);\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns first value for the specific key in the series.\r\n\t *\r\n\t * @param key  Key\r\n\t * @return Value\r\n\t * @todo Description\r\n\t * @todo Convert to propert object property iterator\r\n\t */\r\n\tprotected getAbsoluteFirstValue(key: string): number {\r\n\t\tfor (let i = 0; i < this.dataItems.length; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet value: number = dataItem.values[key].value;\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * [rangeChangeUpdate description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected rangeChangeUpdate() {\r\n\t\tsuper.rangeChangeUpdate();\r\n\t\tthis.processValues(true);\r\n\t}\r\n\r\n\t/**\r\n\t * [processValues description]\r\n\t *\r\n\t * @todo Description\r\n\t * @todo Convert to propert object property iterator\r\n\t * @param dataItems [description]\r\n\t */\r\n\tprotected processValues(working: boolean) {\r\n\t\tif (!this.simplifiedProcessing) {\r\n\t\t\tlet dataItems = this.dataItems;\r\n\r\n\t\t\tlet count: { [index: string]: number } = {};\r\n\t\t\tlet sum: { [index: string]: number } = {};\r\n\t\t\tlet absoluteSum: { [index: string]: number } = {};\r\n\t\t\tlet low: { [index: string]: number } = {};\r\n\t\t\tlet high: { [index: string]: number } = {};\r\n\t\t\tlet open: { [index: string]: number } = {};\r\n\t\t\tlet close: { [index: string]: number } = {};\r\n\t\t\tlet previous: { [index: string]: number } = {};\r\n\t\t\tlet first: { [index: string]: number } = {};\r\n\t\t\tlet absoluteFirst: { [index: string]: number } = {};\r\n\r\n\t\t\t//let duration: number = 0; // todo: check if series uses selection.change or selection.change.percent and set duration to interpolationduration\r\n\r\n\t\t\tlet startIndex: number = $math.max(0, this.startIndex);\r\n\t\t\tstartIndex = $math.min(startIndex, this.dataItems.length);\r\n\r\n\t\t\tlet endIndex: number = $math.min(this.endIndex, this.dataItems.length);\r\n\r\n\t\t\tif (!$type.isNumber(startIndex)) {\r\n\t\t\t\tstartIndex = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\t\tendIndex = this.dataItems.length;\r\n\t\t\t}\r\n\r\n\t\t\tif (startIndex > 0) {\r\n\t\t\t\tlet dataItem = dataItems.getIndex(startIndex - 1);\r\n\r\n\t\t\t\t$object.each(dataItem.values, (key, values) => {\r\n\t\t\t\t\tlet value: number = dataItem.getActualWorkingValue(key);\r\n\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t// save previous\r\n\t\t\t\t\t\tprevious[key] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\t\t$object.each(dataItem.values, (key, values) => {\r\n\t\t\t\t\tlet value: number = dataItem.getActualWorkingValue(key);\r\n\r\n\t\t\t\t\t//if (i >= startIndex && i <= endIndex) { // do not add to count, sum etc if it is not within start/end index\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\t// count values\r\n\t\t\t\t\t\tif (!$type.isNumber(count[key])) {\r\n\t\t\t\t\t\t\tcount[key] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcount[key]++;\r\n\r\n\t\t\t\t\t\t// sum values\r\n\t\t\t\t\t\tif (!$type.isNumber(sum[key])) {\r\n\t\t\t\t\t\t\tsum[key] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsum[key] += value;\r\n\r\n\t\t\t\t\t\t// absolute sum values\r\n\t\t\t\t\t\tif (!$type.isNumber(absoluteSum[key])) {\r\n\t\t\t\t\t\t\tabsoluteSum[key] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tabsoluteSum[key] += Math.abs(value);\r\n\r\n\t\t\t\t\t\t// open\r\n\t\t\t\t\t\tif (!$type.isNumber(open[key])) {\r\n\t\t\t\t\t\t\topen[key] = value;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// close\r\n\t\t\t\t\t\tclose[key] = value;\r\n\r\n\t\t\t\t\t\t// low\r\n\t\t\t\t\t\tif (!$type.isNumber(low[key])) {\r\n\t\t\t\t\t\t\tlow[key] = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (low[key] > value) {\r\n\t\t\t\t\t\t\t\tlow[key] = value;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// high\r\n\t\t\t\t\t\tif (!$type.isNumber(high[key])) {\r\n\t\t\t\t\t\t\thigh[key] = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (high[key] < value) {\r\n\t\t\t\t\t\t\t\thigh[key] = value;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!$type.isNumber(first[key])) {\r\n\t\t\t\t\t\t\tfirst[key] = this.getFirstValue(key, startIndex);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!$type.isNumber(absoluteFirst[key])) {\r\n\t\t\t\t\t\t\tabsoluteFirst[key] = this.getAbsoluteFirstValue(key);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// change\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, value - first[key], \"change\");\r\n\t\t\t\t\t\t// change from start percent\r\n\t\t\t\t\t\t// will fail if first value is 0\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, (value - first[key]) / first[key] * 100, \"changePercent\");\r\n\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, (value - absoluteFirst[key]), \"startChange\");\r\n\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, (value - absoluteFirst[key]) / absoluteFirst[key] * 100, \"startChangePercent\");\r\n\r\n\t\t\t\t\t\t// previous change\r\n\t\t\t\t\t\tlet prevValue: number = previous[key];\r\n\t\t\t\t\t\tif (!$type.isNumber(prevValue)) {\r\n\t\t\t\t\t\t\tprevValue = value;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, value - prevValue, \"previousChange\");\r\n\t\t\t\t\t\t// previous change percent\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, (value - prevValue) / prevValue * 100, \"previousChangePercent\");\r\n\r\n\t\t\t\t\t\t// save previous\r\n\t\t\t\t\t\tprevious[key] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this.calculatePercent) {\r\n\t\t\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\t\t\t$object.each(dataItem.values, (key) => {\r\n\t\t\t\t\t\tlet ksum: number = absoluteSum[key];\r\n\r\n\t\t\t\t\t\tlet value: number = dataItem.getActualWorkingValue(key);\r\n\r\n\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\tif (ksum > 0) {\r\n\t\t\t\t\t\t\t\tif (this.usePercentHack) {\r\n\t\t\t\t\t\t\t\t\t// this hack is made in order to make it possible to animate single slice to 0\r\n\t\t\t\t\t\t\t\t\t// if there is only one slice left, percent value is always 100%, so it won't animate\r\n\t\t\t\t\t\t\t\t\t// so we use real value of a slice instead of current value\r\n\t\t\t\t\t\t\t\t\tif (value == ksum) {\r\n\t\t\t\t\t\t\t\t\t\tksum = dataItem.values[key].value;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet percent = value / ksum * 100;\r\n\r\n\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, percent, \"percent\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, 0, \"percent\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// calculate one before first (cant do that in cycle, as we don't know open yet\r\n\t\t\t// when drawing line chart we should draw line to the invisible data point to the left, otherwise the line will always look like it starts from the selected point\r\n\t\t\t// so we do startIndex - 1\r\n\t\t\tif (startIndex > 0) {\r\n\t\t\t\tlet zeroItem: this[\"_dataItem\"] = dataItems.getIndex(startIndex - 1);\r\n\r\n\t\t\t\t$object.each(zeroItem.values, (key) => {\r\n\t\t\t\t\tlet value = zeroItem.values[key].value;\r\n\t\t\t\t\t// change\r\n\t\t\t\t\tzeroItem.setCalculatedValue(key, value - open[key], \"change\");\r\n\t\t\t\t\t// change percent\r\n\t\t\t\t\tzeroItem.setCalculatedValue(key, (value - open[key]) / open[key] * 100, \"changePercent\");\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// we save various data like sum, average to dataPoint of the series\r\n\t\t\tlet dataItem: DataItem = this.dataItem;\r\n\t\t\t$object.each(dataItem.values, (key) => {\r\n\t\t\t\tdataItem.setCalculatedValue(key, sum[key], \"sum\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, absoluteSum[key], \"absoluteSum\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, sum[key] / count[key], \"average\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, open[key], \"open\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, close[key], \"close\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, low[key], \"low\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, high[key], \"high\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, count[key], \"count\");\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tif ($utils.isIE()) {\r\n\t\t\tthis.filters.clear();\r\n\t\t}\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t//axisRange.contents.disposeChildren(); // not good for columns, as they are reused\r\n\t\t\t//\t\t\taxisRange.appendChildren();\r\n\t\t\taxisRange.validate();\r\n\t\t});\r\n\r\n\t\tsuper.validate();\r\n\t\tlet bulletsContainer = this.bulletsContainer;\r\n\t\tbulletsContainer.fill = this.fill;\r\n\t\tbulletsContainer.stroke = this.stroke;\r\n\t\tbulletsContainer.x = this.pixelX;\r\n\t\tbulletsContainer.y = this.pixelY;\r\n\r\n\t\tif (this.bulletsContainer.children.length > 0) {\r\n\t\t\tif (this._showBullets) {\r\n\r\n\t\t\t\tfor (let i = 0; i < this.startIndex; i++) {\r\n\t\t\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\t\t\t\tbullet.__disabled = true;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let i = this.dataItems.length - 1; i > this.endIndex; i--) {\r\n\t\t\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\t\t\t\tbullet.__disabled = true;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.bulletsContainer.children.each((bullet) => {\r\n\t\t\t\t\tbullet.__disabled = true;\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.updateTooltipBounds();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateTooltipBounds() {\r\n\t\tif (this.topParent) {\r\n\t\t\tlet x = 0;\r\n\t\t\tlet y = 0;\r\n\t\t\tlet w = this.topParent.maxWidth;\r\n\t\t\tlet h = this.topParent.maxHeight;\r\n\t\t\tlet rect = { x: x, y: y, width: w, height: h };\r\n\r\n\t\t\tthis.tooltip.setBounds(rect);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected shouldCreateBullet(dataItem: this[\"_dataItem\"], bulletTemplate: Sprite): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tif (this._showBullets) {\r\n\t\t\tif (!this.isHidden) {\r\n\t\t\t\tthis.bulletsContainer.visible = true;\r\n\t\t\t}\r\n\t\t\tthis.bullets.each((bulletTemplate) => {\r\n\t\t\t\t// always better to use the same, this helps to avoid redrawing\r\n\t\t\t\tlet bullet: Sprite = <Sprite>dataItem.bullets.getKey(bulletTemplate.uid);\r\n\r\n\t\t\t\tif (this.shouldCreateBullet(dataItem, bulletTemplate)) {\r\n\t\t\t\t\tif (!bullet) {\r\n\r\n\t\t\t\t\t\tlet disabledField = bulletTemplate.propertyFields.disabled;\r\n\t\t\t\t\t\tlet dataContext = <any>dataItem.dataContext;\r\n\t\t\t\t\t\tif (disabledField && dataContext && dataContext[disabledField] === false) {\r\n\t\t\t\t\t\t\tbulletTemplate.applyOnClones = false;\r\n\t\t\t\t\t\t\tbulletTemplate.disabled = false;\r\n\t\t\t\t\t\t\tbullet = bulletTemplate.clone();\r\n\t\t\t\t\t\t\tbulletTemplate.disabled = true;\r\n\t\t\t\t\t\t\tbulletTemplate.applyOnClones = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tbullet = bulletTemplate.clone();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbullet.shouldClone = false;\r\n\t\t\t\t\t\tdataItem.addSprite(bullet);\r\n\r\n\t\t\t\t\t\tif (!this.visible || this.isHiding) {\r\n\t\t\t\t\t\t\tbullet.hide(0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet currentDataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\t\t\t\tif (currentDataItem != dataItem) {\r\n\t\t\t\t\t\t// set to undefined in order not to reuse\r\n\t\t\t\t\t\tif (currentDataItem) {\r\n\t\t\t\t\t\t\tcurrentDataItem.bullets.setKey(bulletTemplate.uid, undefined);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet readerText = this.itemReaderText;\r\n\r\n\t\t\t\t\t\tif (bullet instanceof Bullet) {\r\n\t\t\t\t\t\t\tif (!readerText) {\r\n\t\t\t\t\t\t\t\treaderText = (\"{\" + bullet.xField + \"}: {\" + bullet.yField + \"}\");\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (bullet.isDynamic) {\r\n\t\t\t\t\t\t\t\tdataItem.events.on(\"workingvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n\t\t\t\t\t\t\t\t//dataItem.events.on(\"calculatedvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n\t\t\t\t\t\t\t\tthis.dataItem.events.on(\"workingvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbullet.deepInvalidate();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Add accessibility to bullet\r\n\t\t\t\t\t\tif (bullet.focusable) {\r\n\t\t\t\t\t\t\tbullet.events.on(\"focus\", (ev) => {\r\n\t\t\t\t\t\t\t\tbullet.readerTitle = this.populateString(readerText, bullet.dataItem);\r\n\t\t\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\t\t\tbullet.events.on(\"blur\", (ev) => {\r\n\t\t\t\t\t\t\t\tbullet.readerTitle = \"\";\r\n\t\t\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (bullet.hoverable) {\r\n\t\t\t\t\t\t\tbullet.events.on(\"over\", (ev) => {\r\n\t\t\t\t\t\t\t\tbullet.readerTitle = this.populateString(readerText, bullet.dataItem);\r\n\t\t\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\t\t\tbullet.events.on(\"out\", (ev) => {\r\n\t\t\t\t\t\t\t\tbullet.readerTitle = \"\";\r\n\t\t\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbullet.parent = this.bulletsContainer;\r\n\t\t\t\t\tdataItem.bullets.setKey(bulletTemplate.uid, bullet);\r\n\r\n\t\t\t\t\t// pass max w/h so we'd know if we should show/hide somethings\r\n\t\t\t\t\tbullet.maxWidth = dataItem.itemWidth;\r\n\t\t\t\t\tbullet.maxHeight = dataItem.itemHeight;\r\n\t\t\t\t\tbullet.__disabled = false;\r\n\r\n\t\t\t\t\tthis.positionBullet(bullet);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (bullet) {\r\n\t\t\t\t\t\tbullet.__disabled = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.bulletsContainer.visible = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (!this.dataRangeInvalid) {\r\n\t\t\tthis.invalidateProcessedData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Should this series excluded from the axis scale calculations?\r\n\t *\r\n\t * @default false\r\n\t * @param value  Exclude from calculations?\r\n\t */\r\n\tpublic set ignoreMinMax(value: boolean) {\r\n\t\tthis._ignoreMinMax = value;\r\n\t\tthis.invalidateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Exclude from calculations?\r\n\t */\r\n\tpublic get ignoreMinMax(): boolean {\r\n\t\treturn this._ignoreMinMax;\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\r\n\t\t// A placeholder method for extending classes to override.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Process axis range after it has been added to the list.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected processAxisRange(event: IListEvents<AxisDataItem>[\"inserted\"]): void {\r\n\t\t// create container if not existing\r\n\t\tif (!this.rangesContainer) {\r\n\t\t\tthis.rangesContainer = this.createChild(Container);\r\n\t\t\tthis.rangesContainer.shouldClone = false;\r\n\t\t\tthis.rangesContainer.isMeasured = false;\r\n\t\t}\r\n\r\n\t\tlet axisRange: AxisDataItem = event.newValue;\r\n\t\tif (axisRange) {\r\n\t\t\taxisRange.contents.parent = this.rangesContainer;\r\n\t\t\taxisRange.isRange = true;\r\n\t\t\taxisRange.events.on(\"valuechanged\", this.invalidateDataItems, this, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getAxisField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param axis  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the tooltip at specific position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param xPosition  X\r\n\t * @param yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): void {\r\n\r\n\t\t// Placeholder method for extending classes to override.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Minimal distance between data points in pixels.\r\n\t *\r\n\t * If distance gets smaller than this, bullets are turned off to avoid\r\n\t * overlapping.\r\n\t *\r\n\t * `0` (zero) disables this behavior.\r\n\t *\r\n\t * IMPORTANT: This setting will work only when Series' base axis\r\n\t * is [[CategoryAxis]] or [[DateAxis]]. If base axis is [[ValueAxis]] the\r\n\t * setting will be ignored, because it would be a huge overhead to measure\r\n\t * distance between each and every bullet.\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Distance (px)\r\n\t */\r\n\tpublic set minBulletDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"minBulletDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Distance (px)\r\n\t */\r\n\tpublic get minBulletDistance(): number {\r\n\t\treturn this.getPropertyValue(\"minBulletDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of bullets that will be added to each and every items in the\r\n\t * series.\r\n\t *\r\n\t * You can push any object that is a descendant of a [[Sprite]] here. All\r\n\t * items added to this list will be copied and used as a bullet on all data\r\n\t * items, including their properties, events, etc.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/bullets/} for more info about the concept of Bullets\r\n\t * @return List of bullets.\r\n\t */\r\n\tpublic get bullets(): ListTemplate<Sprite> {\r\n\t\tif (!this._bullets) {\r\n\t\t\tthis._bullets = new ListTemplate<Sprite>(new Bullet());\r\n\t\t\tthis._bullets.template.virtualParent = this;\r\n\t\t\tthis._bullets.events.on(\"inserted\", this.processBullet, this, false);\r\n\t\t\tthis._bullets.events.on(\"removed\", this.removeBullet, this, false);\r\n\r\n\t\t\tthis._disposers.push(new ListDisposer(this._bullets));\r\n\t\t\tthis._disposers.push(this._bullets.template);\r\n\t\t}\r\n\t\treturn this._bullets;\r\n\t}\r\n\r\n\t/**\r\n\t * Binds related legend data item's visual settings to this series' visual\r\n\t * settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Should the series be hidden in legend?\r\n\t *\r\n\t * @param value Hidden in legend?\r\n\t */\r\n\tpublic set hiddenInLegend(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"hiddenInLegend\", value)) {\r\n\t\t\tif (this.chart) {\r\n\t\t\t\tthis.chart.feedLegend();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hidden in legend?\r\n\t */\r\n\tpublic get hiddenInLegend(): boolean {\r\n\t\treturn this.getPropertyValue(\"hiddenInLegend\");\r\n\t}\r\n\r\n\t/**\r\n\t * Series' name.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setPropertyValue(\"name\", value);\r\n\r\n\t\tlet legendDataItem = this.legendDataItem;\r\n\t\tif (legendDataItem) {\r\n\t\t\tlegendDataItem.component.invalidate();\r\n\t\t\tlegendDataItem.component.invalidateRawData();\r\n\t\t}\r\n\r\n\t\tthis.readerTitle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.getPropertyValue(\"name\");\r\n\t}\r\n\r\n\t/**\r\n\t * Screen reader text to be applied to each individual data item, such\r\n\t * as bullets, columns or slices.\r\n\t *\r\n\t * The template can contain field reference meta codes, i.e. `{dateX}`,\r\n\t * `{valueY}`, etc.\r\n\t *\r\n\t * Any text formatting options, e.g. `[bold]` will be ignored.\r\n\t *\r\n\t * @param value Screen reader text template\r\n\t */\r\n\tpublic set itemReaderText(value: string) {\r\n\t\tthis._itemReaderText = value;\r\n\t\tthis._itemReaderTextChanged = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Screen reader text template\r\n\t */\r\n\tpublic get itemReaderText(): string {\r\n\r\n\t\t// Get explicitly set reader text\r\n\t\tlet readerText = this._itemReaderText;\r\n\r\n\t\t// Not set? Let's try something else\r\n\t\tif (!readerText) {\r\n\r\n\t\t\t// Tooltip text?\r\n\t\t\tif (this.tooltipText) {\r\n\t\t\t\treaderText = $utils.plainText(this.tooltipText);\r\n\t\t\t}\r\n\t\t\telse if (this.tooltipHTML) {\r\n\t\t\t\treaderText = $utils.plainText(this.tooltipHTML);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn readerText;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"itemReaderText\", readerText);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if number of data items in the series are beyond non-focusable\r\n\t * count and should not be available for TAB-through.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Items focusable?\r\n\t */\r\n\tpublic itemsFocusable(): boolean {\r\n\t\treturn this.dataItems.length >= this.skipFocusThreshold ? false : true;\r\n\t}\r\n\r\n\t/**\r\n\t * Legend data item that corresponds to this series.\r\n\t *\r\n\t * @param value  Data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tthis._legendDataItem.itemContainer.deepInvalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates corresponding legend data item with current values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"], notRange?: boolean) {\r\n\t\t// if this series has legend item\r\n\t\tif (this.legendDataItem) {\r\n\r\n\t\t\tlet legendSettings: LegendSettings = this.legendSettings;\r\n\t\t\tlet legendDataItem = this.legendDataItem;\r\n\t\t\tlet label: Label = legendDataItem.label;\r\n\t\t\tlet valueLabel: Label = legendDataItem.valueLabel;\r\n\r\n\t\t\t// update legend\r\n\t\t\tif ((dataItem && !dataItem.isDisposed())|| notRange) {\r\n\t\t\t\tif (valueLabel) {\r\n\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\tvalueLabel.text = legendSettings.itemValueText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvalueLabel.dataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t\tif (label) {\r\n\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\tlabel.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlabel.dataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (label) {\r\n\t\t\t\t\t// if itemLabelText is set, means we have to reset label even if labelText is not set\r\n\t\t\t\t\tif (legendSettings.labelText || legendSettings.itemLabelText != undefined) {\r\n\t\t\t\t\t\tlabel.text = legendSettings.labelText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlabel.dataItem = this.dataItem;\r\n\t\t\t\t}\r\n\t\t\t\tif (valueLabel) {\r\n\t\t\t\t\tif (legendSettings.valueText || legendSettings.itemValueText != undefined) {\r\n\t\t\t\t\t\tvalueLabel.text = legendSettings.valueText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvalueLabel.dataItem = this.dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.bullets.copyFrom(source.bullets);\r\n\t\tthis.bulletsContainer.copyFrom(source.bulletsContainer);\r\n\t\tthis.calculatePercent = source.calculatePercent;\r\n\t\tthis.usePercentHack = source.usePercentHack;\r\n\t\tthis.simplifiedProcessing = source.simplifiedProcessing;\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\t/**\r\n\t * Displays a modal or console message with error, and halts any further\r\n\t * processing of this element.\r\n\t *\r\n\t * @param e Error\r\n\t */\r\n\tpublic raiseCriticalError(e: Error) {\r\n\t\tif (this._chart && this._chart.modal) {\r\n\t\t\tthis._chart.modal.content = this._chart.adapter.apply(\"criticalError\", e).message;\r\n\t\t\tthis._chart.modal.closable = false;\r\n\t\t\tif (!options.suppressErrors) {\r\n\t\t\t\tthis._chart.modal.open();\r\n\t\t\t}\r\n\t\t\tthis._chart.disabled = true;\r\n\t\t}\r\n\r\n\t\tif (options.verbose) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Applies filters to the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected applyFilters() {\r\n\t\tsuper.applyFilters();\r\n\t\tthis.bulletsContainer.filters.clear();\r\n\r\n\t\t// copyFrom of a list copies, does not clone\r\n\t\t$iter.each(this.filters.iterator(), (filter) => {\r\n\t\t\tthis.bulletsContainer.filters.push(filter.clone());\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A list of heat rules to apply to series' elements based on the value\r\n\t * of the data item.\r\n\t *\r\n\t * Heat rules can be any \"numeric\" (including `Color`) property, and can also\r\n\t * be applied to child objects of series, like columns, bullets, etc.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.heatRules.push({\r\n\t *  \"target\": series.columns.template,\r\n\t *  \"property\": \"fill\",\r\n\t *  \"min\": am4core.color(\"#F5DBCB\"),\r\n\t *  \"max\": am4core.color(\"#ED7B84\"),\r\n\t *  \"dataField\": \"valueY\"\r\n\t *});\r\n\t *```\r\n\t * ```Javacript\r\n\t * series.heatRules.push({\r\n\t *  \"target\": series.columns.template,\r\n\t *  \"property\": \"fill\",\r\n\t *  \"min\": am4core.color(\"#F5DBCB\"),\r\n\t *  \"max\": am4core.color(\"#ED7B84\"),\r\n\t *  \"dataField\": \"valueY\"\r\n\t *});\r\n\t *```\r\n\t *```JSON\r\n\t *{\r\n\t *  // ...\r\n\t *  \"series\": [{\r\n\t *    \"type\": \"ColumnSeries\",\r\n\t *    \"heatRules\": [{\r\n\t *      \"target\": \"columns.template\",\r\n\t *      \"property\": \"fill\",\r\n\t *      \"min\": \"#F5DBCB\",\r\n\t *      \"max\": \"#ED7B84\",\r\n\t *      \"dataField\": \"valueY\"\r\n\t *    }]\r\n\t *  }]\r\n\t *}\r\n\t *```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/series/#Heat_maps} for more about heat rules\r\n\t * @return  Heat rules\r\n\t */\r\n\r\n\tpublic get heatRules(): List<IHeatRule> {\r\n\t\tif (!this._heatRules) {\r\n\t\t\tthis._heatRules = new List<IHeatRule>();\r\n\t\t\tthis._heatRules.events.on(\"inserted\", (event) => {\r\n\t\t\t\tlet heatRule = event.newValue;\r\n\t\t\t\tlet target = heatRule.target;\r\n\r\n\t\t\t\tif (target) {\r\n\t\t\t\t\tlet dataField = heatRule.dataField;\r\n\r\n\t\t\t\t\tif (!$type.hasValue(dataField)) {\r\n\t\t\t\t\t\tdataField = \"value\";\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet seriesDataItem = this.dataItem;\r\n\t\t\t\t\tlet property = heatRule.property;\r\n\r\n\t\t\t\t\tlet minValue = $type.toNumber(heatRule.minValue);\r\n\t\t\t\t\tlet maxValue = $type.toNumber(heatRule.maxValue);\r\n\r\n\t\t\t\t\tif (!$type.isNumber(minValue) && !$type.isNumber(maxValue)) {\r\n\t\t\t\t\t\tthis.dataItem.events.on(\"calculatedvaluechanged\", (event) => {\r\n\t\t\t\t\t\t\tif (event.property == dataField) {\r\n\t\t\t\t\t\t\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\t\t\t\t\tlet foundSprite = false;\r\n\t\t\t\t\t\t\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\t\t\tif (sprite.clonedFrom == target) {\r\n\t\t\t\t\t\t\t\t\t\t\tlet anySprite = <any>sprite;\r\n\t\t\t\t\t\t\t\t\t\t\tanySprite[property] = anySprite[property];\r\n\t\t\t\t\t\t\t\t\t\t\tfoundSprite = true;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\t\tif (!foundSprite) {\r\n\t\t\t\t\t\t\t\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\t\t\t\tif (sprite instanceof Container) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t$iter.each(sprite.children.iterator(), (child) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (child.className == target.className) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet anyChild = <any>child;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tanyChild[property] = anyChild[property];\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// giveup here\r\n\t\t\t\t\t\t\t\t\t\t\t\t\telse if (child instanceof Container) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchild.deepInvalidate();\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.dataItems.template.events.on(\"workingvaluechanged\", (event) => {\r\n\t\t\t\t\t\tif (event.property == dataField) {\r\n\t\t\t\t\t\t\tlet dataItem = event.target;\r\n\t\t\t\t\t\t\tlet foundSprite = false;\r\n\t\t\t\t\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\tif (sprite.clonedFrom == target) {\r\n\t\t\t\t\t\t\t\t\tlet anySprite = <any>sprite;\r\n\t\t\t\t\t\t\t\t\tanySprite[property] = anySprite[property];\r\n\t\t\t\t\t\t\t\t\tfoundSprite = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tif (!foundSprite) {\r\n\t\t\t\t\t\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\t\tif (sprite instanceof Container) {\r\n\t\t\t\t\t\t\t\t\t\t$iter.each(sprite.children.iterator(), (child) => {\r\n\t\t\t\t\t\t\t\t\t\t\tif (child.className == target.className) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet anyChild = <any>child;\r\n\t\t\t\t\t\t\t\t\t\t\t\tanyChild[property] = anyChild[property];\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t// givup here\r\n\t\t\t\t\t\t\t\t\t\t\telse if (child instanceof Container) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tchild.deepInvalidate();\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\r\n\t\t\t\t\ttarget.adapter.add(<any>property, (value, ruleTarget, property) => {\r\n\r\n\t\t\t\t\t\tlet minValue = $type.toNumber(heatRule.minValue);\r\n\t\t\t\t\t\tlet maxValue = $type.toNumber(heatRule.maxValue);\r\n\r\n\t\t\t\t\t\tlet min = heatRule.min;\r\n\t\t\t\t\t\tlet max = heatRule.max;\r\n\r\n\t\t\t\t\t\tif (ruleTarget instanceof Sprite) {\r\n\t\t\t\t\t\t\tlet anySprite = <any>ruleTarget;\r\n\t\t\t\t\t\t\tlet propertyField = anySprite.propertyFields[property];\r\n\t\t\t\t\t\t\tif (propertyField && ruleTarget.dataItem) {\r\n\t\t\t\t\t\t\t\tlet dataContext = <any>ruleTarget.dataItem.dataContext;\r\n\t\t\t\t\t\t\t\tif (dataContext && $type.hasValue(dataContext[propertyField])) {\r\n\t\t\t\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet dataItem: SeriesDataItem = <SeriesDataItem>ruleTarget.dataItem;\r\n\r\n\t\t\t\t\t\tif (!$type.isNumber(minValue)) {\r\n\t\t\t\t\t\t\tminValue = seriesDataItem.values[dataField].low;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!$type.isNumber(maxValue)) {\r\n\t\t\t\t\t\t\tmaxValue = seriesDataItem.values[dataField].high;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\t\tlet fieldValues = dataItem.values[dataField];\r\n\t\t\t\t\t\t\tif (fieldValues) {\r\n\t\t\t\t\t\t\t\tlet workingValue = dataItem.getActualWorkingValue(dataField);\r\n\t\t\t\t\t\t\t\tif ($type.hasValue(min) && $type.hasValue(max) && $type.isNumber(minValue) && $type.isNumber(maxValue) && $type.isNumber(workingValue)) {\r\n\r\n\t\t\t\t\t\t\t\t\tlet percent: number;\r\n\t\t\t\t\t\t\t\t\tif (heatRule.logarithmic) {\r\n\t\t\t\t\t\t\t\t\t\tpercent = (Math.log(workingValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E) / ((Math.log(maxValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tpercent = (workingValue - minValue) / (maxValue - minValue);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(workingValue) && (!$type.isNumber(percent) || Math.abs(percent) == Infinity)) {\r\n\t\t\t\t\t\t\t\t\t\tpercent = 0.5;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t// fixes problems if all values are the same\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(min)) {\r\n\t\t\t\t\t\t\t\t\t\treturn min + (max - min) * percent;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (min instanceof Color) {\r\n\t\t\t\t\t\t\t\t\t\treturn new Color($colors.interpolate(min.rgb, max.rgb, percent));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn this._heatRules;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tlet heatRules;\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up bullets\r\n\t\t\tif ($type.hasValue(config.bullets) && $type.isArray(config.bullets)) {\r\n\t\t\t\tfor (let i = 0, len = config.bullets.length; i < len; i++) {\r\n\t\t\t\t\tlet bullets = config.bullets[i];\r\n\t\t\t\t\tif (!$type.hasValue(bullets.type)) {\r\n\t\t\t\t\t\tbullets.type = \"Bullet\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Let's take heatRules out of the config, so that we can process\r\n\t\t\t// them later, when bullets are already there\r\n\t\t\tif ($type.hasValue(config.heatRules) && $type.isArray(config.heatRules)) {\r\n\t\t\t\theatRules = config.heatRules;\r\n\t\t\t\tdelete config.heatRules;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t\t// Process heat rules again, when all other elements are ready\r\n\t\tif (heatRules) {\r\n\t\t\tfor (let i = 0, len = heatRules.length; i < len; i++) {\r\n\t\t\t\tlet rule = heatRules[i];\r\n\r\n\t\t\t\t// Resolve target\r\n\t\t\t\tlet target: any = this;\r\n\t\t\t\tif ($type.hasValue(rule.target) && $type.isString(rule.target)) {\r\n\r\n\r\n\t\t\t\t\t// Check if we can find this element by id\r\n\t\t\t\t\tif (this.map.hasKey(rule.target)) {\r\n\t\t\t\t\t\ttarget = this.map.getKey(rule.target);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlet parts = rule.target.split(\".\");\r\n\t\t\t\t\t\tfor (let x = 0; x < parts.length; x++) {\r\n\t\t\t\t\t\t\tif (target instanceof List) {\r\n\t\t\t\t\t\t\t\tlet listitem = target.getIndex($type.toNumber(parts[x]));\r\n\t\t\t\t\t\t\t\tif (!listitem) {\r\n\t\t\t\t\t\t\t\t\ttarget = (<any>target)[parts[x]];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\ttarget = listitem;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tconst maybeIndex = parts[x].match(/^(.*)\\[([0-9]+)\\]/);\r\n\t\t\t\t\t\t\t\tif (maybeIndex) {\r\n\t\t\t\t\t\t\t\t\tif (target[maybeIndex[1]] instanceof List) {\r\n\t\t\t\t\t\t\t\t\t\ttarget = target[maybeIndex[1]].getIndex($type.toNumber(maybeIndex[2]));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\ttarget = target[maybeIndex[1]][$type.toNumber(maybeIndex[2])];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\ttarget = target[parts[x]];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\trule.target = target;\r\n\r\n\t\t\t\t// Resolve colors and percents\r\n\t\t\t\tif ($type.hasValue(rule.min)) {\r\n\t\t\t\t\trule.min = this.maybeColorOrPercent(rule.min);\r\n\t\t\t\t}\r\n\t\t\t\tif ($type.hasValue(rule.max)) {\r\n\t\t\t\t\trule.max = this.maybeColorOrPercent(rule.max);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig({\r\n\t\t\t\theatRules: heatRules\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns visibility value\r\n\t * @ignore\r\n\t */\r\n\t/*\r\n\t\tprotected getVisibility(): boolean {\r\n\t\t\tlet hidden = this.getPropertyValue(\"hidden\");\r\n\t\t\tif (hidden) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn super.getVisibility();\r\n\t\t\t}\r\n\t\t}*/\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"heatRules\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"heatRules\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets `visibility` property:\r\n\t *\r\n\t * * `true` - visible\r\n\t * * `false` - hidden\r\n\t *\r\n\t * @param value  true - visible, false - hidden\r\n\t * @return Current visibility\r\n\t */\r\n\tpublic setVisibility(value: boolean) {\r\n\t\tsuper.setVisibility(value);\r\n\t\tthis.bulletsContainer.visible = value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Series\"] = Series;\r\nregistry.registeredClasses[\"SeriesDataItem\"] = SeriesDataItem;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}