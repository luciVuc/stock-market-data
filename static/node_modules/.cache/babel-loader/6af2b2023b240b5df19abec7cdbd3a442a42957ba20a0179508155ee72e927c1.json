{"ast":null,"code":"import { __extends, __generator } from \"tslib\";\nimport { Disposer, MultiDisposer } from \"./Disposer\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport * as $array from \"./Array\";\nimport * as $iter from \"./Iterator\";\n/**\r\n * @todo Description\r\n */\nvar IndexedIterable = /** @class */function () {\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param array  List items\r\n   * @param start  Start index\r\n   * @param end    End index\r\n   */\n  function IndexedIterable(array, start, end) {\n    this._array = array;\n    this._start = start;\n    this._end = end;\n  }\n  /**\r\n   * Returns a list item iterator.\r\n   *\r\n   * @return Iterator\r\n   */\n  IndexedIterable.prototype.iterator = function () {\n    var _this = this;\n    return function (push) {\n      if (_this._start !== _this._end) {\n        if (_this._start < _this._end) {\n          for (var i = _this._start; i < _this._end; ++i) {\n            if (!push(_this._array[i])) {\n              break;\n            }\n          }\n        } else {\n          for (var i = _this._start - 1; i >= _this._end; --i) {\n            if (!push(_this._array[i])) {\n              break;\n            }\n          }\n        }\n      }\n    };\n  };\n  /**\r\n   * Returns an interable list sorted backwards than current list.\r\n   *\r\n   * @return List\r\n   */\n  IndexedIterable.prototype.backwards = function () {\n    return new IndexedIterable(this._array, this._end, this._start);\n  };\n  /**\r\n   * Returns a new list consisting only of specific range of items between\r\n   * `start` and `end` indexes.\r\n   *\r\n   * @param start  Start index\r\n   * @param end    End index\r\n   * @return List\r\n   */\n  IndexedIterable.prototype.range = function (start, end) {\n    if (start <= end) {\n      if (this._start === this._end) {\n        return this;\n      } else if (this._start < this._end) {\n        var diff = end - start;\n        start = Math.max(this._start + start, this._start);\n        end = Math.min(start + diff, this._end);\n        return new IndexedIterable(this._array, start, end);\n      } else {\n        var diff = end - start;\n        start = Math.max(this._start - start, this._end);\n        end = Math.max(start - diff, this._end);\n        return new IndexedIterable(this._array, start, end);\n      }\n    } else {\n      throw new Error(\"Start index must be lower than end index\");\n    }\n  };\n  return IndexedIterable;\n}();\nexport { IndexedIterable };\n/**\r\n * ListGrouper organizes [[List]] items into groups.\r\n *\r\n * @ignore Exclude from docs\r\n */\nvar ListGrouper = /** @class */function (_super) {\n  __extends(ListGrouper, _super);\n  /**\r\n   * Constructor.\r\n   */\n  function ListGrouper(list, getKey, sort) {\n    var _this = _super.call(this, [list.events.on(\"inserted\", function (x) {\n      var value = x.newValue;\n      var key = _this._getKey(value);\n      var index = 0;\n      $iter.eachContinue(list.iterator(), function (x) {\n        if (x === value) {\n          return false;\n        } else if (_this._getKey(x) === key) {\n          ++index;\n        }\n        return true;\n      });\n      _this._insert(value, key, index);\n    }, undefined, false), list.events.on(\"removed\", function (x) {\n      _this._remove(x.oldValue);\n    }, undefined, false)]) || this;\n    /**\r\n     * Grouping keys.\r\n     */\n    _this._keys = [];\n    /**\r\n     * List item groups.\r\n     */\n    _this._groups = {};\n    _this._getKey = getKey;\n    _this._sort = sort;\n    $iter.each(list.iterator(), function (x) {\n      _this._insert(x, getKey(x));\n    });\n    return _this;\n  }\n  /**\r\n   * Inserts an item (`x`) to a specific group (`key`) and specific `index`.\r\n   *\r\n   * @param x      Item\r\n   * @param key    Group name\r\n   * @param index  Index\r\n   */\n  ListGrouper.prototype._insert = function (x, key, index) {\n    if (this._groups[key] == null) {\n      this._groups[key] = [];\n      // TODO code duplication with SortedList\n      var _a = $array.getSortedIndex(this._keys, this._sort, key),\n        found = _a.found,\n        index_1 = _a.index;\n      if (found) {\n        throw new Error(\"Key already exists: \" + key);\n      } else {\n        $array.insertIndex(this._keys, index_1, key);\n      }\n    }\n    if (index == null) {\n      this._groups[key].push(x);\n    } else {\n      $array.insertIndex(this._groups[key], index, x);\n    }\n  };\n  /**\r\n   * Removes an item from the list.\r\n   *\r\n   * @param x Item to remove\r\n   */\n  ListGrouper.prototype._remove = function (x) {\n    var key = this._getKey(x);\n    var values = this._groups[key];\n    if (values != null) {\n      $array.remove(values, x);\n      if (values.length === 0) {\n        delete this._groups[key];\n        var _a = $array.getSortedIndex(this._keys, this._sort, key),\n          found = _a.found,\n          index = _a.index;\n        if (found) {\n          $array.removeIndex(this._keys, index);\n        } else {\n          throw new Error(\"Key doesn't exist: \" + key);\n        }\n      }\n    }\n  };\n  /**\r\n   * Returns an iterator for the list.\r\n   *\r\n   * The iterator will iterate through all items in all groups.\r\n   *\r\n   * @return Iterator\r\n   */\n  ListGrouper.prototype.iterator = function () {\n    var _this = this;\n    return $iter.flatten($iter.map($iter.fromArray(this._keys), function (key) {\n      return $iter.fromArray(_this._groups[key]);\n    }));\n  };\n  return ListGrouper;\n}(MultiDisposer);\nexport { ListGrouper };\n/**\r\n * A disposable list, which when disposed itself will call `dispose()` method\r\n * on all its items.\r\n */\nvar ListDisposer = /** @class */function (_super) {\n  __extends(ListDisposer, _super);\n  function ListDisposer(list, disposeOnRemove) {\n    if (disposeOnRemove === void 0) {\n      disposeOnRemove = true;\n    }\n    var _this = this;\n    if (disposeOnRemove) {\n      var disposer_1 = list.events.on(\"removed\", function (x) {\n        x.oldValue.dispose();\n      }, undefined, false);\n      _this = _super.call(this, function () {\n        disposer_1.dispose();\n        // TODO clear the list ?\n        $iter.each(list.iterator(), function (x) {\n          x.dispose();\n        });\n      }) || this;\n    } else {\n      _this = _super.call(this, function () {\n        // TODO clear the list ?\n        $iter.each(list.iterator(), function (x) {\n          x.dispose();\n        });\n      }) || this;\n    }\n    return _this;\n  }\n  return ListDisposer;\n}(Disposer);\nexport { ListDisposer };\n/**\r\n * Checks if specific index fits into length.\r\n *\r\n * @param index  Index\r\n * @param len    Length\r\n */\nfunction checkBounds(index, len) {\n  if (!(index >= 0 && index < len)) {\n    throw new Error(\"Index out of bounds: \" + index);\n  }\n}\n/**\r\n * A List class is used to hold a number of indexed items of the same type.\r\n */\nvar List = /** @class */function () {\n  /**\r\n   * Constructor\r\n   *\r\n   * @param initial  Inital list of values to add to list\r\n   */\n  function List(initial) {\n    if (initial === void 0) {\n      initial = [];\n    }\n    /**\r\n     * Event dispatcher.\r\n     */\n    this.events = new EventDispatcher();\n    this._values = initial;\n  }\n  Object.defineProperty(List.prototype, \"values\", {\n    /**\r\n     * An array of values in the list.\r\n     *\r\n     * Do not use this property to add values. Rather use dedicated methods, like\r\n     * `push()`, `removeIndex()`, etc.\r\n     *\r\n     * @readonly\r\n     * @return List values\r\n     */\n    get: function () {\n      return this._values;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Checks if list contains specific item reference.\r\n   *\r\n   * @param item  Item to search for\r\n   * @return `true` if found, `false` if not found\r\n   */\n  List.prototype.contains = function (value) {\n    return this._values.indexOf(value) !== -1;\n  };\n  /**\r\n   * Removes specific item from the list.\r\n   *\r\n   * @param item An item to remove\r\n   */\n  List.prototype.removeValue = function (value) {\n    var i = 0;\n    var length = this._values.length;\n    while (i < length) {\n      // TODO handle NaN\n      if (this._values[i] === value) {\n        this.removeIndex(i);\n        --length;\n      } else {\n        ++i;\n      }\n    }\n  };\n  /**\r\n   * Searches the list for specific item and returns its index.\r\n   *\r\n   * @param item  An item to search for\r\n   * @return Index or -1 if not found\r\n   */\n  List.prototype.indexOf = function (value) {\n    return $array.indexOf(this._values, value);\n  };\n  Object.defineProperty(List.prototype, \"length\", {\n    /**\r\n     * Number of items in list.\r\n     *\r\n     * @readonly\r\n     * @return Number of items\r\n     */\n    get: function () {\n      return this._values.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Checks if there's a value at specific index.\r\n   *\r\n   * @param index  Index\r\n   * @return Value exists?\r\n   */\n  List.prototype.hasIndex = function (index) {\n    return index >= 0 && index < this._values.length;\n  };\n  /**\r\n   * Returns an item at specified index.\r\n   *\r\n   * @param index  Index\r\n   * @return List item\r\n   */\n  List.prototype.getIndex = function (index) {\n    return this._values[index];\n  };\n  /**\r\n   * Sets value at specific index.\r\n   *\r\n   * If there's already a value at the index, it is overwritten.\r\n   *\r\n   * @param index  Index\r\n   * @param value  New value\r\n   * @return New value\r\n   */\n  List.prototype.setIndex = function (index, value) {\n    checkBounds(index, this._values.length);\n    var oldValue = this._values[index];\n    // Do nothing if the old value and the new value are the same\n    if (oldValue !== value) {\n      this._values[index] = value;\n      if (this.events.isEnabled(\"setIndex\")) {\n        this.events.dispatchImmediately(\"setIndex\", {\n          type: \"setIndex\",\n          target: this,\n          index: index,\n          oldValue: oldValue,\n          newValue: value\n        });\n      }\n      if (this.events.isEnabled(\"removed\")) {\n        this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: this,\n          oldValue: oldValue\n        });\n      }\n      if (this.events.isEnabled(\"inserted\")) {\n        this.events.dispatchImmediately(\"inserted\", {\n          type: \"inserted\",\n          target: this,\n          newValue: value\n        });\n      }\n    }\n    return oldValue;\n  };\n  /**\r\n   * Adds an item to the list at a specific index, which pushes all the other\r\n   * items further down the list.\r\n   *\r\n   * @param index Index\r\n   * @param item  An item to add\r\n   */\n  List.prototype.insertIndex = function (index, value) {\n    checkBounds(index, this._values.length + 1);\n    $array.insertIndex(this._values, index, value);\n    if (this.events.isEnabled(\"insertIndex\")) {\n      this.events.dispatchImmediately(\"insertIndex\", {\n        type: \"insertIndex\",\n        target: this,\n        index: index,\n        newValue: value\n      });\n    }\n    if (this.events.isEnabled(\"inserted\")) {\n      this.events.dispatchImmediately(\"inserted\", {\n        type: \"inserted\",\n        target: this,\n        newValue: value\n      });\n    }\n  };\n  /**\r\n   * [_sortQuicksort description]\r\n   *\r\n   * @todo Description\r\n   * @param low    [description]\r\n   * @param high   [description]\r\n   * @param order  [description]\r\n   */\n  List.prototype._sortQuicksort = function (low, high, order) {\n    if (low < high) {\n      var p = this._sortPartition(low, high, order);\n      this._sortQuicksort(low, p, order);\n      this._sortQuicksort(p + 1, high, order);\n    }\n  };\n  /**\r\n   * [_sortPartition description]\r\n   *\r\n   * @todo Description\r\n   * @param low    [description]\r\n   * @param high   [description]\r\n   * @param order  [description]\r\n   * @return [description]\r\n   */\n  List.prototype._sortPartition = function (low, high, order) {\n    var values = this._values;\n    var pivot = values[low];\n    var i = low - 1;\n    var j = high + 1;\n    for (;;) {\n      do {\n        ++i;\n      } while (order(values[i], pivot) < 0);\n      do {\n        --j;\n      } while (order(values[j], pivot) > 0);\n      if (i >= j) {\n        return j;\n      } else {\n        this.swap(i, j);\n      }\n    }\n  };\n  /**\r\n   * Reorders list items according to specific ordering function.\r\n   *\r\n   * @param order  Ordering function\r\n   */\n  List.prototype.sort = function (order) {\n    // https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\n    // @todo faster implementation of this\n    // @todo test this\n    this._sortQuicksort(0, this._values.length - 1, order);\n  };\n  /**\r\n   * Swaps indexes of two items in the list.\r\n   *\r\n   * @param a  Item 1\r\n   * @param b  Item 2\r\n   */\n  List.prototype.swap = function (a, b) {\n    var len = this._values.length;\n    checkBounds(a, len);\n    checkBounds(b, len);\n    if (a !== b) {\n      var value_a = this._values[a];\n      var value_b = this._values[b];\n      this._values[a] = value_b;\n      if (this.events.isEnabled(\"setIndex\")) {\n        this.events.dispatchImmediately(\"setIndex\", {\n          type: \"setIndex\",\n          target: this,\n          index: a,\n          oldValue: value_a,\n          newValue: value_b\n        });\n      }\n      this._values[b] = value_a;\n      if (this.events.isEnabled(\"setIndex\")) {\n        this.events.dispatchImmediately(\"setIndex\", {\n          type: \"setIndex\",\n          target: this,\n          index: b,\n          oldValue: value_b,\n          newValue: value_a\n        });\n      }\n    }\n  };\n  /**\r\n   * Removes a value at specific index.\r\n   *\r\n   * @param index  Index of value to remove\r\n   * @return Removed value\r\n   */\n  List.prototype.removeIndex = function (index) {\n    checkBounds(index, this._values.length);\n    var oldValue = this._values[index];\n    $array.removeIndex(this._values, index);\n    if (this.events.isEnabled(\"removeIndex\")) {\n      this.events.dispatchImmediately(\"removeIndex\", {\n        type: \"removeIndex\",\n        target: this,\n        index: index,\n        oldValue: oldValue\n      });\n    }\n    if (this.events.isEnabled(\"removed\")) {\n      this.events.dispatchImmediately(\"removed\", {\n        type: \"removed\",\n        target: this,\n        oldValue: oldValue\n      });\n    }\n    return oldValue;\n  };\n  /**\r\n   * Moves an item to a specific index within the list.\r\n   *\r\n   * If the index is not specified it will move the item to the end of the\r\n   * list.\r\n   *\r\n   * @param value  Item to move\r\n   * @param index  Index to place item at\r\n   */\n  List.prototype.moveValue = function (value, toIndex) {\n    // TODO don't do anything if the desired index is the same as the current index\n    var index = this.indexOf(value);\n    // TODO remove all old values rather than only the first ?\n    if (index !== -1) {\n      var oldValue = this._values[index];\n      $array.removeIndex(this._values, index);\n      if (this.events.isEnabled(\"removeIndex\")) {\n        this.events.dispatchImmediately(\"removeIndex\", {\n          type: \"removeIndex\",\n          target: this,\n          index: index,\n          oldValue: oldValue\n        });\n      }\n    }\n    if (toIndex == null) {\n      toIndex = this._values.length;\n      this._values.push(value);\n    } else {\n      $array.insertIndex(this._values, toIndex, value);\n    }\n    if (this.events.isEnabled(\"insertIndex\")) {\n      this.events.dispatchImmediately(\"insertIndex\", {\n        type: \"insertIndex\",\n        target: this,\n        index: toIndex,\n        newValue: value\n      });\n    }\n    if (index === -1) {\n      if (this.events.isEnabled(\"inserted\")) {\n        this.events.dispatchImmediately(\"inserted\", {\n          type: \"inserted\",\n          target: this,\n          newValue: value\n        });\n      }\n    }\n  };\n  /**\r\n   * Adds an item to the end of the list.\r\n   *\r\n   * @param item  An item to add\r\n   */\n  List.prototype.push = function (value) {\n    var index = this._values.push(value) - 1;\n    if (this.events.isEnabled(\"insertIndex\")) {\n      this.events.dispatchImmediately(\"insertIndex\", {\n        type: \"insertIndex\",\n        target: this,\n        index: index,\n        newValue: value\n      });\n    }\n    if (this.events.isEnabled(\"inserted\")) {\n      this.events.dispatchImmediately(\"inserted\", {\n        type: \"inserted\",\n        target: this,\n        newValue: value\n      });\n    }\n    return value;\n  };\n  /**\r\n   * Adds an item as a first item in the list.\r\n   *\r\n   * @param item  An item to add\r\n   */\n  List.prototype.unshift = function (value) {\n    this.insertIndex(0, value);\n  };\n  /**\r\n   * Adds multiple items to the list.\r\n   *\r\n   * @param items  An Array of items to add\r\n   */\n  List.prototype.pushAll = function (values) {\n    var _this = this;\n    $array.each(values, function (value) {\n      _this.push(value);\n    });\n  };\n  /**\r\n   * Copies and adds items from abother list.\r\n   *\r\n   * @param source  A list top copy items from\r\n   */\n  List.prototype.copyFrom = function (source) {\n    this.pushAll(source._values);\n  };\n  /**\r\n   * Returns the last item from the list, and removes it.\r\n   *\r\n   * @return Item\r\n   */\n  List.prototype.pop = function () {\n    var index = this._values.length - 1;\n    return index < 0 ? undefined : this.removeIndex(this._values.length - 1);\n  };\n  /**\r\n   * Returns the first item from the list, and removes it.\r\n   *\r\n   * @return Item\r\n   */\n  List.prototype.shift = function () {\n    return this._values.length ? this.removeIndex(0) : undefined;\n  };\n  /**\r\n   * Sets multiple items to the list.\r\n   *\r\n   * All current items are removed.\r\n   *\r\n   * @param newArray  New items\r\n   */\n  List.prototype.setAll = function (newArray) {\n    var _this = this;\n    // @tod if a value exists in both the new and old arrays, don't send remove/insert events\n    var oldArray = $array.copy(this._values);\n    this._values.length = 0;\n    $array.each(newArray, function (value) {\n      _this._values.push(value);\n    });\n    if (this.events.isEnabled(\"setAll\")) {\n      this.events.dispatchImmediately(\"setAll\", {\n        type: \"setAll\",\n        target: this,\n        oldArray: oldArray,\n        newArray: this._values // TODO make a copy ?\n      });\n    }\n\n    if (this.events.isEnabled(\"removed\")) {\n      $array.each(oldArray, function (x) {\n        _this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: _this,\n          oldValue: x\n        });\n      });\n    }\n    if (this.events.isEnabled(\"inserted\")) {\n      $array.each(this._values, function (x) {\n        _this.events.dispatchImmediately(\"inserted\", {\n          type: \"inserted\",\n          target: _this,\n          newValue: x\n        });\n      });\n    }\n  };\n  /**\r\n   * Removes all items from the list.\r\n   */\n  List.prototype.clear = function () {\n    this.setAll([]);\n  };\n  /**\r\n   * Returns a list iterator.\r\n   *\r\n   * @return Iterator\r\n   */\n  List.prototype.iterator = function () {\n    return $iter.fromArray(this._values);\n  };\n  /**\r\n   * Returns an ES6 iterator for the list.\r\n   */\n  List.prototype[Symbol.iterator] = function () {\n    var length, i;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          length = this._values.length;\n          i = 0;\n          _a.label = 1;\n        case 1:\n          if (!(i < length)) return [3 /*break*/, 4];\n          return [4 /*yield*/, this._values[i]];\n        case 2:\n          _a.sent();\n          _a.label = 3;\n        case 3:\n          ++i;\n          return [3 /*break*/, 1];\n        case 4:\n          return [2 /*return*/];\n      }\n    });\n  };\n  /**\r\n   * Calls `f` for each element in the list.\r\n   *\r\n   * `f` should have at least one parameter defined which will get a current\r\n   * item, with optional second argument - index.\r\n   */\n  List.prototype.each = function (f) {\n    $array.each(this._values, f);\n  };\n  /**\r\n   * Returns a specific range of list items, which can be iterated.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Code duplication with IndexedIterable\r\n   * @param start  Start index\r\n   * @param end    End index\r\n   * @return Range\r\n   */\n  List.prototype.range = function (start, end) {\n    if (start <= end) {\n      var diff = end - start;\n      start = Math.max(start, 0);\n      end = Math.min(start + diff, this._values.length);\n      return new IndexedIterable(this._values, start, end);\n    } else {\n      throw new Error(\"Start index must be lower than end index\");\n    }\n  };\n  /**\r\n   * Returns an iterator that has list items sorted backwards.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return List\r\n   */\n  List.prototype.backwards = function () {\n    return new IndexedIterable(this._values, this._values.length, 0);\n  };\n  return List;\n}();\nexport { List };\n/**\r\n * A version of a [[List]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\nvar ListTemplate = /** @class */function (_super) {\n  __extends(ListTemplate, _super);\n  /**\r\n   * Constructor\r\n   *\r\n   * @param t Template object\r\n   */\n  function ListTemplate(t) {\n    var _this = _super.call(this) || this;\n    _this.template = t;\n    return _this;\n  }\n  Object.defineProperty(ListTemplate.prototype, \"template\", {\n    /**\r\n     * @return Template object\r\n     */\n    get: function () {\n      return this._template;\n    },\n    /**\r\n     * A \"template\" object to copy all properties from when creating new list\r\n     * items.\r\n     *\r\n     * @param v  Template object\r\n     */\n    set: function (v) {\n      v.isTemplate = true;\n      this._template = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all elements from other list.\r\n   *\r\n   * @param source  Source list\r\n   */\n  ListTemplate.prototype.copyFrom = function (source) {\n    var _this = this;\n    $iter.each(source.iterator(), function (value) {\n      _this.push(value.clone());\n    });\n  };\n  ListTemplate.prototype.create = function (make) {\n    var clone = make != null ? new make() : this.template.clone();\n    this.push(clone);\n    return clone;\n  };\n  /**\r\n   * Creates an exact clone of the list, including its items and template.\r\n   *\r\n   * @return New list\r\n   */\n  ListTemplate.prototype.clone = function () {\n    var out = new ListTemplate(this.template);\n    var values = this.values;\n    var length = values.length;\n    for (var i = 0; i < length; ++i) {\n      out.push(values[i].clone());\n    }\n    return out;\n  };\n  return ListTemplate;\n}(List);\nexport { ListTemplate };","map":{"version":3,"mappings":"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","names":["Disposer","MultiDisposer","EventDispatcher","$array","$iter","array","start","end","_array","_start","_end","IndexedIterable","push","_this","i","diff","Math","max","min","Error","__extends","list","getKey","sort","_super","events","on","x","value","newValue","key","_getKey","index","eachContinue","iterator","_insert","undefined","_remove","oldValue","_sort","each","ListGrouper","_groups","found","index_1","insertIndex","_keys","values","remove","length","removeIndex","flatten","map","fromArray","disposeOnRemove","disposer_1","dispose","checkBounds","len","initial","_values","Object","List","indexOf","isEnabled","dispatchImmediately","type","target","low","high","order","p","_sortPartition","_sortQuicksort","pivot","j","swap","a","b","value_a","value_b","toIndex","source","pushAll","newArray","oldArray","copy","setAll","Symbol","_a","f","t","template","ListTemplate","_template","v","isTemplate","clone","make","out"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\core\\utils\\List.ts"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IClone } from \"./Clone\";\r\nimport { Disposer, MultiDisposer, IDisposer } from \"./Disposer\";\r\nimport { EventDispatcher, AMEvent } from \"./EventDispatcher\";\r\nimport { Ordering } from \"./Order\";\r\nimport * as $array from \"./Array\";\r\nimport * as $iter from \"./Iterator\";\r\nimport * as $type from \"./Type\";\r\n\r\n/**\r\n * @todo Description\r\n */\r\nexport class IndexedIterable<A> {\r\n\r\n\t/**\r\n\t * Item list\r\n\t */\r\n\tprivate _array: Array<A>;\r\n\r\n\t/**\r\n\t * Start index.\r\n\t */\r\n\tprivate _start: number;\r\n\r\n\t/**\r\n\t * End index.\r\n\t */\r\n\tprivate _end: number;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param array  List items\r\n\t * @param start  Start index\r\n\t * @param end    End index\r\n\t */\r\n\tconstructor(array: Array<A>, start: number, end: number) {\r\n\t\tthis._array = array;\r\n\t\tthis._start = start;\r\n\t\tthis._end = end;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a list item iterator.\r\n\t *\r\n\t * @return Iterator\r\n\t */\r\n\tpublic iterator(): $iter.Iterator<A> {\r\n\t\treturn (push) => {\r\n\t\t\tif (this._start !== this._end) {\r\n\t\t\t\tif (this._start < this._end) {\r\n\t\t\t\t\tfor (let i = this._start; i < this._end; ++i) {\r\n\t\t\t\t\t\tif (!push(this._array[i])) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor (let i = this._start - 1; i >= this._end; --i) {\r\n\t\t\t\t\t\tif (!push(this._array[i])) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an interable list sorted backwards than current list.\r\n\t *\r\n\t * @return List\r\n\t */\r\n\tpublic backwards(): IndexedIterable<A> {\r\n\t\treturn new IndexedIterable(this._array, this._end, this._start);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new list consisting only of specific range of items between\r\n\t * `start` and `end` indexes.\r\n\t *\r\n\t * @param start  Start index\r\n\t * @param end    End index\r\n\t * @return List\r\n\t */\r\n\tpublic range(start: number, end: number): IndexedIterable<A> {\r\n\t\tif (start <= end) {\r\n\t\t\tif (this._start === this._end) {\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t} else if (this._start < this._end) {\r\n\t\t\t\tconst diff = end - start;\r\n\r\n\t\t\t\tstart = Math.max(this._start + start, this._start);\r\n\t\t\t\tend = Math.min(start + diff, this._end);\r\n\r\n\t\t\t\treturn new IndexedIterable(this._array, start, end);\r\n\r\n\t\t\t} else {\r\n\t\t\t\tconst diff = end - start;\r\n\r\n\t\t\t\tstart = Math.max(this._start - start, this._end);\r\n\t\t\t\tend = Math.max(start - diff, this._end);\r\n\r\n\t\t\t\treturn new IndexedIterable(this._array, start, end);\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Start index must be lower than end index\");\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Defines events for the [[List]].\r\n */\r\nexport interface IListEvents<A> {\r\n\t/**\r\n\t * Invoked when item is added to the list.\r\n\t *\r\n\t * @todo remove this later?\r\n\t */\r\n\tinserted: {\r\n\t\tnewValue: A;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when item is removed from the list.\r\n\t *\r\n\t * @todo remove this later?\r\n\t */\r\n\tremoved: {\r\n\t\toldValue: A;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when `setAll` method is called.\r\n\t */\r\n\tsetAll: {\r\n\t\toldArray: Array<A>;\r\n\t\tnewArray: Array<A>;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when `insertIndex` method is called.\r\n\t */\r\n\tinsertIndex: {\r\n\t\tindex: number;\r\n\t\tnewValue: A;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when `setIndex` method is called.\r\n\t */\r\n\tsetIndex: {\r\n\t\tindex: number;\r\n\t\toldValue: A;\r\n\t\tnewValue: A;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when item is removed.\r\n\t */\r\n\tremoveIndex: {\r\n\t\tindex: number;\r\n\t\toldValue: A;\r\n\t};\r\n\r\n}\r\n\r\n/**\r\n * ListGrouper organizes [[List]] items into groups.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport class ListGrouper<A> extends MultiDisposer {\r\n\r\n\t/**\r\n\t * Function that can be used to extract a \"value\" of the list element.\r\n\t *\r\n\t * Used for ordering.\r\n\t */\r\n\tprivate _getKey: (value: A) => number;\r\n\r\n\t/**\r\n\t * A function that  is used to order list groups.\r\n\t */\r\n\tprivate _sort: (left: number, right: number) => Ordering;\r\n\r\n\t/**\r\n\t * Grouping keys.\r\n\t */\r\n\tprivate _keys: Array<number> = [];\r\n\r\n\t/**\r\n\t * List item groups.\r\n\t */\r\n\tprivate _groups: { [key: number]: Array<A> } = {};\r\n\r\n\t/**\r\n\t * Inserts an item (`x`) to a specific group (`key`) and specific `index`.\r\n\t *\r\n\t * @param x      Item\r\n\t * @param key    Group name\r\n\t * @param index  Index\r\n\t */\r\n\tprivate _insert(x: A, key: number, index?: number): void {\r\n\t\tif (this._groups[key] == null) {\r\n\t\t\tthis._groups[key] = [];\r\n\r\n\t\t\t// TODO code duplication with SortedList\r\n\t\t\tconst { found, index } = $array.getSortedIndex(this._keys, this._sort, key);\r\n\r\n\t\t\tif (found) {\r\n\t\t\t\tthrow new Error(\"Key already exists: \" + key);\r\n\r\n\t\t\t} else {\r\n\t\t\t\t$array.insertIndex(this._keys, index, key);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (index == null) {\r\n\t\t\tthis._groups[key].push(x);\r\n\r\n\t\t} else {\r\n\t\t\t$array.insertIndex(this._groups[key], index, x);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes an item from the list.\r\n\t *\r\n\t * @param x Item to remove\r\n\t */\r\n\tprivate _remove(x: A): void {\r\n\t\tconst key = this._getKey(x);\r\n\r\n\t\tconst values = this._groups[key];\r\n\r\n\t\tif (values != null) {\r\n\t\t\t$array.remove(values, x);\r\n\r\n\t\t\tif (values.length === 0) {\r\n\t\t\t\tdelete this._groups[key];\r\n\r\n\t\t\t\tconst { found, index } = $array.getSortedIndex(this._keys, this._sort, key);\r\n\r\n\t\t\t\tif (found) {\r\n\t\t\t\t\t$array.removeIndex(this._keys, index);\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(\"Key doesn't exist: \" + key);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t */\r\n\tconstructor(\r\n\t\tlist: $iter.Iterable<A> & {\r\n\t\t\tevents: EventDispatcher<{\r\n\t\t\t\tinserted: { newValue: A },\r\n\t\t\t\tremoved: { oldValue: A }\r\n\t\t\t}>;\r\n\t\t},\r\n\t\tgetKey: (value: A) => number,\r\n\t\tsort: (left: number, right: number) => Ordering\r\n\t) {\r\n\t\tsuper([\r\n\t\t\tlist.events.on(\"inserted\", (x) => {\r\n\t\t\t\tconst value = x.newValue;\r\n\t\t\t\tconst key = this._getKey(value);\r\n\r\n\t\t\t\tlet index = 0;\r\n\r\n\t\t\t\t$iter.eachContinue(list.iterator(), (x) => {\r\n\t\t\t\t\tif (x === value) {\r\n\t\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t\t} else if (this._getKey(x) === key) {\r\n\t\t\t\t\t\t++index;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis._insert(value, key, index);\r\n\t\t\t}, undefined, false),\r\n\r\n\t\t\tlist.events.on(\"removed\", (x) => {\r\n\t\t\t\tthis._remove(x.oldValue);\r\n\t\t\t}, undefined, false)\r\n\t\t]);\r\n\r\n\t\tthis._getKey = getKey;\r\n\t\tthis._sort = sort;\r\n\r\n\t\t$iter.each(list.iterator(), (x) => {\r\n\t\t\tthis._insert(x, getKey(x));\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an iterator for the list.\r\n\t *\r\n\t * The iterator will iterate through all items in all groups.\r\n\t *\r\n\t * @return Iterator\r\n\t */\r\n\tpublic iterator(): $iter.Iterator<A> {\r\n\t\treturn $iter.flatten($iter.map($iter.fromArray(this._keys), (key) => {\r\n\t\t\treturn $iter.fromArray(this._groups[key]);\r\n\t\t}));\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * @todo Description\r\n * @ignore Exclude from docs\r\n */\r\nexport type ListLike<A> = $iter.Iterable<A> & {\r\n\tevents: EventDispatcher<{ removed: { oldValue: A } }>;\r\n};\r\n\r\n/**\r\n * A disposable list, which when disposed itself will call `dispose()` method\r\n * on all its items.\r\n */\r\nexport class ListDisposer<A extends IDisposer> extends Disposer {\r\n\tconstructor(list: ListLike<A>, disposeOnRemove: boolean = true) {\r\n\t\tif (disposeOnRemove) {\r\n\t\t\tconst disposer = list.events.on(\"removed\", (x) => {\r\n\t\t\t\tx.oldValue.dispose();\r\n\t\t\t}, undefined, false);\r\n\r\n\t\t\tsuper(() => {\r\n\t\t\t\tdisposer.dispose();\r\n\r\n\t\t\t\t// TODO clear the list ?\r\n\t\t\t\t$iter.each(list.iterator(), (x) => {\r\n\t\t\t\t\tx.dispose();\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t} else {\r\n\t\t\tsuper(() => {\r\n\t\t\t\t// TODO clear the list ?\r\n\t\t\t\t$iter.each(list.iterator(), (x) => {\r\n\t\t\t\t\tx.dispose();\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Checks if specific index fits into length.\r\n *\r\n * @param index  Index\r\n * @param len    Length\r\n */\r\nfunction checkBounds(index: number, len: number): void {\r\n\tif (!(index >= 0 && index < len)) {\r\n\t\tthrow new Error(\"Index out of bounds: \" + index);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * A List class is used to hold a number of indexed items of the same type.\r\n */\r\nexport class List<T> {\r\n\r\n\t/**\r\n\t * List values.\r\n\t */\r\n\tprivate _values: Array<T>;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t */\r\n\tpublic events: EventDispatcher<AMEvent<this, IListEvents<T>>> = new EventDispatcher();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @param initial  Inital list of values to add to list\r\n\t */\r\n\tconstructor(initial: Array<T> = []) {\r\n\t\tthis._values = initial;\r\n\t}\r\n\r\n\t/**\r\n\t * An array of values in the list.\r\n\t *\r\n\t * Do not use this property to add values. Rather use dedicated methods, like\r\n\t * `push()`, `removeIndex()`, etc.\r\n\t *\r\n\t * @readonly\r\n\t * @return List values\r\n\t */\r\n\tpublic get values(): Array<T> {\r\n\t\treturn this._values;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if list contains specific item reference.\r\n\t *\r\n\t * @param item  Item to search for\r\n\t * @return `true` if found, `false` if not found\r\n\t */\r\n\tpublic contains(value: T): boolean {\r\n\t\treturn this._values.indexOf(value) !== -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes specific item from the list.\r\n\t *\r\n\t * @param item An item to remove\r\n\t */\r\n\tpublic removeValue(value: T): void {\r\n\t\tlet i = 0;\r\n\t\tlet length = this._values.length;\r\n\r\n\t\twhile (i < length) {\r\n\t\t\t// TODO handle NaN\r\n\t\t\tif (this._values[i] === value) {\r\n\t\t\t\tthis.removeIndex(i);\r\n\t\t\t\t--length;\r\n\r\n\t\t\t} else {\r\n\t\t\t\t++i;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Searches the list for specific item and returns its index.\r\n\t *\r\n\t * @param item  An item to search for\r\n\t * @return Index or -1 if not found\r\n\t */\r\n\tpublic indexOf(value: T): number {\r\n\t\treturn $array.indexOf(this._values, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Number of items in list.\r\n\t *\r\n\t * @readonly\r\n\t * @return Number of items\r\n\t */\r\n\tpublic get length(): number {\r\n\t\treturn this._values.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if there's a value at specific index.\r\n\t *\r\n\t * @param index  Index\r\n\t * @return Value exists?\r\n\t */\r\n\tpublic hasIndex(index: number): boolean {\r\n\t\treturn index >= 0 && index < this._values.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an item at specified index.\r\n\t *\r\n\t * @param index  Index\r\n\t * @return List item\r\n\t */\r\n\tpublic getIndex(index: number): T | undefined {\r\n\t\treturn this._values[index];\r\n\t}\r\n\r\n\t/**\r\n\t * Sets value at specific index.\r\n\t *\r\n\t * If there's already a value at the index, it is overwritten.\r\n\t *\r\n\t * @param index  Index\r\n\t * @param value  New value\r\n\t * @return New value\r\n\t */\r\n\tpublic setIndex(index: number, value: T): T {\r\n\t\tcheckBounds(index, this._values.length);\r\n\r\n\t\tconst oldValue = this._values[index];\r\n\r\n\t\t// Do nothing if the old value and the new value are the same\r\n\t\tif (oldValue !== value) {\r\n\t\t\tthis._values[index] = value;\r\n\r\n\t\t\tif (this.events.isEnabled(\"setIndex\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"setIndex\", {\r\n\t\t\t\t\ttype: \"setIndex\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tindex: index,\r\n\t\t\t\t\toldValue: oldValue,\r\n\t\t\t\t\tnewValue: value\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\t\ttype: \"removed\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\toldValue: oldValue\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this.events.isEnabled(\"inserted\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"inserted\", {\r\n\t\t\t\t\ttype: \"inserted\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tnewValue: value\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn oldValue;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an item to the list at a specific index, which pushes all the other\r\n\t * items further down the list.\r\n\t *\r\n\t * @param index Index\r\n\t * @param item  An item to add\r\n\t */\r\n\tpublic insertIndex(index: number, value: T): void {\r\n\t\tcheckBounds(index, this._values.length + 1);\r\n\r\n\t\t$array.insertIndex(this._values, index, value);\r\n\r\n\t\tif (this.events.isEnabled(\"insertIndex\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"insertIndex\", {\r\n\t\t\t\ttype: \"insertIndex\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tindex: index,\r\n\t\t\t\tnewValue: value\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this.events.isEnabled(\"inserted\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"inserted\", {\r\n\t\t\t\ttype: \"inserted\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tnewValue: value\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [_sortQuicksort description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param low    [description]\r\n\t * @param high   [description]\r\n\t * @param order  [description]\r\n\t */\r\n\tprivate _sortQuicksort(low: number, high: number, order: (left: T, right: T) => Ordering): void {\r\n\t\tif (low < high) {\r\n\t\t\tconst p = this._sortPartition(low, high, order);\r\n\t\t\tthis._sortQuicksort(low, p, order);\r\n\t\t\tthis._sortQuicksort(p + 1, high, order);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [_sortPartition description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param low    [description]\r\n\t * @param high   [description]\r\n\t * @param order  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprivate _sortPartition(low: number, high: number, order: (left: T, right: T) => Ordering): number {\r\n\t\tconst values = this._values;\r\n\t\tconst pivot = values[low];\r\n\r\n\t\tlet i = low - 1;\r\n\t\tlet j = high + 1;\r\n\r\n\t\tfor (; ;) {\r\n\t\t\tdo {\r\n\t\t\t\t++i;\r\n\t\t\t} while (order(values[i], pivot) < 0);\r\n\r\n\t\t\tdo {\r\n\t\t\t\t--j;\r\n\t\t\t} while (order(values[j], pivot) > 0);\r\n\r\n\t\t\tif (i >= j) {\r\n\t\t\t\treturn j;\r\n\r\n\t\t\t} else {\r\n\t\t\t\tthis.swap(i, j);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Reorders list items according to specific ordering function.\r\n\t *\r\n\t * @param order  Ordering function\r\n\t */\r\n\tpublic sort(order: (left: T, right: T) => Ordering): void {\r\n\t\t// https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\r\n\t\t// @todo faster implementation of this\r\n\t\t// @todo test this\r\n\t\tthis._sortQuicksort(0, this._values.length - 1, order);\r\n\t}\r\n\r\n\t/**\r\n\t * Swaps indexes of two items in the list.\r\n\t *\r\n\t * @param a  Item 1\r\n\t * @param b  Item 2\r\n\t */\r\n\tpublic swap(a: number, b: number): void {\r\n\t\tconst len = this._values.length;\r\n\r\n\t\tcheckBounds(a, len);\r\n\t\tcheckBounds(b, len);\r\n\r\n\t\tif (a !== b) {\r\n\t\t\tconst value_a = this._values[a];\r\n\t\t\tconst value_b = this._values[b];\r\n\r\n\t\t\tthis._values[a] = value_b;\r\n\r\n\t\t\tif (this.events.isEnabled(\"setIndex\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"setIndex\", {\r\n\t\t\t\t\ttype: \"setIndex\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tindex: a,\r\n\t\t\t\t\toldValue: value_a,\r\n\t\t\t\t\tnewValue: value_b\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._values[b] = value_a;\r\n\r\n\t\t\tif (this.events.isEnabled(\"setIndex\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"setIndex\", {\r\n\t\t\t\t\ttype: \"setIndex\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tindex: b,\r\n\t\t\t\t\toldValue: value_b,\r\n\t\t\t\t\tnewValue: value_a\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes a value at specific index.\r\n\t *\r\n\t * @param index  Index of value to remove\r\n\t * @return Removed value\r\n\t */\r\n\tpublic removeIndex(index: number): T {\r\n\t\tcheckBounds(index, this._values.length);\r\n\r\n\t\tconst oldValue = this._values[index];\r\n\r\n\t\t$array.removeIndex(this._values, index);\r\n\r\n\t\tif (this.events.isEnabled(\"removeIndex\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"removeIndex\", {\r\n\t\t\t\ttype: \"removeIndex\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tindex: index,\r\n\t\t\t\toldValue: oldValue\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\ttype: \"removed\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\toldValue: oldValue\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn oldValue;\r\n\t}\r\n\r\n\t/**\r\n\t * Moves an item to a specific index within the list.\r\n\t *\r\n\t * If the index is not specified it will move the item to the end of the\r\n\t * list.\r\n\t *\r\n\t * @param value  Item to move\r\n\t * @param index  Index to place item at\r\n\t */\r\n\tpublic moveValue(value: T, toIndex?: number): void {\r\n\t\t// TODO don't do anything if the desired index is the same as the current index\r\n\t\tlet index = this.indexOf(value);\r\n\r\n\t\t// TODO remove all old values rather than only the first ?\r\n\t\tif (index !== -1) {\r\n\t\t\tconst oldValue = this._values[index];\r\n\r\n\t\t\t$array.removeIndex(this._values, index);\r\n\r\n\t\t\tif (this.events.isEnabled(\"removeIndex\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"removeIndex\", {\r\n\t\t\t\t\ttype: \"removeIndex\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tindex: index,\r\n\t\t\t\t\toldValue: oldValue\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (toIndex == null) {\r\n\t\t\ttoIndex = this._values.length;\r\n\t\t\tthis._values.push(value);\r\n\r\n\t\t} else {\r\n\t\t\t$array.insertIndex(this._values, toIndex, value);\r\n\t\t}\r\n\r\n\t\tif (this.events.isEnabled(\"insertIndex\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"insertIndex\", {\r\n\t\t\t\ttype: \"insertIndex\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tindex: toIndex,\r\n\t\t\t\tnewValue: value\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (index === -1) {\r\n\t\t\tif (this.events.isEnabled(\"inserted\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"inserted\", {\r\n\t\t\t\t\ttype: \"inserted\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tnewValue: value\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an item to the end of the list.\r\n\t *\r\n\t * @param item  An item to add\r\n\t */\r\n\tpublic push<K extends T>(value: K): K {\r\n\t\tconst index = this._values.push(value) - 1;\r\n\r\n\t\tif (this.events.isEnabled(\"insertIndex\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"insertIndex\", {\r\n\t\t\t\ttype: \"insertIndex\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tindex: index,\r\n\t\t\t\tnewValue: value\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this.events.isEnabled(\"inserted\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"inserted\", {\r\n\t\t\t\ttype: \"inserted\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tnewValue: value\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an item as a first item in the list.\r\n\t *\r\n\t * @param item  An item to add\r\n\t */\r\n\tpublic unshift(value: T): void {\r\n\t\tthis.insertIndex(0, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds multiple items to the list.\r\n\t *\r\n\t * @param items  An Array of items to add\r\n\t */\r\n\tpublic pushAll(values: Array<T>): void {\r\n\t\t$array.each(values, (value) => {\r\n\t\t\tthis.push(value);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies and adds items from abother list.\r\n\t *\r\n\t * @param source  A list top copy items from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tthis.pushAll(source._values);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the last item from the list, and removes it.\r\n\t *\r\n\t * @return Item\r\n\t */\r\n\tpublic pop(): $type.Optional<T> {\r\n\t\tlet index = this._values.length - 1;\r\n\t\treturn index < 0 ? undefined : this.removeIndex(this._values.length - 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the first item from the list, and removes it.\r\n\t *\r\n\t * @return Item\r\n\t */\r\n\tpublic shift(): $type.Optional<T> {\r\n\t\treturn this._values.length ? this.removeIndex(0) : undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets multiple items to the list.\r\n\t *\r\n\t * All current items are removed.\r\n\t *\r\n\t * @param newArray  New items\r\n\t */\r\n\tpublic setAll(newArray: Array<T>): void {\r\n\t\t// @tod if a value exists in both the new and old arrays, don't send remove/insert events\r\n\t\tconst oldArray = $array.copy(this._values);\r\n\r\n\t\tthis._values.length = 0;\r\n\r\n\t\t$array.each(newArray, (value) => {\r\n\t\t\tthis._values.push(value);\r\n\t\t});\r\n\r\n\t\tif (this.events.isEnabled(\"setAll\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"setAll\", {\r\n\t\t\t\ttype: \"setAll\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\toldArray: oldArray,\r\n\t\t\t\tnewArray: this._values // TODO make a copy ?\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\t$array.each(oldArray, (x) => {\r\n\t\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\t\ttype: \"removed\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\toldValue: x\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this.events.isEnabled(\"inserted\")) {\r\n\t\t\t$array.each(this._values, (x) => {\r\n\t\t\t\tthis.events.dispatchImmediately(\"inserted\", {\r\n\t\t\t\t\ttype: \"inserted\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tnewValue: x\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all items from the list.\r\n\t */\r\n\tpublic clear(): void {\r\n\t\tthis.setAll([]);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a list iterator.\r\n\t *\r\n\t * @return Iterator\r\n\t */\r\n\tpublic iterator(): $iter.Iterator<T> {\r\n\t\treturn $iter.fromArray(this._values);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an ES6 iterator for the list.\r\n\t */\r\n\tpublic *[Symbol.iterator](): Iterator<T> {\r\n\t\tconst length = this._values.length;\r\n\r\n\t\tfor (let i = 0; i < length; ++i) {\r\n\t\t\tyield this._values[i];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Calls `f` for each element in the list.\r\n\t *\r\n\t * `f` should have at least one parameter defined which will get a current\r\n\t * item, with optional second argument - index.\r\n\t */\r\n\tpublic each(f: (value: T, index: number) => void): void {\r\n\t\t$array.each(this._values, f);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a specific range of list items, which can be iterated.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Code duplication with IndexedIterable\r\n\t * @param start  Start index\r\n\t * @param end    End index\r\n\t * @return Range\r\n\t */\r\n\tpublic range(start: number, end: number): IndexedIterable<T> {\r\n\t\tif (start <= end) {\r\n\t\t\tconst diff = end - start;\r\n\r\n\t\t\tstart = Math.max(start, 0);\r\n\t\t\tend = Math.min(start + diff, this._values.length);\r\n\r\n\t\t\treturn new IndexedIterable(this._values, start, end);\r\n\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Start index must be lower than end index\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an iterator that has list items sorted backwards.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return List\r\n\t */\r\n\tpublic backwards(): IndexedIterable<T> {\r\n\t\treturn new IndexedIterable(this._values, this._values.length, 0);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A version of a [[List]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\r\nexport class ListTemplate<T extends IClone<T> & { isTemplate: boolean }> extends List<T> implements IClone<ListTemplate<T>> {\r\n\t/**\r\n\t * A template object.\r\n\t *\r\n\t * @todo Make this private\r\n\t */\r\n\tpublic _template!: T;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @param t Template object\r\n\t */\r\n\tpublic constructor(t: T) {\r\n\t\tsuper();\r\n\t\tthis.template = t;\r\n\t}\r\n\r\n\t/**\r\n\t * A \"template\" object to copy all properties from when creating new list\r\n\t * items.\r\n\t *\r\n\t * @param v  Template object\r\n\t */\r\n\tpublic set template(v: T) {\r\n\t\tv.isTemplate = true;\r\n\t\tthis._template = v;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Template object\r\n\t */\r\n\tpublic get template(): T {\r\n\t\treturn this._template;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all elements from other list.\r\n\t *\r\n\t * @param source  Source list\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\t$iter.each(source.iterator(), (value) => {\r\n\t\t\tthis.push(value.clone());\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Instantiates a new object of the specified type, adds it to the end of\r\n\t * the list, and returns it.\r\n\t *\r\n\t * @param make  Item type to use. Will use the default type for the list if not specified.\r\n\t * @return      Newly created item\r\n\t */\r\n\tpublic create(make: { new(): T; }): T;\r\n\tpublic create(): T;\r\n\tpublic create(make?: { new(): T; }): T {\r\n\t\tconst clone =\r\n\t\t\t(make != null\r\n\t\t\t\t? new make()\r\n\t\t\t\t: this.template.clone());\r\n\r\n\t\tthis.push(clone);\r\n\r\n\t\treturn clone;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an exact clone of the list, including its items and template.\r\n\t *\r\n\t * @return New list\r\n\t */\r\n\tpublic clone(): ListTemplate<T> {\r\n\t\tconst out = new ListTemplate(this.template);\r\n\r\n\t\tconst values = this.values;\r\n\r\n\t\tconst length = values.length;\r\n\r\n\t\tfor (let i = 0; i < length; ++i) {\r\n\t\t\tout.push(values[i].clone());\r\n\t\t}\r\n\r\n\t\treturn out;\r\n\t}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}