{"ast":null,"code":"/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { AxisRendererY } from \"./AxisRendererY\";\nimport { CategoryAxis } from \"./CategoryAxis\";\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\nimport { Percent, percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\nimport { AxisBullet } from \"./AxisBullet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * A renderer for radial axis.\r\n */\nvar AxisRendererRadial = /** @class */function (_super) {\n  __extends(AxisRendererRadial, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Related axis\r\n   */\n  function AxisRendererRadial() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * A related chart.\r\n     */\n    _this._chart = new MutableValueDisposer();\n    /**\r\n     * @ignore\r\n     */\n    _this.pixelRadiusReal = 0;\n    _this.className = \"AxisRendererRadial\";\n    _this.isMeasured = false;\n    _this.startAngle = -90;\n    _this.endAngle = 270;\n    _this.minGridDistance = 30;\n    _this.gridType = \"circles\";\n    _this.axisAngle = -90;\n    _this.isMeasured = false;\n    _this.layout = \"none\";\n    _this.radius = percent(100);\n    _this.line.strokeOpacity = 0;\n    _this.labels.template.horizontalCenter = \"middle\";\n    _this._disposers.push(_this._chart);\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Validates Axis renderer.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRendererRadial.prototype.validate = function () {\n    // so that radius would be updated\n    if (this.chart && this.chart.invalid) {\n      this.chart.validate();\n    }\n    _super.prototype.validate.call(this);\n  };\n  Object.defineProperty(AxisRendererRadial.prototype, \"axisLength\", {\n    /**\r\n     * Returns actual length of the Axis, in pixels.\r\n     *\r\n     * @return Length (px)\r\n     */\n    get: function () {\n      return this.pixelRadius - this.pixelInnerRadius;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererRadial.prototype, \"radius\", {\n    /**\r\n     * @return Outer radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n    /**\r\n     * Outer radius of the axis.\r\n     *\r\n     * Can be absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"radius\", value, false, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererRadial.prototype, \"pixelRadius\", {\n    /**\r\n     * Outer radius in pixels.\r\n     *\r\n     * @return Outer radius (px)\r\n     */\n    get: function () {\n      return $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererRadial.prototype, \"innerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function () {\n      var chart = this.chart;\n      var innerRadius = this.getPropertyValue(\"innerRadius\");\n      if (chart) {\n        if (!$type.hasValue(innerRadius)) {\n          innerRadius = chart.innerRadius;\n          if (innerRadius instanceof Percent && chart) {\n            innerRadius = percent(innerRadius.value * chart.innerRadiusModifyer * 100);\n          }\n        } else {\n          if (innerRadius instanceof Percent && chart) {\n            var mr = chart.mr;\n            var value = innerRadius.value;\n            value = Math.max(mr * value, mr - Math.min(chart.plotContainer.innerHeight, chart.plotContainer.innerWidth)) / mr;\n            innerRadius = percent(value * 100);\n          }\n        }\n      }\n      return innerRadius;\n    },\n    /**\r\n     * Inner radius of the axis.\r\n     *\r\n     * Can be absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererRadial.prototype, \"pixelInnerRadius\", {\n    /**\r\n     * Inner radius in pixels.\r\n     *\r\n     * @return Inner radius (px)\r\n     */\n    get: function () {\n      return $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position on axis to point coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @param position2  Position (0-1) Position on the second axis\r\n   * @return Point\r\n   */\n  AxisRendererRadial.prototype.positionToPoint = function (position, position2) {\n    var radius = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\n    return {\n      x: radius * $math.cos(this.axisAngle),\n      y: radius * $math.sin(this.axisAngle)\n    };\n  };\n  /**\r\n   * Updates and positions the axis line element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRendererRadial.prototype.updateAxisLine = function () {\n    this.line.path = $path.moveTo({\n      x: this.pixelInnerRadius * $math.cos(this.axisAngle),\n      y: this.pixelInnerRadius * $math.sin(this.axisAngle)\n    }) + $path.lineTo({\n      x: this.pixelRadius * $math.cos(this.axisAngle),\n      y: this.pixelRadius * $math.sin(this.axisAngle)\n    });\n    var title = this.axis.title;\n    title.valign = \"none\";\n    title.horizontalCenter = \"middle\";\n    title.verticalCenter = \"bottom\";\n    title.y = -this.axisLength / 2;\n    var rotation = 90;\n    if (this.opposite) {\n      if (!this.inside) {\n        rotation = -90;\n      }\n    } else {\n      if (this.inside) {\n        rotation = -90;\n      }\n    }\n    title.rotation = rotation;\n  };\n  /**\r\n   * Updates and positions a grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param grid         Grid element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n  AxisRendererRadial.prototype.updateGridElement = function (grid, position, endPosition) {\n    position = position + (endPosition - position) * grid.location;\n    var point = this.positionToPoint(position);\n    var path;\n    var radius = $math.getDistance(point);\n    var startAngle = this.startAngle;\n    var endAngle = this.endAngle;\n    var chart = this.chart;\n    if ($type.isNumber(radius) && grid.element && chart) {\n      var xAxis = chart.xAxes.getIndex(0);\n      var count = 0;\n      var series = chart.series.getIndex(0);\n      if (series) {\n        count = series.dataItems.length;\n      }\n      // polygons are only possible if x axis is present\n      // @todo: review this\n      if (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\n        var gridLocation = xAxis.renderer.grid.template.location;\n        var angle = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\n        path = $path.moveTo({\n          x: radius * $math.cos(angle),\n          y: radius * $math.sin(angle)\n        });\n        for (var i = 1; i < count; i++) {\n          angle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\n          path += $path.lineTo({\n            x: radius * $math.cos(angle),\n            y: radius * $math.sin(angle)\n          });\n        }\n        angle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\n        path += $path.lineTo({\n          x: radius * $math.cos(angle),\n          y: radius * $math.sin(angle)\n        });\n      } else {\n        path = $path.moveTo({\n          x: radius * $math.cos(startAngle),\n          y: radius * $math.sin(startAngle)\n        }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\n      }\n      grid.path = path;\n    }\n    this.toggleVisibility(grid, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions a label element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param label        Label element\r\n   * @param position     Starting position\r\n   * @param endPosition  Ending position\r\n   */\n  AxisRendererRadial.prototype.updateLabelElement = function (label, position, endPosition, location) {\n    if (!$type.hasValue(location)) {\n      location = label.location;\n    }\n    position = position + (endPosition - position) * location;\n    var point = this.positionToPoint(position);\n    this.positionItem(label, point);\n    this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\n  };\n  /**\r\n   * Updates and positions the base grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRendererRadial.prototype.updateBaseGridElement = function () {\n    // @todo? zero grid for radar chart, is it needed?\n  };\n  /**\r\n   * Checks if point is within bounds of a container.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param point Point coordinates\r\n   * @return Fits?\r\n   */\n  AxisRendererRadial.prototype.fitsToBounds = function (point) {\n    return true;\n  };\n  Object.defineProperty(AxisRendererRadial.prototype, \"startAngle\", {\n    /**\r\n     * @return Start angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startAngle\");\n    },\n    /**\r\n     * Start angle of the axis in degrees. (0-360)\r\n     *\r\n     * @param value  Start angle\r\n     */\n    set: function (value) {\n      // do not normalize angle here!\n      if (this.setPropertyValue(\"startAngle\", value)) {\n        this.invalidateAxisItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererRadial.prototype, \"endAngle\", {\n    /**\r\n     * @return End angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endAngle\");\n    },\n    /**\r\n     * End angle of the axis in degrees. (0-360)\r\n     *\r\n     * @param value  End angle\r\n     */\n    set: function (value) {\n      // do not normalize angel here!\n      if (this.setPropertyValue(\"endAngle\", value)) {\n        this.invalidateAxisItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererRadial.prototype, \"axisAngle\", {\n    /**\r\n     * @return Axis angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"axisAngle\");\n      //return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\n    },\n\n    /**\r\n     * Angle of the radial axis in degrees. (0-360)\r\n     *\r\n     * @param value  Axis angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\n      this.invalidateAxisItems();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererRadial.prototype, \"gridType\", {\n    /**\r\n     * Grid type\r\n     */\n    get: function () {\n      var axis = this.chart.xAxes.getIndex(0);\n      if (axis instanceof CategoryAxis) {\n        return this.getPropertyValue(\"gridType\");\n      } else {\n        return \"circles\";\n      }\n    },\n    // polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\n    /**\r\n     * Grid type for radial axis.\r\n     *\r\n     * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n     * straight lines (\"polygons\").\r\n     *\r\n     * @default \"circles\"\r\n     * @param value  Grid type\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"gridType\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * [getPositionRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param startPosition  Starting position\r\n   * @param endPosition    End position\r\n   * @return SVG path\r\n   */\n  AxisRendererRadial.prototype.getPositionRangePath = function (startPosition, endPosition) {\n    var pixelInnerRadius = this.pixelInnerRadius;\n    var pixelRadius = this.axisLength + pixelInnerRadius;\n    var innerRadius = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\n    var radius = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\n    //let angleCount: number = this.angleCount;\n    var startAngle = this.startAngle;\n    var endAngle = this.endAngle;\n    var arc = endAngle - startAngle;\n    var path;\n    var chart = this.chart;\n    var xAxis = chart.xAxes.getIndex(0);\n    var series = chart.series.getIndex(0);\n    var count = 0;\n    if (series) {\n      count = series.dataItems.length;\n    }\n    // polygons are only possible if x axis is present\n    // @todo: review this\n    if (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\n      var gridLocation = xAxis.renderer.grid.template.location;\n      var angle = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\n      path = $path.moveTo({\n        x: radius * $math.cos(angle),\n        y: radius * $math.sin(angle)\n      });\n      for (var i = 1; i < count; i++) {\n        angle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\n        path += $path.lineTo({\n          x: radius * $math.cos(angle),\n          y: radius * $math.sin(angle)\n        });\n      }\n      angle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\n      path += $path.lineTo({\n        x: radius * $math.cos(angle),\n        y: radius * $math.sin(angle)\n      });\n      path += $path.moveTo({\n        x: innerRadius * $math.cos(angle),\n        y: innerRadius * $math.sin(angle)\n      });\n      for (var i = count - 1; i >= 0; i--) {\n        angle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\n        path += $path.lineTo({\n          x: innerRadius * $math.cos(angle),\n          y: innerRadius * $math.sin(angle)\n        });\n      }\n    } else {\n      path = $path.arc(startAngle, arc, radius, innerRadius);\n    }\n    return path;\n  };\n  /**\r\n   * Updates and positions an axis break element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Break element\r\n   */\n  AxisRendererRadial.prototype.updateBreakElement = function (axisBreak) {\n    // @todo: someday we might need axis break when gridType is polygons\n    var startLine = axisBreak.startLine;\n    var endLine = axisBreak.endLine;\n    var fillShape = axisBreak.fillShape;\n    var startPoint = axisBreak.startPoint;\n    var endPoint = axisBreak.endPoint;\n    startLine.radius = Math.abs(startPoint.y);\n    endLine.radius = Math.abs(endPoint.y);\n    fillShape.radius = Math.abs(endPoint.y);\n    fillShape.innerRadius = Math.abs(startPoint.y);\n  };\n  /**\r\n   * Creates visual elements for and axis break.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Axis break\r\n   */\n  AxisRendererRadial.prototype.createBreakSprites = function (axisBreak) {\n    axisBreak.startLine = new WavedCircle();\n    axisBreak.endLine = new WavedCircle();\n    axisBreak.fillShape = new WavedCircle();\n  };\n  /**\r\n   * Updates some of the Axis tooltip's visual properties, related to\r\n   * rendering of the Axis.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRendererRadial.prototype.updateTooltip = function () {\n    var axis = this.axis;\n    if (axis) {\n      var bigNum = 4000;\n      var bbx = -4000;\n      var bby = -4000;\n      var bbw = bigNum * 2;\n      var bbh = bigNum * 2;\n      var axisAngle = this.axisAngle;\n      if (axisAngle < 0) {\n        axisAngle += 360;\n      }\n      var tooltipOrientation = \"vertical\";\n      if (axisAngle > 45 && axisAngle < 135 || axisAngle > 225 && axisAngle < 315) {\n        tooltipOrientation = \"horizontal\";\n      }\n      this.axis.updateTooltip(tooltipOrientation, {\n        x: bbx,\n        y: bby,\n        width: bbw,\n        height: bbh\n      });\n    }\n  };\n  /**\r\n   * Updates and positions a tick element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param tick      Tick element\r\n   * @param position  Position\r\n   */\n  AxisRendererRadial.prototype.updateTickElement = function (tick, position, endPosition) {\n    position = position + (endPosition - position) * tick.location;\n    var point = this.positionToPoint(position);\n    if (tick.element) {\n      var angle = $math.normalizeAngle(this.axisAngle + 90);\n      if (angle / 90 != Math.round(angle / 90)) {\n        tick.pixelPerfect = false;\n      } else {\n        tick.pixelPerfect = true;\n      }\n      var tickLength = -tick.length;\n      if (tick.inside) {\n        tickLength *= -1;\n      }\n      tick.path = $path.moveTo({\n        x: 0,\n        y: 0\n      }) + $path.lineTo({\n        x: tickLength * $math.cos(angle),\n        y: tickLength * $math.sin(angle)\n      });\n    }\n    this.positionItem(tick, point);\n    this.toggleVisibility(tick, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions axis bullet.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param bullet       AxisBullet element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n  AxisRendererRadial.prototype.updateBullet = function (bullet, position, endPosition) {\n    var location = 0.5;\n    if (bullet instanceof AxisBullet) {\n      location = bullet.location;\n    }\n    position = position + (endPosition - position) * location;\n    var point = this.positionToPoint(position);\n    this.positionItem(bullet, point);\n    this.toggleVisibility(bullet, position, 0, 1);\n  };\n  /**\r\n   * Converts a position on the axis to a coordinate in pixels.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position  Position (0-1)\r\n   * @return Coordinate (px)\r\n   */\n  AxisRendererRadial.prototype.positionToCoordinate = function (position) {\n    var coordinate;\n    var axis = this.axis;\n    var axisFullLength = axis.axisFullLength;\n    var innerRadius = this.pixelInnerRadius;\n    if (axis.renderer.inversed) {\n      coordinate = (axis.end - position) * axisFullLength + innerRadius;\n    } else {\n      coordinate = (position - axis.start) * axisFullLength + innerRadius;\n    }\n    return $math.round(coordinate, 1);\n  };\n  /**\r\n   * Converts a point at specific coordinates to a relative position (0-1)\r\n   * on the axis.\r\n   *\r\n   * @param point  Point\r\n   * @return Position (0-1)\r\n   */\n  AxisRendererRadial.prototype.pointToPosition = function (point) {\n    var coordinate = $math.getDistance(point) - this.pixelInnerRadius;\n    return this.coordinateToPosition(coordinate);\n  };\n  Object.defineProperty(AxisRendererRadial.prototype, \"chart\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Chart\r\n     */\n    get: function () {\n      return this._chart.get();\n    },\n    /**\r\n     * A chart, associated with the Axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Chart\r\n     */\n    set: function (value) {\n      this._chart.set(value, null);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return AxisRendererRadial;\n}(AxisRendererY);\nexport { AxisRendererRadial };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;","map":{"version":3,"mappings":"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","names":["AxisRendererY","CategoryAxis","WavedCircle","MutableValueDisposer","Percent","percent","registry","$math","$path","$utils","$type","AxisBullet","__extends","_super","_this","className","isMeasured","startAngle","endAngle","minGridDistance","gridType","axisAngle","layout","radius","line","strokeOpacity","labels","template","horizontalCenter","_disposers","push","_chart","applyTheme","AxisRendererRadial","chart","invalid","validate","Object","pixelRadius","pixelInnerRadius","getPropertyValue","value","setPercentProperty","relativeRadiusToValue","pixelRadiusReal","innerRadius","hasValue","innerRadiusModifyer","mr","Math","max","min","plotContainer","innerHeight","innerWidth","position","position2","fitToRange","positionToCoordinate","Infinity","x","cos","y","sin","path","moveTo","lineTo","title","axis","valign","verticalCenter","axisLength","rotation","opposite","inside","grid","endPosition","location","point","positionToPoint","getDistance","isNumber","element","xAxis","xAxes","getIndex","count","series","dataItems","length","gridLocation","renderer","angle","getAngle","i","cellEndLocation","arcTo","toggleVisibility","label","positionItem","minLabelPosition","maxLabelPosition","setPropertyValue","invalidateAxisItems","normalizeAngle","startPosition","arc","axisBreak","startLine","endLine","fillShape","startPoint","endPoint","abs","bigNum","bbx","bby","bbw","bbh","tooltipOrientation","updateTooltip","width","height","tick","round","pixelPerfect","tickLength","bullet","coordinate","axisFullLength","inversed","end","start","coordinateToPosition","get","set","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\axes\\AxisRendererRadial.ts"],"sourcesContent":["/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"./AxisRendererY\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialProperties extends IAxisRendererYProperties {\r\n\r\n\t/**\r\n\t * Start angle of the radial axis in degrees. (0-360)\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the radial axis in degrees. (0-360)\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * A grid type to display: \"circles\" or \"polygons\".\r\n\t *\r\n\t * @default \"circles\"\r\n\t */\r\n\tgridType?: \"circles\" | \"polygons\"; //@todo: move it to GridRadial?\r\n\r\n\t/**\r\n\t * An angle of the axis in degrees. (0-360)\r\n\t */\r\n\taxisAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * Outer radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererRadialAdapters extends IAxisRendererYAdapters, IAxisRendererRadialProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nexport class AxisRendererRadial extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererRadialProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererRadialAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererRadialEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<RadarChart>();\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _chartType: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererRadial\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\t\tthis.minGridDistance = 30;\r\n\t\tthis.gridType = \"circles\";\r\n\t\tthis.axisAngle = -90;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.pixelRadius - this.pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false)\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\tlet chart = this.chart;\r\n\t\tlet innerRadius = this.getPropertyValue(\"innerRadius\");\r\n\t\tif(chart){\r\n\t\t\tif (!$type.hasValue(innerRadius)) {\r\n\t\t\t\tinnerRadius = chart.innerRadius;\r\n\r\n\t\t\t\tif (innerRadius instanceof Percent && chart) {\r\n\t\t\t\t\tinnerRadius = percent(innerRadius.value * chart.innerRadiusModifyer * 100)\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (innerRadius instanceof Percent && chart) {\r\n\t\t\t\t\tlet mr = chart.mr;\r\n\t\t\t\t\tlet value = innerRadius.value;\r\n\t\t\t\t\tvalue = Math.max(mr * value, mr - Math.min(chart.plotContainer.innerHeight, chart.plotContainer.innerWidth)) / mr;\r\n\t\t\t\t\tinnerRadius = percent(value * 100);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn innerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @param position2  Position (0-1) Position on the second axis\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?: number): IPoint {\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n\t\treturn { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.path = $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) });\r\n\r\n\t\tlet title = this.axis.title;\r\n\t\ttitle.valign = \"none\";\r\n\t\ttitle.horizontalCenter = \"middle\";\r\n\t\ttitle.verticalCenter = \"bottom\";\r\n\t\ttitle.y = - this.axisLength / 2;\r\n\t\tlet rotation: number = 90;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttitle.rotation = rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet path: string;\r\n\t\tlet radius: number = $math.getDistance(point);\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet chart = this.chart;\r\n\r\n\t\tif ($type.isNumber(radius) && grid.element && chart) {\r\n\t\t\t\r\n\t\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\t\tlet count = 0;\r\n\r\n\t\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t\tif (series) {\r\n\t\t\t\tcount = series.dataItems.length;\r\n\t\t\t}\r\n\r\n\t\t\t// polygons are only possible if x axis is present\r\n\t\t\t// @todo: review this\r\n\t\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n\t\t\t}\r\n\t\t\tgrid.path = path;\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// @todo? zero grid for radar chart, is it needed?\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point Point coordinates\r\n\t * @return Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angle here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  Axis angle\r\n\t */\r\n\tpublic set axisAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis angle\r\n\t */\r\n\tpublic get axisAngle(): number {\r\n\t\treturn this.getPropertyValue(\"axisAngle\");\r\n\t\t//return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n\t}\r\n\r\n\t// polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n\r\n\t/**\r\n\t * Grid type for radial axis.\r\n\t *\r\n\t * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n\t * straight lines (\"polygons\").\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @param value  Grid type\r\n\t */\r\n\tpublic set gridType(value: \"circles\" | \"polygons\") {\r\n\t\tthis.setPropertyValue(\"gridType\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Grid type\r\n\t */\r\n\tpublic get gridType(): \"circles\" | \"polygons\" {\r\n\t\tlet axis: Axis = this.chart.xAxes.getIndex(0);\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\treturn this.getPropertyValue(\"gridType\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn \"circles\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet pixelInnerRadius = this.pixelInnerRadius;\r\n\t\tlet pixelRadius = this.axisLength + pixelInnerRadius;\r\n\t\tlet innerRadius: number = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n\r\n\t\t//let angleCount: number = this.angleCount;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\tlet path: string;\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\tlet count = 0;\r\n\t\tif (series) {\r\n\t\t\tcount = series.dataItems.length;\r\n\t\t}\r\n\r\n\t\t// polygons are only possible if x axis is present\r\n\t\t// @todo: review this\r\n\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\r\n\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\r\n\t\t\tfor (let i = count - 1; i >= 0; i--) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.arc(startAngle, arc, radius, innerRadius);\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\t// @todo: someday we might need axis break when gridType is polygons\r\n\r\n\t\tlet startLine: WavedCircle = <WavedCircle>axisBreak.startLine;\r\n\t\tlet endLine: WavedCircle = <WavedCircle>axisBreak.endLine;\r\n\t\tlet fillShape: WavedCircle = <WavedCircle>axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tstartLine.radius = Math.abs(startPoint.y);\r\n\t\tendLine.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.innerRadius = Math.abs(startPoint.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedCircle();\r\n\t\taxisBreak.endLine = new WavedCircle();\r\n\t\taxisBreak.fillShape = new WavedCircle();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 4000;\r\n\t\t\tlet bbx: number = -4000;\r\n\t\t\tlet bby: number = -4000;\r\n\t\t\tlet bbw: number = bigNum * 2;\r\n\t\t\tlet bbh: number = bigNum * 2;\r\n\t\t\tlet axisAngle: number = this.axisAngle;\r\n\t\t\tif (axisAngle < 0) {\r\n\t\t\t\taxisAngle += 360;\r\n\t\t\t}\r\n\t\t\tlet tooltipOrientation: PointerOrientation = \"vertical\";\r\n\t\t\tif ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n\t\t\t\ttooltipOrientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick      Tick element\r\n\t * @param position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet angle: number = $math.normalizeAngle(this.axisAngle + 90);\r\n\t\t\tif (angle / 90 != Math.round(angle / 90)) {\r\n\t\t\t\ttick.pixelPerfect = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.pixelPerfect = true;\r\n\t\t\t}\r\n\t\t\tlet tickLength = -tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength *= -1;\r\n\t\t\t}\r\n\t\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates and positions axis bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n\t\t}\r\n\r\n\t\treturn $math.round(coordinate, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\tlet coordinate = ($math.getDistance(point) - this.pixelInnerRadius);\r\n\t\treturn this.coordinateToPosition(coordinate);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: RadarChart) {\r\n\t\tthis._chart.set(value, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): RadarChart {\r\n\t\treturn this._chart.get();\r\n\t}\t\r\n\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}