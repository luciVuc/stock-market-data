{"ast":null,"code":"/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { ColumnSeries, ColumnSeriesDataItem } from \"./ColumnSeries\";\nimport { ConeColumn } from \"../elements/ConeColumn\";\nimport { registry } from \"../../core/Registry\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar ConeSeriesDataItem = /** @class */function (_super) {\n  __extends(ConeSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ConeSeriesDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"ConeSeriesDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return ConeSeriesDataItem;\n}(ColumnSeriesDataItem);\nexport { ConeSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\nvar ConeSeries = /** @class */function (_super) {\n  __extends(ConeSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ConeSeries() {\n    var _this = _super.call(this) || this;\n    _this.className = \"ConeSeries\";\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Returns an element to use for Candlestick\r\n   * @ignore\r\n   * @return Element.\r\n   */\n  ConeSeries.prototype.createColumnTemplate = function () {\n    return new ConeColumn();\n  };\n  /**\r\n   * Returns an SVG path to use as series mask.\r\n   *\r\n   * @return SVG path\r\n   */\n  ConeSeries.prototype.getMaskPath = function () {\n    var dx = 0;\n    var dy = 0;\n    var column = this.columns.getIndex(0);\n    if (column) {\n      if (this.baseAxis == this.xAxis) {\n        dy = column.coneColumn.innerWidth / 2 + 1;\n      } else {\n        dx = column.coneColumn.innerHeight / 2 + 1;\n      }\n      return $path.rectToPath({\n        x: -dx,\n        y: 0,\n        width: this.xAxis.axisLength + dx,\n        height: this.yAxis.axisLength + dy\n      });\n    }\n  };\n  /**\r\n   * Validates data item's elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n  ConeSeries.prototype.validateDataElementReal = function (dataItem) {\n    _super.prototype.validateDataElementReal.call(this, dataItem);\n    var column = dataItem.column;\n    if (column) {\n      var coneColumn = dataItem.column.coneColumn;\n      coneColumn.fill = dataItem.column.fill;\n      if (this.baseAxis == this.yAxis) {\n        coneColumn.orientation = \"horizontal\";\n      } else {\n        coneColumn.orientation = \"vertical\";\n      }\n    }\n  };\n  return ConeSeries;\n}(ColumnSeries);\nexport { ConeSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;","map":{"version":3,"mappings":"AAAA;;;;;AAKA;;;;;;AAMA,SAASA,YAAY,EAAgGC,oBAAoB,QAAQ,gBAAgB;AACjK,SAASC,UAAU,QAAQ,wBAAwB;AACnD,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,OAAO,KAAKC,KAAK,MAAM,2BAA2B;AAGlD;;;;;;AAOA;;;;;AAKA;EAAwCC;EAavC;;;EAGA;IAAA,YACCC,iBAAO;IACPC,KAAI,CAACC,SAAS,GAAG,oBAAoB;IACrCD,KAAI,CAACE,UAAU,EAAE;;EAClB;EAED,yBAAC;AAAD,CAAC,CAtBuCR,oBAAoB;;AAuD5D;;;;;;AAOA;;;;;;;;AAQA;EAAgCI;EA+B/B;;;EAGA;IAAA,YACCC,iBAAO;IAEPC,KAAI,CAACC,SAAS,GAAG,YAAY;IAC7BD,KAAI,CAACE,UAAU,EAAE;;EAClB;EAEA;;;;;EAKUC,yCAAoB,GAA9B;IACC,OAAO,IAAIR,UAAU,EAAE;EACxB,CAAC;EAED;;;;;EAKUQ,gCAAW,GAArB;IACC,IAAIC,EAAE,GAAG,CAAC;IACV,IAAIC,EAAE,GAAG,CAAC;IACV,IAAIC,MAAM,GAAG,IAAI,CAACC,OAAO,CAACC,QAAQ,CAAC,CAAC,CAAC;IAErC,IAAGF,MAAM,EAAC;MACT,IAAI,IAAI,CAACG,QAAQ,IAAI,IAAI,CAACC,KAAK,EAAE;QAChCL,EAAE,GAAGC,MAAM,CAACK,UAAU,CAACC,UAAU,GAAG,CAAC,GAAG,CAAC;OACzC,MACI;QACJR,EAAE,GAAGE,MAAM,CAACK,UAAU,CAACE,WAAW,GAAG,CAAC,GAAG,CAAC;;MAG3C,OAAOhB,KAAK,CAACiB,UAAU,CAAC;QACvBC,CAAC,EAAE,CAACX,EAAE;QACNY,CAAC,EAAE,CAAC;QACJC,KAAK,EAAE,IAAI,CAACP,KAAK,CAACQ,UAAU,GAAGd,EAAE;QACjCe,MAAM,EAAE,IAAI,CAACC,KAAK,CAACF,UAAU,GAAGb;OAChC,CAAC;;EAEJ,CAAC;EAGD;;;;;;EAMOF,4CAAuB,GAA9B,UAA+BkB,QAA2B;IACzDtB,iBAAMuB,uBAAuB,YAACD,QAAQ,CAAC;IACvC,IAAIf,MAAM,GAAGe,QAAQ,CAACf,MAAM;IAC5B,IAAGA,MAAM,EAAC;MACT,IAAIK,UAAU,GAAGU,QAAQ,CAACf,MAAM,CAACK,UAAU;MAE3CA,UAAU,CAACY,IAAI,GAAGF,QAAQ,CAACf,MAAM,CAACiB,IAAI;MAEtC,IAAI,IAAI,CAACd,QAAQ,IAAI,IAAI,CAACW,KAAK,EAAE;QAChCT,UAAU,CAACa,WAAW,GAAG,YAAY;OACrC,MACI;QACJb,UAAU,CAACa,WAAW,GAAG,UAAU;;;EAGtC,CAAC;EACF,iBAAC;AAAD,CAAC,CApG+B/B,YAAY;;AAsG5C;;;;;;AAMAG,QAAQ,CAAC6B,iBAAiB,CAAC,YAAY,CAAC,GAAGtB,UAAU;AACrDP,QAAQ,CAAC6B,iBAAiB,CAAC,oBAAoB,CAAC,GAAGC,kBAAkB","names":["ColumnSeries","ColumnSeriesDataItem","ConeColumn","registry","$path","__extends","_super","_this","className","applyTheme","ConeSeries","dx","dy","column","columns","getIndex","baseAxis","xAxis","coneColumn","innerWidth","innerHeight","rectToPath","x","y","width","axisLength","height","yAxis","dataItem","validateDataElementReal","fill","orientation","registeredClasses","ConeSeriesDataItem"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\series\\ConeSeries.ts"],"sourcesContent":["/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeriesAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ConeSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IConeSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new ConeColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\t\t\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\t\tlet column = this.columns.getIndex(0);\r\n\r\n\t\tif(column){\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tdy = column.coneColumn.innerWidth / 2 + 1\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdx = column.coneColumn.innerHeight / 2 + 1;\r\n\t\t\t}\r\n\r\n\t\t\treturn $path.rectToPath({\r\n\t\t\t\tx: -dx,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.xAxis.axisLength + dx,\r\n\t\t\t\theight: this.yAxis.axisLength + dy\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tlet column = dataItem.column;\r\n\t\tif(column){\r\n\t\t\tlet coneColumn = dataItem.column.coneColumn;\r\n\r\n\t\t\tconeColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tconeColumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconeColumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}