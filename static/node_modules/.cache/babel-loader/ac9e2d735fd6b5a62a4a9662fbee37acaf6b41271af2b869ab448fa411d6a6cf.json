{"ast":null,"code":"/**\r\n * Step line series module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { LineSeries, LineSeriesDataItem } from \"./LineSeries\";\nimport { StepLineSeriesSegment } from \"./StepLineSeriesSegment\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar StepLineSeriesDataItem = /** @class */function (_super) {\n  __extends(StepLineSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function StepLineSeriesDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"StepLineSeriesDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return StepLineSeriesDataItem;\n}(LineSeriesDataItem);\nexport { StepLineSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\nvar StepLineSeries = /** @class */function (_super) {\n  __extends(StepLineSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n  function StepLineSeries() {\n    var _this = _super.call(this) || this;\n    _this.className = \"StepLineSeries\";\n    _this.applyTheme();\n    _this.startLocation = 0;\n    _this.endLocation = 1;\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n  StepLineSeries.prototype.createDataItem = function () {\n    return new StepLineSeriesDataItem();\n  };\n  /**\r\n   * [addPoints description]\r\n   *\r\n   * @todo Description\r\n   * @param points     [description]\r\n   * @param dataItem   [description]\r\n   * @param xField     [description]\r\n   * @param yField     [description]\r\n   * @param backwards  [description]\r\n   */\n  StepLineSeries.prototype.addPoints = function (points, dataItem, xField, yField, backwards) {\n    var startLocationX;\n    var endLocationX;\n    var startLocationY;\n    var endLocationY;\n    if (this.baseAxis == this.xAxis) {\n      startLocationX = this.startLocation;\n      endLocationX = this.endLocation;\n      startLocationY = this.getAdjustedXLocation(dataItem, this.yOpenField);\n      endLocationY = this.getAdjustedXLocation(dataItem, this.yField);\n    }\n    if (this.baseAxis == this.yAxis) {\n      startLocationY = this.startLocation;\n      endLocationY = this.endLocation;\n      startLocationX = this.getAdjustedXLocation(dataItem, this.xOpenField);\n      endLocationX = this.getAdjustedXLocation(dataItem, this.xField);\n    }\n    var x0 = this.xAxis.getX(dataItem, xField, startLocationX);\n    var y0 = this.yAxis.getY(dataItem, yField, startLocationY);\n    var x1 = this.xAxis.getX(dataItem, xField, endLocationX);\n    var y1 = this.yAxis.getY(dataItem, yField, endLocationY);\n    x0 = $math.fitToRange(x0, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\n    y0 = $math.fitToRange(y0, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\n    x1 = $math.fitToRange(x1, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\n    y1 = $math.fitToRange(y1, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\n    // this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\n    if (!this.noRisers) {\n      if (points.length > 1) {\n        var prevPoint = points[points.length - 1];\n        if (this.baseAxis == this.xAxis) {\n          if (backwards) {\n            points.push({\n              x: prevPoint.x,\n              y: y1\n            });\n          } else {\n            points.push({\n              x: x0,\n              y: prevPoint.y\n            });\n          }\n        }\n        if (this.baseAxis == this.yAxis) {\n          if (backwards) {\n            points.push({\n              x: x1,\n              y: prevPoint.y\n            });\n          } else {\n            points.push({\n              x: prevPoint.x,\n              y: y0\n            });\n          }\n        }\n      }\n    }\n    var point0 = {\n      x: x0,\n      y: y0\n    };\n    var point1 = {\n      x: x1,\n      y: y1\n    };\n    if (backwards) {\n      points.push(point1, point0);\n    } else {\n      points.push(point0, point1);\n    }\n  };\n  /**\r\n   * Draws the line segment.\r\n   *\r\n   * @param segment     Segment\r\n   * @param points      Segment points\r\n   * @param closePoints Segment close points\r\n   */\n  StepLineSeries.prototype.drawSegment = function (segment, points, closePoints) {\n    var vertical = false;\n    if (this.yAxis == this.baseAxis) {\n      vertical = true;\n    }\n    segment.drawSegment(points, closePoints, this.tensionX, this.tensionY, this.noRisers, vertical);\n  };\n  /**\r\n   * @ignore\r\n   */\n  StepLineSeries.prototype.createSegment = function () {\n    return new StepLineSeriesSegment();\n  };\n  Object.defineProperty(StepLineSeries.prototype, \"noRisers\", {\n    /**\r\n     * @return No risers\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"noRisers\");\n    },\n    /**\r\n     * Specifies if step line series should draw only horizontal (or only\r\n     * vertical, depending on base axis) lines, instead of connecting them with\r\n     * vertical (or horizontal) lines.\r\n     *\r\n     * @default false\r\n     * @param value  No risers\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"noRisers\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StepLineSeries.prototype, \"startLocation\", {\n    /**\r\n     * @return Location (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startLocation\");\n    },\n    /**\r\n     * start location of the step\r\n     *\r\n     * @param value Location (0-1)\r\n     * @default 0\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startLocation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StepLineSeries.prototype, \"endLocation\", {\n    /**\r\n     * @return Location (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endLocation\");\n    },\n    /**\r\n     * Step end location.\r\n     *\r\n     * @param value Location (0-1)\r\n     * #default 1\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endLocation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return StepLineSeries;\n}(LineSeries);\nexport { StepLineSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;","map":{"version":3,"mappings":"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","names":["LineSeries","LineSeriesDataItem","StepLineSeriesSegment","registry","$math","__extends","_super","_this","className","applyTheme","startLocation","endLocation","StepLineSeries","StepLineSeriesDataItem","points","dataItem","xField","yField","backwards","startLocationX","endLocationX","startLocationY","endLocationY","baseAxis","xAxis","getAdjustedXLocation","yOpenField","yAxis","xOpenField","x0","getX","y0","getY","x1","y1","fitToRange","noRisers","length","prevPoint","push","x","y","point0","point1","segment","closePoints","vertical","drawSegment","tensionX","tensionY","Object","getPropertyValue","value","setPropertyValue","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\series\\StepLineSeries.ts"],"sourcesContent":["/**\r\n * Step line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { StepLineSeriesSegment } from \"./StepLineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class StepLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: StepLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesProperties extends ILineSeriesProperties {\r\n\tnoRisers?: boolean;\r\n\r\n\tstartLocation?: number;\r\n\r\n\tendLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesAdapters extends ILineSeriesAdapters, IStepLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class StepLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IStepLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IStepLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: StepLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines type for segement.\r\n\t */\r\n\tpublic _segment: StepLineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeries\";\r\n\t\tthis.applyTheme();\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new StepLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points     [description]\r\n\t * @param dataItem   [description]\r\n\t * @param xField     [description]\r\n\t * @param yField     [description]\r\n\t * @param backwards  [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\r\n\t\tlet startLocationX:number;\r\n\t\tlet endLocationX:number;\r\n\r\n\t\tlet startLocationY:number;\r\n\t\tlet endLocationY:number;\t\t\r\n\r\n\t\tif(this.baseAxis == this.xAxis){\r\n\t\t\tstartLocationX = this.startLocation;\r\n\t\t\tendLocationX = this.endLocation;\r\n\r\n\t\t\tstartLocationY = this.getAdjustedXLocation(dataItem, this.yOpenField);\r\n\t\t\tendLocationY = this.getAdjustedXLocation(dataItem, this.yField);\r\n\t\t}\r\n\r\n\t\tif(this.baseAxis == this.yAxis){\r\n\t\t\tstartLocationY = this.startLocation;\r\n\t\t\tendLocationY = this.endLocation;\r\n\r\n\t\t\tstartLocationX = this.getAdjustedXLocation(dataItem, this.xOpenField);\r\n\t\t\tendLocationX = this.getAdjustedXLocation(dataItem, this.xField);\t\t\t\r\n\t\t}\r\n\r\n\r\n\t\tlet x0: number = this.xAxis.getX(dataItem, xField, startLocationX);\r\n\t\tlet y0: number = this.yAxis.getY(dataItem, yField, startLocationY);\r\n\r\n\t\tlet x1: number = this.xAxis.getX(dataItem, xField, endLocationX);\r\n\t\tlet y1: number = this.yAxis.getY(dataItem, yField, endLocationY);\r\n\r\n\t\tx0 = $math.fitToRange(x0, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty0 = $math.fitToRange(y0, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\tx1 = $math.fitToRange(x1, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty1 = $math.fitToRange(y1, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t// this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n\t\tif (!this.noRisers) {\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tlet prevPoint: IPoint = points[points.length - 1];\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y1 });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: x0, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: x1, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y0 });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet point0: IPoint = { x: x0, y: y0 };\r\n\t\tlet point1: IPoint = { x: x1, y: y1 };\r\n\r\n\t\tif (backwards) {\r\n\t\t\tpoints.push(point1, point0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpoints.push(point0, point1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param segment     Segment\r\n\t * @param points      Segment points\r\n\t * @param closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: StepLineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet vertical = false;\r\n\t\tif (this.yAxis == this.baseAxis) {\r\n\t\t\tvertical = true;\r\n\t\t}\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY, this.noRisers, vertical);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new StepLineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if step line series should draw only horizontal (or only\r\n\t * vertical, depending on base axis) lines, instead of connecting them with\r\n\t * vertical (or horizontal) lines.\r\n\t *\r\n\t * @default false\r\n\t * @param value  No risers\r\n\t */\r\n\tpublic set noRisers(value: boolean) {\r\n\t\tthis.setPropertyValue(\"noRisers\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return No risers\r\n\t */\r\n\tpublic get noRisers(): boolean {\r\n\t\treturn this.getPropertyValue(\"noRisers\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * start location of the step\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t * @default 0\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"startLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Step end location.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t * #default 1\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"endLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}