{"ast":null,"code":"/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\nimport { registry } from \"../../core/Registry\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\nvar StepLineSeriesSegment = /** @class */function (_super) {\n  __extends(StepLineSeriesSegment, _super);\n  /**\r\n   * Constructor\r\n   */\n  function StepLineSeriesSegment() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"StepLineSeriesSegment\";\n    return _this;\n  }\n  /**\r\n   * Draws the series segment.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param points       Points to connect\r\n   * @param closePoints  ?\r\n   * @param smoothnessX  Horizontal bezier setting (?)\r\n   * @param smoothnessY  Vertical bezier setting (?)\r\n   */\n  StepLineSeriesSegment.prototype.drawSegment = function (points, closePoints, smoothnessX, smoothnessY, noRisers, vertical) {\n    if (points.length > 0 && closePoints.length > 0) {\n      if (noRisers) {\n        var path = $path.moveTo(points[0]);\n        if (points.length > 0) {\n          for (var i = 1; i < points.length; i++) {\n            var point = points[i];\n            if (i / 2 == Math.round(i / 2)) {\n              path += $path.moveTo(point);\n            } else {\n              path += $path.lineTo(point);\n            }\n          }\n        }\n        this.strokeSprite.path = path;\n        if (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) {\n          // helps to avoid drawing fill object if fill is not visible\n          path = $path.moveTo(points[0]) + $path.polyline(points);\n          path += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\n          path += $path.lineTo(points[0]);\n          path += $path.closePath();\n          this.fillSprite.path = path;\n        } else {}\n      } else {\n        var path = $path.moveTo(points[0]) + $path.polyline(points);\n        this.strokeSprite.path = path;\n        if (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) {\n          // helps to avoid drawing fill object if fill is not visible\n          path += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\n          path += $path.lineTo(points[0]);\n          path += $path.closePath();\n          this.fillSprite.path = path;\n        }\n      }\n    } else {\n      this.strokeSprite.path = \"\";\n      this.fillSprite.path = \"\";\n    }\n  };\n  return StepLineSeriesSegment;\n}(LineSeriesSegment);\nexport { StepLineSeriesSegment };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;","map":{"version":3,"mappings":"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","names":["LineSeriesSegment","registry","$path","__extends","_super","_this","className","StepLineSeriesSegment","points","closePoints","smoothnessX","smoothnessY","noRisers","vertical","length","path","moveTo","i","point","Math","round","lineTo","strokeSprite","fillOpacity","fillSprite","polyline","closePath","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\series\\StepLineSeriesSegment.ts"],"sourcesContent":["/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ILineSeriesSegmentAdapters, ILineSeriesSegmentEvents, ILineSeriesSegmentProperties, LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentProperties extends ILineSeriesSegmentProperties { }\r\n\r\n/**\r\n * Defines events for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentEvents extends ILineSeriesSegmentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesSegmentAdapters extends ILineSeriesSegmentAdapters, IStepLineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class StepLineSeriesSegment extends LineSeriesSegment {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IStepLineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesSegment\";\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param points       Points to connect\r\n\t * @param closePoints  ?\r\n\t * @param smoothnessX  Horizontal bezier setting (?)\r\n\t * @param smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number, noRisers?: boolean, vertical?: boolean): void {\r\n\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\r\n\t\t\tif (noRisers) {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]);\r\n\t\t\t\tif (points.length > 0) {\r\n\t\t\t\t\tfor (let i = 1; i < points.length; i++) {\r\n\t\t\t\t\t\tlet point = points[i];\r\n\t\t\t\t\t\tif (i / 2 == Math.round(i / 2)) {\r\n\t\t\t\t\t\t\tpath += $path.moveTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tpath += $path.lineTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath = $path.moveTo(points[0]) + $path.polyline(points);\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]) + $path.polyline(points);\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{\r\n\t\t\tthis.strokeSprite.path = \"\";\r\n\t\t\tthis.fillSprite.path = \"\";\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}