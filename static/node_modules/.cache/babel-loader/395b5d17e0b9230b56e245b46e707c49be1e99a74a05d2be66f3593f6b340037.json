{"ast":null,"code":"/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { XYChart, XYChartDataItem } from \"./XYChart\";\nimport { registry } from \"../../core/Registry\";\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\nimport { ValueAxis } from \"../axes/ValueAxis\";\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\nimport { ColorSet } from \"../../core/utils/ColorSet\";\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $array from \"../../core/utils/Array\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar TreeMapDataItem = /** @class */function (_super) {\n  __extends(TreeMapDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function TreeMapDataItem() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Required for squarify functionality.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this.rows = [];\n    _this.className = \"TreeMapDataItem\";\n    _this.values.value = {\n      workingValue: 0\n    };\n    _this.values.x0 = {};\n    _this.values.y0 = {};\n    _this.values.x1 = {};\n    _this.values.y1 = {};\n    _this.hasChildren.children = true;\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(TreeMapDataItem.prototype, \"legendDataItem\", {\n    /**\r\n     * @return Legend data item\r\n     */\n    get: function () {\n      return this._legendDataItem;\n    },\n    /**\r\n     * A legend's data item, that corresponds to this data item.\r\n     *\r\n     * @param value  Legend data item\r\n     */\n    set: function (value) {\n      this._legendDataItem = value;\n      if (value.label) {\n        value.label.dataItem = this;\n      }\n      if (value.valueLabel) {\n        value.valueLabel.dataItem = this;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a duration (ms) the Data Item should take to animate from one\r\n   * value to another.\r\n   *\r\n   * If the duration is not specified via parameter, this method will try to\r\n   * request a default duration from the related `Component`.\r\n   *\r\n   * @param duration  Default duration (ms)\r\n   * @return Duration (ms)\r\n   */\n  TreeMapDataItem.prototype.getDuration = function () {\n    return 0;\n  };\n  Object.defineProperty(TreeMapDataItem.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      var value = 0;\n      if (!this.children || this.children.length == 0) {\n        value = this.values[\"value\"].workingValue;\n      } else {\n        $iter.each(this.children.iterator(), function (child) {\n          var childValue = child.value;\n          if ($type.isNumber(childValue)) {\n            value += childValue;\n          }\n        });\n      }\n      return value;\n      /*\r\n      let value = this.values[\"value\"].workingValue;\r\n            if (!$type.isNumber(value)) {\r\n          value = 0;\r\n          if (this.children) {\r\n              $iter.each(this.children.iterator(), (child) => {\r\n                  if ($type.isNumber(child.value)) {\r\n                      value += child.value;\r\n                  }\r\n              });\r\n          }\r\n      }\r\n      return value;*/\n    },\n\n    /**\r\n     * Numeric value of the item.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setValue(\"value\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"percent\", {\n    /**\r\n     * Percent value of a node\r\n     */\n    get: function () {\n      if (this.parent) {\n        return this.value / this.parent.value * 100;\n      }\n      return 100;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"x0\", {\n    /**\r\n     * @return X\r\n     */\n    get: function () {\n      return this.values.x0.value;\n    },\n    /**\r\n     * Item's X position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param value  X\r\n     */\n    set: function (value) {\n      this.setValue(\"x0\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"x1\", {\n    /**\r\n     * @return X\r\n     */\n    get: function () {\n      return this.values.x1.value;\n    },\n    /**\r\n     * Item's X position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param value  X\r\n     */\n    set: function (value) {\n      this.setValue(\"x1\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"y0\", {\n    /**\r\n     * @return Y\r\n     */\n    get: function () {\n      return this.values.y0.value;\n    },\n    /**\r\n     * Item's Y position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param value  Y\r\n     */\n    set: function (value) {\n      this.setValue(\"y0\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"y1\", {\n    /**\r\n     * @return Y\r\n     */\n    get: function () {\n      return this.values.y1.value;\n    },\n    /**\r\n     * Item's Y position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param value  Y\r\n     */\n    set: function (value) {\n      this.setValue(\"y1\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"name\", {\n    /**\r\n     * @return Name\r\n     */\n    get: function () {\n      return this.properties.name;\n    },\n    /**\r\n     * Item's name.\r\n     *\r\n     * @param name  Name\r\n     */\n    set: function (name) {\n      this.setProperty(\"name\", name);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"children\", {\n    /**\r\n     * @return Item's children\r\n     */\n    get: function () {\n      return this.properties.children;\n    },\n    /**\r\n     * A list of item's sub-children.\r\n     *\r\n     * Having children means that the TreeMap chat will automatically be\r\n     * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n     * display its children.\r\n     *\r\n     * Treemap can have any level of nesting.\r\n     *\r\n     * @param children  Item's children\r\n     */\n    set: function (children) {\n      this.setProperty(\"children\", children);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"level\", {\n    /**\r\n     * Depth level in the treemap hierarchy.\r\n     *\r\n     * The top-level item will have level set at 0. Its children will have\r\n     * level 1, and so on.\r\n     *\r\n     * @readonly\r\n     * @return Level\r\n     */\n    get: function () {\n      if (!this.parent) {\n        return 0;\n      } else {\n        return this.parent.level + 1;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"color\", {\n    /**\r\n     * @return Color\r\n     */\n    get: function () {\n      var color = this.properties.color;\n      if (color == undefined) {\n        if (this.parent) {\n          color = this.parent.color;\n        }\n      }\n      if (color == undefined) {\n        if (this.component) {\n          color = this.component.colors.getIndex(this.component.colors.step * this.index);\n        }\n      }\n      return color;\n    },\n    /**\r\n     * Item's color.\r\n     *\r\n     * If not set, will use parent's color, or, if that is not set either,\r\n     * automatically assigned color from chart's color set. (`chart.colors`)\r\n     *\r\n     * @param value  Color\r\n     */\n    set: function (value) {\n      this.setProperty(\"color\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"fill\", {\n    /**\r\n     * @ignore\r\n     * For the legend to work properly\r\n     */\n    get: function () {\n      return this.color;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"series\", {\n    get: function () {\n      return this._series;\n    },\n    /**\r\n     * Series of children data items\r\n     * @todo: proper descrition\r\n     */\n    set: function (series) {\n      if (series != this._series) {\n        if (this._series) {\n          this.component.series.removeValue(this._series);\n          this._series.dispose();\n        }\n        this._series = series;\n        this._disposers.push(series);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Hides the Data Item and related visual elements.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   * @param delay     Delay animation (ms)\r\n   * @param toValue   A value to set to `fields` when hiding\r\n   * @param fields    A list of data fields to set value to `toValue`\r\n   */\n  TreeMapDataItem.prototype.hide = function (duration, delay, toValue, fields) {\n    this.setWorkingValue(\"value\", 0);\n    if (this.children) {\n      this.children.each(function (child) {\n        child.hide(duration, delay, toValue, fields);\n      });\n    }\n    var seriesDataItem = this.seriesDataItem;\n    if (seriesDataItem) {\n      seriesDataItem.bullets.each(function (key, value) {\n        value.hide();\n        value.preventShow = true;\n      });\n    }\n    return _super.prototype.hide.call(this, duration, delay, toValue, fields);\n  };\n  /**\r\n   * Shows the Data Item and related visual elements.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   * @param delay     Delay animation (ms)\r\n   * @param fields    A list of fields to set values of\r\n   */\n  TreeMapDataItem.prototype.show = function (duration, delay, fields) {\n    this.setWorkingValue(\"value\", this.values.value.value);\n    if (this.children) {\n      this.children.each(function (child) {\n        child.show(duration, delay, fields);\n      });\n    }\n    var seriesDataItem = this.seriesDataItem;\n    if (seriesDataItem) {\n      seriesDataItem.bullets.each(function (key, value) {\n        value.preventShow = false;\n      });\n    }\n    return _super.prototype.show.call(this, duration, delay, fields);\n  };\n  return TreeMapDataItem;\n}(XYChartDataItem);\nexport { TreeMapDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\nvar TreeMap = /** @class */function (_super) {\n  __extends(TreeMap, _super);\n  /**\r\n   * Constructor\r\n   */\n  function TreeMap() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * An algorithm used to divide area into squares based on their value.\r\n     *\r\n     * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n     *\r\n     * ```TypeScript\r\n     * chart.layoutAlgorithm = chart.sliceDice;\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.layoutAlgorithm = chart.sliceDice;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"layoutAlgorithm\": \"sliceDice\",\r\n     *   // ...\r\n     * }\r\n     * ```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n     * @default squarify\r\n     */\n    _this.layoutAlgorithm = _this.squarify;\n    /**\r\n     * Is the chart zoomable?\r\n     *\r\n     * If the chart is `zoomable`, and items have sub-items, the chart will\r\n     * drill-down to sub-items when click on their parent item.\r\n     *\r\n     * @default true\r\n     */\n    _this.zoomable = true;\n    _this.className = \"TreeMap\";\n    _this._usesData = true;\n    _this.maxLevels = 2;\n    _this.currentLevel = 0;\n    _this.hideParentColumns = false;\n    _this.colors = new ColorSet();\n    _this.sorting = \"descending\";\n    // create two value axes for the chart\n    var xAxis = _this.xAxes.push(new ValueAxis());\n    xAxis.title.disabled = true;\n    xAxis.strictMinMax = true;\n    var xRenderer = xAxis.renderer;\n    xRenderer.inside = true;\n    xRenderer.labels.template.disabled = true;\n    xRenderer.ticks.template.disabled = true;\n    xRenderer.grid.template.disabled = true;\n    xRenderer.axisFills.template.disabled = true;\n    xRenderer.minGridDistance = 100;\n    xRenderer.line.disabled = true;\n    xRenderer.baseGrid.disabled = true;\n    //xRenderer.inversed = true;\n    var yAxis = _this.yAxes.push(new ValueAxis());\n    yAxis.title.disabled = true;\n    yAxis.strictMinMax = true;\n    var yRenderer = yAxis.renderer;\n    yRenderer.inside = true;\n    yRenderer.labels.template.disabled = true;\n    yRenderer.ticks.template.disabled = true;\n    yRenderer.grid.template.disabled = true;\n    yRenderer.axisFills.template.disabled = true;\n    yRenderer.minGridDistance = 100;\n    yRenderer.line.disabled = true;\n    yRenderer.baseGrid.disabled = true;\n    yRenderer.inversed = true;\n    // shortcuts\n    _this.xAxis = xAxis;\n    _this.yAxis = yAxis;\n    var template = new TreeMapSeries();\n    _this.seriesTemplates = new DictionaryTemplate(template);\n    template.virtualParent = _this;\n    _this._disposers.push(new DictionaryDisposer(_this.seriesTemplates));\n    _this._disposers.push(template);\n    _this.zoomOutButton.events.on(\"hit\", function () {\n      _this.zoomToChartDataItem(_this._homeDataItem);\n    }, undefined, false);\n    _this.seriesTemplates.events.on(\"insertKey\", function (event) {\n      event.newValue.isTemplate = true;\n    }, undefined, false);\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(TreeMap.prototype, \"navigationBar\", {\n    /**\r\n     * Returns navigationBar if it is added to a chart\r\n     */\n    get: function () {\n      return this._navigationBar;\n    },\n    /**\r\n     * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n     * drill-down path.\r\n     */\n    set: function (navigationBar) {\n      var _this = this;\n      if (this._navigationBar != navigationBar) {\n        this._navigationBar = navigationBar;\n        navigationBar.parent = this;\n        navigationBar.toBack();\n        navigationBar.links.template.events.on(\"hit\", function (event) {\n          var dataItem = event.target.dataItem.dataContext;\n          if (!dataItem.isDisposed()) {\n            _this.zoomToChartDataItem(dataItem);\n            _this.createTreeSeries(dataItem);\n          }\n        }, undefined, true);\n        this._disposers.push(navigationBar);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * (Re)validates chart's data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  TreeMap.prototype.validateData = function () {\n    this.series.clear();\n    this._tempSeries = [];\n    _super.prototype.validateData.call(this);\n    if (this._homeDataItem) {\n      this._homeDataItem.dispose();\n    }\n    var homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\n    this._homeDataItem = homeDataItem;\n    $iter.each(this.dataItems.iterator(), function (dataItem) {\n      dataItem.parent = homeDataItem;\n    });\n    homeDataItem.children = this.dataItems;\n    homeDataItem.x0 = 0;\n    homeDataItem.y0 = 0;\n    homeDataItem.name = this._homeText;\n    var maxX = 1000;\n    var maxY = Math.round(maxX * this.pixelHeight / this.pixelWidth / 10) * 10 || 1000;\n    homeDataItem.x1 = maxX;\n    homeDataItem.y1 = maxY;\n    this.xAxis.min = 0;\n    this.xAxis.max = maxX;\n    this.xAxis.getMinMax();\n    this.yAxis.min = 0;\n    this.yAxis.max = maxY;\n    this.yAxis.getMinMax();\n    this.layoutItems(homeDataItem);\n    this.createTreeSeries(homeDataItem);\n    this.feedLegend();\n  };\n  /**\r\n   * Layouts and sizes all items according to their value and\r\n   * `layoutAlgorithm`.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Parent data item\r\n   */\n  TreeMap.prototype.layoutItems = function (parent, sorting) {\n    if (parent) {\n      var children = parent.children;\n      if (!sorting) {\n        sorting = this.sorting;\n      }\n      if (sorting == \"ascending\") {\n        children.values.sort(function (a, b) {\n          return a.value - b.value;\n        });\n      }\n      if (sorting == \"descending\") {\n        children.values.sort(function (a, b) {\n          return b.value - a.value;\n        });\n      }\n      this._updateDataItemIndexes(0);\n      this.layoutAlgorithm(parent);\n      for (var i = 0, len = children.length; i < len; i++) {\n        var node = children.getIndex(i);\n        if (node.children) {\n          this.layoutItems(node);\n        }\n      }\n    }\n  };\n  /**\r\n   * Creates and returns a new treemap series.\r\n   *\r\n   * @todo Description\r\n   * @param dataItem  Data item to create series out of\r\n   */\n  TreeMap.prototype.createTreeSeries = function (dataItem) {\n    var _this = this;\n    this._tempSeries = [];\n    var navigationData = [dataItem];\n    // create parent series and navigation data\n    var parentDataItem = dataItem.parent;\n    while (parentDataItem != undefined) {\n      this.initSeries(parentDataItem);\n      navigationData.push(parentDataItem);\n      parentDataItem = parentDataItem.parent;\n    }\n    navigationData.reverse();\n    if (this.navigationBar) {\n      this.navigationBar.data = navigationData;\n    }\n    // create series and children series\n    this.createTreeSeriesReal(dataItem);\n    // add those which are not in the list\n    $array.each(this._tempSeries, function (series) {\n      if (_this.series.indexOf(series) == -1) {\n        _this.series.push(series);\n      }\n      series.zIndex = series.level;\n    });\n  };\n  /**\r\n   * [createTreeSeriesReal description]\r\n   *\r\n   * @todo Description\r\n   * @param dataItem [description]\r\n   */\n  TreeMap.prototype.createTreeSeriesReal = function (dataItem) {\n    if (dataItem.children) {\n      var level = dataItem.level;\n      if (level < this.currentLevel + this.maxLevels) {\n        this.initSeries(dataItem);\n        for (var i = 0; i < dataItem.children.length; i++) {\n          var child = dataItem.children.getIndex(i);\n          if (child.children) {\n            this.createTreeSeriesReal(child);\n          }\n        }\n      }\n    }\n  };\n  TreeMap.prototype.setData = function (value) {\n    this.currentLevel = 0;\n    this.currentlyZoomed = undefined;\n    this.xAxis.start = 0;\n    this.xAxis.end = 1;\n    this.yAxis.start = 0;\n    this.yAxis.end = 1;\n    _super.prototype.setData.call(this, value);\n  };\n  /**\r\n   * @ignore\r\n   * Overriding, as tree map series are created on the fly all the time\r\n   */\n  TreeMap.prototype.seriesAppeared = function () {\n    return true;\n  };\n  /**\r\n   * Initializes the treemap series.\r\n   *\r\n   * @todo Description\r\n   * @param dataItem  Chart data item\r\n   */\n  TreeMap.prototype.initSeries = function (dataItem) {\n    var _this = this;\n    if (!dataItem.series) {\n      var series = void 0;\n      var template = this.seriesTemplates.getKey(dataItem.level.toString());\n      if (template) {\n        series = template.clone();\n      } else {\n        series = this.series.create();\n      }\n      // for the legend to get {value}\n      series.dataItem.dataContext = dataItem;\n      series.name = dataItem.name;\n      series.parentDataItem = dataItem;\n      dataItem.series = series;\n      var level = dataItem.level;\n      series.level = level;\n      var dataContext = dataItem.dataContext;\n      if (dataContext) {\n        series.config = dataContext.config;\n      }\n      this.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\n      series.data = dataItem.children.values;\n      series.fill = dataItem.color;\n      series.columnsContainer.hide(0);\n      series.bulletsContainer.hide(0);\n      series.columns.template.adapter.add(\"fill\", function (fill, target) {\n        var dataItem = target.dataItem;\n        if (dataItem) {\n          var treeMapDataItem = dataItem.treeMapDataItem;\n          if (treeMapDataItem) {\n            target.fill = treeMapDataItem.color;\n            target.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\n            return treeMapDataItem.color;\n          }\n        }\n      });\n      if (this.zoomable && (dataItem.level > this.currentLevel || dataItem.children && dataItem.children.length > 0)) {\n        series.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\n        if (this.zoomable) {\n          series.columns.template.events.on(\"hit\", function (event) {\n            var seriesDataItem = event.target.dataItem;\n            if (dataItem.level > _this.currentLevel) {\n              _this.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\n            } else {\n              _this.zoomToSeriesDataItem(seriesDataItem);\n            }\n          }, this, undefined);\n        }\n      }\n    }\n    this._tempSeries.push(dataItem.series);\n  };\n  /**\r\n   * Toggles bullets so that labels that belong to current drill level are\r\n   * shown.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   */\n  TreeMap.prototype.toggleBullets = function (duration) {\n    var _this = this;\n    // hide all series which are not in tempSeries\n    $iter.each(this.series.iterator(), function (series) {\n      if (_this._tempSeries.indexOf(series) == -1) {\n        //series.hideReal(duration);\n        series.columnsContainer.hide();\n        series.bulletsContainer.hide(duration);\n      } else {\n        //series.showReal(duration);\n        series.columnsContainer.show();\n        series.bulletsContainer.show(duration);\n        series.dataItems.each(function (dataItem) {\n          dataItem.bullets.each(function (key, bullet) {\n            bullet.show();\n          });\n        });\n        if (series.level < _this.currentLevel) {\n          if (_this.hideParentColumns) {\n            series.columnsContainer.hide();\n          }\n          series.bulletsContainer.hide(duration);\n        } else if (series.level == _this.currentLevel) {\n          if (_this.maxLevels > 1) {\n            series.dataItems.each(function (dataItem) {\n              if (dataItem.treeMapDataItem.children) {\n                dataItem.bullets.each(function (key, bullet) {\n                  bullet.hide();\n                });\n              }\n            });\n          }\n        }\n      }\n    });\n  };\n  /**\r\n   * Zooms to particular item in series.\r\n   *\r\n   * @param dataItem  Data item\r\n   */\n  TreeMap.prototype.zoomToSeriesDataItem = function (dataItem) {\n    this.zoomToChartDataItem(dataItem.treeMapDataItem);\n  };\n  /**\r\n   * Zooms to particular item. If dataItem is not specified, the chart will zoom-out.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n  TreeMap.prototype.zoomToChartDataItem = function (dataItem) {\n    var _this = this;\n    if (!dataItem) {\n      dataItem = this._homeDataItem;\n    }\n    var zoomOutButton = this.zoomOutButton;\n    // this is needed because if there is only one fist level, it won't be shown\n    if (zoomOutButton) {\n      if (dataItem != this._homeDataItem) {\n        zoomOutButton.show();\n      } else {\n        zoomOutButton.hide();\n      }\n    }\n    if (dataItem && dataItem.children) {\n      this.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\n      this.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\n      this.currentLevel = dataItem.level;\n      this.currentlyZoomed = dataItem;\n      this.createTreeSeries(dataItem);\n      var rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\n      if (rangeChangeAnimation && !rangeChangeAnimation.isDisposed() && !rangeChangeAnimation.isFinished()) {\n        this._dataDisposers.push(rangeChangeAnimation);\n        rangeChangeAnimation.events.once(\"animationended\", function () {\n          _this.toggleBullets();\n        });\n      } else {\n        this.toggleBullets();\n      }\n    }\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n  TreeMap.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"TreeMap chart\");\n    }\n    //this.homeText = this.language.translate(\"Home\");\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n  TreeMap.prototype.createDataItem = function () {\n    return new TreeMapDataItem();\n  };\n  Object.defineProperty(TreeMap.prototype, \"maxLevels\", {\n    /**\r\n     * @return Maximum drill-down level\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxLevels\");\n    },\n    /**\r\n     * Maximum number of levels the chart will display initially.\r\n     *\r\n     * @default 2\r\n     * @param value  Maximum drill-down level\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"maxLevels\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMap.prototype, \"currentLevel\", {\n    /**\r\n     * @return Current level\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"currentLevel\");\n    },\n    /**\r\n     * Current drill-down level the chart is at.\r\n     *\r\n     * @param value  Current level\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"currentLevel\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMap.prototype, \"hideParentColumns\", {\n    /**\r\n     * @return Hide?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"hideParentColumns\");\n    },\n    /**\r\n     * If set to `true`, columns of parent nodes will be hidden when user\r\n     * drills-down into deeper levels.\r\n     *\r\n     * @sice 4.7.4\r\n     * @default false\r\n     * @param  value  Hide?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"hideParentColumns\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMap.prototype, \"sorting\", {\n    get: function () {\n      return this.getPropertyValue(\"sorting\");\n    },\n    /**\r\n     * Sorting direction of treemap items.\r\n     *\r\n     * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n     *\r\n     * @default \"descending\"\r\n     * @param value [description]\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"sorting\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates and returns a new series of the suitable type.\r\n   *\r\n   * @return new series\r\n   */\n  TreeMap.prototype.createSeries = function () {\n    return new TreeMapSeries();\n  };\n  Object.defineProperty(TreeMap.prototype, \"homeText\", {\n    /**\r\n     * @return Home text\r\n     */\n    get: function () {\n      return this._homeText;\n    },\n    /**\r\n     * A text displayed on the \"home\" button which is used to go back to level 0\r\n     * after drill into sub-items.\r\n     *\r\n     * @param value  Home text\r\n     */\n    set: function (value) {\n      this._homeText = value;\n      if (this._homeDataItem) {\n        this._homeDataItem.name = this._homeText;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n  TreeMap.prototype.processConfig = function (config) {\n    if (config) {\n      // Instantiate layout algorithm\n      if ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\n        switch (config[\"layoutAlgorithm\"]) {\n          case \"squarify\":\n            config[\"layoutAlgorithm\"] = this.squarify;\n            break;\n          case \"binaryTree\":\n            config[\"layoutAlgorithm\"] = this.binaryTree;\n            break;\n          case \"slice\":\n            config[\"layoutAlgorithm\"] = this.slice;\n            break;\n          case \"dice\":\n            config[\"layoutAlgorithm\"] = this.dice;\n            break;\n          case \"sliceDice\":\n            config[\"layoutAlgorithm\"] = this.sliceDice;\n            break;\n          default:\n            delete config[\"layoutAlgorithm\"];\n            break;\n        }\n      }\n      // Set type for navigation bar\n      if ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\n        config.navigationBar.type = \"NavigationBar\";\n      }\n      _super.prototype.processConfig.call(this, config);\n    }\n  };\n  /**\r\n   * Measures the size of container and informs its children of how much size\r\n   * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n   * properties.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  TreeMap.prototype.validateLayout = function () {\n    _super.prototype.validateLayout.call(this);\n    this.layoutItems(this.currentlyZoomed);\n  };\n  /**\r\n   * Validates (processes) data items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  TreeMap.prototype.validateDataItems = function () {\n    _super.prototype.validateDataItems.call(this);\n    this.layoutItems(this._homeDataItem);\n    $iter.each(this.series.iterator(), function (series) {\n      series.validateRawData();\n    });\n    this.zoomToChartDataItem(this._homeDataItem);\n  };\n  /**\r\n   * ==========================================================================\r\n   * TREEMAP LAYOUT FUNCTIONS\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n  /**\r\n   * The functions below are from D3.js library (https://d3js.org/)\r\n   *\r\n   * --------------------------------------------------------------------------\r\n   * Copyright 2017 Mike Bostock\r\n   *\r\n   * Redistribution and use in source and binary forms, with or without\r\n   * modification, are permitted provided that the following conditions are met:\r\n   *\r\n   * 1. Redistributions of source code must retain the above copyright notice,\r\n   *    this list of conditions and the following disclaimer.\r\n   *\r\n   * 2. Redistributions in binary form must reproduce the above copyright\r\n   *    notice,this list of conditions and the following disclaimer in the\r\n   *    documentation and/or other materials provided with the distribution.\r\n   *\r\n   * 3. Neither the name of the copyright holder nor the names of its\r\n   *    contributors may be used to endorse or promote products derived from\r\n   *    this software without specific prior written permission.\r\n   *\r\n   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n   * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n   * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n   * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n   * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n   * POSSIBILITY OF SUCH DAMAGE.\r\n   * --------------------------------------------------------------------------\r\n   * @hidden\r\n   */\n  /**\r\n   * Treemap layout algorithm: binaryTree.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Data item\r\n   */\n  TreeMap.prototype.binaryTree = function (parent) {\n    var nodes = parent.children,\n      i,\n      n = nodes.length,\n      sum,\n      sums = new Array(n + 1);\n    for (sums[0] = sum = i = 0; i < n; ++i) {\n      sums[i + 1] = sum += nodes.getIndex(i).value;\n    }\n    if (n > 0) {\n      partition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\n    }\n    function partition(i, j, value, x0, y0, x1, y1) {\n      if (i >= j - 1) {\n        var node = nodes.getIndex(i);\n        node.x0 = x0;\n        node.y0 = y0;\n        node.x1 = x1;\n        node.y1 = y1;\n        return;\n      }\n      var valueOffset = sums[i],\n        valueTarget = value / 2 + valueOffset,\n        k = i + 1,\n        hi = j - 1;\n      while (k < hi) {\n        var mid = k + hi >>> 1;\n        if (sums[mid] < valueTarget) {\n          k = mid + 1;\n        } else {\n          hi = mid;\n        }\n      }\n      if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) {\n        --k;\n      }\n      var valueLeft = sums[k] - valueOffset,\n        valueRight = value - valueLeft;\n      if (value == 0) {\n        var node = nodes.getIndex(i);\n        node.x0 = x0;\n        node.y0 = y0;\n        node.x1 = x1;\n        node.y1 = y1;\n        return;\n      }\n      if (x1 - x0 > y1 - y0) {\n        var xk = (x0 * valueRight + x1 * valueLeft) / value;\n        partition(i, k, valueLeft, x0, y0, xk, y1);\n        partition(k, j, valueRight, xk, y0, x1, y1);\n      } else {\n        var yk = (y0 * valueRight + y1 * valueLeft) / value;\n        partition(i, k, valueLeft, x0, y0, x1, yk);\n        partition(k, j, valueRight, x0, yk, x1, y1);\n      }\n    }\n  };\n  /**\r\n   * Treemap layout algorithm: slice.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Data item\r\n   */\n  TreeMap.prototype.slice = function (parent) {\n    var x0 = parent.x0;\n    var x1 = parent.x1;\n    var y0 = parent.y0;\n    var y1 = parent.y1;\n    var nodes = parent.children;\n    var node;\n    var i = -1;\n    var n = nodes.length;\n    var k = parent.value && (y1 - y0) / parent.value;\n    while (++i < n) {\n      node = nodes.getIndex(i);\n      node.x0 = x0;\n      node.x1 = x1;\n      node.y0 = y0;\n      y0 += node.value * k;\n      node.y1 = y0;\n    }\n  };\n  /**\r\n   * Treemap layout algorithm: dice.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Data item\r\n   */\n  TreeMap.prototype.dice = function (parent) {\n    var x0 = parent.x0;\n    var x1 = parent.x1;\n    var y0 = parent.y0;\n    var y1 = parent.y1;\n    var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (x1 - x0) / parent.value;\n    while (++i < n) {\n      node = nodes.getIndex(i);\n      node.y0 = y0;\n      node.y1 = y1;\n      node.x0 = x0;\n      x0 += node.value * k;\n      node.x1 = x0;\n    }\n  };\n  /**\r\n   * Treemap layout algorithm: slideDice.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Data item\r\n   */\n  TreeMap.prototype.sliceDice = function (parent) {\n    if (parent.level & 1) {\n      this.slice(parent);\n    } else {\n      this.dice(parent);\n    }\n  };\n  /**\r\n   * Treemap layout algorithm: squarify.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Data item\r\n   */\n  TreeMap.prototype.squarify = function (parent) {\n    var ratio = (1 + Math.sqrt(5)) / 2;\n    var x0 = parent.x0;\n    var x1 = parent.x1;\n    var y0 = parent.y0;\n    var y1 = parent.y1;\n    var nodes = parent.children;\n    var nodeValue;\n    var i0 = 0;\n    var i1 = 0;\n    var n = nodes.length;\n    var dx;\n    var dy;\n    var value = parent.value;\n    var sumValue;\n    var minValue;\n    var maxValue;\n    var newRatio;\n    var minRatio;\n    var alpha;\n    var beta;\n    while (i0 < n) {\n      dx = x1 - x0;\n      dy = y1 - y0;\n      // Find the next non-empty node.\n      do {\n        sumValue = nodes.getIndex(i1++).value;\n      } while (!sumValue && i1 < n);\n      minValue = maxValue = sumValue;\n      alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n      beta = sumValue * sumValue * alpha;\n      minRatio = Math.max(maxValue / beta, beta / minValue);\n      // Keep adding nodes while the aspect ratio maintains or improves.\n      for (; i1 < n; ++i1) {\n        sumValue += nodeValue = nodes.getIndex(i1).value;\n        if (nodeValue < minValue) {\n          minValue = nodeValue;\n        }\n        if (nodeValue > maxValue) {\n          maxValue = nodeValue;\n        }\n        beta = sumValue * sumValue * alpha;\n        newRatio = Math.max(maxValue / beta, beta / minValue);\n        if (newRatio > minRatio) {\n          sumValue -= nodeValue;\n          break;\n        }\n        minRatio = newRatio;\n      }\n      // Position and record the row orientation.\n      var row = this.dataItems.template.clone();\n      row.value = sumValue;\n      row.dice = dx < dy;\n      row.children = nodes.slice(i0, i1);\n      row.x0 = x0;\n      row.y0 = y0;\n      row.x1 = x1;\n      row.y1 = y1;\n      if (row.dice) {\n        row.y1 = value ? y0 += dy * sumValue / value : y1;\n        this.dice(row);\n      } else {\n        row.x1 = value ? x0 += dx * sumValue / value : x1;\n        this.slice(row);\n      }\n      value -= sumValue;\n      i0 = i1;\n    }\n  };\n  TreeMap.prototype.handleSeriesAdded2 = function () {\n    // void\n  };\n  /**\r\n   * [handleDataItemValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n  TreeMap.prototype.handleDataItemValueChange = function (dataItem, name) {\n    if (name == \"value\") {\n      this.invalidateDataItems();\n    }\n  };\n  TreeMap.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\n    if (name == \"value\") {\n      this.invalidateDataItems();\n    }\n  };\n  TreeMap.prototype.getLegendLevel = function (dataItem) {\n    if (!dataItem) {\n      return;\n    }\n    if (!dataItem.children) {\n      return;\n    }\n    if (dataItem.children.length > 1) {\n      return dataItem;\n    } else if (dataItem.children.length == 1) {\n      var child = dataItem.children.getIndex(0);\n      if (child.children) {\n        return this.getLegendLevel(child);\n      } else {\n        return dataItem;\n      }\n    } else {\n      return dataItem;\n    }\n  };\n  TreeMap.prototype.handleLegendSeriesAdded = function (series) {\n    // void\n  };\n  Object.defineProperty(TreeMap.prototype, \"homeDataItem\", {\n    /**\r\n     * A data item associated with top node.\r\n     *\r\n     * @since 4.8.2\r\n     */\n    get: function () {\n      return this._homeDataItem;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Setups the legend to use the chart's data.\r\n   * @ignore\r\n   */\n  TreeMap.prototype.feedLegend = function () {\n    var legend = this.legend;\n    if (legend) {\n      legend.dataFields.name = \"name\";\n      var legendParent = this.getLegendLevel(this._homeDataItem);\n      if (legendParent) {\n        var legendData_1 = [];\n        legendParent.children.each(function (dataItem) {\n          //if (!dataItem.hiddenInLegend) {\n          legendData_1.push(dataItem);\n          //}\n        });\n\n        legend.data = legendData_1;\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  TreeMap.prototype.disposeData = function () {\n    _super.prototype.disposeData.call(this);\n    this._homeDataItem = undefined;\n    this.series.clear();\n    if (this.navigationBar) {\n      this.navigationBar.disposeData();\n    }\n    this.xAxis.disposeData();\n    this.yAxis.disposeData();\n  };\n  /**\r\n   * Since this chart uses hierarchical data, we need to remove childrent\r\n   * dataField from export of non-hierarchical formats such as CSV and XSLX.\r\n   *\r\n   * @return Export\r\n   */\n  TreeMap.prototype.getExporting = function () {\n    var _this = this;\n    var exporting = _super.prototype.getExporting.call(this);\n    exporting.adapter.add(\"formatDataFields\", function (info) {\n      if (info.format == \"csv\" || info.format == \"xlsx\") {\n        if ($type.hasValue(_this.dataFields.children)) {\n          delete info.dataFields[_this.dataFields.children];\n        }\n      }\n      return info;\n    });\n    return exporting;\n  };\n  return TreeMap;\n}(XYChart);\nexport { TreeMap };\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;","map":{"version":3,"mappings":"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","names":["XYChart","XYChartDataItem","registry","DictionaryTemplate","DictionaryDisposer","ValueAxis","TreeMapSeries","ColorSet","MouseCursorStyle","$iter","$type","$array","__extends","_super","_this","className","values","value","workingValue","x0","y0","x1","y1","hasChildren","children","applyTheme","Object","TreeMapDataItem","_legendDataItem","label","dataItem","valueLabel","length","each","iterator","child","childValue","isNumber","setValue","parent","properties","name","setProperty","level","color","undefined","component","colors","getIndex","step","index","_series","series","removeValue","dispose","_disposers","push","duration","delay","toValue","fields","setWorkingValue","hide","seriesDataItem","bullets","key","preventShow","show","squarify","_usesData","maxLevels","currentLevel","hideParentColumns","sorting","xAxis","xAxes","title","disabled","strictMinMax","xRenderer","renderer","inside","labels","template","ticks","grid","axisFills","minGridDistance","line","baseGrid","yAxis","yAxes","yRenderer","inversed","seriesTemplates","virtualParent","zoomOutButton","events","on","zoomToChartDataItem","_homeDataItem","event","newValue","isTemplate","TreeMap","_navigationBar","navigationBar","toBack","links","target","dataContext","isDisposed","createTreeSeries","clear","_tempSeries","validateData","homeDataItem","dataItems","clone","_homeText","maxX","maxY","Math","round","pixelHeight","pixelWidth","min","max","getMinMax","layoutItems","feedLegend","sort","a","b","_updateDataItemIndexes","layoutAlgorithm","i","len","node","navigationData","parentDataItem","initSeries","reverse","data","createTreeSeriesReal","indexOf","zIndex","currentlyZoomed","start","end","setData","getKey","toString","create","config","dataUsers","fill","columnsContainer","bulletsContainer","columns","adapter","add","treeMapDataItem","remove","zoomable","cursorOverStyle","pointer","zoomToSeriesDataItem","bullet","zoomToValues","rangeChangeAnimation","isFinished","_dataDisposers","once","toggleBullets","applyInternalDefaults","hasValue","readerTitle","language","translate","getPropertyValue","setPropertyValue","isString","binaryTree","slice","dice","sliceDice","type","processConfig","validateLayout","validateDataItems","validateRawData","nodes","n","sum","sums","Array","partition","j","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk","ratio","sqrt","nodeValue","i0","i1","dx","dy","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","row","invalidateDataItems","getLegendLevel","legend","dataFields","legendParent","legendData_1","disposeData","exporting","getExporting","info","format","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\types\\TreeMap.ts"],"sourcesContent":["/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport { Export } from \"../../core/export/Export\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Series of children data items.\r\n\t */\r\n\tprotected _series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * A reference to a corresponding legend data item.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {workingValue:0};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A legend's data item, that corresponds to this data item.\r\n\t *\r\n\t * @param value  Legend data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tif (value.label) {\r\n\t\t\tvalue.label.dataItem = this;\r\n\t\t}\r\n\t\tif (value.valueLabel) {\r\n\t\t\tvalue.valueLabel.dataItem = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a duration (ms) the Data Item should take to animate from one\r\n\t * value to another.\r\n\t *\r\n\t * If the duration is not specified via parameter, this method will try to\r\n\t * request a default duration from the related `Component`.\r\n\t *\r\n\t * @param duration  Default duration (ms)\r\n\t * @return Duration (ms)\r\n\t */\r\n\tpublic getDuration(): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\r\n\t\tlet value = 0;\r\n\t\tif (!this.children || this.children.length == 0) {\r\n\t\t\tvalue = this.values[\"value\"].workingValue;\r\n\t\t}\r\n\r\n\t\telse {\r\n\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\tlet childValue = child.value;\r\n\t\t\t\tif ($type.isNumber(childValue)) {\r\n\t\t\t\t\tvalue += childValue;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t\t/*\r\n\t\tlet value = this.values[\"value\"].workingValue;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;*/\r\n\t}\r\n\r\n\t/**\r\n\t * Percent value of a node\r\n\t */\r\n\tpublic get percent(): number {\r\n\t\tif (this.parent) {\r\n\t\t\treturn this.value / this.parent.value * 100;\r\n\t\t}\r\n\t\treturn 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * For the legend to work properly\r\n\t */\r\n\tpublic get fill(): Color {\r\n\t\treturn this.color;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * Series of children data items\r\n\t * @todo: proper descrition\r\n\t */\r\n\tpublic set series(series: TreeMapSeries) {\r\n\t\tif (series != this._series) {\r\n\t\t\tif (this._series) {\r\n\t\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\t\tthis._series.dispose();\r\n\t\t\t}\r\n\t\t\tthis._series = series;\r\n\t\t\tthis._disposers.push(series);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get series(): TreeMapSeries {\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param toValue   A value to set to `fields` when hiding\r\n\t * @param fields    A list of data fields to set value to `toValue`\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tthis.setWorkingValue(\"value\", 0);\r\n\r\n\t\tif (this.children) {\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tchild.hide(duration, delay, toValue, fields);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet seriesDataItem = this.seriesDataItem;\r\n\t\tif (seriesDataItem) {\r\n\t\t\tseriesDataItem.bullets.each((key, value) => {\r\n\t\t\t\tvalue.hide();\r\n\t\t\t\tvalue.preventShow = true;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn super.hide(duration, delay, toValue, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param fields    A list of fields to set values of\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tthis.setWorkingValue(\"value\", this.values.value.value);\r\n\t\tif (this.children) {\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tchild.show(duration, delay, fields);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet seriesDataItem = this.seriesDataItem;\r\n\t\tif (seriesDataItem) {\r\n\t\t\tseriesDataItem.bullets.each((key, value) => {\r\n\t\t\t\tvalue.preventShow = false;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum number of levels the chart will display initially.\r\n\t *\r\n\t * @default 2\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n\t/**\r\n\t * If set to `true`, columns of parent nodes will be hidden when user\r\n\t * drills-down into deeper levels.\r\n\t * \r\n\t * @sice 4.7.4\r\n\t * @default false\r\n\t */\r\n\thideParentColumns?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITreeMapEvents;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n\t * @default squarify\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied automatically to each new chart item, if\r\n\t * not explicitly set.\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * Holds series object for each TreeMap level.\r\n\t *\r\n\t * \"0\" is the top-level series.\r\n\t * \"1\" is the second level.\r\n\t * Etc.\r\n\t *\r\n\t * @todo Description\r\n\t * @param Templates for each level\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]>;\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t */\r\n\tprotected _navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * Currently selected data item.\r\n\t * @readonly\r\n\t */\r\n\tpublic currentlyZoomed: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis._usesData = true;\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\t\tthis.hideParentColumns = false;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis<any>());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis<any>());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tconst template = new TreeMapSeries();\r\n\t\tthis.seriesTemplates = new DictionaryTemplate<string, this[\"_seriesType\"]>(template);\r\n\t\ttemplate.virtualParent = this;\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.seriesTemplates));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t}, undefined, false)\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t */\r\n\tpublic set navigationBar(navigationBar: NavigationBar) {\r\n\t\tif (this._navigationBar != navigationBar) {\r\n\t\t\tthis._navigationBar = navigationBar;\r\n\t\t\tnavigationBar.parent = this;\r\n\t\t\tnavigationBar.toBack();\r\n\t\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (!dataItem.isDisposed()) {\r\n\t\t\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}, undefined, true);\r\n\r\n\t\t\tthis._disposers.push(navigationBar);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns navigationBar if it is added to a chart\r\n\t */\r\n\tpublic get navigationBar(): NavigationBar {\r\n\t\treturn this._navigationBar;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = 1000;\r\n\t\tlet maxY = Math.round((maxX * this.pixelHeight / this.pixelWidth) / 10) * 10 || 1000;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\t\tthis.xAxis.getMinMax();\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\t\tthis.yAxis.getMinMax();\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\r\n\t\tthis.feedLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem, sorting?: \"none\" | \"ascending\" | \"descending\"): void {\r\n\t\tif (parent) {\r\n\t\t\tlet children = parent.children;\r\n\r\n\t\t\tif (!sorting) {\r\n\t\t\t\tsorting = this.sorting;\r\n\t\t\t}\r\n\r\n\t\t\tif (sorting == \"ascending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn a.value - b.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (sorting == \"descending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn b.value - a.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._updateDataItemIndexes(0);\r\n\r\n\t\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\r\n\t\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tthis.layoutItems(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.data = navigationData;\r\n\t\t}\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected setData(value: any[]) {\r\n\t\tthis.currentLevel = 0;\r\n\t\tthis.currentlyZoomed = undefined;\r\n\t\tthis.xAxis.start = 0;\r\n\t\tthis.xAxis.end = 1;\r\n\t\tthis.yAxis.start = 0;\r\n\t\tthis.yAxis.end = 1;\r\n\t\tsuper.setData(value);\r\n\t}\r\n\t/**\r\n\t * @ignore\r\n\t * Overriding, as tree map series are created on the fly all the time\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: TreeMapSeries;\r\n\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\t\t\t// for the legend to get {value}\r\n\t\t\tseries.dataItem.dataContext = dataItem;\r\n\r\n\t\t\tseries.name = dataItem.name;\r\n\t\t\tseries.parentDataItem = dataItem;\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\t\t\tseries.fill = dataItem.color;\r\n\r\n\t\t\tseries.columnsContainer.hide(0);\r\n\t\t\tseries.bulletsContainer.hide(0);\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this, undefined);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\t//series.hideReal(duration);\r\n\t\t\t\tseries.columnsContainer.hide();\r\n\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t//series.showReal(duration);\r\n\t\t\t\tseries.columnsContainer.show();\r\n\t\t\t\tseries.bulletsContainer.show(duration);\r\n\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\t\t\tbullet.show();\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\r\n\t\t\t\tif (series.level < this.currentLevel) {\r\n\t\t\t\t\tif (this.hideParentColumns) {\r\n\t\t\t\t\t\tseries.columnsContainer.hide();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t\telse if (series.level == this.currentLevel) {\r\n\t\t\t\t\tif (this.maxLevels > 1) {\r\n\t\t\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\t\t\tif (dataItem.treeMapDataItem.children) {\r\n\t\t\t\t\t\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\t\t\t\t\t\tbullet.hide();\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item. If dataItem is not specified, the chart will zoom-out.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem?: TreeMapDataItem): void {\r\n\t\tif (!dataItem) {\r\n\t\t\tdataItem = this._homeDataItem;\r\n\t\t}\r\n\r\n\t\tlet zoomOutButton = this.zoomOutButton;\r\n\t\t// this is needed because if there is only one fist level, it won't be shown\r\n\t\tif (zoomOutButton) {\r\n\t\t\tif (dataItem != this._homeDataItem) {\r\n\t\t\t\tzoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tzoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem && dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\t\t\tthis.currentlyZoomed = dataItem;\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\r\n\t\t\tif (rangeChangeAnimation && !rangeChangeAnimation.isDisposed() && !rangeChangeAnimation.isFinished()) {\r\n\t\t\t\tthis._dataDisposers.push(rangeChangeAnimation);\r\n\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\t\t}\r\n\t\t//this.homeText = this.language.translate(\"Home\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum number of levels the chart will display initially.\r\n\t *\r\n\t * @default 2\r\n\t * @param value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t *\r\n\t * @param value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true`, columns of parent nodes will be hidden when user\r\n\t * drills-down into deeper levels.\r\n\t * \r\n\t * @sice 4.7.4\r\n\t * @default false\r\n\t * @param  value  Hide?\r\n\t */\r\n\tpublic set hideParentColumns(value: boolean) {\r\n\t\tthis.setPropertyValue(\"hideParentColumns\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hide?\r\n\t */\r\n\tpublic get hideParentColumns(): boolean {\r\n\t\treturn this.getPropertyValue(\"hideParentColumns\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t *\r\n\t * @param value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Instantiate layout algorithm\r\n\t\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"slice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"dice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set type for navigation bar\r\n\t\t\tif ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n\t\t\t\tconfig.navigationBar.type = \"NavigationBar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the size of container and informs its children of how much size\r\n\t * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n\t * properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.layoutItems(this.currentlyZoomed);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.layoutItems(this._homeDataItem);\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.validateRawData();\r\n\t\t});\r\n\r\n\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tif(n > 0){\r\n\t\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\t\t}\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0;\r\n\t\t\t\tnode.y0 = y0;\r\n\t\t\t\tnode.x1 = x1;\r\n\t\t\t\tnode.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) {\r\n\t\t\t\t\tk = mid + 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\thi = mid;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) {\r\n\t\t\t\t--k;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif(value == 0){\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0;\r\n\t\t\t\tnode.y0 = y0;\r\n\t\t\t\tnode.x1 = x1;\r\n\t\t\t\tnode.y1 = y1;\t\t\t\t\r\n\t\t\t\treturn;\r\n\t\t\t}\t\t\t\t\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet node;\r\n\t\tlet i = -1;\r\n\t\tlet n = nodes.length;\r\n\t\tlet k = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i);\r\n\t\t\tnode.x0 = x0;\r\n\t\t\tnode.x1 = x1;\r\n\t\t\tnode.y0 = y0;\r\n\t\t\ty0 += node.value * k;\r\n\t\t\tnode.y1 = y0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i);\r\n\t\t\tnode.y0 = y0;\r\n\t\t\tnode.y1 = y1;\r\n\t\t\tnode.x0 = x0;\r\n\t\t\tx0 += node.value * k;\r\n\t\t\tnode.x1 = x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tif (parent.level & 1) {\r\n\t\t\tthis.slice(parent);\r\n\t\t} else {\r\n\t\t\tthis.dice(parent);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0;\r\n\t\t\tdy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo {\r\n\t\t\t\tsumValue = nodes.getIndex(i1++).value;\r\n\t\t\t} while (!sumValue && i1 < n);\r\n\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? (y0 += (dy * sumValue) / value) : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? (x0 += (dx * sumValue) / value) : x1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue;\r\n\t\t\ti0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleSeriesAdded2() {\r\n\t\t// void\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleDataItemValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (name == \"value\") {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (name == \"value\") {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getLegendLevel(dataItem: TreeMapDataItem): TreeMapDataItem {\r\n\t\tif (!dataItem) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!dataItem.children) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (dataItem.children.length > 1) {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t\telse if (dataItem.children.length == 1) {\r\n\t\t\tlet child = dataItem.children.getIndex(0);\r\n\t\t\tif (child.children) {\r\n\t\t\t\treturn this.getLegendLevel(child);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn dataItem;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleLegendSeriesAdded(series:TreeMapSeries){\r\n\t\t// void\r\n\t}\t\r\n\r\n\t/**\r\n\t * A data item associated with top node.\r\n\t * \r\n\t * @since 4.8.2\r\n\t */\r\n\tpublic get homeDataItem(): TreeMapDataItem {\r\n\t\treturn this._homeDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\r\n\t\t\tlet legendParent = this.getLegendLevel(this._homeDataItem);\r\n\r\n\t\t\tif (legendParent) {\r\n\t\t\t\tlet legendData: Array<this[\"_dataItem\"]> = [];\r\n\r\n\t\t\t\tlegendParent.children.each((dataItem) => {\r\n\t\t\t\t\t//if (!dataItem.hiddenInLegend) {\r\n\t\t\t\t\tlegendData.push(dataItem);\r\n\t\t\t\t\t//}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tlegend.data = legendData;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\r\n\t\tsuper.disposeData();\r\n\r\n\t\tthis._homeDataItem = undefined;\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxis.disposeData();\r\n\t\tthis.yAxis.disposeData();\r\n\t}\r\n\r\n\t/**\r\n\t * Since this chart uses hierarchical data, we need to remove childrent\r\n\t * dataField from export of non-hierarchical formats such as CSV and XSLX.\r\n\t *\r\n\t * @return Export\r\n\t */\r\n\tprotected getExporting(): Export {\r\n\t\tconst exporting = super.getExporting();\r\n\t\texporting.adapter.add(\"formatDataFields\", (info) => {\r\n\t\t\tif (info.format == \"csv\" || info.format == \"xlsx\") {\r\n\t\t\t\tif ($type.hasValue(this.dataFields.children)) {\r\n\t\t\t\t\tdelete info.dataFields[this.dataFields.children];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn info;\r\n\t\t})\r\n\t\treturn exporting;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}