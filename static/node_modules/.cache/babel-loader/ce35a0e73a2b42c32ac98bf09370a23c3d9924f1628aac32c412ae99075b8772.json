{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport * as $array from \"./Array\";\n/**\r\n * A base class for disposable objects.\r\n *\r\n * @ignore Exclude from docs\r\n */\nvar DisposerClass = /** @class */function () {\n  /**\r\n   * Constructor.\r\n   */\n  function DisposerClass() {\n    /**\r\n     * Is object disposed?\r\n     */\n    Object.defineProperty(this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._disposed = false;\n  }\n  /**\r\n   * Checks if object is disposed.\r\n   *\r\n   * @return Disposed?\r\n   */\n  Object.defineProperty(DisposerClass.prototype, \"isDisposed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this._disposed;\n    }\n  });\n  /**\r\n   * Disposes the object.\r\n   */\n  Object.defineProperty(DisposerClass.prototype, \"dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (!this._disposed) {\n        this._disposed = true;\n        this._dispose();\n      }\n    }\n  });\n  return DisposerClass;\n}();\nexport { DisposerClass };\n/**\r\n * A class for creating an IDisposer.\r\n *\r\n * @ignore Exclude from docs\r\n */\nvar Disposer = /** @class */function () {\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param dispose  Function that disposes object\r\n   */\n  function Disposer(dispose) {\n    /**\r\n     * Is object disposed?\r\n     */\n    Object.defineProperty(this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\r\n     * Method that disposes the object.\r\n     */\n    Object.defineProperty(this, \"_dispose\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._disposed = false;\n    this._dispose = dispose;\n  }\n  /**\r\n   * Checks if object is disposed.\r\n   *\r\n   * @return Disposed?\r\n   */\n  Object.defineProperty(Disposer.prototype, \"isDisposed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this._disposed;\n    }\n  });\n  /**\r\n   * Disposes the object.\r\n   */\n  Object.defineProperty(Disposer.prototype, \"dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (!this._disposed) {\n        this._disposed = true;\n        this._dispose();\n      }\n    }\n  });\n  return Disposer;\n}();\nexport { Disposer };\n/**\r\n * This can be extended by other classes to add a `_disposers` property.\r\n *\r\n * @ignore Exclude from docs\r\n */\nvar ArrayDisposer = /** @class */function (_super) {\n  __extends(ArrayDisposer, _super);\n  function ArrayDisposer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    Object.defineProperty(_this, \"_disposers\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    return _this;\n  }\n  Object.defineProperty(ArrayDisposer.prototype, \"_dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      $array.each(this._disposers, function (x) {\n        x.dispose();\n      });\n    }\n  });\n  return ArrayDisposer;\n}(DisposerClass);\nexport { ArrayDisposer };\n/**\r\n * A collection of related disposers that can be disposed in one go.\r\n *\r\n * @ignore Exclude from docs\r\n */\nvar MultiDisposer = /** @class */function (_super) {\n  __extends(MultiDisposer, _super);\n  function MultiDisposer(disposers) {\n    var _this = _super.call(this) || this;\n    Object.defineProperty(_this, \"_disposers\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    _this._disposers = disposers;\n    return _this;\n  }\n  Object.defineProperty(MultiDisposer.prototype, \"_dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      $array.each(this._disposers, function (x) {\n        x.dispose();\n      });\n    }\n  });\n  return MultiDisposer;\n}(DisposerClass);\nexport { MultiDisposer };\n/**\r\n * A special kind of Disposer that has attached value set.\r\n *\r\n * If a new value is set using `set()` method, the old disposer value is\r\n * disposed.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nvar MutableValueDisposer = /** @class */function (_super) {\n  __extends(MutableValueDisposer, _super);\n  function MutableValueDisposer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * Current disposer.\r\n     */\n    Object.defineProperty(_this, \"_disposer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\r\n     * Current value.\r\n     */\n    Object.defineProperty(_this, \"_value\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n  Object.defineProperty(MutableValueDisposer.prototype, \"_dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (this._disposer != null) {\n        this._disposer.dispose();\n        this._disposer = undefined;\n      }\n    }\n  });\n  /**\r\n   * Returns current value.\r\n   *\r\n   * @return Value\r\n   */\n  Object.defineProperty(MutableValueDisposer.prototype, \"get\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this._value;\n    }\n  });\n  /**\r\n   * Sets value and disposes previous disposer if it was set.\r\n   *\r\n   * @param value     New value\r\n   * @param disposer  Disposer\r\n   */\n  Object.defineProperty(MutableValueDisposer.prototype, \"set\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, disposer) {\n      if (this._disposer != null) {\n        this._disposer.dispose();\n      }\n      this._disposer = disposer;\n      this._value = value;\n    }\n  });\n  /**\r\n   * Resets the disposer value.\r\n   */\n  Object.defineProperty(MutableValueDisposer.prototype, \"reset\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this.set(undefined, undefined);\n    }\n  });\n  return MutableValueDisposer;\n}(DisposerClass);\nexport { MutableValueDisposer };\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nvar CounterDisposer = /** @class */function (_super) {\n  __extends(CounterDisposer, _super);\n  function CounterDisposer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * [_counter description]\r\n     *\r\n     * @todo Description\r\n     */\n    Object.defineProperty(_this, \"_counter\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    return _this;\n  }\n  /**\r\n   * [increment description]\r\n   *\r\n   * @todo Description\r\n   */\n  Object.defineProperty(CounterDisposer.prototype, \"increment\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n      // TODO throw an error if it is disposed\n      ++this._counter;\n      // TODO make this more efficient\n      return new Disposer(function () {\n        --_this._counter;\n        if (_this._counter === 0) {\n          _this.dispose();\n        }\n      });\n    }\n  });\n  return CounterDisposer;\n}(Disposer);\nexport { CounterDisposer };","map":{"version":3,"mappings":"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","names":["$array","Object","_disposed","_dispose","dispose","__extends","each","_disposers","x","DisposerClass","disposers","_super","_this","_disposer","undefined","_value","value","disposer","set","_counter","Disposer"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\core\\util\\Disposer.ts"],"sourcesContent":["/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport * as $array from \"./Array\";\nimport type { Optional } from \"./Type\";\n\n/**\n * Defines interface for disposable objects.\n *\n * @ignore Exclude from docs\n */\nexport interface IDisposer {\n\tisDisposed(): boolean;\n\tdispose(): void;\n}\n\n/**\n * A base class for disposable objects.\n *\n * @ignore Exclude from docs\n */\nexport abstract class DisposerClass implements IDisposer {\n\n\t/**\n\t * Is object disposed?\n\t */\n\tprivate _disposed: boolean;\n\n\t/**\n\t * Constructor.\n\t */\n\tconstructor() {\n\t\tthis._disposed = false;\n\t}\n\n\t/**\n\t * Checks if object is disposed.\n\t *\n\t * @return Disposed?\n\t */\n\tpublic isDisposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\tprotected abstract _dispose(): void;\n\n\t/**\n\t * Disposes the object.\n\t */\n\tpublic dispose(): void {\n\t\tif (!this._disposed) {\n\t\t\tthis._disposed = true;\n\t\t\tthis._dispose();\n\t\t}\n\t}\n}\n\n/**\n * A class for creating an IDisposer.\n *\n * @ignore Exclude from docs\n */\nexport class Disposer implements IDisposer {\n\n\t/**\n\t * Is object disposed?\n\t */\n\tprivate _disposed: boolean;\n\n\t/**\n\t * Method that disposes the object.\n\t */\n\tprivate _dispose: () => void;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param dispose  Function that disposes object\n\t */\n\tconstructor(dispose: () => void) {\n\t\tthis._disposed = false;\n\t\tthis._dispose = dispose;\n\t}\n\n\t/**\n\t * Checks if object is disposed.\n\t *\n\t * @return Disposed?\n\t */\n\tpublic isDisposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\t/**\n\t * Disposes the object.\n\t */\n\tpublic dispose(): void {\n\t\tif (!this._disposed) {\n\t\t\tthis._disposed = true;\n\t\t\tthis._dispose();\n\t\t}\n\t}\n}\n\n/**\n * This can be extended by other classes to add a `_disposers` property.\n *\n * @ignore Exclude from docs\n */\nexport class ArrayDisposer extends DisposerClass {\n\tprotected _disposers: Array<IDisposer> = [];\n\n\tprotected _dispose(): void {\n\t\t$array.each(this._disposers, (x) => {\n\t\t\tx.dispose();\n\t\t});\n\t}\n}\n\n/**\n * A collection of related disposers that can be disposed in one go.\n *\n * @ignore Exclude from docs\n */\nexport class MultiDisposer extends DisposerClass {\n\tprotected _disposers: Array<IDisposer>;\n\n\tconstructor(disposers: Array<IDisposer>) {\n\t\tsuper();\n\t\tthis._disposers = disposers;\n\t}\n\n\tprotected _dispose(): void {\n\t\t$array.each(this._disposers, (x) => {\n\t\t\tx.dispose();\n\t\t});\n\t}\n}\n\n/**\n * A special kind of Disposer that has attached value set.\n *\n * If a new value is set using `set()` method, the old disposer value is\n * disposed.\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport class MutableValueDisposer<T extends IDisposer> extends DisposerClass {\n\n\t/**\n\t * Current disposer.\n\t */\n\tprivate _disposer: Optional<IDisposer>;\n\n\t/**\n\t * Current value.\n\t */\n\tprivate _value: Optional<T>;\n\n\tprotected _dispose(): void {\n\t\tif (this._disposer != null) {\n\t\t\tthis._disposer.dispose();\n\t\t\tthis._disposer = undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Returns current value.\n\t *\n\t * @return Value\n\t */\n\tpublic get(): Optional<T> {\n\t\treturn this._value;\n\t}\n\n\t/**\n\t * Sets value and disposes previous disposer if it was set.\n\t *\n\t * @param value     New value\n\t * @param disposer  Disposer\n\t */\n\tpublic set(value: Optional<T>, disposer: Optional<IDisposer>): void {\n\t\tif (this._disposer != null) {\n\t\t\tthis._disposer.dispose();\n\t\t}\n\n\t\tthis._disposer = disposer;\n\t\tthis._value = value;\n\t}\n\n\t/**\n\t * Resets the disposer value.\n\t */\n\tpublic reset(): void {\n\t\tthis.set(undefined, undefined);\n\t}\n\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport class CounterDisposer extends Disposer {\n\n\t/**\n\t * [_counter description]\n\t *\n\t * @todo Description\n\t */\n\tprivate _counter: number = 0;\n\n\t/**\n\t * [increment description]\n\t *\n\t * @todo Description\n\t */\n\tpublic increment() {\n\t\t// TODO throw an error if it is disposed\n\t\t++this._counter;\n\n\t\t// TODO make this more efficient\n\t\treturn new Disposer(() => {\n\t\t\t--this._counter;\n\n\t\t\tif (this._counter === 0) {\n\t\t\t\tthis.dispose();\n\t\t\t}\n\t\t});\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}