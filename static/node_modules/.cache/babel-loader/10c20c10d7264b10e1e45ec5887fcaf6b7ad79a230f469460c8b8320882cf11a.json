{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { List } from \"./List\";\nimport * as $array from \"./Array\";\n/**\r\n * A version of [[List]] to hold children of the [[Container]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/} for more info\r\n */\nvar Children = /** @class */function (_super) {\n  __extends(Children, _super);\n  function Children(container) {\n    var _this = _super.call(this) || this;\n    Object.defineProperty(_this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_container\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_events\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    _this._container = container;\n    _this._events = _this.events.onAll(function (change) {\n      if (change.type === \"clear\") {\n        $array.each(change.oldValues, function (x) {\n          _this._onRemoved(x);\n        });\n      } else if (change.type === \"push\") {\n        _this._onInserted(change.newValue);\n      } else if (change.type === \"setIndex\") {\n        _this._onRemoved(change.oldValue);\n        _this._onInserted(change.newValue, change.index);\n      } else if (change.type === \"insertIndex\") {\n        _this._onInserted(change.newValue, change.index);\n      } else if (change.type === \"removeIndex\") {\n        _this._onRemoved(change.oldValue);\n      } else if (change.type === \"moveIndex\") {\n        _this._onRemoved(change.value);\n        _this._onInserted(change.value, change.newIndex);\n      } else {\n        throw new Error(\"Unknown IListEvent type\");\n      }\n    });\n    return _this;\n  }\n  Object.defineProperty(Children.prototype, \"_onInserted\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (child, index) {\n      child._setParent(this._container, true);\n      var childrenDisplay = this._container._childrenDisplay;\n      if (index === undefined) {\n        childrenDisplay.addChild(child._display);\n      } else {\n        childrenDisplay.addChildAt(child._display, index);\n      }\n    }\n  });\n  Object.defineProperty(Children.prototype, \"_onRemoved\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (child) {\n      this._container._childrenDisplay.removeChild(child._display);\n      this._container.markDirtyBounds();\n      this._container.markDirty();\n    }\n  });\n  /**\r\n   * Returns `true` if obejct is disposed.\r\n   */\n  Object.defineProperty(Children.prototype, \"isDisposed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this._disposed;\n    }\n  });\n  /**\r\n   * Permanently dispose this object.\r\n   */\n  Object.defineProperty(Children.prototype, \"dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (!this._disposed) {\n        this._disposed = true;\n        this._events.dispose();\n        $array.each(this.values, function (child) {\n          child.dispose();\n        });\n      }\n    }\n  });\n  return Children;\n}(List);\nexport { Children };","map":{"version":3,"mappings":";AAAA,SAASA,IAAI,QAAQ,QAAQ;AAI7B,OAAO,KAAKC,MAAM,MAAM,SAAS;AAEjC;;;;;AAKA;EAAgDC;EAK/C,kBAAmBC,SAAoB;IAAvC,YACCC,iBAAO;IALRC;;;;aAA6B;;IAC7BA;;;;;;IACAA;;;;;;IAKCC,KAAI,CAACC,UAAU,GAAGJ,SAAS;IAE3BG,KAAI,CAACE,OAAO,GAAGF,KAAI,CAACG,MAAM,CAACC,KAAK,CAAC,UAACC,MAAM;MACvC,IAAIA,MAAM,CAACC,IAAI,KAAK,OAAO,EAAE;QAC5BX,MAAM,CAACY,IAAI,CAACF,MAAM,CAACG,SAAS,EAAE,UAACC,CAAC;UAC/BT,KAAI,CAACU,UAAU,CAACD,CAAC,CAAC;QACnB,CAAC,CAAC;OAEF,MAAM,IAAIJ,MAAM,CAACC,IAAI,KAAK,MAAM,EAAE;QAClCN,KAAI,CAACW,WAAW,CAACN,MAAM,CAACO,QAAQ,CAAC;OAEjC,MAAM,IAAIP,MAAM,CAACC,IAAI,KAAK,UAAU,EAAE;QACtCN,KAAI,CAACU,UAAU,CAACL,MAAM,CAACQ,QAAQ,CAAC;QAChCb,KAAI,CAACW,WAAW,CAACN,MAAM,CAACO,QAAQ,EAAEP,MAAM,CAACS,KAAK,CAAC;OAE/C,MAAM,IAAIT,MAAM,CAACC,IAAI,KAAK,aAAa,EAAE;QACzCN,KAAI,CAACW,WAAW,CAACN,MAAM,CAACO,QAAQ,EAAEP,MAAM,CAACS,KAAK,CAAC;OAE/C,MAAM,IAAIT,MAAM,CAACC,IAAI,KAAK,aAAa,EAAE;QACzCN,KAAI,CAACU,UAAU,CAACL,MAAM,CAACQ,QAAQ,CAAC;OAEhC,MAAM,IAAIR,MAAM,CAACC,IAAI,KAAK,WAAW,EAAE;QACvCN,KAAI,CAACU,UAAU,CAACL,MAAM,CAACU,KAAK,CAAC;QAC7Bf,KAAI,CAACW,WAAW,CAACN,MAAM,CAACU,KAAK,EAAEV,MAAM,CAACW,QAAQ,CAAC;OAE/C,MAAM;QACN,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;;IAE5C,CAAC,CAAC;;EACH;;;;;WAEA,UAAsBC,KAAQ,EAAEJ,KAAc;MAC7CI,KAAK,CAACC,UAAU,CAAC,IAAI,CAAClB,UAAU,EAAE,IAAI,CAAC;MACvC,IAAMmB,eAAe,GAAG,IAAI,CAACnB,UAAU,CAACoB,gBAAgB;MACxD,IAAIP,KAAK,KAAKQ,SAAS,EAAE;QACxBF,eAAe,CAACG,QAAQ,CAACL,KAAK,CAACM,QAAQ,CAAC;OAExC,MAAM;QACNJ,eAAe,CAACK,UAAU,CAACP,KAAK,CAACM,QAAQ,EAAEV,KAAK,CAAC;;IAEnD;;;;;;WAEA,UAAqBI,KAAQ;MAC5B,IAAI,CAACjB,UAAU,CAACoB,gBAAgB,CAACK,WAAW,CAACR,KAAK,CAACM,QAAQ,CAAC;MAC5D,IAAI,CAACvB,UAAU,CAAC0B,eAAe,EAAE;MACjC,IAAI,CAAC1B,UAAU,CAAC2B,SAAS,EAAE;IAC5B;;EAEA;;;;;;;WAGA;MACC,OAAO,IAAI,CAACC,SAAS;IACtB;;EAEA;;;;;;;WAGA;MACC,IAAI,CAAC,IAAI,CAACA,SAAS,EAAE;QACpB,IAAI,CAACA,SAAS,GAAG,IAAI;QAErB,IAAI,CAAC3B,OAAO,CAAC4B,OAAO,EAAE;QAEtBnC,MAAM,CAACY,IAAI,CAAC,IAAI,CAACwB,MAAM,EAAE,UAACb,KAAK;UAC9BA,KAAK,CAACY,OAAO,EAAE;QAChB,CAAC,CAAC;;IAEJ;;EACD,eAAC;AAAD,CAAC,CA7E+CpC,IAAI","names":["List","$array","__extends","container","_super","Object","_this","_container","_events","events","onAll","change","type","each","oldValues","x","_onRemoved","_onInserted","newValue","oldValue","index","value","newIndex","Error","child","_setParent","childrenDisplay","_childrenDisplay","undefined","addChild","_display","addChildAt","removeChild","markDirtyBounds","markDirty","_disposed","dispose","values"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\core\\util\\Children.ts"],"sourcesContent":["import { List } from \"./List\";\nimport type { IDisposer } from \"./Disposer\";\nimport type { Container } from \"../render/Container\";\nimport type { Sprite } from \"../render/Sprite\";\nimport * as $array from \"./Array\";\n\n/**\n * A version of [[List]] to hold children of the [[Container]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/} for more info\n */\nexport class Children<A extends Sprite> extends List<A> implements IDisposer {\n\tprivate _disposed: boolean = false;\n\tprivate _container: Container;\n\tprivate _events: IDisposer;\n\n\tpublic constructor(container: Container) {\n\t\tsuper();\n\n\t\tthis._container = container;\n\n\t\tthis._events = this.events.onAll((change) => {\n\t\t\tif (change.type === \"clear\") {\n\t\t\t\t$array.each(change.oldValues, (x) => {\n\t\t\t\t\tthis._onRemoved(x);\n\t\t\t\t});\n\n\t\t\t} else if (change.type === \"push\") {\n\t\t\t\tthis._onInserted(change.newValue);\n\n\t\t\t} else if (change.type === \"setIndex\") {\n\t\t\t\tthis._onRemoved(change.oldValue);\n\t\t\t\tthis._onInserted(change.newValue, change.index);\n\n\t\t\t} else if (change.type === \"insertIndex\") {\n\t\t\t\tthis._onInserted(change.newValue, change.index);\n\n\t\t\t} else if (change.type === \"removeIndex\") {\n\t\t\t\tthis._onRemoved(change.oldValue);\n\n\t\t\t} else if (change.type === \"moveIndex\") {\n\t\t\t\tthis._onRemoved(change.value);\n\t\t\t\tthis._onInserted(change.value, change.newIndex);\n\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Unknown IListEvent type\");\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected _onInserted(child: A, index?: number) {\n\t\tchild._setParent(this._container, true);\n\t\tconst childrenDisplay = this._container._childrenDisplay;\n\t\tif (index === undefined) {\n\t\t\tchildrenDisplay.addChild(child._display);\n\n\t\t} else {\n\t\t\tchildrenDisplay.addChildAt(child._display, index);\n\t\t}\n\t}\n\n\tprotected _onRemoved(child: A) {\n\t\tthis._container._childrenDisplay.removeChild(child._display);\n\t\tthis._container.markDirtyBounds();\n\t\tthis._container.markDirty();\n\t}\n\n\t/**\n\t * Returns `true` if obejct is disposed.\n\t */\n\tpublic isDisposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\t/**\n\t * Permanently dispose this object.\n\t */\n\tpublic dispose() {\n\t\tif (!this._disposed) {\n\t\t\tthis._disposed = true;\n\n\t\t\tthis._events.dispose();\n\n\t\t\t$array.each(this.values, (child) => {\n\t\t\t\tchild.dispose();\n\t\t\t});\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}