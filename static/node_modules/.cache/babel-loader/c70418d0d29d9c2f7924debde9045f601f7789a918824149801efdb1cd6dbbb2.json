{"ast":null,"code":"/**\r\n * Defines Pyramid Series.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\nimport { registry } from \"../../core/Registry\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport { percent } from \"../../core/utils/Percent\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo: sequenced?\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar PyramidSeriesDataItem = /** @class */function (_super) {\n  __extends(PyramidSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function PyramidSeriesDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"PyramidSeriesDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return PyramidSeriesDataItem;\n}(FunnelSeriesDataItem);\nexport { PyramidSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\nvar PyramidSeries = /** @class */function (_super) {\n  __extends(PyramidSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n  function PyramidSeries() {\n    var _this = _super.call(this) || this;\n    _this.className = \"PyramidSeries\";\n    _this.topWidth = percent(0);\n    _this.bottomWidth = percent(100);\n    _this.pyramidHeight = percent(100);\n    _this.valueIs = \"area\";\n    _this.sliceLinks.template.width = 0;\n    _this.sliceLinks.template.height = 0;\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n  PyramidSeries.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Pyramid Series\");\n    }\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n  PyramidSeries.prototype.createDataItem = function () {\n    return new PyramidSeriesDataItem();\n  };\n  /**\r\n   * (Re)validates the whole series, effectively causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  PyramidSeries.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n    this._nextWidth = undefined;\n  };\n  /**\r\n   * [getNextValue description]\r\n   *\r\n   * @todo Description\r\n   * @param dataItem [description]\r\n   * @return [description]\r\n   */\n  PyramidSeries.prototype.getNextValue = function (dataItem) {\n    var index = dataItem.index;\n    var nextValue = dataItem.getWorkingValue(\"value\");\n    if (index < this.dataItems.length - 1) {\n      var nextItem = this.dataItems.getIndex(index + 1);\n      nextValue = nextItem.getWorkingValue(\"value\");\n    }\n    if (nextValue == 0) {\n      nextValue = 0.000001;\n    }\n    return nextValue;\n  };\n  /**\r\n   * [validateDataElements description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n  PyramidSeries.prototype.validateDataElements = function () {\n    var _this = this;\n    var maxWidth = this.slicesContainer.innerWidth;\n    var maxHeight = this.slicesContainer.innerHeight;\n    this.dataItems.each(function (dataItem) {\n      if (dataItem.value > 0) {\n        var relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\n        var sliceLink = dataItem.sliceLink;\n        if (_this.orientation == \"vertical\") {\n          maxHeight -= sliceLink.pixelHeight * relValue;\n        } else {\n          maxWidth -= sliceLink.pixelWidth * relValue;\n        }\n      }\n    });\n    this._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\n    this._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\n    if (this.orientation == \"vertical\") {\n      var y = (maxHeight - this._pyramidHeight) / 2;\n      this.slicesContainer.y = y;\n      this.labelsContainer.y = y;\n      this.ticksContainer.y = y;\n    } else {\n      var x = (maxWidth - this._pyramidWidth) / 2;\n      this.slicesContainer.x = x;\n      this.labelsContainer.x = x;\n      this.ticksContainer.x = x;\n    }\n    _super.prototype.validateDataElements.call(this);\n  };\n  /**\r\n   * [decorateSlice description]\r\n   *\r\n   * @todo Description\r\n   * @param dataItem [description]\r\n   */\n  PyramidSeries.prototype.decorateSlice = function (dataItem) {\n    var sum = this.dataItem.values.value.absoluteSum;\n    if (sum == 0) {\n      return;\n    }\n    var slice = dataItem.slice;\n    var sliceLink = dataItem.sliceLink;\n    var label = dataItem.label;\n    var tick = dataItem.tick;\n    // TODO can this be removed ?\n    this.getNextValue(dataItem);\n    var workingValue = Math.abs(dataItem.getWorkingValue(\"value\"));\n    var pyramidWidth = this._pyramidWidth;\n    var pyramidHeight = this._pyramidHeight;\n    var maxWidth = this.slicesContainer.innerWidth;\n    var maxHeight = this.slicesContainer.innerHeight;\n    var linkWidth = sliceLink.pixelWidth;\n    var linkHeight = sliceLink.pixelHeight;\n    if ((dataItem.value == 0 || dataItem.value == null) && this.ignoreZeroValues) {\n      dataItem.__disabled = true;\n    } else {\n      dataItem.__disabled = false;\n    }\n    if (this.orientation == \"vertical\") {\n      var topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\n      if (!$type.isNumber(this._nextWidth)) {\n        this._nextWidth = topWidth;\n      }\n      var bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\n      var sliceTopWidth = this._nextWidth;\n      var angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\n      var c = Math.tan(Math.PI / 2 - angle);\n      if (c == 0) {\n        c = 0.00000001;\n      }\n      var sliceHeight = void 0;\n      var sliceBottomWidth = void 0;\n      if (this.valueIs == \"area\") {\n        var totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\n        var square = totalSquare * workingValue / sum;\n        var s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\n        sliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\n        if (sliceHeight > 0) {\n          sliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\n        } else {\n          sliceBottomWidth = sliceTopWidth;\n        }\n      } else {\n        sliceHeight = pyramidHeight * workingValue / sum;\n        sliceBottomWidth = sliceTopWidth - sliceHeight * c;\n      }\n      slice.height = sliceHeight;\n      slice.width = maxWidth;\n      slice.bottomWidth = sliceBottomWidth;\n      slice.topWidth = sliceTopWidth;\n      sliceLink.topWidth = slice.bottomWidth;\n      sliceLink.bottomWidth = slice.bottomWidth;\n      slice.y = this._nextY;\n      //slice.x = maxWidth / 2;\n      if (!this.alignLabels) {\n        label.x = maxWidth / 2;\n      } else {\n        label.x = 0;\n      }\n      label.y = slice.pixelY + slice.pixelHeight * tick.locationY + slice.dy;\n      this._nextY += slice.pixelHeight + linkHeight * workingValue / Math.max(Math.abs(dataItem.value), 0.00000001);\n      sliceLink.y = this._nextY - linkHeight;\n      sliceLink.x = maxWidth / 2;\n    } else {\n      var topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\n      if (!$type.isNumber(this._nextWidth)) {\n        this._nextWidth = topWidth;\n      }\n      var bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\n      var sliceTopWidth = this._nextWidth;\n      var angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\n      var c = Math.tan(Math.PI / 2 - angle);\n      if (c == 0) {\n        c = 0.00000001;\n      }\n      var sliceWidth = void 0;\n      var sliceBottomWidth = void 0;\n      if (this.valueIs == \"area\") {\n        var totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\n        var square = totalSquare * workingValue / sum;\n        sliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\n        sliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\n      } else {\n        sliceWidth = pyramidWidth * workingValue / sum;\n        sliceBottomWidth = sliceTopWidth - sliceWidth * c;\n      }\n      slice.width = sliceWidth;\n      slice.height = maxHeight;\n      slice.bottomWidth = sliceBottomWidth;\n      slice.topWidth = sliceTopWidth;\n      sliceLink.topWidth = slice.bottomWidth;\n      sliceLink.bottomWidth = slice.bottomWidth;\n      slice.x = this._nextY;\n      if (!this.alignLabels) {\n        label.y = maxHeight / 2;\n      } else {\n        label.y = this.labelsContainer.measuredHeight;\n      }\n      label.x = slice.pixelX + slice.pixelWidth * tick.locationX + slice.dx;\n      this._nextY += slice.pixelWidth + linkWidth * workingValue / Math.max(Math.abs(dataItem.value), 0.00000001);\n      sliceLink.x = this._nextY - linkWidth;\n      sliceLink.y = maxHeight / 2;\n    }\n    this._nextWidth = slice.bottomWidth;\n  };\n  Object.defineProperty(PyramidSeries.prototype, \"topWidth\", {\n    /**\r\n     * @return {number | Percent}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"topWidth\");\n    },\n    /**\r\n     * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n     *\r\n     * `0%` (default) means the pyramid will be perfectly pointy.\r\n     * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n     * `100%` will take the whole width of the chart.\r\n     *\r\n     * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n     * `100%` and `bottomWidth` to `0%`.\r\n     *\r\n     * @default 0%\r\n     * @param {number | Percent}\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"topWidth\", value, false, false, 10, false)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PyramidSeries.prototype, \"pyramidHeight\", {\n    /**\r\n     * @return {number | Percent}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"pyramidHeight\");\n    },\n    /**\r\n     * Height of pyramid\r\n     *\r\n     *\r\n     * @default 100%\r\n     * @param {number | Percent}\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"pyramidHeight\", value, false, false, 10, false)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PyramidSeries.prototype, \"bottomWidth\", {\n    /**\r\n     * @return {number | Percent}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"bottomWidth\");\n    },\n    /**\r\n     * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n     *\r\n     * `0%` means the pyramid's botto will be pointy.\r\n     * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n     * `100%` (default) will take the whole width of the chart.\r\n     *\r\n     * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n     * `100%` and `bottomWidth` to `0%`.\r\n     *\r\n     * @param {number | Percent}\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"bottomWidth\", value, false, false, 10, false)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PyramidSeries.prototype, \"valueIs\", {\n    /**\r\n     * @return {\"area\" | \"height\"}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"valueIs\");\n    },\n    /**\r\n     * Indicates how slice's value will influence its size.\r\n     *\r\n     * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n     * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n     * slices based on their value.\r\n     *\r\n     * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n     * will represent their value relatively to values of the other slices.\r\n     *\r\n     * This is a correct way to depict \"weight\" of each slice based on their\r\n     * values.\r\n     *\r\n     * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n     * divvied up between slices. Actual slice width or area is not counted in.\r\n     *\r\n     * From the data-viz standpoint this does not make a lot of sense, since\r\n     * slices with lesser values might appear more prominent if they are placed\r\n     * towards thick end of the pyramid since their areas will be bigger.\r\n     *\r\n     * @default \"area\"\r\n     * @param {\"area\" | \"height\"}\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"valueIs\", value)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PyramidSeries;\n}(FunnelSeries);\nexport { PyramidSeries };\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;","map":{"version":3,"mappings":"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","names":["FunnelSeries","FunnelSeriesDataItem","registry","$type","$utils","percent","__extends","_super","_this","className","applyTheme","topWidth","bottomWidth","pyramidHeight","valueIs","sliceLinks","template","width","height","PyramidSeries","applyInternalDefaults","hasValue","readerTitle","language","translate","PyramidSeriesDataItem","validate","_nextWidth","undefined","dataItem","index","nextValue","getWorkingValue","dataItems","length","nextItem","getIndex","maxWidth","slicesContainer","innerWidth","maxHeight","innerHeight","each","value","relValue","sliceLink","orientation","pixelHeight","pixelWidth","_pyramidHeight","relativeToValue","_pyramidWidth","y","labelsContainer","ticksContainer","x","validateDataElements","sum","values","absoluteSum","slice","label","tick","getNextValue","workingValue","Math","abs","pyramidWidth","linkWidth","linkHeight","ignoreZeroValues","__disabled","isNumber","sliceTopWidth","angle","atan2","c","tan","PI","sliceHeight","sliceBottomWidth","totalSquare","square","s","sqrt","_nextY","alignLabels","pixelY","locationY","dy","max","sliceWidth","measuredHeight","pixelX","locationX","dx","Object","getPropertyValue","setPercentProperty","invalidate","setPropertyValue","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\series\\PyramidSeries.ts"],"sourcesContent":["/**\r\n * Defines Pyramid Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IFunnelSeriesAdapters, IFunnelSeriesDataFields, IFunnelSeriesEvents, IFunnelSeriesProperties, FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PyramidSeriesDataItem extends FunnelSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PyramidSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PyramidSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesDataFields extends IFunnelSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesProperties extends IFunnelSeriesProperties {\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Top width in pixels or percent\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t */\r\n\tpyramidHeight?: number | Percent;\r\n\r\n\t/**\r\n\t * Indicates whether slice value should sould influence its height or area\r\n\t * size.\r\n\t *\r\n\t * @default \"area\"\r\n\t */\r\n\tvalueIs?: \"height\" | \"area\";\r\n}\r\n\r\n/**\r\n * Defines events for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesEvents extends IFunnelSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PyramidSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPyramidSeriesAdapters extends IFunnelSeriesAdapters, IPyramidSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PyramidSeries extends FunnelSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPyramidSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPyramidSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPyramidSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPyramidSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PyramidSeriesDataItem;\r\n\r\n\t/**\r\n\t * [_nextWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _nextWidth: number;\r\n\r\n\tprotected _pyramidHeight: number;\r\n\r\n\tprotected _pyramidWidth: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PyramidSeries\";\r\n\t\tthis.topWidth = percent(0);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.pyramidHeight = percent(100);\r\n\t\tthis.valueIs = \"area\";\r\n\r\n\t\tthis.sliceLinks.template.width = 0;\r\n\t\tthis.sliceLinks.template.height = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PyramidSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextWidth = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\t\t}\r\n\t\tif (nextValue == 0) {\r\n\t\t\tnextValue = 0.000001;\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tif (dataItem.value > 0) {\r\n\t\t\t\tlet relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\r\n\t\t\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tmaxHeight -= (sliceLink.pixelHeight * relValue);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tmaxWidth -= (sliceLink.pixelWidth * relValue);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\r\n\t\tthis._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet y = (maxHeight - this._pyramidHeight) / 2;\r\n\t\t\tthis.slicesContainer.y = y\r\n\t\t\tthis.labelsContainer.y = y;\r\n\t\t\tthis.ticksContainer.y = y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = (maxWidth - this._pyramidWidth) / 2;\r\n\t\t\tthis.slicesContainer.x = x;\r\n\t\t\tthis.labelsContainer.x = x;\r\n\t\t\tthis.ticksContainer.x = x;\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElements();\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]) {\r\n\r\n\t\tlet sum = this.dataItem.values.value.absoluteSum;\r\n\r\n\t\tif (sum == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tthis.getNextValue(dataItem);\r\n\r\n\t\tlet workingValue = Math.abs(dataItem.getWorkingValue(\"value\"));\r\n\r\n\t\tlet pyramidWidth = this._pyramidWidth;\r\n\t\tlet pyramidHeight = this._pyramidHeight;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet linkWidth = sliceLink.pixelWidth;\r\n\t\tlet linkHeight = sliceLink.pixelHeight;\r\n\r\n\t\tif ((dataItem.value == 0 || dataItem.value == null) && this.ignoreZeroValues) {\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.__disabled = false;\r\n\t\t}\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceHeight: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\r\n\t\t\t\tlet square = totalSquare * workingValue / sum;\r\n\r\n\t\t\t\tlet s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\r\n\r\n\t\t\t\tsliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\r\n\t\t\t\tif (sliceHeight > 0) {\r\n\t\t\t\t\tsliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tsliceBottomWidth = sliceTopWidth;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceHeight = pyramidHeight * workingValue / sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceHeight * c;\r\n\t\t\t}\r\n\r\n\t\t\tslice.height = sliceHeight;\r\n\t\t\tslice.width = maxWidth;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\t\t\t//slice.x = maxWidth / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = maxWidth / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = 0;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY + slice.dy;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight * workingValue / Math.max(Math.abs(dataItem.value), 0.00000001);\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = maxWidth / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceWidth: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\r\n\t\t\t\tlet square = totalSquare * workingValue / sum;\r\n\t\t\t\tsliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceWidth = pyramidWidth * workingValue / sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceWidth * c;\r\n\t\t\t}\r\n\r\n\t\t\tslice.width = sliceWidth;\r\n\t\t\tslice.height = maxHeight;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = maxHeight / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX + slice.dx;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth * workingValue / Math.max(Math.abs(dataItem.value), 0.00000001);\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\t\t\tsliceLink.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tthis._nextWidth = slice.bottomWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` (default) means the pyramid will be perfectly pointy.\r\n\t * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n\t * `100%` will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @default 0%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"topWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t *\r\n\t *\r\n\t * @default 100%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set pyramidHeight(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"pyramidHeight\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get pyramidHeight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"pyramidHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` means the pyramid's botto will be pointy.\r\n\t * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n\t * `100%` (default) will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"bottomWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's value will influence its size.\r\n\t *\r\n\t * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n\t * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n\t * slices based on their value.\r\n\t *\r\n\t * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n\t * will represent their value relatively to values of the other slices.\r\n\t *\r\n\t * This is a correct way to depict \"weight\" of each slice based on their\r\n\t * values.\r\n\t *\r\n\t * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n\t * divvied up between slices. Actual slice width or area is not counted in.\r\n\t *\r\n\t * From the data-viz standpoint this does not make a lot of sense, since\r\n\t * slices with lesser values might appear more prominent if they are placed\r\n\t * towards thick end of the pyramid since their areas will be bigger.\r\n\t *\r\n\t * @default \"area\"\r\n\t * @param {\"area\" | \"height\"}\r\n\t */\r\n\tpublic set valueIs(value: \"area\" | \"height\") {\r\n\t\tif (this.setPropertyValue(\"valueIs\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"area\" | \"height\"}\r\n\t */\r\n\tpublic get valueIs(): \"area\" | \"height\" {\r\n\t\treturn this.getPropertyValue(\"valueIs\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\r\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}