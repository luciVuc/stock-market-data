{"ast":null,"code":"/**\r\n * Defines Pictorial Stacked Series.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { PyramidSeries, PyramidSeriesDataItem } from \"./PyramidSeries\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport { percent } from \"../../core/utils/Percent\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo: sequenced?\n/**\r\n * Defines a [[DataItem]] for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar PictorialStackedSeriesDataItem = /** @class */function (_super) {\n  __extends(PictorialStackedSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function PictorialStackedSeriesDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"PictorialStackedSeriesDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return PictorialStackedSeriesDataItem;\n}(PyramidSeriesDataItem);\nexport { PictorialStackedSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines [[Series]] for a PictorialStacked series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPictorialStackedSeriesEvents} for a list of available Events\r\n * @see {@link IPictorialStackedSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\nvar PictorialStackedSeries = /** @class */function (_super) {\n  __extends(PictorialStackedSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n  function PictorialStackedSeries() {\n    var _this = _super.call(this) || this;\n    _this.className = \"PictorialStackedSeries\";\n    _this.topWidth = percent(100);\n    _this.bottomWidth = percent(100);\n    _this.valueIs = \"height\";\n    _this.applyTheme();\n    _this.startLocation = 0;\n    _this.endLocation = 1;\n    _this.align = \"center\";\n    _this.valign = \"middle\";\n    _this._maskSprite = _this.slicesContainer.createChild(Sprite);\n    _this._maskSprite.visible = false;\n    _this._maskSprite.zIndex = 100;\n    _this._maskSprite.shouldClone = false;\n    return _this;\n  }\n  /**\r\n   * Sizes the mask to fit the series.\r\n   *\r\n   * @ignore\r\n   */\n  PictorialStackedSeries.prototype.validateDataElements = function () {\n    var maxWidth = this.slicesContainer.maxWidth;\n    var maxHeight = this.slicesContainer.maxHeight;\n    var maskSprite = this._maskSprite;\n    //maskSprite.validatePosition(); // for some reason size of the maskSprite is 0x0 after we removed validatePosition in afterdraw\n    var pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\n    var pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\n    var scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\n    if (scale == Infinity) {\n      scale = 1; // can't return here, won't draw legend properly\n    }\n\n    scale = $math.max(0.001, scale);\n    var startLocation = this.startLocation;\n    var endLocation = this.endLocation;\n    var newWidth = $math.min(maxWidth, pictureWidth * scale);\n    var newHeight = $math.min(maxHeight, pictureHeight * scale);\n    maskSprite.scale = scale;\n    if (this.orientation == \"vertical\") {\n      this.topWidth = newWidth + 4;\n      this.bottomWidth = newWidth + 4;\n      this.pyramidHeight = newHeight * (endLocation - startLocation);\n      maskSprite.x = maxWidth / 2;\n      maskSprite.y = newHeight / 2;\n    } else {\n      this.topWidth = newHeight + 4;\n      this.bottomWidth = newHeight + 4;\n      this.pyramidHeight = newWidth * (endLocation - startLocation);\n      maskSprite.valign = \"middle\";\n      maskSprite.x = newWidth / 2;\n      maskSprite.y = maxHeight / 2;\n    }\n    maskSprite.verticalCenter = \"middle\";\n    maskSprite.horizontalCenter = \"middle\";\n    _super.prototype.validateDataElements.call(this);\n    var y;\n    var x;\n    if (this.orientation == \"vertical\") {\n      if (this.valign == \"bottom\") {\n        y = maxHeight - newHeight;\n      }\n      if (this.valign == \"middle\") {\n        y = (maxHeight - newHeight) / 2;\n      }\n      if (this.valign == \"top\") {\n        y = 0;\n      }\n      if (this.align == \"left\") {\n        x = -(maxWidth - newWidth) / 2;\n      }\n      if (this.align == \"center\") {\n        x = 0;\n      }\n      if (this.align == \"right\") {\n        x = (maxWidth - newWidth) / 2;\n      }\n      this.slices.template.dy = startLocation * newHeight;\n      if (this.alignLabels) {\n        this.slicesContainer.dx = x;\n      }\n    } else {\n      if (this.valign == \"bottom\") {\n        y = (maxHeight - newHeight) / 2;\n      }\n      if (this.valign == \"middle\") {\n        y = 0;\n      }\n      if (this.valign == \"top\") {\n        y = -(maxHeight - newHeight) / 2;\n      }\n      if (this.align == \"left\") {\n        x = 0;\n      }\n      if (this.align == \"center\") {\n        x = (maxWidth - newWidth) / 2;\n      }\n      if (this.align == \"right\") {\n        x = maxWidth - newWidth;\n      }\n      this.slices.template.dx = startLocation * newWidth;\n      if (this.alignLabels) {\n        this.slicesContainer.dy = y;\n      }\n    }\n    this.slicesContainer.x = x;\n    this.labelsContainer.x = x;\n    this.ticksContainer.x = x;\n    this.slicesContainer.y = y;\n    this.labelsContainer.y = y;\n    this.ticksContainer.y = y;\n    if (newWidth > 0 && newHeight > 0) {\n      this.slicesContainer.mask = maskSprite;\n    }\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n  PictorialStackedSeries.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Pyramid Series\");\n    }\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n  PictorialStackedSeries.prototype.createDataItem = function () {\n    return new PictorialStackedSeriesDataItem();\n  };\n  Object.defineProperty(PictorialStackedSeries.prototype, \"maskSprite\", {\n    /**\r\n     * A [[Sprite]] element that is used as a series mask.\r\n     *\r\n     * If set, this element's shape will be used to apply shape to the whole\r\n     * stacked pictorial series.\r\n     *\r\n     * You can use this element's `path` property to set an SVG path for the\r\n     * shape:\r\n     *\r\n     * ```TypeScript\r\n     * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n     * // ...\r\n     * series.maskSprite.path = iconPath;\r\n     * ```\r\n     * ```JavaScript\r\n     * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n     * // ...\r\n     * series.maskSprite.path = iconPath;\r\n     * ```\r\n     * ```JSON\r\n     * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n     * // ...\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     \"type\": \"PictorialStackedSeries\",\r\n     *     // ...\r\n     *     \"maskSprite\": {\r\n     *       \"path\": iconPath\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @return Mask sprite\r\n     */\n    get: function () {\n      return this._maskSprite;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Inits FunnelSlice.\r\n   *\r\n   * @param slice to init\r\n   */\n  PictorialStackedSeries.prototype.initSlice = function (slice) {\n    _super.prototype.initSlice.call(this, slice);\n    var hs = slice.states.getKey(\"hover\");\n    if (hs) {\n      hs.properties.expandDistance = 0;\n    }\n  };\n  Object.defineProperty(PictorialStackedSeries.prototype, \"startLocation\", {\n    /**\r\n     * @return  Start location\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startLocation\");\n    },\n    /**\r\n     * Relative location to start series from.\r\n     *\r\n     * Range of values: 0 to 1.\r\n     *\r\n     * This setting indicates where actual slices will start relatively to the\r\n     * whole height/width of the series.\r\n     *\r\n     * For example, if we want slices to start at 30% from the top/left of the\r\n     * series, we can set `startLocation = 0.3`.\r\n     *\r\n     * To fill shape outside of the location range, use background of the\r\n     * property `slicesContainer`.\r\n     *\r\n     * ```TypeScript\r\n     * series.startLocation = 0.2;\r\n     * series.endLocation = 0.8;\r\n     * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n     * ```\r\n     * ```JavaScript\r\n     * series.startLocation = 0.2;\r\n     * series.endLocation = 0.8;\r\n     * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"startLocation\": 0.2,\r\n     *     \"endLocation\": 0.8,\r\n     *     \"slicesContainer\": {\r\n     *       \"background\": {\r\n     *         \"fill\": \"#eee\"\r\n     *       }\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @default 0\r\n     * @since 4.1.13\r\n     * @param  value  Start location\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"startLocation\", value)) {\n        this.invalidateDataItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PictorialStackedSeries.prototype, \"endLocation\", {\n    /**\r\n     * @return End location\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endLocation\");\n    },\n    /**\r\n     * Relative location to end series at.\r\n     *\r\n     * Range of values: 0 to 1.\r\n     *\r\n     * This setting indicates where actual slices will end relatively to the\r\n     * whole height/width of the series.\r\n     *\r\n     * For example, if we want slices to end at 70% from the top/left of the\r\n     * series, we can set `endLocation = 0.7`.\r\n     *\r\n     * To fill shape outside of the location range, use background of the\r\n     * property `slicesContainer`.\r\n     *\r\n     * ```TypeScript\r\n     * series.startLocation = 0.2;\r\n     * series.endLocation = 0.8;\r\n     * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n     * ```\r\n     * ```JavaScript\r\n     * series.startLocation = 0.2;\r\n     * series.endLocation = 0.8;\r\n     * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"startLocation\": 0.2,\r\n     *     \"endLocation\": 0.8,\r\n     *     \"slicesContainer\": {\r\n     *       \"background\": {\r\n     *         \"fill\": \"#eee\"\r\n     *       }\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @default 1\r\n     * @since 4.1.13\r\n     * @param  value  End location\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"endLocation\", value)) {\n        this.invalidateDataItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PictorialStackedSeries;\n}(PyramidSeries);\nexport { PictorialStackedSeries };\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"PictorialStackedSeries\"] = PictorialStackedSeries;\nregistry.registeredClasses[\"PictorialStackedSeriesDataItem\"] = PictorialStackedSeriesDataItem;","map":{"version":3,"mappings":"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","names":["PyramidSeries","PyramidSeriesDataItem","Sprite","registry","$math","$type","percent","__extends","_super","_this","className","applyTheme","topWidth","bottomWidth","valueIs","startLocation","endLocation","align","valign","_maskSprite","slicesContainer","createChild","visible","zIndex","shouldClone","PictorialStackedSeries","maxWidth","maxHeight","maskSprite","pictureWidth","measuredWidth","scale","pictureHeight","measuredHeight","min","Infinity","max","newWidth","newHeight","orientation","pyramidHeight","x","y","verticalCenter","horizontalCenter","validateDataElements","slices","template","dy","alignLabels","dx","labelsContainer","ticksContainer","mask","applyInternalDefaults","hasValue","readerTitle","language","translate","PictorialStackedSeriesDataItem","Object","slice","initSlice","hs","states","getKey","properties","expandDistance","getPropertyValue","value","setPropertyValue","invalidateDataItems","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\series\\PictorialStackedSeries.ts"],"sourcesContent":["/**\r\n * Defines Pictorial Stacked Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPyramidSeriesAdapters, IPyramidSeriesDataFields, IPyramidSeriesEvents, IPyramidSeriesProperties, PyramidSeries, PyramidSeriesDataItem } from \"./PyramidSeries\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PictorialStackedSeriesDataItem extends PyramidSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PictorialStackedSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PictorialStackedSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesDataFields extends IPyramidSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesProperties extends IPyramidSeriesProperties {\r\n\r\n\t/**\r\n\t * Relative location to start series from.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tstartLocation?: number;\r\n\r\n\t/**\r\n\t * Relative location to end series at.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tendLocation?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesEvents extends IPyramidSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPictorialStackedSeriesAdapters extends IPyramidSeriesAdapters, IPictorialStackedSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a PictorialStacked series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPictorialStackedSeriesEvents} for a list of available Events\r\n * @see {@link IPictorialStackedSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PictorialStackedSeries extends PyramidSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPictorialStackedSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPictorialStackedSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPictorialStackedSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPictorialStackedSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PictorialStackedSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds a Sprite that acts as an intelligent mask for the serries.\r\n\t */\r\n\tprotected _maskSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PictorialStackedSeries\";\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.valueIs = \"height\";\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\t\tthis.align = \"center\";\r\n\t\tthis.valign = \"middle\";\r\n\r\n\t\tthis._maskSprite = this.slicesContainer.createChild(Sprite);\r\n\t\tthis._maskSprite.visible = false;\r\n\t\tthis._maskSprite.zIndex = 100;\r\n\t\tthis._maskSprite.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Sizes the mask to fit the series.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\r\n\t\tlet maxWidth = this.slicesContainer.maxWidth;\r\n\t\tlet maxHeight = this.slicesContainer.maxHeight;\r\n\r\n\t\tlet maskSprite = this._maskSprite;\r\n\t\t//maskSprite.validatePosition(); // for some reason size of the maskSprite is 0x0 after we removed validatePosition in afterdraw\r\n\r\n\t\tlet pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\r\n\t\tlet pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\r\n\r\n\t\tlet scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\r\n\r\n\t\tif (scale == Infinity) {\r\n\t\t\tscale = 1; // can't return here, won't draw legend properly\r\n\t\t}\r\n\r\n\t\tscale = $math.max(0.001, scale);\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tlet newWidth = $math.min(maxWidth, pictureWidth * scale);\r\n\t\tlet newHeight = $math.min(maxHeight, pictureHeight * scale);\r\n\r\n\t\tmaskSprite.scale = scale;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tthis.topWidth = newWidth + 4;\r\n\t\t\tthis.bottomWidth = newWidth + 4;\r\n\t\t\tthis.pyramidHeight = newHeight * (endLocation - startLocation);\r\n\t\t\tmaskSprite.x = maxWidth / 2;\r\n\t\t\tmaskSprite.y = newHeight / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.topWidth = newHeight + 4;\r\n\t\t\tthis.bottomWidth = newHeight + 4;\r\n\t\t\tthis.pyramidHeight = newWidth * (endLocation - startLocation);\r\n\t\t\tmaskSprite.valign = \"middle\";\r\n\t\t\tmaskSprite.x = newWidth / 2;\r\n\t\t\tmaskSprite.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tmaskSprite.verticalCenter = \"middle\";\r\n\t\tmaskSprite.horizontalCenter = \"middle\";\r\n\r\n\t\tsuper.validateDataElements();\r\n\r\n\t\tlet y: number;\r\n\t\tlet x: number;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tif (this.valign == \"bottom\") {\r\n\t\t\t\ty = (maxHeight - newHeight);\r\n\t\t\t}\r\n\t\t\tif (this.valign == \"middle\") {\r\n\t\t\t\ty = (maxHeight - newHeight) / 2;\r\n\t\t\t}\r\n\t\t\tif (this.valign == \"top\") {\r\n\t\t\t\ty = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.align == \"left\") {\r\n\t\t\t\tx = -(maxWidth - newWidth) / 2;\r\n\t\t\t}\r\n\t\t\tif (this.align == \"center\") {\r\n\t\t\t\tx = 0;\r\n\t\t\t}\r\n\t\t\tif (this.align == \"right\") {\r\n\t\t\t\tx = (maxWidth - newWidth) / 2;\r\n\t\t\t}\r\n\r\n\t\t\tthis.slices.template.dy = startLocation * newHeight;\r\n\t\t\tif (this.alignLabels) {\r\n\t\t\t\tthis.slicesContainer.dx = x;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.valign == \"bottom\") {\r\n\t\t\t\ty = (maxHeight - newHeight) / 2;\r\n\t\t\t}\r\n\t\t\tif (this.valign == \"middle\") {\r\n\t\t\t\ty = 0;\r\n\t\t\t}\r\n\t\t\tif (this.valign == \"top\") {\r\n\t\t\t\ty = -(maxHeight - newHeight) / 2;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.align == \"left\") {\r\n\t\t\t\tx = 0;\r\n\t\t\t}\r\n\t\t\tif (this.align == \"center\") {\r\n\t\t\t\tx = (maxWidth - newWidth) / 2;\r\n\t\t\t}\r\n\t\t\tif (this.align == \"right\") {\r\n\t\t\t\tx = (maxWidth - newWidth);\r\n\t\t\t}\r\n\r\n\t\t\tthis.slices.template.dx = startLocation * newWidth;\r\n\t\t\tif (this.alignLabels) {\r\n\t\t\t\tthis.slicesContainer.dy = y;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.slicesContainer.x = x;\r\n\t\tthis.labelsContainer.x = x;\r\n\t\tthis.ticksContainer.x = x;\r\n\r\n\t\tthis.slicesContainer.y = y;\r\n\t\tthis.labelsContainer.y = y;\r\n\t\tthis.ticksContainer.y = y;\r\n\r\n\t\tif (newWidth > 0 && newHeight > 0) {\r\n\t\t\tthis.slicesContainer.mask = maskSprite;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PictorialStackedSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Sprite]] element that is used as a series mask.\r\n\t *\r\n\t * If set, this element's shape will be used to apply shape to the whole\r\n\t * stacked pictorial series.\r\n\t *\r\n\t * You can use this element's `path` property to set an SVG path for the\r\n\t * shape:\r\n\t *\r\n\t * ```TypeScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JSON\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"PictorialStackedSeries\",\r\n\t *     // ...\r\n\t *     \"maskSprite\": {\r\n\t *       \"path\": iconPath\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Mask sprite\r\n\t */\r\n\tpublic get maskSprite(): Sprite {\r\n\t\treturn this._maskSprite;\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tsuper.initSlice(slice);\r\n\r\n\t\tlet hs = slice.states.getKey(\"hover\");\r\n\t\tif (hs) {\r\n\t\t\ths.properties.expandDistance = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location to start series from.\r\n\t *\r\n\t * Range of values: 0 to 1.\r\n\t *\r\n\t * This setting indicates where actual slices will start relatively to the\r\n\t * whole height/width of the series.\r\n\t *\r\n\t * For example, if we want slices to start at 30% from the top/left of the\r\n\t * series, we can set `startLocation = 0.3`.\r\n\t *\r\n\t * To fill shape outside of the location range, use background of the\r\n\t * property `slicesContainer`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"startLocation\": 0.2,\r\n\t *     \"endLocation\": 0.8,\r\n\t *     \"slicesContainer\": {\r\n\t *       \"background\": {\r\n\t *         \"fill\": \"#eee\"\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 0\r\n\t * @since 4.1.13\r\n\t * @param  value  Start location\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"startLocation\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return  Start location\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location to end series at.\r\n\t *\r\n\t * Range of values: 0 to 1.\r\n\t *\r\n\t * This setting indicates where actual slices will end relatively to the\r\n\t * whole height/width of the series.\r\n\t *\r\n\t * For example, if we want slices to end at 70% from the top/left of the\r\n\t * series, we can set `endLocation = 0.7`.\r\n\t *\r\n\t * To fill shape outside of the location range, use background of the\r\n\t * property `slicesContainer`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"startLocation\": 0.2,\r\n\t *     \"endLocation\": 0.8,\r\n\t *     \"slicesContainer\": {\r\n\t *       \"background\": {\r\n\t *         \"fill\": \"#eee\"\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 1\r\n\t * @since 4.1.13\r\n\t * @param  value  End location\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"endLocation\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End location\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PictorialStackedSeries\"] = PictorialStackedSeries;\r\nregistry.registeredClasses[\"PictorialStackedSeriesDataItem\"] = PictorialStackedSeriesDataItem;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}