{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Container } from \"./Container\";\nimport { p50, Percent } from \"../util/Percent\";\nimport { RoundedRectangle } from \"./RoundedRectangle\";\nimport { Rectangle } from \"./Rectangle\";\nimport { color } from \"../util/Color\";\nimport * as $math from \"../util/Math\";\nvar SpriteResizer = /** @class */function (_super) {\n  __extends(SpriteResizer, _super);\n  function SpriteResizer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    Object.defineProperty(_this, \"rectangle\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this.children.push(Rectangle.new(_this._root, {\n        themeTags: [\"rectangle\"],\n        fillOpacity: 0,\n        fill: color(0xFFFFFF)\n      }))\n    });\n    Object.defineProperty(_this, \"gripL\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._createGrip(\"left\")\n    });\n    Object.defineProperty(_this, \"gripR\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._createGrip(\"right\")\n    });\n    Object.defineProperty(_this, \"gripT\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._createGrip(\"top\")\n    });\n    Object.defineProperty(_this, \"gripB\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._createGrip(\"bottom\")\n    });\n    Object.defineProperty(_this, \"_is\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(_this, \"_ix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(_this, \"_iw\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(_this, \"_positionDP\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_isHover\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    return _this;\n  }\n  Object.defineProperty(SpriteResizer.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n      _super.prototype._afterNew.call(this);\n      this.addTag(\"resizer\");\n      this.set(\"visible\", false);\n      this.gripL.events.on(\"dragged\", function (e) {\n        _this._resize(e.target, -1);\n      });\n      this.gripR.events.on(\"dragged\", function (e) {\n        _this._resize(e.target, 1);\n      });\n      this.gripL.events.on(\"dragstart\", function (e) {\n        _this._resizeStart(e.target);\n      });\n      this.gripR.events.on(\"dragstart\", function (e) {\n        _this._resizeStart(e.target);\n      });\n      this.gripT.events.on(\"dragged\", function (e) {\n        _this._rotate(e, 90);\n      });\n      this.gripB.events.on(\"dragged\", function (e) {\n        _this._rotate(e, -90);\n      });\n      this.gripT.events.on(\"dragstart\", function (e) {\n        _this._resizeStart(e.target);\n      });\n      this.gripB.events.on(\"dragstart\", function (e) {\n        _this._resizeStart(e.target);\n      });\n    }\n  });\n  Object.defineProperty(SpriteResizer.prototype, \"_resizeStart\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (grip) {\n      var sprite = this.get(\"sprite\");\n      if (sprite) {\n        this._is = sprite.get(\"scale\", 1);\n        this._ix = grip.x();\n        this._iw = this.width() / 2;\n      }\n    }\n  });\n  Object.defineProperty(SpriteResizer.prototype, \"_resize\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (grip, c) {\n      var sprite = this.get(\"sprite\");\n      var spriteTemplate = this.get(\"spriteTemplate\");\n      if (sprite) {\n        var scale = Math.max(0.01, this._is * (1 + c * (grip.x() - this._ix) / this._iw));\n        if (spriteTemplate) {\n          spriteTemplate.set(\"scale\", scale);\n        } else {\n          sprite.set(\"scale\", scale);\n        }\n        sprite.states.lookup(\"default\").set(\"scale\", scale);\n        this._updatePositions();\n      }\n    }\n  });\n  Object.defineProperty(SpriteResizer.prototype, \"_rotate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (e, delta) {\n      var sprite = this.get(\"sprite\");\n      var spriteTemplate = this.get(\"spriteTemplate\");\n      if (sprite) {\n        var parent_1 = this.parent;\n        if (parent_1) {\n          var rotationStep = this.get(\"rotationStep\", 10);\n          var angle = Math.round(($math.getAngle({\n            x: this.x(),\n            y: this.y()\n          }, parent_1.toLocal(e.point)) + delta) / rotationStep) * rotationStep;\n          if (spriteTemplate) {\n            spriteTemplate.set(\"rotation\", angle);\n          } else {\n            sprite.set(\"rotation\", angle);\n          }\n          sprite.states.lookup(\"default\").set(\"rotation\", angle);\n          this._updatePositions();\n        }\n      }\n    }\n  });\n  Object.defineProperty(SpriteResizer.prototype, \"_createGrip\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (themeTag) {\n      var container = this.children.push(Container.new(this._root, {\n        themeTags: [\"grip\", themeTag],\n        setStateOnChildren: true,\n        draggable: true\n      }));\n      container.children.push(RoundedRectangle.new(this._root, {\n        themeTags: [\"outline\"],\n        centerX: p50,\n        centerY: p50\n      }));\n      container.children.push(RoundedRectangle.new(this._root, {\n        centerX: p50,\n        centerY: p50\n      }));\n      return container;\n    }\n  });\n  Object.defineProperty(SpriteResizer.prototype, \"_updateChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n      _super.prototype._updateChildren.call(this);\n      if (this.isDirty(\"sprite\")) {\n        var sprite = this.get(\"sprite\");\n        if (sprite) {\n          this.show(0);\n          this.setPrivate(\"visible\", true);\n          this._updatePositions();\n          var parent_2 = sprite.parent;\n          if (parent_2) {\n            parent_2.children.moveValue(this, 0);\n          }\n          this._positionDP = sprite.events.on(\"positionchanged\", function () {\n            _this._updatePositions();\n          });\n        } else {\n          this.hide(0);\n          this.setPrivate(\"visible\", false);\n          if (this._positionDP) {\n            this._positionDP.dispose();\n          }\n        }\n      }\n      if (this.isDirty(\"width\") || this.isDirty(\"height\") || this.isDirty(\"rotation\")) {\n        this._updatePositions();\n      }\n    }\n  });\n  Object.defineProperty(SpriteResizer.prototype, \"_updatePositions\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var sprite = this.get(\"sprite\");\n      if (sprite) {\n        var bounds = sprite.localBounds();\n        var scale = sprite.get(\"scale\", 1);\n        var d = 20;\n        var w = (bounds.right - bounds.left) * scale + d;\n        var h = (bounds.bottom - bounds.top) * scale + d;\n        var a = sprite.get(\"rotation\", 0);\n        var rectangle = this.rectangle;\n        var cx = sprite.get(\"centerX\", p50);\n        var cy = sprite.get(\"centerY\", p50);\n        var cxr = 0;\n        if (cx instanceof Percent) {\n          cxr = cx.value;\n        }\n        var cyr = 0;\n        if (cy instanceof Percent) {\n          cyr = cy.value;\n        }\n        rectangle.setAll({\n          centerX: cx,\n          centerY: cy,\n          width: w,\n          height: h\n        });\n        this.setAll({\n          x: sprite.x() + d * (cxr - 0.5) * $math.cos(a) - d * (cyr - 0.5) * $math.sin(a),\n          y: sprite.y() + d * (cyr - 0.5) * $math.cos(a) + d * (cxr - 0.5) * $math.sin(a),\n          width: w,\n          height: h,\n          rotation: a\n        });\n        this.gripT.setAll({\n          x: (0.5 - cxr) * w,\n          y: -cyr * h\n        });\n        this.gripB.setAll({\n          x: (0.5 - cxr) * w,\n          y: (1 - cyr) * h\n        });\n        this.gripL.setAll({\n          x: -cxr * w,\n          y: (0.5 - cyr) * h\n        });\n        this.gripR.setAll({\n          x: (1 - cxr) * w,\n          y: (0.5 - cyr) * h\n        });\n        this.rectangle.setAll({\n          width: w,\n          height: h\n        });\n      }\n    }\n  });\n  Object.defineProperty(SpriteResizer, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"SpriteResizer\"\n  });\n  Object.defineProperty(SpriteResizer, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Container.classNames.concat([SpriteResizer.className])\n  });\n  return SpriteResizer;\n}(Container);\nexport { SpriteResizer };","map":{"version":3,"mappings":";AAGA,SAASA,SAAS,QAAiE,aAAa;AAChG,SAASC,GAAG,EAAEC,OAAO,QAAQ,iBAAiB;AAC9C,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,KAAK,QAAQ,eAAe;AAGrC,OAAO,KAAKC,KAAK,MAAM,cAAc;AA+BrC;EAAmCC;EAAnC;IAAA;IASCC;;;;aAAuCC,KAAI,CAACC,QAAQ,CAACC,IAAI,CAACP,SAAS,CAACQ,GAAG,CAACH,KAAI,CAACI,KAAK,EAAE;QAAEC,SAAS,EAAE,CAAC,WAAW,CAAC;QAAEC,WAAW,EAAE,CAAC;QAAEC,IAAI,EAAEX,KAAK,CAAC,QAAQ;MAAC,CAAE,CAAC;;IACxJG;;;;aAAmCC,KAAI,CAACQ,WAAW,CAAC,MAAM;;IAC1DT;;;;aAAmCC,KAAI,CAACQ,WAAW,CAAC,OAAO;;IAC3DT;;;;aAAmCC,KAAI,CAACQ,WAAW,CAAC,KAAK;;IACzDT;;;;aAAmCC,KAAI,CAACQ,WAAW,CAAC,QAAQ;;IAE5DT;;;;aAAwB;;IACxBA;;;;aAAwB;;IACxBA;;;;aAAwB;;IAExBA;;;;;;IAEAA;;;;aAA8B;;;EAkL/B;;;;;WAhLC;MAAA;MACCU,iBAAMC,SAAS,WAAE;MACjB,IAAI,CAACC,MAAM,CAAC,SAAS,CAAC;MACtB,IAAI,CAACC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC;MAE1B,IAAI,CAACC,KAAK,CAACC,MAAM,CAACC,EAAE,CAAC,SAAS,EAAE,UAACC,CAAC;QACjChB,KAAI,CAACiB,OAAO,CAACD,CAAC,CAACE,MAAM,EAAE,CAAC,CAAC,CAAC;MAC3B,CAAC,CAAC;MAEF,IAAI,CAACC,KAAK,CAACL,MAAM,CAACC,EAAE,CAAC,SAAS,EAAE,UAACC,CAAC;QACjChB,KAAI,CAACiB,OAAO,CAACD,CAAC,CAACE,MAAM,EAAE,CAAC,CAAC;MAC1B,CAAC,CAAC;MAEF,IAAI,CAACL,KAAK,CAACC,MAAM,CAACC,EAAE,CAAC,WAAW,EAAE,UAACC,CAAC;QACnChB,KAAI,CAACoB,YAAY,CAACJ,CAAC,CAACE,MAAM,CAAC;MAC5B,CAAC,CAAC;MAEF,IAAI,CAACC,KAAK,CAACL,MAAM,CAACC,EAAE,CAAC,WAAW,EAAE,UAACC,CAAC;QACnChB,KAAI,CAACoB,YAAY,CAACJ,CAAC,CAACE,MAAM,CAAC;MAC5B,CAAC,CAAC;MAEF,IAAI,CAACG,KAAK,CAACP,MAAM,CAACC,EAAE,CAAC,SAAS,EAAE,UAACC,CAAC;QACjChB,KAAI,CAACsB,OAAO,CAACN,CAAC,EAAE,EAAE,CAAC;MACpB,CAAC,CAAC;MAEF,IAAI,CAACO,KAAK,CAACT,MAAM,CAACC,EAAE,CAAC,SAAS,EAAE,UAACC,CAAC;QACjChB,KAAI,CAACsB,OAAO,CAACN,CAAC,EAAE,CAAC,EAAE,CAAC;MACrB,CAAC,CAAC;MAEF,IAAI,CAACK,KAAK,CAACP,MAAM,CAACC,EAAE,CAAC,WAAW,EAAE,UAACC,CAAC;QACnChB,KAAI,CAACoB,YAAY,CAACJ,CAAC,CAACE,MAAM,CAAC;MAC5B,CAAC,CAAC;MAEF,IAAI,CAACK,KAAK,CAACT,MAAM,CAACC,EAAE,CAAC,WAAW,EAAE,UAACC,CAAC;QACnChB,KAAI,CAACoB,YAAY,CAACJ,CAAC,CAACE,MAAM,CAAC;MAC5B,CAAC,CAAC;IACH;;;;;;WAEA,UAAuBM,IAAY;MAClC,IAAMC,MAAM,GAAG,IAAI,CAACC,GAAG,CAAC,QAAQ,CAAC;MACjC,IAAID,MAAM,EAAE;QACX,IAAI,CAACE,GAAG,GAAGF,MAAM,CAACC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;QACjC,IAAI,CAACE,GAAG,GAAGJ,IAAI,CAACK,CAAC,EAAE;QACnB,IAAI,CAACC,GAAG,GAAG,IAAI,CAACC,KAAK,EAAE,GAAG,CAAC;;IAE7B;;;;;;WAEA,UAAkBP,IAAY,EAAEQ,CAAS;MACxC,IAAMP,MAAM,GAAG,IAAI,CAACC,GAAG,CAAC,QAAQ,CAAC;MACjC,IAAMO,cAAc,GAAG,IAAI,CAACP,GAAG,CAAC,gBAAgB,CAAC;MACjD,IAAID,MAAM,EAAE;QACX,IAAMS,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,EAAE,IAAI,CAACT,GAAG,IAAI,CAAC,GAAGK,CAAC,IAAIR,IAAI,CAACK,CAAC,EAAE,GAAG,IAAI,CAACD,GAAG,CAAC,GAAG,IAAI,CAACE,GAAG,CAAC,CAAC;QACnF,IAAIG,cAAc,EAAE;UACnBA,cAAc,CAACrB,GAAG,CAAC,OAAO,EAAEsB,KAAK,CAAC;SAClC,MACI;UACJT,MAAM,CAACb,GAAG,CAAC,OAAO,EAAEsB,KAAK,CAAC;;QAE3BT,MAAM,CAACY,MAAM,CAACC,MAAM,CAAC,SAAS,CAAE,CAAC1B,GAAG,CAAC,OAAO,EAAEsB,KAAK,CAAC;QACpD,IAAI,CAACK,gBAAgB,EAAE;;IAEzB;;;;;;WAEA,UAAkBvB,CAAsB,EAAEwB,KAAa;MACtD,IAAMf,MAAM,GAAG,IAAI,CAACC,GAAG,CAAC,QAAQ,CAAC;MACjC,IAAMO,cAAc,GAAG,IAAI,CAACP,GAAG,CAAC,gBAAgB,CAAC;MACjD,IAAID,MAAM,EAAE;QACX,IAAMgB,QAAM,GAAG,IAAI,CAACC,MAAM;QAC1B,IAAID,QAAM,EAAE;UAEX,IAAME,YAAY,GAAG,IAAI,CAACjB,GAAG,CAAC,cAAc,EAAE,EAAE,CAAC;UACjD,IAAIkB,KAAK,GAAGT,IAAI,CAACU,KAAK,CAAE,CAAChD,KAAK,CAACiD,QAAQ,CAAC;YAAEjB,CAAC,EAAE,IAAI,CAACA,CAAC,EAAE;YAAEkB,CAAC,EAAE,IAAI,CAACA,CAAC;UAAE,CAAE,EAAEN,QAAM,CAACO,OAAO,CAAChC,CAAC,CAACiC,KAAK,CAAC,CAAC,GAAGT,KAAK,IAAIG,YAAY,CAAE,GAAGA,YAAY;UACvI,IAAIV,cAAc,EAAE;YACnBA,cAAc,CAACrB,GAAG,CAAC,UAAU,EAAEgC,KAAK,CAAC;WACrC,MACI;YACJnB,MAAM,CAACb,GAAG,CAAC,UAAU,EAAEgC,KAAK,CAAC;;UAE9BnB,MAAM,CAACY,MAAM,CAACC,MAAM,CAAC,SAAS,CAAE,CAAC1B,GAAG,CAAC,UAAU,EAAEgC,KAAK,CAAC;UACvD,IAAI,CAACL,gBAAgB,EAAE;;;IAG1B;;;;;;WAEA,UAAsBW,QAAgB;MACrC,IAAMC,SAAS,GAAG,IAAI,CAAClD,QAAQ,CAACC,IAAI,CAACX,SAAS,CAACY,GAAG,CAAC,IAAI,CAACC,KAAK,EAAE;QAC9DC,SAAS,EAAE,CAAC,MAAM,EAAE6C,QAAQ,CAAC;QAC7BE,kBAAkB,EAAE,IAAI;QACxBC,SAAS,EAAE;OACX,CAAC,CAAC;MAEHF,SAAS,CAAClD,QAAQ,CAACC,IAAI,CAACR,gBAAgB,CAACS,GAAG,CAAC,IAAI,CAACC,KAAK,EAAE;QACxDC,SAAS,EAAE,CAAC,SAAS,CAAC;QACtBiD,OAAO,EAAE9D,GAAG;QACZ+D,OAAO,EAAE/D;OACT,CAAC,CAAC;MAEH2D,SAAS,CAAClD,QAAQ,CAACC,IAAI,CAACR,gBAAgB,CAACS,GAAG,CAAC,IAAI,CAACC,KAAK,EAAE;QACxDkD,OAAO,EAAE9D,GAAG;QACZ+D,OAAO,EAAE/D;OACT,CAAC,CAAC;MACH,OAAO2D,SAAS;IACjB;;;;;;WAEA;MAAA;MACC1C,iBAAM+C,eAAe,WAAE;MAEvB,IAAI,IAAI,CAACC,OAAO,CAAC,QAAQ,CAAC,EAAE;QAC3B,IAAMhC,MAAM,GAAG,IAAI,CAACC,GAAG,CAAC,QAAQ,CAAC;QACjC,IAAID,MAAM,EAAE;UACX,IAAI,CAACiC,IAAI,CAAC,CAAC,CAAC;UACZ,IAAI,CAACC,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC;UAEhC,IAAI,CAACpB,gBAAgB,EAAE;UAEvB,IAAMqB,QAAM,GAAGnC,MAAM,CAACiB,MAAM;UAE5B,IAAIkB,QAAM,EAAE;YACXA,QAAM,CAAC3D,QAAQ,CAAC4D,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;;UAGnC,IAAI,CAACC,WAAW,GAAGrC,MAAM,CAACX,MAAM,CAACC,EAAE,CAAC,iBAAiB,EAAE;YACtDf,KAAI,CAACuC,gBAAgB,EAAE;UACxB,CAAC,CAAC;SACF,MACI;UACJ,IAAI,CAACwB,IAAI,CAAC,CAAC,CAAC;UACZ,IAAI,CAACJ,UAAU,CAAC,SAAS,EAAE,KAAK,CAAC;UAEjC,IAAI,IAAI,CAACG,WAAW,EAAE;YACrB,IAAI,CAACA,WAAW,CAACE,OAAO,EAAE;;;;MAK7B,IAAI,IAAI,CAACP,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAACA,OAAO,CAAC,QAAQ,CAAC,IAAI,IAAI,CAACA,OAAO,CAAC,UAAU,CAAC,EAAE;QAChF,IAAI,CAAClB,gBAAgB,EAAE;;IAEzB;;;;;;WAEA;MACC,IAAMd,MAAM,GAAG,IAAI,CAACC,GAAG,CAAC,QAAQ,CAAC;MACjC,IAAID,MAAM,EAAE;QACX,IAAIwC,MAAM,GAAGxC,MAAM,CAACyC,WAAW,EAAE;QACjC,IAAIhC,KAAK,GAAGT,MAAM,CAACC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;QAClC,IAAIyC,CAAC,GAAG,EAAE;QACV,IAAIC,CAAC,GAAG,CAACH,MAAM,CAACI,KAAK,GAAGJ,MAAM,CAACK,IAAI,IAAIpC,KAAK,GAAGiC,CAAC;QAChD,IAAII,CAAC,GAAG,CAACN,MAAM,CAACO,MAAM,GAAGP,MAAM,CAACQ,GAAG,IAAIvC,KAAK,GAAGiC,CAAC;QAChD,IAAIO,CAAC,GAAGjD,MAAM,CAACC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC;QAEjC,IAAMiD,SAAS,GAAG,IAAI,CAACA,SAAS;QAEhC,IAAIC,EAAE,GAAGnD,MAAM,CAACC,GAAG,CAAC,SAAS,EAAElC,GAAG,CAAC;QACnC,IAAIqF,EAAE,GAAGpD,MAAM,CAACC,GAAG,CAAC,SAAS,EAAElC,GAAG,CAAC;QAEnC,IAAIsF,GAAG,GAAG,CAAC;QACX,IAAIF,EAAE,YAAYnF,OAAO,EAAE;UAC1BqF,GAAG,GAAGF,EAAE,CAACG,KAAK;;QAGf,IAAIC,GAAG,GAAG,CAAC;QACX,IAAIH,EAAE,YAAYpF,OAAO,EAAE;UAC1BuF,GAAG,GAAGH,EAAE,CAACE,KAAK;;QAGfJ,SAAS,CAACM,MAAM,CAAC;UAAE3B,OAAO,EAAEsB,EAAE;UAAErB,OAAO,EAAEsB,EAAE;UAAE9C,KAAK,EAAEqC,CAAC;UAAEc,MAAM,EAAEX;QAAC,CAAE,CAAC;QACnE,IAAI,CAACU,MAAM,CAAC;UAAEpD,CAAC,EAAEJ,MAAM,CAACI,CAAC,EAAE,GAAGsC,CAAC,IAAIW,GAAG,GAAG,GAAG,CAAC,GAAGjF,KAAK,CAACsF,GAAG,CAACT,CAAC,CAAC,GAAGP,CAAC,IAAIa,GAAG,GAAG,GAAG,CAAC,GAAGnF,KAAK,CAACuF,GAAG,CAACV,CAAC,CAAC;UAAE3B,CAAC,EAAEtB,MAAM,CAACsB,CAAC,EAAE,GAAGoB,CAAC,IAAIa,GAAG,GAAG,GAAG,CAAC,GAAGnF,KAAK,CAACsF,GAAG,CAACT,CAAC,CAAC,GAAGP,CAAC,IAAIW,GAAG,GAAG,GAAG,CAAC,GAAGjF,KAAK,CAACuF,GAAG,CAACV,CAAC,CAAC;UAAE3C,KAAK,EAAEqC,CAAC;UAAEc,MAAM,EAAEX,CAAC;UAAEc,QAAQ,EAAEX;QAAC,CAAE,CAAC;QAEnN,IAAI,CAACrD,KAAK,CAAC4D,MAAM,CAAC;UAAEpD,CAAC,EAAE,CAAC,GAAG,GAAGiD,GAAG,IAAIV,CAAC;UAAErB,CAAC,EAAE,CAACiC,GAAG,GAAGT;QAAC,CAAE,CAAC;QACtD,IAAI,CAAChD,KAAK,CAAC0D,MAAM,CAAC;UAAEpD,CAAC,EAAE,CAAC,GAAG,GAAGiD,GAAG,IAAIV,CAAC;UAAErB,CAAC,EAAE,CAAC,CAAC,GAAGiC,GAAG,IAAIT;QAAC,CAAE,CAAC;QAC3D,IAAI,CAAC1D,KAAK,CAACoE,MAAM,CAAC;UAAEpD,CAAC,EAAE,CAACiD,GAAG,GAAGV,CAAC;UAAErB,CAAC,EAAE,CAAC,GAAG,GAAGiC,GAAG,IAAIT;QAAC,CAAE,CAAC;QACtD,IAAI,CAACpD,KAAK,CAAC8D,MAAM,CAAC;UAAEpD,CAAC,EAAE,CAAC,CAAC,GAAGiD,GAAG,IAAIV,CAAC;UAAErB,CAAC,EAAE,CAAC,GAAG,GAAGiC,GAAG,IAAIT;QAAC,CAAE,CAAC;QAE3D,IAAI,CAACI,SAAS,CAACM,MAAM,CAAC;UAAElD,KAAK,EAAEqC,CAAC;UAAEc,MAAM,EAAEX;QAAC,CAAE,CAAC;;IAEhD;;EAhMAxE;;;;WAAkC;;EAClCA;;;;WAA0CR,SAAS,CAAC+F,UAAU,CAACC,MAAM,CAAC,CAACC,aAAa,CAACC,SAAS,CAAC;;EAgMhG,oBAAC;CAAA,CAvMkClG,SAAS;SAA/BiG,aAAa","names":["Container","p50","Percent","RoundedRectangle","Rectangle","color","$math","__extends","Object","_this","children","push","new","_root","themeTags","fillOpacity","fill","_createGrip","_super","_afterNew","addTag","set","gripL","events","on","e","_resize","target","gripR","_resizeStart","gripT","_rotate","gripB","grip","sprite","get","_is","_ix","x","_iw","width","c","spriteTemplate","scale","Math","max","states","lookup","_updatePositions","delta","parent_1","parent","rotationStep","angle","round","getAngle","y","toLocal","point","themeTag","container","setStateOnChildren","draggable","centerX","centerY","_updateChildren","isDirty","show","setPrivate","parent_2","moveValue","_positionDP","hide","dispose","bounds","localBounds","d","w","right","left","h","bottom","top","a","rectangle","cx","cy","cxr","value","cyr","setAll","height","cos","sin","rotation","classNames","concat","SpriteResizer","className"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\core\\render\\SpriteResizer.ts"],"sourcesContent":["import type { Sprite, ISpritePointerEvent } from \"./Sprite\";\r\nimport type { IDisposer } from \"../util/Disposer\";\r\n\r\nimport { Container, IContainerPrivate, IContainerSettings, IContainerEvents } from \"./Container\";\r\nimport { p50, Percent } from \"../util/Percent\";\r\nimport { RoundedRectangle } from \"./RoundedRectangle\";\r\nimport { Rectangle } from \"./Rectangle\";\r\nimport { color } from \"../util/Color\";\r\nimport type { Template } from \"../util/Template\";\r\n\r\nimport * as $math from \"../util/Math\";\r\n\r\nexport interface ISpriteResizerSettings extends IContainerSettings {\r\n\r\n\t/**\r\n\t * Target [[Sprite]] element.\r\n\t */\r\n\tsprite?: Sprite\r\n\r\n\t/**\r\n\t * Target [[Template]]. If a template is set, scale and rotation will be set on Template instead of a Sprite.\r\n\t */\r\n\tspriteTemplate?: Template<Sprite>\r\n\r\n\t/**\r\n\t * Rotation increment in degrees.\r\n\t * \r\n\t * @default 10\r\n\t */\r\n\trotationStep?: number;\r\n\r\n}\r\n\r\nexport interface ISpriteResizerPrivate extends IContainerPrivate {\r\n\r\n}\r\n\r\nexport interface ISpriteResizerEvents extends IContainerEvents {\r\n\r\n}\r\n\r\nexport class SpriteResizer extends Container {\r\n\r\n\tdeclare public _settings: ISpriteResizerSettings;\r\n\tdeclare public _privateSettings: ISpriteResizerPrivate;\r\n\tdeclare public _events: ISpriteResizerEvents;\r\n\r\n\tpublic static className: string = \"SpriteResizer\";\r\n\tpublic static classNames: Array<string> = Container.classNames.concat([SpriteResizer.className]);\r\n\r\n\tpublic readonly rectangle: Rectangle = this.children.push(Rectangle.new(this._root, { themeTags: [\"rectangle\"], fillOpacity: 0, fill: color(0xFFFFFF) }));\r\n\tpublic readonly gripL: Container = this._createGrip(\"left\");\r\n\tpublic readonly gripR: Container = this._createGrip(\"right\");\r\n\tpublic readonly gripT: Container = this._createGrip(\"top\");\r\n\tpublic readonly gripB: Container = this._createGrip(\"bottom\");\r\n\r\n\tprotected _is: number = 1;\r\n\tprotected _ix: number = 0;\r\n\tprotected _iw: number = 0;\r\n\r\n\tprotected _positionDP?: IDisposer;\r\n\r\n\tprotected _isHover: boolean = false;\r\n\r\n\tprotected _afterNew() {\r\n\t\tsuper._afterNew();\r\n\t\tthis.addTag(\"resizer\");\r\n\t\tthis.set(\"visible\", false);\r\n\r\n\t\tthis.gripL.events.on(\"dragged\", (e) => {\r\n\t\t\tthis._resize(e.target, -1);\r\n\t\t})\r\n\r\n\t\tthis.gripR.events.on(\"dragged\", (e) => {\r\n\t\t\tthis._resize(e.target, 1);\r\n\t\t})\r\n\r\n\t\tthis.gripL.events.on(\"dragstart\", (e) => {\r\n\t\t\tthis._resizeStart(e.target);\r\n\t\t})\r\n\r\n\t\tthis.gripR.events.on(\"dragstart\", (e) => {\r\n\t\t\tthis._resizeStart(e.target);\r\n\t\t})\r\n\r\n\t\tthis.gripT.events.on(\"dragged\", (e) => {\r\n\t\t\tthis._rotate(e, 90);\r\n\t\t})\r\n\r\n\t\tthis.gripB.events.on(\"dragged\", (e) => {\r\n\t\t\tthis._rotate(e, -90);\r\n\t\t})\r\n\r\n\t\tthis.gripT.events.on(\"dragstart\", (e) => {\r\n\t\t\tthis._resizeStart(e.target);\r\n\t\t})\r\n\r\n\t\tthis.gripB.events.on(\"dragstart\", (e) => {\r\n\t\t\tthis._resizeStart(e.target);\r\n\t\t})\r\n\t}\r\n\r\n\tprotected _resizeStart(grip: Sprite) {\r\n\t\tconst sprite = this.get(\"sprite\");\r\n\t\tif (sprite) {\r\n\t\t\tthis._is = sprite.get(\"scale\", 1);\r\n\t\t\tthis._ix = grip.x();\r\n\t\t\tthis._iw = this.width() / 2;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _resize(grip: Sprite, c: number) {\r\n\t\tconst sprite = this.get(\"sprite\");\r\n\t\tconst spriteTemplate = this.get(\"spriteTemplate\");\r\n\t\tif (sprite) {\r\n\t\t\tconst scale = Math.max(0.01, this._is * (1 + c * (grip.x() - this._ix) / this._iw));\r\n\t\t\tif (spriteTemplate) {\r\n\t\t\t\tspriteTemplate.set(\"scale\", scale);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsprite.set(\"scale\", scale);\r\n\t\t\t}\r\n\t\t\tsprite.states.lookup(\"default\")!.set(\"scale\", scale);\r\n\t\t\tthis._updatePositions();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _rotate(e: ISpritePointerEvent, delta: number) {\r\n\t\tconst sprite = this.get(\"sprite\");\r\n\t\tconst spriteTemplate = this.get(\"spriteTemplate\");\r\n\t\tif (sprite) {\r\n\t\t\tconst parent = this.parent;\r\n\t\t\tif (parent) {\r\n\r\n\t\t\t\tconst rotationStep = this.get(\"rotationStep\", 10);\r\n\t\t\t\tlet angle = Math.round((($math.getAngle({ x: this.x(), y: this.y() }, parent.toLocal(e.point)) + delta) / rotationStep)) * rotationStep;\r\n\t\t\t\tif (spriteTemplate) {\r\n\t\t\t\t\tspriteTemplate.set(\"rotation\", angle);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tsprite.set(\"rotation\", angle);\r\n\t\t\t\t}\r\n\t\t\t\tsprite.states.lookup(\"default\")!.set(\"rotation\", angle);\r\n\t\t\t\tthis._updatePositions();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _createGrip(themeTag: string) {\r\n\t\tconst container = this.children.push(Container.new(this._root, {\r\n\t\t\tthemeTags: [\"grip\", themeTag],\r\n\t\t\tsetStateOnChildren: true,\r\n\t\t\tdraggable: true\r\n\t\t}))\r\n\r\n\t\tcontainer.children.push(RoundedRectangle.new(this._root, {\r\n\t\t\tthemeTags: [\"outline\"],\r\n\t\t\tcenterX: p50,\r\n\t\t\tcenterY: p50\r\n\t\t}))\r\n\r\n\t\tcontainer.children.push(RoundedRectangle.new(this._root, {\r\n\t\t\tcenterX: p50,\r\n\t\t\tcenterY: p50\r\n\t\t}));\r\n\t\treturn container;\r\n\t}\r\n\r\n\tpublic _updateChildren() {\r\n\t\tsuper._updateChildren();\r\n\r\n\t\tif (this.isDirty(\"sprite\")) {\r\n\t\t\tconst sprite = this.get(\"sprite\");\r\n\t\t\tif (sprite) {\r\n\t\t\t\tthis.show(0);\r\n\t\t\t\tthis.setPrivate(\"visible\", true);\r\n\r\n\t\t\t\tthis._updatePositions();\r\n\r\n\t\t\t\tconst parent = sprite.parent;\r\n\r\n\t\t\t\tif (parent) {\r\n\t\t\t\t\tparent.children.moveValue(this, 0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._positionDP = sprite.events.on(\"positionchanged\", () => {\r\n\t\t\t\t\tthis._updatePositions();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.hide(0);\r\n\t\t\t\tthis.setPrivate(\"visible\", false);\r\n\r\n\t\t\t\tif (this._positionDP) {\r\n\t\t\t\t\tthis._positionDP.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.isDirty(\"width\") || this.isDirty(\"height\") || this.isDirty(\"rotation\")) {\r\n\t\t\tthis._updatePositions();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _updatePositions() {\r\n\t\tconst sprite = this.get(\"sprite\");\r\n\t\tif (sprite) {\r\n\t\t\tlet bounds = sprite.localBounds();\r\n\t\t\tlet scale = sprite.get(\"scale\", 1);\r\n\t\t\tlet d = 20\r\n\t\t\tlet w = (bounds.right - bounds.left) * scale + d;\r\n\t\t\tlet h = (bounds.bottom - bounds.top) * scale + d;\r\n\t\t\tlet a = sprite.get(\"rotation\", 0);\r\n\r\n\t\t\tconst rectangle = this.rectangle;\r\n\r\n\t\t\tlet cx = sprite.get(\"centerX\", p50);\r\n\t\t\tlet cy = sprite.get(\"centerY\", p50);\r\n\r\n\t\t\tlet cxr = 0;\r\n\t\t\tif (cx instanceof Percent) {\r\n\t\t\t\tcxr = cx.value;\r\n\t\t\t}\r\n\r\n\t\t\tlet cyr = 0;\r\n\t\t\tif (cy instanceof Percent) {\r\n\t\t\t\tcyr = cy.value;\r\n\t\t\t}\r\n\r\n\t\t\trectangle.setAll({ centerX: cx, centerY: cy, width: w, height: h });\r\n\t\t\tthis.setAll({ x: sprite.x() + d * (cxr - 0.5) * $math.cos(a) - d * (cyr - 0.5) * $math.sin(a), y: sprite.y() + d * (cyr - 0.5) * $math.cos(a) + d * (cxr - 0.5) * $math.sin(a), width: w, height: h, rotation: a });\r\n\r\n\t\t\tthis.gripT.setAll({ x: (0.5 - cxr) * w, y: -cyr * h });\r\n\t\t\tthis.gripB.setAll({ x: (0.5 - cxr) * w, y: (1 - cyr) * h });\r\n\t\t\tthis.gripL.setAll({ x: -cxr * w, y: (0.5 - cyr) * h });\r\n\t\t\tthis.gripR.setAll({ x: (1 - cxr) * w, y: (0.5 - cyr) * h });\r\n\r\n\t\t\tthis.rectangle.setAll({ width: w, height: h });\r\n\t\t}\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}