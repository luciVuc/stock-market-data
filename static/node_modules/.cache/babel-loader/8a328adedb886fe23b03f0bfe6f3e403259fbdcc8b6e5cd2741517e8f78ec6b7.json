{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lucian\\\\Documents\\\\DEV\\\\nodejs\\\\stock-market-api\\\\dev\\\\static\\\\src\\\\components\\\\CandleStickChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Candlestick {\n  constructor(_ref) {\n    let {\n      timestamp,\n      open,\n      close,\n      high,\n      low\n    } = _ref;\n    this.timestamp = void 0;\n    this.close = void 0;\n    this.high = void 0;\n    this.low = void 0;\n    this.open = void 0;\n    this.timestamp = parseInt(timestamp.toString());\n    this.open = parseFloat(open.toString());\n    this.close = parseFloat(close.toString());\n    this.high = parseFloat(high.toString());\n    this.low = parseFloat(low.toString());\n  }\n}\nexport class VolumeBar {\n  constructor(_ref2) {\n    let {\n      timestamp,\n      volume\n    } = _ref2;\n    this.timestamp = void 0;\n    this.volume = void 0;\n    this.timestamp = parseInt(timestamp.toString());\n    this.volume = parseFloat(volume.toString());\n  }\n}\nexport class CandlestickChartElement {\n  // Itâ€™s called when the component is first initialized.\n  // It must call super() and can set any defaults or perform other pre-rendering processes.\n  constructor(canvas, candlesticks) {\n    this.candlesticks = void 0;\n    this.canvas = void 0;\n    this.gridColor = void 0;\n    this.gridTextColor = void 0;\n    this.mouseHoverBackgroundColor = void 0;\n    this.mouseHoverTextColor = void 0;\n    this.greenColor = void 0;\n    this.redHoverColor = void 0;\n    this.candleWidth = void 0;\n    this.marginLeft = void 0;\n    this.marginRight = void 0;\n    this.marginTop = void 0;\n    this.marginBottom = void 0;\n    this.yStart = void 0;\n    this.yEnd = void 0;\n    this.yRange = void 0;\n    this.yPixelRange = void 0;\n    this.xEnd = void 0;\n    this.xGridCells = void 0;\n    this.drawMouseOverlay = void 0;\n    this.mousePosition = void 0;\n    this.xMouseHover = void 0;\n    this.yMouseHover = void 0;\n    this.hoveredCandlestickID = void 0;\n    this.xPixelRange = void 0;\n    this.xStart = void 0;\n    this.xRange = void 0;\n    this.redColor = void 0;\n    this.greenHoverColor = void 0;\n    this.yGridCells = void 0;\n    this.canvas = canvas;\n    const context = this.canvas.getContext('2d');\n    context.font = '12px sans-serif';\n    context.lineWidth = 1;\n    this.canvas.addEventListener('mousemove', this.mouseMoveHandler.bind(this));\n    this.canvas.addEventListener('mouseout', this.mouseOutHandler.bind(this));\n    this.canvas.style.backgroundColor = '#252525';\n    this.gridColor = '#444444';\n    this.gridTextColor = '#aaaaaa';\n    this.mouseHoverBackgroundColor = '#eeeeee';\n    this.mouseHoverTextColor = '#000000';\n    this.greenColor = '#00cc00';\n    this.redColor = '#cc0000';\n    this.greenHoverColor = '#00ff00';\n    this.redHoverColor = '#ff0000';\n    this.candleWidth = 5;\n    this.marginLeft = 10;\n    this.marginRight = 100;\n    this.marginTop = 10;\n    this.marginBottom = 30;\n    this.yStart = 0;\n    this.yEnd = 0;\n    this.yRange = 0;\n    this.yPixelRange = this.canvas.height - this.marginTop - this.marginBottom;\n    this.xStart = 0;\n    this.xEnd = 0;\n    this.xRange = 0;\n    this.xPixelRange = this.canvas.width - this.marginLeft - this.marginRight;\n\n    // these are only approximations, the grid will be divided in a way so the numbers are nice\n    this.xGridCells = 16;\n    this.yGridCells = 16;\n    this.drawMouseOverlay = false;\n    this.mousePosition = {\n      x: 0,\n      y: 0\n    };\n    this.xMouseHover = 0;\n    this.yMouseHover = 0;\n    this.hoveredCandlestickID = 0;\n    this.candlesticks = candlesticks || [];\n    // this.draw();\n  }\n\n  // addCandlestick(candlestick: Candlestick) {\n  //   this.candlesticks.push(candlestick);\n  // }\n\n  mouseMoveHandler(event) {\n    this.mousePosition = this.getMousePos(event);\n    this.mousePosition.x += this.candleWidth / 2;\n    this.drawMouseOverlay = true;\n    if (this.mousePosition.x < this.marginLeft) this.drawMouseOverlay = false;\n    if (this.mousePosition.x > this.canvas.width - this.marginRight + this.candleWidth) this.drawMouseOverlay = false;\n    if (this.mousePosition.y > this.canvas.height - this.marginBottom) this.drawMouseOverlay = false;\n    if (this.drawMouseOverlay) {\n      var _this$candlesticks$, _this$candlesticks$2, _this$candlesticks$3;\n      this.yMouseHover = this.yToValueCoords(this.mousePosition.y);\n      this.xMouseHover = this.xToValueCoords(this.mousePosition.x);\n      // snap to candlesticks\n      const candlestickDelta = ((_this$candlesticks$ = this.candlesticks[1]) === null || _this$candlesticks$ === void 0 ? void 0 : _this$candlesticks$.timestamp) - ((_this$candlesticks$2 = this.candlesticks[0]) === null || _this$candlesticks$2 === void 0 ? void 0 : _this$candlesticks$2.timestamp) || 0;\n      this.hoveredCandlestickID = Math.floor((this.xMouseHover - ((_this$candlesticks$3 = this.candlesticks[0]) === null || _this$candlesticks$3 === void 0 ? void 0 : _this$candlesticks$3.timestamp)) / candlestickDelta) || 0;\n      this.xMouseHover = Math.floor(this.xMouseHover / candlestickDelta) * candlestickDelta;\n      this.mousePosition.x = this.xToPixelCoords(this.xMouseHover);\n      this.draw();\n    } else this.draw();\n  }\n  mouseOutHandler(event) {\n    this.drawMouseOverlay = false;\n    this.draw();\n  }\n  getMousePos(event) {\n    const rect = this.canvas.getBoundingClientRect();\n    return {\n      x: event.clientX - rect.left,\n      y: event.clientY - rect.top\n    };\n  }\n  draw() {\n    const context = this.canvas.getContext('2d');\n\n    // clear background\n    context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.calculateYRange();\n    this.calculateXRange();\n    this.drawGrid();\n    this.candleWidth = this.xPixelRange / this.candlesticks.length;\n    this.candleWidth--;\n    if (this.candleWidth % 2 === 0) this.candleWidth--;\n    for (let color, candlestick, i = 0; i < this.candlesticks.length; ++i) {\n      candlestick = this.candlesticks[i];\n      color = candlestick.close > candlestick.open ? this.greenColor : this.redColor;\n      if (i === this.hoveredCandlestickID) {\n        if (color === this.greenColor) color = this.greenHoverColor;else if (color === this.redColor) color = this.redHoverColor;\n      }\n\n      // draw the wick\n      this.drawLine(this.xToPixelCoords(candlestick.timestamp), this.yToPixelCoords(candlestick.low), this.xToPixelCoords(candlestick.timestamp), this.yToPixelCoords(candlestick.high), color);\n\n      // draw the candle\n      this.fillRect(this.xToPixelCoords(candlestick.timestamp) - Math.floor(this.candleWidth / 2), this.yToPixelCoords(candlestick.open), this.candleWidth, this.yToPixelCoords(candlestick.close) - this.yToPixelCoords(candlestick.open), color);\n    }\n\n    // draw mouse hover\n    if (this.drawMouseOverlay && context) {\n      var _this$candlesticks$th, _this$candlesticks$th2, _this$candlesticks$th3, _this$candlesticks$th4, _this$candlesticks$th5, _this$candlesticks$th6;\n      // price line\n      context.setLineDash([5, 5]);\n      this.drawLine(0, this.mousePosition.y, this.canvas.width, this.mousePosition.y, this.mouseHoverBackgroundColor);\n      context.setLineDash([]);\n      let str = this.roundPriceValue(this.yMouseHover).toString();\n      let textWidth = context.measureText(str).width;\n      this.fillRect(this.canvas.width - 70, this.mousePosition.y - 10, 70, 20, this.mouseHoverBackgroundColor);\n      context.fillStyle = this.mouseHoverTextColor;\n      context.fillText(str, this.canvas.width - textWidth - 5, this.mousePosition.y + 5);\n\n      // time line\n      context.setLineDash([5, 5]);\n      this.drawLine(this.mousePosition.x, 0, this.mousePosition.x, this.canvas.height, this.mouseHoverBackgroundColor);\n      context.setLineDash([]);\n      str = this.formatDate(new Date(this.xMouseHover)).toString();\n      textWidth = context.measureText(str).width;\n      this.fillRect(this.mousePosition.x - textWidth / 2 - 5, this.canvas.height - 20, textWidth + 10, 20, this.mouseHoverBackgroundColor);\n      context.fillStyle = this.mouseHoverTextColor;\n      context.fillText(str, this.mousePosition.x - textWidth / 2, this.canvas.height - 5);\n\n      // data\n      let yPos = this.mousePosition.y - 95;\n      if (yPos < 0) {\n        yPos = this.mousePosition.y + 15;\n      }\n      this.fillRect(this.mousePosition.x + 15, yPos, 100, 80, this.mouseHoverBackgroundColor);\n      const color = ((_this$candlesticks$th = this.candlesticks[this.hoveredCandlestickID]) === null || _this$candlesticks$th === void 0 ? void 0 : _this$candlesticks$th.close) > ((_this$candlesticks$th2 = this.candlesticks[this.hoveredCandlestickID]) === null || _this$candlesticks$th2 === void 0 ? void 0 : _this$candlesticks$th2.open) ? this.greenColor : this.redColor;\n      this.fillRect(this.mousePosition.x + 15, yPos, 10, 80, color);\n      context.lineWidth = 2;\n      this.drawRect(this.mousePosition.x + 15, yPos, 100, 80, color);\n      context.lineWidth = 1;\n      context.fillStyle = this.mouseHoverTextColor;\n      context.fillText('O: ' + ((_this$candlesticks$th3 = this.candlesticks[this.hoveredCandlestickID]) === null || _this$candlesticks$th3 === void 0 ? void 0 : _this$candlesticks$th3.open), this.mousePosition.x + 30, yPos + 15);\n      context.fillText('C: ' + ((_this$candlesticks$th4 = this.candlesticks[this.hoveredCandlestickID]) === null || _this$candlesticks$th4 === void 0 ? void 0 : _this$candlesticks$th4.close), this.mousePosition.x + 30, yPos + 35);\n      context.fillText('H: ' + ((_this$candlesticks$th5 = this.candlesticks[this.hoveredCandlestickID]) === null || _this$candlesticks$th5 === void 0 ? void 0 : _this$candlesticks$th5.high), this.mousePosition.x + 30, yPos + 55);\n      context.fillText('L: ' + ((_this$candlesticks$th6 = this.candlesticks[this.hoveredCandlestickID]) === null || _this$candlesticks$th6 === void 0 ? void 0 : _this$candlesticks$th6.low), this.mousePosition.x + 30, yPos + 75);\n    }\n  }\n  drawGrid() {\n    const context = this.canvas.getContext('2d');\n\n    // roughly divide the yRange into cells\n    const yGridSize = this.yRange / this.yGridCells;\n\n    // try to find a nice number to round to\n    let niceNumber = Math.pow(10, Math.ceil(Math.log10(yGridSize)));\n    if (yGridSize < 0.25 * niceNumber) niceNumber = 0.25 * niceNumber;else if (yGridSize < 0.5 * niceNumber) niceNumber = 0.5 * niceNumber;\n\n    // find next largest nice number above yStart\n    const yStartRoundNumber = Math.ceil(this.yStart / niceNumber) * niceNumber;\n    // find next lowest nice number below yEnd\n    const yEndRoundNumber = Math.floor(this.yEnd / niceNumber) * niceNumber;\n    for (let textWidth, y = yStartRoundNumber; y <= yEndRoundNumber; y += niceNumber) {\n      this.drawLine(0, this.yToPixelCoords(y), this.canvas.width, this.yToPixelCoords(y), this.gridColor);\n      textWidth = context.measureText(this.roundPriceValue(y).toString()).width;\n      context.fillStyle = this.gridTextColor;\n      context.fillText(this.roundPriceValue(y).toString(), this.canvas.width - textWidth - 5, this.yToPixelCoords(y) - 5);\n    }\n\n    // roughly divide the xRange into cells\n    const xGridSize = this.xRange / this.xGridCells;\n\n    // try to find a nice number to round to\n    niceNumber = Math.pow(10, Math.ceil(Math.log10(xGridSize)));\n    if (xGridSize < 0.25 * niceNumber) {\n      niceNumber = 0.25 * niceNumber;\n    } else if (xGridSize < 0.5 * niceNumber) {\n      niceNumber = 0.5 * niceNumber;\n    }\n\n    // find next largest nice number above yStart\n    const xStartRoundNumber = Math.ceil(this.xStart / niceNumber) * niceNumber;\n    // find next lowest nice number below yEnd\n    const xEndRoundNumber = Math.floor(this.xEnd / niceNumber) * niceNumber;\n\n    // if the total x range is more than 5 days, format the timestamp as date instead of hours\n    let formatAsDate = this.xRange > 60 * 60 * 24 * 1000 * 5;\n    for (let day, month, minutes, date, dateStr, x = xStartRoundNumber; x <= xEndRoundNumber; x += niceNumber) {\n      this.drawLine(this.xToPixelCoords(x), 0, this.xToPixelCoords(x), this.canvas.height, this.gridColor);\n      date = new Date(x);\n      dateStr = '';\n      if (formatAsDate) {\n        day = date.getDate();\n        // if (day < 10) day = '0' + day;\n        month = date.getMonth() + 1;\n        // if (month < 10) month = '0' + month;\n        dateStr = `${day < 10 ? '0' + day : day}.${month < 10 ? '0' + month : month}`;\n      } else {\n        minutes = date.getMinutes();\n        if (minutes < 10) {\n          minutes = '0' + minutes;\n        }\n        dateStr = date.getHours() + ':' + minutes;\n      }\n      context.fillStyle = this.gridTextColor;\n      context.fillText(dateStr, this.xToPixelCoords(x) + 5, this.canvas.height - 5);\n    }\n  }\n  calculateYRange() {\n    for (let i = 0; i < this.candlesticks.length; ++i) {\n      if (i === 0) {\n        this.yStart = this.candlesticks[i].low;\n        this.yEnd = this.candlesticks[i].high;\n      } else {\n        if (this.candlesticks[i].low < this.yStart) {\n          this.yStart = this.candlesticks[i].low;\n        }\n        if (this.candlesticks[i].high > this.yEnd) {\n          this.yEnd = this.candlesticks[i].high;\n        }\n      }\n    }\n    this.yRange = this.yEnd - this.yStart;\n  }\n  calculateXRange() {\n    var _this$candlesticks$4, _this$candlesticks;\n    this.xStart = ((_this$candlesticks$4 = this.candlesticks[0]) === null || _this$candlesticks$4 === void 0 ? void 0 : _this$candlesticks$4.timestamp) || 0;\n    this.xEnd = ((_this$candlesticks = this.candlesticks[this.candlesticks.length - 1]) === null || _this$candlesticks === void 0 ? void 0 : _this$candlesticks.timestamp) || 0;\n    this.xRange = this.xEnd - this.xStart;\n  }\n  yToPixelCoords(y) {\n    return this.canvas.height - this.marginBottom - (y - this.yStart) * this.yPixelRange / this.yRange;\n  }\n  xToPixelCoords(x) {\n    return this.marginLeft + (x - this.xStart) * this.xPixelRange / this.xRange;\n  }\n  yToValueCoords(y) {\n    return this.yStart + (this.canvas.height - this.marginBottom - y) * this.yRange / this.yPixelRange;\n  }\n  xToValueCoords(x) {\n    return this.xStart + (x - this.marginLeft) * this.xRange / this.xPixelRange;\n  }\n  drawLine(xStart, yStart, xEnd, yEnd, color) {\n    const context = this.canvas.getContext('2d');\n    context.beginPath();\n    // to get a crisp 1 pixel wide line, we need to add 0.5 to the coords\n    context.moveTo(xStart + 0.5, yStart + 0.5);\n    context.lineTo(xEnd + 0.5, yEnd + 0.5);\n    context.strokeStyle = color;\n    context.stroke();\n  }\n  fillRect(x, y, width, height, color) {\n    const context = this.canvas.getContext('2d');\n    context.beginPath();\n    context.fillStyle = color;\n    context.rect(x, y, width, height);\n    context.fill();\n  }\n  drawRect(x, y, width, height, color) {\n    const context = this.canvas.getContext('2d');\n    context.beginPath();\n    context.strokeStyle = color;\n    context.rect(x, y, width, height);\n    context.stroke();\n  }\n  formatDate(date) {\n    const day = date.getDate();\n    const month = date.getMonth() + 1;\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const year = date.getFullYear();\n    return `${day < 10 ? '0' + day : day}/${month < 10 ? '0' + month : month}/${year} - ${hours < 10 ? '0' + hours : hours}:${minutes < 10 ? '0' + minutes : minutes}`;\n  }\n  roundPriceValue(value) {\n    if (value > 1.0) return Math.round(value * 100) / 100;\n    if (value > 0.001) return Math.round(value * 1000) / 1000;\n    if (value > 0.00001) return Math.round(value * 100000) / 100000;\n    if (value > 0.0000001) return Math.round(value * 10000000) / 10000000;else return Math.round(value * 1000000000) / 1000000000;\n  }\n}\n\n// export function CandlestickChart({dataPoints}: IChart) {\n//   const canvasRef = useRef<LegacyRef<HTMLCanvasElement>>() as any;\n//   // const [chart, setChart] = useState<CandlestickChartElement>();\n\n//   useEffect(() => {\n//     new CandlestickChartElement(canvasRef?.current, dataPoints).draw();\n//   }, [dataPoints]);\n\n//   return (<canvas ref={canvasRef} style={{ width: '100%'}}></canvas>);\n// }\n// export default CandlestickChart;\n\nexport function CandlestickChart(_ref3) {\n  _s();\n  let {\n    dataPoints\n  } = _ref3;\n  const divRef = useRef();\n  // const [chart, setChart] = useState<CandlestickChartElement>();\n\n  useEffect(() => {\n    // new CandlestickChartElement(divRef?.current, dataPoints).draw();\n    if (dataPoints && divRef !== null && divRef !== void 0 && divRef.current) {\n      const chart = window.AmCharts.makeChart(divRef === null || divRef === void 0 ? void 0 : divRef.current, {\n        \"type\": \"serial\",\n        \"theme\": \"none\",\n        \"dataDateFormat\": \"YYYY-MM-DD\",\n        \"valueAxes\": [{\n          \"position\": \"left\"\n        }],\n        \"graphs\": [{\n          \"id\": \"g1\",\n          \"balloonText\": \"Open:<b>[[open]]</b><br>Low:<b>[[low]]</b><br>High:<b>[[high]]</b><br>Close:<b>[[close]]</b><br>\",\n          \"closeField\": \"close\",\n          \"fillColors\": \"#7f8da9\",\n          \"highField\": \"high\",\n          \"lineColor\": \"#7f8da9\",\n          \"lineAlpha\": 1,\n          \"lowField\": \"low\",\n          \"fillAlphas\": 0.9,\n          \"negativeFillColors\": \"#db4c3c\",\n          \"negativeLineColor\": \"#db4c3c\",\n          \"openField\": \"open\",\n          \"title\": \"Price:\",\n          \"type\": \"candlestick\",\n          \"valueField\": \"close\"\n        }],\n        \"chartScrollbar\": {\n          \"graph\": \"g1\",\n          \"graphType\": \"line\",\n          \"scrollbarHeight\": 30\n        },\n        \"chartCursor\": {\n          \"valueLineEnabled\": true,\n          \"valueLineBalloonEnabled\": true\n        },\n        \"categoryField\": \"date\",\n        \"categoryAxis\": {\n          \"parseDates\": true\n        },\n        \"dataProvider\": dataPoints,\n        \"export\": {\n          \"enabled\": true,\n          \"position\": \"bottom-right\"\n        }\n      });\n      chart.addListener(\"rendered\", zoomChart);\n      zoomChart();\n\n      // this method is called when chart is first inited as we listen for \"dataUpdated\" event\n      function zoomChart() {\n        // different zoom methods can be used - zoomToIndexes, zoomToDates, zoomToCategoryValues\n        chart.zoomToIndexes(chart.dataProvider.length - 10, chart.dataProvider.length - 1);\n      }\n    }\n  }, [dataPoints]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: divRef,\n    style: {\n      width: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 476,\n    columnNumber: 11\n  }, this);\n}\n_s(CandlestickChart, \"HI2rmkDStaXKpoO1B+Q8/ihvhA0=\");\n_c = CandlestickChart;\nexport default CandlestickChart;\nvar _c;\n$RefreshReg$(_c, \"CandlestickChart\");","map":{"version":3,"names":["React","useEffect","useRef","Candlestick","constructor","timestamp","open","close","high","low","parseInt","toString","parseFloat","VolumeBar","volume","CandlestickChartElement","canvas","candlesticks","gridColor","gridTextColor","mouseHoverBackgroundColor","mouseHoverTextColor","greenColor","redHoverColor","candleWidth","marginLeft","marginRight","marginTop","marginBottom","yStart","yEnd","yRange","yPixelRange","xEnd","xGridCells","drawMouseOverlay","mousePosition","xMouseHover","yMouseHover","hoveredCandlestickID","xPixelRange","xStart","xRange","redColor","greenHoverColor","yGridCells","context","getContext","font","lineWidth","addEventListener","mouseMoveHandler","bind","mouseOutHandler","style","backgroundColor","height","width","x","y","event","getMousePos","yToValueCoords","xToValueCoords","candlestickDelta","Math","floor","xToPixelCoords","draw","rect","getBoundingClientRect","clientX","left","clientY","top","clearRect","calculateYRange","calculateXRange","drawGrid","length","color","candlestick","i","drawLine","yToPixelCoords","fillRect","setLineDash","str","roundPriceValue","textWidth","measureText","fillStyle","fillText","formatDate","Date","yPos","drawRect","yGridSize","niceNumber","pow","ceil","log10","yStartRoundNumber","yEndRoundNumber","xGridSize","xStartRoundNumber","xEndRoundNumber","formatAsDate","day","month","minutes","date","dateStr","getDate","getMonth","getMinutes","getHours","beginPath","moveTo","lineTo","strokeStyle","stroke","fill","hours","year","getFullYear","value","round","CandlestickChart","dataPoints","divRef","current","chart","window","AmCharts","makeChart","addListener","zoomChart","zoomToIndexes","dataProvider"],"sources":["C:/Users/Lucian/Documents/DEV/nodejs/stock-market-api/dev/static/src/components/CandleStickChart.tsx"],"sourcesContent":["import React, { LegacyRef, useEffect, useRef } from 'react';\r\n\r\nexport class Candlestick {\r\n  timestamp: number;\r\n  close: number;\r\n  high: number;\r\n  low: number;\r\n  open: number;\r\n\r\n  constructor({ timestamp, open, close, high, low }: TCandleStick) {\r\n    this.timestamp = parseInt(timestamp.toString());\r\n    this.open = parseFloat(open.toString());\r\n    this.close = parseFloat(close.toString());\r\n    this.high = parseFloat(high.toString());\r\n    this.low = parseFloat(low.toString());\r\n  }\r\n}\r\n\r\nexport class VolumeBar {\r\n  timestamp: number;\r\n  volume: number;\r\n\r\n  constructor({ timestamp, volume }: TVolume) {\r\n    this.timestamp = parseInt(timestamp.toString());\r\n    this.volume = parseFloat(volume.toString());\r\n  }\r\n}\r\n\r\nexport class CandlestickChartElement {\r\n  candlesticks: Candlestick[];\r\n  canvas: HTMLCanvasElement;\r\n  gridColor: string;\r\n  gridTextColor: string;\r\n  mouseHoverBackgroundColor: string;\r\n  mouseHoverTextColor: string;\r\n  greenColor: string;\r\n  redHoverColor: string;\r\n  candleWidth: number;\r\n  marginLeft: number;\r\n  marginRight: number;\r\n  marginTop: number;\r\n  marginBottom: number;\r\n  yStart: number;\r\n  yEnd: number;\r\n  yRange: number;\r\n  yPixelRange: number;\r\n  xEnd: number;\r\n  xGridCells: number;\r\n  drawMouseOverlay: boolean;\r\n  mousePosition: { x: number; y: number; };\r\n  xMouseHover: number;\r\n  yMouseHover: number;\r\n  hoveredCandlestickID: number;\r\n  xPixelRange: number;\r\n  xStart: number;\r\n  xRange: number;\r\n  redColor: string;\r\n  greenHoverColor: string;\r\n  yGridCells: number;\r\n\r\n  // Itâ€™s called when the component is first initialized.\r\n  // It must call super() and can set any defaults or perform other pre-rendering processes.\r\n  constructor(canvas: HTMLCanvasElement, candlesticks?: Candlestick[]) {\r\n    this.canvas = canvas;\r\n\r\n    const context = this.canvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n    context.font = '12px sans-serif';\r\n    context.lineWidth = 1;\r\n\r\n    this.canvas.addEventListener('mousemove', this.mouseMoveHandler.bind(this));\r\n    this.canvas.addEventListener('mouseout', this.mouseOutHandler.bind(this));\r\n    this.canvas.style.backgroundColor = '#252525';\r\n\r\n    this.gridColor = '#444444';\r\n    this.gridTextColor = '#aaaaaa';\r\n    this.mouseHoverBackgroundColor = '#eeeeee';\r\n    this.mouseHoverTextColor = '#000000';\r\n    this.greenColor = '#00cc00';\r\n    this.redColor = '#cc0000';\r\n    this.greenHoverColor = '#00ff00';\r\n    this.redHoverColor = '#ff0000';\r\n\r\n    this.candleWidth = 5;\r\n\r\n    this.marginLeft = 10;\r\n    this.marginRight = 100;\r\n    this.marginTop = 10;\r\n    this.marginBottom = 30;\r\n\r\n    this.yStart = 0;\r\n    this.yEnd = 0;\r\n    this.yRange = 0;\r\n    this.yPixelRange = this.canvas.height-this.marginTop-this.marginBottom;\r\n\r\n    this.xStart = 0;\r\n    this.xEnd = 0;\r\n    this.xRange = 0;\r\n    this.xPixelRange = this.canvas.width-this.marginLeft-this.marginRight;\r\n\r\n    // these are only approximations, the grid will be divided in a way so the numbers are nice\r\n    this.xGridCells = 16;\r\n    this.yGridCells = 16;\r\n\r\n    this.drawMouseOverlay = false;\r\n    this.mousePosition = { x: 0 , y: 0 };\r\n    this.xMouseHover = 0;\r\n    this.yMouseHover = 0;\r\n    this.hoveredCandlestickID = 0;\r\n\r\n    this.candlesticks = candlesticks || [];\r\n    // this.draw();\r\n  }\r\n\r\n  // addCandlestick(candlestick: Candlestick) {\r\n  //   this.candlesticks.push(candlestick);\r\n  // }\r\n\r\n  mouseMoveHandler(event: MouseEvent) {\r\n    this.mousePosition = this.getMousePos(event);\r\n    this.mousePosition.x += this.candleWidth / 2;\r\n    this.drawMouseOverlay = true;\r\n    if (this.mousePosition.x < this.marginLeft) this.drawMouseOverlay = false;\r\n    if (this.mousePosition.x > this.canvas.width - this.marginRight + this.candleWidth)\r\n      this.drawMouseOverlay = false;\r\n    if (this.mousePosition.y > this.canvas.height - this.marginBottom)\r\n      this.drawMouseOverlay = false;\r\n    if (this.drawMouseOverlay) {\r\n      this.yMouseHover = this.yToValueCoords(this.mousePosition.y);\r\n      this.xMouseHover = this.xToValueCoords(this.mousePosition.x);\r\n      // snap to candlesticks\r\n      const candlestickDelta = (this.candlesticks[1]?.timestamp - this.candlesticks[0]?.timestamp) || 0;\r\n      this.hoveredCandlestickID = (Math.floor((this.xMouseHover - this.candlesticks[0]?.timestamp) / candlestickDelta)) || 0;\r\n      this.xMouseHover = Math.floor(this.xMouseHover / candlestickDelta) * candlestickDelta;\r\n      this.mousePosition.x = this.xToPixelCoords(this.xMouseHover);\r\n      this.draw();\r\n    } else this.draw();\r\n  }\r\n\r\n  mouseOutHandler(event: MouseEvent) {\r\n    this.drawMouseOverlay = false;\r\n    this.draw();\r\n  }\r\n\r\n  getMousePos(event: MouseEvent) {\r\n    const rect = this.canvas.getBoundingClientRect();\r\n    return { x: event.clientX - rect.left, y: event.clientY - rect.top };\r\n  }\r\n\r\n  draw() {\r\n    const context = this.canvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n    // clear background\r\n    context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    this.calculateYRange();\r\n    this.calculateXRange();\r\n\r\n    this.drawGrid();\r\n\r\n    this.candleWidth = this.xPixelRange / this.candlesticks.length;\r\n    this.candleWidth--;\r\n    if (this.candleWidth % 2 === 0) this.candleWidth--;\r\n\r\n    for (let color, candlestick, i = 0; i < this.candlesticks.length; ++i) {\r\n      candlestick = this.candlesticks[i];\r\n      color = candlestick.close > candlestick.open ? this.greenColor : this.redColor;\r\n\r\n      if (i === this.hoveredCandlestickID) {\r\n        if (color === this.greenColor) color = this.greenHoverColor;\r\n        else if (color === this.redColor) color = this.redHoverColor;\r\n      }\r\n\r\n      // draw the wick\r\n      this.drawLine(\r\n        this.xToPixelCoords(candlestick.timestamp),\r\n        this.yToPixelCoords(candlestick.low),\r\n        this.xToPixelCoords(candlestick.timestamp),\r\n        this.yToPixelCoords(candlestick.high),\r\n        color\r\n      );\r\n\r\n      // draw the candle\r\n      this.fillRect(\r\n        this.xToPixelCoords(candlestick.timestamp) - Math.floor(this.candleWidth / 2),\r\n        this.yToPixelCoords(candlestick.open),\r\n        this.candleWidth,\r\n        this.yToPixelCoords(candlestick.close) - this.yToPixelCoords(candlestick.open),\r\n        color\r\n      );\r\n    }\r\n\r\n    // draw mouse hover\r\n    if (this.drawMouseOverlay && context) {\r\n      // price line\r\n      context.setLineDash([5, 5]);\r\n      this.drawLine(0, this.mousePosition.y, this.canvas.width, this.mousePosition.y, this.mouseHoverBackgroundColor);\r\n      context.setLineDash([]);\r\n      let str = this.roundPriceValue(this.yMouseHover).toString();\r\n      let textWidth = context.measureText(str).width;\r\n      this.fillRect(this.canvas.width - 70, this.mousePosition.y - 10, 70, 20, this.mouseHoverBackgroundColor);\r\n      context.fillStyle = this.mouseHoverTextColor;\r\n      context.fillText(str, this.canvas.width - textWidth - 5, this.mousePosition.y + 5);\r\n\r\n      // time line\r\n      context.setLineDash([5, 5]);\r\n      this.drawLine(this.mousePosition.x, 0, this.mousePosition.x, this.canvas.height, this.mouseHoverBackgroundColor);\r\n      context.setLineDash([]);\r\n      str = this.formatDate(new Date(this.xMouseHover)).toString();\r\n      textWidth = context.measureText(str).width;\r\n      this.fillRect(this.mousePosition.x - textWidth / 2 - 5, this.canvas.height - 20, textWidth + 10, 20, this.mouseHoverBackgroundColor);\r\n      context.fillStyle = this.mouseHoverTextColor;\r\n      context.fillText(str, this.mousePosition.x - textWidth / 2, this.canvas.height - 5);\r\n\r\n      // data\r\n      let yPos = this.mousePosition.y - 95;\r\n      if (yPos < 0) {\r\n        yPos = this.mousePosition.y + 15;\r\n      }\r\n\r\n      this.fillRect(this.mousePosition.x + 15, yPos, 100, 80, this.mouseHoverBackgroundColor);\r\n      const color =\r\n        this.candlesticks[this.hoveredCandlestickID]?.close >\r\n        this.candlesticks[this.hoveredCandlestickID]?.open ? this.greenColor : this.redColor;\r\n      this.fillRect(this.mousePosition.x + 15, yPos, 10, 80, color);\r\n      context.lineWidth = 2;\r\n      this.drawRect(this.mousePosition.x + 15, yPos, 100, 80, color);\r\n      context.lineWidth = 1;\r\n\r\n      context.fillStyle = this.mouseHoverTextColor;\r\n      context.fillText(\r\n        'O: ' + this.candlesticks[this.hoveredCandlestickID]?.open,\r\n        this.mousePosition.x + 30,\r\n        yPos + 15\r\n      );\r\n      context.fillText(\r\n        'C: ' + this.candlesticks[this.hoveredCandlestickID]?.close,\r\n        this.mousePosition.x + 30,\r\n        yPos + 35\r\n      );\r\n      context.fillText(\r\n        'H: ' + this.candlesticks[this.hoveredCandlestickID]?.high,\r\n        this.mousePosition.x + 30,\r\n        yPos + 55\r\n      );\r\n      context.fillText(\r\n        'L: ' + this.candlesticks[this.hoveredCandlestickID]?.low,\r\n        this.mousePosition.x + 30,\r\n        yPos + 75\r\n      );\r\n    }\r\n  }\r\n\r\n  drawGrid() {\r\n    const context = this.canvas.getContext('2d') as CanvasRenderingContext2D ;\r\n\r\n    // roughly divide the yRange into cells\r\n    const yGridSize = this.yRange / this.yGridCells;\r\n  \r\n    // try to find a nice number to round to\r\n    let niceNumber = Math.pow(10, Math.ceil(Math.log10(yGridSize)));\r\n    if (yGridSize < 0.25 * niceNumber) niceNumber = 0.25 * niceNumber;\r\n    else if (yGridSize < 0.5 * niceNumber) niceNumber = 0.5 * niceNumber;\r\n  \r\n    // find next largest nice number above yStart\r\n    const yStartRoundNumber = Math.ceil(this.yStart / niceNumber) * niceNumber;\r\n    // find next lowest nice number below yEnd\r\n    const yEndRoundNumber = Math.floor(this.yEnd / niceNumber) * niceNumber;\r\n  \r\n    for (let textWidth, y = yStartRoundNumber; y <= yEndRoundNumber; y += niceNumber) {\r\n      this.drawLine(0, this.yToPixelCoords(y), this.canvas.width, this.yToPixelCoords(y), this.gridColor);\r\n      textWidth = context.measureText(this.roundPriceValue(y).toString()).width;\r\n      context.fillStyle = this.gridTextColor;\r\n      context.fillText(this.roundPriceValue(y).toString(), this.canvas.width - textWidth - 5, this.yToPixelCoords(y) - 5);\r\n    }\r\n  \r\n    // roughly divide the xRange into cells\r\n    const xGridSize = this.xRange / this.xGridCells;\r\n  \r\n    // try to find a nice number to round to\r\n    niceNumber = Math.pow(10, Math.ceil(Math.log10(xGridSize)));\r\n    if (xGridSize < 0.25 * niceNumber) {\r\n      niceNumber = 0.25 * niceNumber;\r\n    } else if (xGridSize < 0.5 * niceNumber) {\r\n      niceNumber = 0.5 * niceNumber;\r\n    }\r\n\r\n    // find next largest nice number above yStart\r\n    const xStartRoundNumber = Math.ceil(this.xStart / niceNumber) * niceNumber;\r\n    // find next lowest nice number below yEnd\r\n    const xEndRoundNumber = Math.floor(this.xEnd / niceNumber) * niceNumber;\r\n  \r\n    // if the total x range is more than 5 days, format the timestamp as date instead of hours\r\n    let formatAsDate = (this.xRange > 60 * 60 * 24 * 1000 * 5);\r\n  \r\n    for (let day, month, minutes, date, dateStr, x = xStartRoundNumber; x <= xEndRoundNumber; x += niceNumber) {\r\n      this.drawLine(this.xToPixelCoords(x), 0, this.xToPixelCoords(x), this.canvas.height, this.gridColor);\r\n      date = new Date(x);\r\n      dateStr = '';\r\n      if (formatAsDate) {\r\n        day = date.getDate();\r\n        // if (day < 10) day = '0' + day;\r\n        month = date.getMonth() + 1;\r\n        // if (month < 10) month = '0' + month;\r\n        dateStr = `${(day < 10) ? '0' + day : day}.${(month < 10) ? '0' + month : month}`;\r\n      } else {\r\n        minutes = date.getMinutes();\r\n        if (minutes < 10) {\r\n          minutes = '0' + minutes;\r\n        }\r\n        dateStr = date.getHours() + ':' + minutes;\r\n      }\r\n      context.fillStyle = this.gridTextColor;\r\n      context.fillText(dateStr, this.xToPixelCoords(x) + 5, this.canvas.height - 5);\r\n    }\r\n  }\r\n\r\n  calculateYRange() {\r\n    for (let i = 0; i < this.candlesticks.length; ++i) {\r\n      if (i === 0) {\r\n        this.yStart = this.candlesticks[i].low;\r\n        this.yEnd = this.candlesticks[i].high;\r\n      } else {\r\n        if (this.candlesticks[i].low < this.yStart) {\r\n          this.yStart = this.candlesticks[i].low;\r\n        }\r\n        if (this.candlesticks[i].high > this.yEnd) {\r\n          this.yEnd = this.candlesticks[i].high;\r\n        }\r\n      }\r\n    }\r\n    this.yRange = this.yEnd - this.yStart;\r\n  }\r\n\r\n  calculateXRange() {\r\n    this.xStart = this.candlesticks[0]?.timestamp || 0;\r\n    this.xEnd = this.candlesticks[this.candlesticks.length - 1]?.timestamp || 0;\r\n    this.xRange = this.xEnd - this.xStart;\r\n  }\r\n\r\n  yToPixelCoords(y: number) {\r\n    return (this.canvas.height - this.marginBottom - ((y - this.yStart) * this.yPixelRange) / this.yRange);\r\n  }\r\n\r\n  xToPixelCoords(x: number) {\r\n    return this.marginLeft + ((x - this.xStart) * this.xPixelRange) / this.xRange;\r\n  }\r\n\r\n  yToValueCoords(y: number) {\r\n    return (this.yStart + ((this.canvas.height - this.marginBottom - y) * this.yRange) / this.yPixelRange);\r\n  }\r\n\r\n  xToValueCoords(x: number) {\r\n    return this.xStart + ((x - this.marginLeft) * this.xRange) / this.xPixelRange;\r\n  }\r\n\r\n  drawLine( xStart: number, yStart: number, xEnd: number, yEnd: number, color: string | CanvasGradient | CanvasPattern) {\r\n    const context = this.canvas.getContext('2d') as CanvasRenderingContext2D ;\r\n    context.beginPath();\r\n    // to get a crisp 1 pixel wide line, we need to add 0.5 to the coords\r\n    context.moveTo(xStart + 0.5, yStart + 0.5);\r\n    context.lineTo(xEnd + 0.5, yEnd + 0.5);\r\n    context.strokeStyle = color;\r\n    context.stroke();\r\n  }\r\n\r\n  fillRect(x: number, y: number, width: number, height: number, color: string | CanvasGradient | CanvasPattern) {\r\n    const context = this.canvas.getContext('2d') as CanvasRenderingContext2D ;\r\n    context.beginPath();\r\n    context.fillStyle = color;\r\n    context.rect(x, y, width, height);\r\n    context.fill();\r\n  }\r\n  \r\n  drawRect(x: number, y: number, width: number, height: number, color: string | CanvasGradient | CanvasPattern) {\r\n    const context = this.canvas.getContext('2d') as CanvasRenderingContext2D ;\r\n    context.beginPath();\r\n    context.strokeStyle = color;\r\n    context.rect(x, y, width, height);\r\n    context.stroke();\r\n  }\r\n\r\n  formatDate(date: Date) {\r\n    const day = date.getDate();\r\n    const month = date.getMonth() + 1;\r\n    const hours = date.getHours();\r\n    const minutes = date.getMinutes();\r\n    const year = date.getFullYear();\r\n\r\n    return `${(day < 10) ? '0' + day : day}/${(month < 10) ? '0' + month : month}/${year} - ${(hours < 10) ? '0' + hours : hours}:${(minutes < 10) ? '0' + minutes : minutes}`;\r\n  }\r\n  \r\n  roundPriceValue(value: number) {\r\n    if (value > 1.0) return Math.round(value * 100) / 100;\r\n    if (value > 0.001) return Math.round(value * 1000) / 1000;\r\n    if (value > 0.00001) return Math.round(value * 100000) / 100000;\r\n    if (value > 0.0000001) return Math.round(value * 10000000) / 10000000;\r\n    else return Math.round(value * 1000000000) / 1000000000;\r\n  }\r\n}\r\n\r\n// export function CandlestickChart({dataPoints}: IChart) {\r\n//   const canvasRef = useRef<LegacyRef<HTMLCanvasElement>>() as any;\r\n//   // const [chart, setChart] = useState<CandlestickChartElement>();\r\n\r\n//   useEffect(() => {\r\n//     new CandlestickChartElement(canvasRef?.current, dataPoints).draw();\r\n//   }, [dataPoints]);\r\n\r\n//   return (<canvas ref={canvasRef} style={{ width: '100%'}}></canvas>);\r\n// }\r\n// export default CandlestickChart;\r\n\r\nexport function CandlestickChart({dataPoints}: IChart) {\r\n  const divRef = useRef<LegacyRef<HTMLDivElement>>() as any;\r\n  // const [chart, setChart] = useState<CandlestickChartElement>();\r\n\r\n  useEffect(() => {\r\n    // new CandlestickChartElement(divRef?.current, dataPoints).draw();\r\n    if (dataPoints && divRef?.current) {\r\n      const chart = (window as any).AmCharts.makeChart( divRef?.current, {\r\n        \"type\": \"serial\",\r\n        \"theme\": \"none\",\r\n        \"dataDateFormat\":\"YYYY-MM-DD\",\r\n        \"valueAxes\": [ {\r\n          \"position\": \"left\"\r\n        } ],\r\n        \"graphs\": [ {\r\n          \"id\": \"g1\",\r\n          \"balloonText\": \"Open:<b>[[open]]</b><br>Low:<b>[[low]]</b><br>High:<b>[[high]]</b><br>Close:<b>[[close]]</b><br>\",\r\n          \"closeField\": \"close\",\r\n          \"fillColors\": \"#7f8da9\",\r\n          \"highField\": \"high\",\r\n          \"lineColor\": \"#7f8da9\",\r\n          \"lineAlpha\": 1,\r\n          \"lowField\": \"low\",\r\n          \"fillAlphas\": 0.9,\r\n          \"negativeFillColors\": \"#db4c3c\",\r\n          \"negativeLineColor\": \"#db4c3c\",\r\n          \"openField\": \"open\",\r\n          \"title\": \"Price:\",\r\n          \"type\": \"candlestick\",\r\n          \"valueField\": \"close\"\r\n        } ],\r\n        \"chartScrollbar\": {\r\n          \"graph\": \"g1\",\r\n          \"graphType\": \"line\",\r\n          \"scrollbarHeight\": 30\r\n        },\r\n        \"chartCursor\": {\r\n          \"valueLineEnabled\": true,\r\n          \"valueLineBalloonEnabled\": true\r\n        },\r\n        \"categoryField\": \"date\",\r\n        \"categoryAxis\": {\r\n          \"parseDates\": true\r\n        },\r\n        \"dataProvider\": dataPoints,\r\n      \r\n        \"export\": {\r\n          \"enabled\": true,\r\n          \"position\": \"bottom-right\"\r\n        }\r\n      } );\r\n      \r\n      chart.addListener( \"rendered\", zoomChart );\r\n      zoomChart();\r\n      \r\n      // this method is called when chart is first inited as we listen for \"dataUpdated\" event\r\n      function zoomChart() {\r\n        // different zoom methods can be used - zoomToIndexes, zoomToDates, zoomToCategoryValues\r\n        chart.zoomToIndexes( chart.dataProvider.length - 10, chart.dataProvider.length - 1 );\r\n      }  \r\n    }\r\n  }, [dataPoints]);\r\n\r\n  return (<div ref={divRef} style={{ width: '100%'}}></div>);\r\n}\r\nexport default CandlestickChart;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}