{"ast":null,"code":"/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\nvar AxisRendererY3D = /** @class */function (_super) {\n  __extends(AxisRendererY3D, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Related axis\r\n   */\n  function AxisRendererY3D() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * A related chart.\r\n     *\r\n     * @todo Description\r\n     */\n    _this._chart = new MutableValueDisposer();\n    _this.className = \"AxisRendererY3D\";\n    _this._disposers.push(_this._chart);\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Updates and positions a grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param grid         Grid element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n  AxisRendererY3D.prototype.updateGridElement = function (grid, position, endPosition) {\n    position = position + (endPosition - position) * grid.location;\n    var point = this.positionToPoint(position);\n    if (grid.element) {\n      var dx = this.chart.dx3D || 0;\n      var dy = this.chart.dy3D || 0;\n      var w = this.getWidth();\n      grid.path = $path.moveTo({\n        x: 0,\n        y: 0\n      }) + $path.lineTo({\n        x: dx,\n        y: dy\n      }) + $path.lineTo({\n        x: w + dx,\n        y: dy\n      });\n    }\n    this.positionItem(grid, point);\n    this.toggleVisibility(grid, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions the base grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRendererY3D.prototype.updateBaseGridElement = function () {\n    _super.prototype.updateBaseGridElement.call(this);\n    var dx = this.chart.dx3D || 0;\n    var dy = this.chart.dy3D || 0;\n    var w = this.getWidth();\n    this.baseGrid.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: w,\n      y: 0\n    }) + $path.lineTo({\n      x: w + dx,\n      y: dy\n    });\n  };\n  Object.defineProperty(AxisRendererY3D.prototype, \"chart\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Chart\r\n     */\n    get: function () {\n      return this._chart.get();\n    },\n    /**\r\n     * Chart, associated with the Axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Chart\r\n     */\n    set: function (chart) {\n      if (chart) {\n        this._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Invoked when 3D-related settings change, like depth or angle.\r\n   *\r\n   * @param event Event\r\n   */\n  AxisRendererY3D.prototype.handle3DChanged = function (event) {\n    if (event.property == \"depth\" || event.property == \"angle\") {\n      this.invalidate();\n    }\n  };\n  return AxisRendererY3D;\n}(AxisRendererY);\nexport { AxisRendererY3D };","map":{"version":3,"mappings":"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","names":["AxisRendererY","MutableValueDisposer","$path","__extends","_super","_this","className","_disposers","push","_chart","applyTheme","AxisRendererY3D","grid","position","endPosition","location","point","positionToPoint","element","dx","chart","dx3D","dy","dy3D","w","getWidth","path","moveTo","x","y","lineTo","positionItem","toggleVisibility","updateBaseGridElement","baseGrid","Object","get","set","events","on","handle3DChanged","event","property","invalidate"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\axes\\AxisRendererY3D.ts"],"sourcesContent":["/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererY3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis._disposers.push(this._chart);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\t\tlet w: number = this.getWidth();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t+ $path.lineTo({ x: w + dx, y: dy });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}