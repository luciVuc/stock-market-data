{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Layout, eachChildren } from \"./Layout\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\n/**\r\n * A horizontal children layout for [[Container]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info\r\n */\nvar HorizontalLayout = /** @class */function (_super) {\n  __extends(HorizontalLayout, _super);\n  function HorizontalLayout() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @ignore\r\n   */\n  Object.defineProperty(HorizontalLayout.prototype, \"updateContainer\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (container) {\n      var paddingLeft = container.get(\"paddingLeft\", 0);\n      var availableWidth = container.innerWidth();\n      var totalPercent = 0;\n      eachChildren(container, function (child) {\n        if (child.isVisible()) {\n          if (child.get(\"position\") == \"relative\") {\n            var childWidth = child.get(\"width\");\n            if (childWidth instanceof Percent) {\n              totalPercent += childWidth.value;\n              var w = availableWidth * childWidth.value;\n              var minWidth = child.get(\"minWidth\", child.getPrivate(\"minWidth\", -Infinity));\n              if (minWidth > w) {\n                availableWidth -= minWidth;\n                totalPercent -= childWidth.value;\n              }\n              var maxWidth = child.get(\"maxWidth\", child.getPrivate(\"maxWidth\", Infinity));\n              if (w > maxWidth) {\n                availableWidth -= maxWidth;\n                totalPercent -= childWidth.value;\n              }\n            } else {\n              if (!$type.isNumber(childWidth)) {\n                childWidth = child.width();\n              }\n              availableWidth -= childWidth + child.get(\"marginLeft\", 0) + child.get(\"marginRight\", 0);\n            }\n          }\n        }\n      });\n      if (availableWidth < 0) {\n        availableWidth = 0.01;\n      }\n      //if (availableWidth > 0) {\n      eachChildren(container, function (child) {\n        if (child.isVisible()) {\n          if (child.get(\"position\") == \"relative\") {\n            var childWidth = child.get(\"width\");\n            if (childWidth instanceof Percent) {\n              var privateWidth = availableWidth * childWidth.value / totalPercent - child.get(\"marginLeft\", 0) - child.get(\"marginRight\", 0);\n              var minWidth = child.get(\"minWidth\", child.getPrivate(\"minWidth\", -Infinity));\n              var maxWidth = child.get(\"maxWidth\", child.getPrivate(\"maxWidth\", Infinity));\n              privateWidth = Math.min(Math.max(minWidth, privateWidth), maxWidth);\n              child.setPrivate(\"width\", privateWidth);\n            }\n          }\n        }\n      });\n      //}\n      var prevX = paddingLeft;\n      eachChildren(container, function (child) {\n        if (child.get(\"position\") == \"relative\") {\n          if (child.isVisible()) {\n            var bounds = child.adjustedLocalBounds();\n            var marginLeft = child.get(\"marginLeft\", 0);\n            var marginRight = child.get(\"marginRight\", 0);\n            var maxWidth = child.get(\"maxWidth\");\n            var left = bounds.left;\n            var right = bounds.right;\n            if (maxWidth) {\n              if (right - left > maxWidth) {\n                right = left + maxWidth;\n              }\n            }\n            var x = prevX + marginLeft - left;\n            child.setPrivate(\"x\", x);\n            prevX = x + right + marginRight;\n          } else {\n            child.setPrivate(\"x\", undefined);\n          }\n        }\n      });\n    }\n  });\n  Object.defineProperty(HorizontalLayout, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"HorizontalLayout\"\n  });\n  Object.defineProperty(HorizontalLayout, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Layout.classNames.concat([HorizontalLayout.className])\n  });\n  return HorizontalLayout;\n}(Layout);\nexport { HorizontalLayout };","map":{"version":3,"mappings":";AAAA,SAASA,MAAM,EAAEC,YAAY,QAAQ,UAAU;AAC/C,OAAO,KAAKC,KAAK,MAAM,cAAc;AACrC,SAASC,OAAO,QAAQ,iBAAiB;AAGzC;;;;;AAKA;EAAsCC;EAAtC;;EAiGA;EA5FC;;;;;;;WAGA,UAAuBC,SAAoB;MAE1C,IAAIC,WAAW,GAAGD,SAAS,CAACE,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC;MAEjD,IAAIC,cAAc,GAAGH,SAAS,CAACI,UAAU,EAAE;MAE3C,IAAIC,YAAY,GAAG,CAAC;MAEpBT,YAAY,CAACI,SAAS,EAAE,UAACM,KAAK;QAC7B,IAAIA,KAAK,CAACC,SAAS,EAAE,EAAE;UACtB,IAAID,KAAK,CAACJ,GAAG,CAAC,UAAU,CAAC,IAAI,UAAU,EAAE;YACxC,IAAIM,UAAU,GAAGF,KAAK,CAACJ,GAAG,CAAC,OAAO,CAAC;YACnC,IAAIM,UAAU,YAAYV,OAAO,EAAE;cAClCO,YAAY,IAAIG,UAAU,CAACC,KAAK;cAEhC,IAAIC,CAAC,GAAGP,cAAc,GAAGK,UAAU,CAACC,KAAK;cACzC,IAAIE,QAAQ,GAAGL,KAAK,CAACJ,GAAG,CAAC,UAAU,EAAEI,KAAK,CAACM,UAAU,CAAC,UAAU,EAAE,CAACC,QAAQ,CAAC,CAAC;cAC7E,IAAIF,QAAQ,GAAGD,CAAC,EAAE;gBACjBP,cAAc,IAAIQ,QAAQ;gBAC1BN,YAAY,IAAIG,UAAU,CAACC,KAAK;;cAEjC,IAAIK,QAAQ,GAAGR,KAAK,CAACJ,GAAG,CAAC,UAAU,EAAEI,KAAK,CAACM,UAAU,CAAC,UAAU,EAAEC,QAAQ,CAAC,CAAC;cAC5E,IAAIH,CAAC,GAAGI,QAAQ,EAAE;gBACjBX,cAAc,IAAIW,QAAQ;gBAC1BT,YAAY,IAAIG,UAAU,CAACC,KAAK;;aAEjC,MACI;cACJ,IAAI,CAACZ,KAAK,CAACkB,QAAQ,CAACP,UAAU,CAAC,EAAE;gBAChCA,UAAU,GAAGF,KAAK,CAACU,KAAK,EAAE;;cAE3Bb,cAAc,IAAIK,UAAU,GAAGF,KAAK,CAACJ,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC,GAAGI,KAAK,CAACJ,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC;;;;MAI3F,CAAC,CAAC;MAEF,IAAIC,cAAc,GAAG,CAAC,EAAE;QACvBA,cAAc,GAAG,IAAI;;MAGtB;MACAP,YAAY,CAACI,SAAS,EAAE,UAACM,KAAK;QAC7B,IAAIA,KAAK,CAACC,SAAS,EAAE,EAAE;UACtB,IAAID,KAAK,CAACJ,GAAG,CAAC,UAAU,CAAC,IAAI,UAAU,EAAE;YACxC,IAAIM,UAAU,GAAGF,KAAK,CAACJ,GAAG,CAAC,OAAO,CAAC;YACnC,IAAIM,UAAU,YAAYV,OAAO,EAAE;cAClC,IAAImB,YAAY,GAAGd,cAAc,GAAGK,UAAU,CAACC,KAAK,GAAGJ,YAAY,GAAGC,KAAK,CAACJ,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC,GAAGI,KAAK,CAACJ,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC;cAC9H,IAAIS,QAAQ,GAAGL,KAAK,CAACJ,GAAG,CAAC,UAAU,EAAEI,KAAK,CAACM,UAAU,CAAC,UAAU,EAAE,CAACC,QAAQ,CAAC,CAAC;cAC7E,IAAIC,QAAQ,GAAGR,KAAK,CAACJ,GAAG,CAAC,UAAU,EAAEI,KAAK,CAACM,UAAU,CAAC,UAAU,EAAEC,QAAQ,CAAC,CAAC;cAC5EI,YAAY,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACT,QAAQ,EAAEM,YAAY,CAAC,EAAEH,QAAQ,CAAC;cAEnER,KAAK,CAACe,UAAU,CAAC,OAAO,EAAEJ,YAAY,CAAC;;;;MAI3C,CAAC,CAAC;MACF;MAEA,IAAIK,KAAK,GAAGrB,WAAW;MAEvBL,YAAY,CAACI,SAAS,EAAE,UAACM,KAAK;QAE7B,IAAIA,KAAK,CAACJ,GAAG,CAAC,UAAU,CAAC,IAAI,UAAU,EAAE;UACxC,IAAII,KAAK,CAACC,SAAS,EAAE,EAAE;YACtB,IAAIgB,MAAM,GAAGjB,KAAK,CAACkB,mBAAmB,EAAE;YACxC,IAAIC,UAAU,GAAGnB,KAAK,CAACJ,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC;YAC3C,IAAIwB,WAAW,GAAGpB,KAAK,CAACJ,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC;YAE7C,IAAIY,QAAQ,GAAGR,KAAK,CAACJ,GAAG,CAAC,UAAU,CAAC;YAEpC,IAAIyB,IAAI,GAAGJ,MAAM,CAACI,IAAI;YACtB,IAAIC,KAAK,GAAGL,MAAM,CAACK,KAAK;YACxB,IAAId,QAAQ,EAAE;cACb,IAAIc,KAAK,GAAGD,IAAI,GAAGb,QAAQ,EAAE;gBAC5Bc,KAAK,GAAGD,IAAI,GAAGb,QAAQ;;;YAIzB,IAAIe,CAAC,GAAGP,KAAK,GAAGG,UAAU,GAAGE,IAAI;YACjCrB,KAAK,CAACe,UAAU,CAAC,GAAG,EAAEQ,CAAC,CAAC;YACxBP,KAAK,GAAGO,CAAC,GAAGD,KAAK,GAAGF,WAAW;WAC/B,MACI;YACJpB,KAAK,CAACe,UAAU,CAAC,GAAG,EAAES,SAAS,CAAC;;;MAGnC,CAAC,CAAC;IACH;;EA9FAC;;;;WAAkC;;EAClCA;;;;WAA0CpC,MAAM,CAACqC,UAAU,CAACC,MAAM,CAAC,CAACC,gBAAgB,CAACC,SAAS,CAAC;;EA8FhG,uBAAC;CAAA,CAjGqCxC,MAAM;SAA/BuC,gBAAgB","names":["Layout","eachChildren","$type","Percent","__extends","container","paddingLeft","get","availableWidth","innerWidth","totalPercent","child","isVisible","childWidth","value","w","minWidth","getPrivate","Infinity","maxWidth","isNumber","width","privateWidth","Math","min","max","setPrivate","prevX","bounds","adjustedLocalBounds","marginLeft","marginRight","left","right","x","undefined","Object","classNames","concat","HorizontalLayout","className"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\core\\render\\HorizontalLayout.ts"],"sourcesContent":["import { Layout, eachChildren } from \"./Layout\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\nimport type { Container } from \"./Container\";\n\n/**\n * A horizontal children layout for [[Container]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info\n */\nexport class HorizontalLayout extends Layout {\n\n\tpublic static className: string = \"HorizontalLayout\";\n\tpublic static classNames: Array<string> = Layout.classNames.concat([HorizontalLayout.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateContainer(container: Container): void {\n\n\t\tlet paddingLeft = container.get(\"paddingLeft\", 0);\n\n\t\tlet availableWidth = container.innerWidth();\n\n\t\tlet totalPercent = 0;\n\n\t\teachChildren(container, (child) => {\n\t\t\tif (child.isVisible()) {\n\t\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\t\tlet childWidth = child.get(\"width\");\n\t\t\t\t\tif (childWidth instanceof Percent) {\n\t\t\t\t\t\ttotalPercent += childWidth.value;\n\n\t\t\t\t\t\tlet w = availableWidth * childWidth.value;\n\t\t\t\t\t\tlet minWidth = child.get(\"minWidth\", child.getPrivate(\"minWidth\", -Infinity));\n\t\t\t\t\t\tif (minWidth > w) {\n\t\t\t\t\t\t\tavailableWidth -= minWidth;\n\t\t\t\t\t\t\ttotalPercent -= childWidth.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet maxWidth = child.get(\"maxWidth\", child.getPrivate(\"maxWidth\", Infinity));\n\t\t\t\t\t\tif (w > maxWidth) {\n\t\t\t\t\t\t\tavailableWidth -= maxWidth;\n\t\t\t\t\t\t\ttotalPercent -= childWidth.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (!$type.isNumber(childWidth)) {\n\t\t\t\t\t\t\tchildWidth = child.width();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tavailableWidth -= childWidth + child.get(\"marginLeft\", 0) + child.get(\"marginRight\", 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (availableWidth < 0) {\n\t\t\tavailableWidth = 0.01;\n\t\t}\n\n\t\t//if (availableWidth > 0) {\n\t\teachChildren(container, (child) => {\n\t\t\tif (child.isVisible()) {\n\t\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\t\tlet childWidth = child.get(\"width\");\n\t\t\t\t\tif (childWidth instanceof Percent) {\n\t\t\t\t\t\tlet privateWidth = availableWidth * childWidth.value / totalPercent - child.get(\"marginLeft\", 0) - child.get(\"marginRight\", 0);\n\t\t\t\t\t\tlet minWidth = child.get(\"minWidth\", child.getPrivate(\"minWidth\", -Infinity));\n\t\t\t\t\t\tlet maxWidth = child.get(\"maxWidth\", child.getPrivate(\"maxWidth\", Infinity));\n\t\t\t\t\t\tprivateWidth = Math.min(Math.max(minWidth, privateWidth), maxWidth);\n\n\t\t\t\t\t\tchild.setPrivate(\"width\", privateWidth);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t//}\n\n\t\tlet prevX = paddingLeft;\n\n\t\teachChildren(container, (child) => {\n\n\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\tif (child.isVisible()) {\n\t\t\t\t\tlet bounds = child.adjustedLocalBounds();\n\t\t\t\t\tlet marginLeft = child.get(\"marginLeft\", 0);\n\t\t\t\t\tlet marginRight = child.get(\"marginRight\", 0);\n\n\t\t\t\t\tlet maxWidth = child.get(\"maxWidth\");\n\n\t\t\t\t\tlet left = bounds.left;\n\t\t\t\t\tlet right = bounds.right;\n\t\t\t\t\tif (maxWidth) {\n\t\t\t\t\t\tif (right - left > maxWidth) {\n\t\t\t\t\t\t\tright = left + maxWidth\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlet x = prevX + marginLeft - left;\n\t\t\t\t\tchild.setPrivate(\"x\", x);\n\t\t\t\t\tprevX = x + right + marginRight;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tchild.setPrivate(\"x\", undefined);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}