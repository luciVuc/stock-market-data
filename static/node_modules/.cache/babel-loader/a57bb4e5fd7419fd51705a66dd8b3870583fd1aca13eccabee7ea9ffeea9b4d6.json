{"ast":null,"code":"/**\r\n * SankeyLink module\r\n */\nimport { __extends, __read } from \"tslib\";\nimport { FlowDiagramLink } from \"./FlowDiagramLink\";\nimport { registry } from \"../../core/Registry\";\nimport { Polyspline } from \"../../core/elements/Polyspline\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Sankey Diagram.\r\n *\r\n * @see {@link ISankeyLinkEvents} for a list of available events\r\n * @see {@link ISankeyLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar SankeyLink = /** @class */function (_super) {\n  __extends(SankeyLink, _super);\n  /**\r\n   * Constructor\r\n   */\n  function SankeyLink() {\n    var _this = _super.call(this) || this;\n    _this.className = \"SankeyLink\";\n    // TODO can this be removed ?\n    new InterfaceColorSet();\n    _this.tension = 0.8;\n    _this.controlPointDistance = 0.2;\n    _this.startAngle = 0;\n    _this.endAngle = 0;\n    _this.linkWidth = 0;\n    _this.startX = 0;\n    _this.endX = 0;\n    _this.startY = 0;\n    _this.endY = 0;\n    _this.middleLine = _this.createChild(Polyspline);\n    _this.middleLine.shouldClone = false;\n    _this.middleLine.strokeOpacity = 0;\n    _this.applyTheme();\n    return _this;\n  }\n  SankeyLink.prototype.makeBackwards = function () {\n    if (this.states.getKey(\"backwards\") != undefined) {\n      this.setState(\"backwards\");\n    }\n  };\n  /**\r\n   * (Re)validates (redraws) the link.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  SankeyLink.prototype.validate = function () {\n    var _a, _b, _c, _d;\n    _super.prototype.validate.call(this);\n    if (!this.isTemplate) {\n      var x0 = this.startX;\n      var y0 = this.startY;\n      var x1 = this.endX;\n      var y1 = this.endY;\n      if (this.states.getKey(\"backwards\")) {\n        this.setState(\"default\");\n      }\n      if (this.dataItem) {\n        var chart = this.dataItem.component;\n        if (chart) {\n          if (chart.orientation == \"horizontal\") {\n            if (x1 < x0) {\n              _a = __read([x1, x0], 2), x0 = _a[0], x1 = _a[1];\n              _b = __read([y1, y0], 2), y0 = _b[0], y1 = _b[1];\n              this.makeBackwards();\n            }\n          } else {\n            if (y1 < y0) {\n              _c = __read([y1, y0], 2), y0 = _c[0], y1 = _c[1];\n              _d = __read([x1, x0], 2), x0 = _d[0], x1 = _d[1];\n              this.makeBackwards();\n            }\n          }\n        }\n      }\n      if (!$type.isNumber(x1)) {\n        x1 = x0;\n      }\n      if (!$type.isNumber(y1)) {\n        y1 = y0;\n      }\n      var startAngle = this.startAngle;\n      var endAngle = this.endAngle;\n      var w = this.linkWidth;\n      var path = \"\";\n      var xt0 = x0;\n      var yt0 = y0;\n      var xt1 = x1;\n      var yt1 = y1;\n      var xb0 = x0 + w * $math.sin(startAngle);\n      var xb1 = x1 + w * $math.sin(endAngle);\n      var yb0 = y0 + w * $math.cos(startAngle);\n      var yb1 = y1 + w * $math.cos(endAngle);\n      var xm0 = x0 + w / 2 * $math.sin(startAngle);\n      var xm1 = x1 + w / 2 * $math.sin(endAngle);\n      var ym0 = y0 + w / 2 * $math.cos(startAngle);\n      var ym1 = y1 + w / 2 * $math.cos(endAngle);\n      this.zIndex = this.zIndex || this.dataItem.index;\n      var tensionX = this.tension + (1 - this.tension) * $math.sin(startAngle);\n      var tensionY = this.tension + (1 - this.tension) * $math.cos(startAngle);\n      this.middleLine.tensionX = tensionX;\n      this.middleLine.tensionY = tensionY;\n      if ($type.isNumber(w) && $type.isNumber(x0) && $type.isNumber(x1) && $type.isNumber(y0) && $type.isNumber(y1)) {\n        // solves issues with gradient fill of straight lines\n        if ($math.round(xt0, 3) == $math.round(xt1, 3)) {\n          xt1 += 0.01;\n        }\n        if ($math.round(yt0, 3) == $math.round(yt1, 3)) {\n          yt1 += 0.01;\n        }\n        if ($math.round(xb0, 3) == $math.round(xb1, 3)) {\n          xb1 += 0.01;\n        }\n        if ($math.round(yb0, 3) == $math.round(yb1, 3)) {\n          yb1 += 0.01;\n        }\n        var minX = Math.min(xb0, xb1, xt0, xt1);\n        var minY = Math.min(yb0, yb1, yt0, yt1);\n        var maxX = Math.max(xb0, xb1, xt0, xt1);\n        var maxY = Math.max(yb0, yb1, yt0, yt1);\n        this._bbox = {\n          x: minX,\n          y: minY,\n          width: maxX - minX,\n          height: maxY - minY\n        };\n        var cpd = this.controlPointDistance;\n        var kxt0 = xt0 + (xt1 - xt0) * cpd * $math.cos(startAngle);\n        var kyt0 = yt0 + (yt1 - yt0) * cpd * $math.sin(startAngle);\n        var kxt1 = xt1 - (xt1 - xt0) * cpd * $math.cos(endAngle);\n        var kyt1 = yt1 - (yt1 - yt0) * cpd * $math.sin(endAngle);\n        var kxm0 = xm0 + (xm1 - xm0) * cpd * $math.cos(startAngle);\n        var kym0 = ym0 + (ym1 - ym0) * cpd * $math.sin(startAngle);\n        var kxm1 = xm1 - (xm1 - xm0) * cpd * $math.cos(endAngle);\n        var kym1 = ym1 - (ym1 - ym0) * cpd * $math.sin(endAngle);\n        var angle = $math.getAngle({\n          x: kxt0,\n          y: kyt0\n        }, {\n          x: kxt1,\n          y: kyt1\n        });\n        var dx = (w / $math.cos(angle) - w) / $math.tan(angle) * $math.cos(startAngle);\n        var dy = (w / $math.sin(angle) - w) * $math.tan(angle) * $math.sin(startAngle);\n        var kxb0 = -dx / 2 + xb0 + (xb1 - xb0) * cpd * $math.cos(startAngle);\n        var kyb0 = -dy / 2 + yb0 + (yb1 - yb0) * cpd * $math.sin(startAngle);\n        var kxb1 = -dx / 2 + xb1 - (xb1 - xb0) * cpd * $math.cos(endAngle);\n        var kyb1 = -dy / 2 + yb1 - (yb1 - yb0) * cpd * $math.sin(endAngle);\n        if (ym1 == ym0) {\n          ym1 += 0.01;\n        }\n        this.middleLine.segments = [[{\n          x: xm0,\n          y: ym0\n        }, {\n          x: kxm0,\n          y: kym0\n        }, {\n          x: kxm1,\n          y: kym1\n        }, {\n          x: xm1,\n          y: ym1\n        }]];\n        kxt0 += dx / 2;\n        kyt0 += dy / 2;\n        kxt1 += dx / 2;\n        kyt1 += dy / 2;\n        path += $path.moveTo({\n          x: xt0,\n          y: yt0\n        });\n        path += new $smoothing.Tension(tensionX, tensionY).smooth([{\n          x: xt0,\n          y: yt0\n        }, {\n          x: kxt0,\n          y: kyt0\n        }, {\n          x: kxt1,\n          y: kyt1\n        }, {\n          x: xt1,\n          y: yt1\n        }]);\n        path += $path.lineTo({\n          x: xb1,\n          y: yb1\n        });\n        path += new $smoothing.Tension(tensionX, tensionY).smooth([{\n          x: xb1,\n          y: yb1\n        }, {\n          x: kxb1,\n          y: kyb1\n        }, {\n          x: kxb0,\n          y: kyb0\n        }, {\n          x: xb0,\n          y: yb0\n        }]);\n        path += $path.closePath();\n      }\n      this.link.path = path;\n      if (this.maskBullets) {\n        this.bulletsMask.path = path;\n        this.bulletsContainer.mask = this.bulletsMask;\n      }\n      this.positionBullets();\n    }\n  };\n  Object.defineProperty(SankeyLink.prototype, \"startX\", {\n    /**\r\n     * @return Start X\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startX\");\n    },\n    /**\r\n     * [startX description]\r\n     *\r\n     * @todo Description\r\n     * @param value  Start X\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startX\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SankeyLink.prototype, \"endX\", {\n    /**\r\n     * @return End X\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endX\");\n    },\n    /**\r\n     * [endX description]\r\n     *\r\n     * @todo Description\r\n     * @param value  End X\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endX\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SankeyLink.prototype, \"startY\", {\n    /**\r\n     * @return Start Y\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startY\");\n    },\n    /**\r\n     * [startY description]\r\n     *\r\n     * @todo Description\r\n     * @param value  Start Y\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startY\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SankeyLink.prototype, \"endY\", {\n    /**\r\n     * @return End Y\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endY\");\n    },\n    /**\r\n     * [endY description]\r\n     *\r\n     * @todo Description\r\n     * @param value End Y\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endY\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SankeyLink.prototype, \"linkWidth\", {\n    /**\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"linkWidth\");\n    },\n    /**\r\n     * [linkWidth description]\r\n     *\r\n     * @todo Description\r\n     * @param value [description]\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"linkWidth\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SankeyLink.prototype, \"controlPointDistance\", {\n    /**\r\n     * @return relative control point distance\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"controlPointDistance\");\n    },\n    /**\r\n     * Distance of control point of a link, defines relative distance from a node at which linke should bend\r\n     * @default 0.2\r\n     * @param value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"controlPointDistance\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SankeyLink.prototype, \"tension\", {\n    /**\r\n     * @return tension value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tension\");\n    },\n    /**\r\n     * Tension of a spline, 1 would make the link to have sharp edges\r\n     * @default 0.8\r\n     * @param value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tension\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return SankeyLink;\n}(FlowDiagramLink);\nexport { SankeyLink };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"SankeyLink\"] = SankeyLink;","map":{"version":3,"mappings":"AAAA;;;;AAWA,SAASA,eAAe,QAAsF,mBAAmB;AACjI,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,UAAU,QAAQ,gCAAgC;AAC3D,SAASC,iBAAiB,QAAQ,oCAAoC;AACtE,OAAO,KAAKC,KAAK,MAAM,uBAAuB;AAC9C,OAAO,KAAKC,KAAK,MAAM,uBAAuB;AAC9C,OAAO,KAAKC,UAAU,MAAM,gCAAgC;AAC5D,OAAO,KAAKC,KAAK,MAAM,2BAA2B;AA8ElD;;;;;;AAOA;;;;;;;;AAQA;EAAgCC;EA6B/B;;;EAGA;IAAA,YACCC,iBAAO;IACPC,KAAI,CAACC,SAAS,GAAG,YAAY;IAE7B;IACA,IAAIR,iBAAiB,EAAE;IAEvBO,KAAI,CAACE,OAAO,GAAG,GAAG;IAClBF,KAAI,CAACG,oBAAoB,GAAG,GAAG;IAE/BH,KAAI,CAACI,UAAU,GAAG,CAAC;IACnBJ,KAAI,CAACK,QAAQ,GAAG,CAAC;IAEjBL,KAAI,CAACM,SAAS,GAAG,CAAC;IAElBN,KAAI,CAACO,MAAM,GAAG,CAAC;IACfP,KAAI,CAACQ,IAAI,GAAG,CAAC;IAEbR,KAAI,CAACS,MAAM,GAAG,CAAC;IACfT,KAAI,CAACU,IAAI,GAAG,CAAC;IAEbV,KAAI,CAACW,UAAU,GAAGX,KAAI,CAACY,WAAW,CAACpB,UAAU,CAAC;IAC9CQ,KAAI,CAACW,UAAU,CAACE,WAAW,GAAG,KAAK;IACnCb,KAAI,CAACW,UAAU,CAACG,aAAa,GAAG,CAAC;IAEjCd,KAAI,CAACe,UAAU,EAAE;;EAClB;EAEUC,kCAAa,GAAvB;IACC,IAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAAC,WAAW,CAAC,IAAIC,SAAS,EAAE;MACjD,IAAI,CAACC,QAAQ,CAAC,WAAW,CAAC;;EAE5B,CAAC;EAED;;;;;EAKOJ,6BAAQ,GAAf;;IACCjB,iBAAMsB,QAAQ,WAAE;IAEhB,IAAI,CAAC,IAAI,CAACC,UAAU,EAAE;MAErB,IAAIC,EAAE,GAAG,IAAI,CAAChB,MAAM;MACpB,IAAIiB,EAAE,GAAG,IAAI,CAACf,MAAM;MACpB,IAAIgB,EAAE,GAAG,IAAI,CAACjB,IAAI;MAClB,IAAIkB,EAAE,GAAG,IAAI,CAAChB,IAAI;MAElB,IAAI,IAAI,CAACO,MAAM,CAACC,MAAM,CAAC,WAAW,CAAC,EAAE;QACpC,IAAI,CAACE,QAAQ,CAAC,SAAS,CAAC;;MAGzB,IAAI,IAAI,CAACO,QAAQ,EAAE;QAClB,IAAIC,KAAK,GAAG,IAAI,CAACD,QAAQ,CAACE,SAAS;QAEnC,IAAID,KAAK,EAAE;UACV,IAAIA,KAAK,CAACE,WAAW,IAAI,YAAY,EAAE;YACtC,IAAIL,EAAE,GAAGF,EAAE,EAAE;cACZQ,wBAAmB,EAAlBR,UAAE,EAAEE,UAAE;cACPO,wBAAmB,EAAlBR,UAAE,EAAEE,UAAE;cACP,IAAI,CAACO,aAAa,EAAE;;WAErB,MACI;YACJ,IAAIP,EAAE,GAAGF,EAAE,EAAE;cACZU,wBAAmB,EAAlBV,UAAE,EAAEE,UAAE;cACPS,wBAAmB,EAAlBZ,UAAE,EAAEE,UAAE;cACP,IAAI,CAACQ,aAAa,EAAE;;;;;MAMxB,IAAI,CAACtC,KAAK,CAACyC,QAAQ,CAACX,EAAE,CAAC,EAAE;QACxBA,EAAE,GAAGF,EAAE;;MAGR,IAAI,CAAC5B,KAAK,CAACyC,QAAQ,CAACV,EAAE,CAAC,EAAE;QACxBA,EAAE,GAAGF,EAAE;;MAGR,IAAIpB,UAAU,GAAG,IAAI,CAACA,UAAU;MAChC,IAAIC,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAC5B,IAAIgC,CAAC,GAAG,IAAI,CAAC/B,SAAS;MAEtB,IAAIgC,IAAI,GAAG,EAAE;MAEb,IAAIC,GAAG,GAAGhB,EAAE;MACZ,IAAIiB,GAAG,GAAGhB,EAAE;MAEZ,IAAIiB,GAAG,GAAGhB,EAAE;MACZ,IAAIiB,GAAG,GAAGhB,EAAE;MAEZ,IAAIiB,GAAG,GAAGpB,EAAE,GAAGc,CAAC,GAAG3C,KAAK,CAACkD,GAAG,CAACxC,UAAU,CAAC;MACxC,IAAIyC,GAAG,GAAGpB,EAAE,GAAGY,CAAC,GAAG3C,KAAK,CAACkD,GAAG,CAACvC,QAAQ,CAAC;MAEtC,IAAIyC,GAAG,GAAGtB,EAAE,GAAGa,CAAC,GAAG3C,KAAK,CAACqD,GAAG,CAAC3C,UAAU,CAAC;MACxC,IAAI4C,GAAG,GAAGtB,EAAE,GAAGW,CAAC,GAAG3C,KAAK,CAACqD,GAAG,CAAC1C,QAAQ,CAAC;MAEtC,IAAI4C,GAAG,GAAG1B,EAAE,GAAGc,CAAC,GAAG,CAAC,GAAG3C,KAAK,CAACkD,GAAG,CAACxC,UAAU,CAAC;MAC5C,IAAI8C,GAAG,GAAGzB,EAAE,GAAGY,CAAC,GAAG,CAAC,GAAG3C,KAAK,CAACkD,GAAG,CAACvC,QAAQ,CAAC;MAE1C,IAAI8C,GAAG,GAAG3B,EAAE,GAAGa,CAAC,GAAG,CAAC,GAAG3C,KAAK,CAACqD,GAAG,CAAC3C,UAAU,CAAC;MAC5C,IAAIgD,GAAG,GAAG1B,EAAE,GAAGW,CAAC,GAAG,CAAC,GAAG3C,KAAK,CAACqD,GAAG,CAAC1C,QAAQ,CAAC;MAE1C,IAAI,CAACgD,MAAM,GAAG,IAAI,CAACA,MAAM,IAAI,IAAI,CAAC1B,QAAQ,CAAC2B,KAAK;MAEhD,IAAIC,QAAQ,GAAG,IAAI,CAACrD,OAAO,GAAG,CAAC,CAAC,GAAG,IAAI,CAACA,OAAO,IAAIR,KAAK,CAACkD,GAAG,CAACxC,UAAU,CAAC;MACxE,IAAIoD,QAAQ,GAAG,IAAI,CAACtD,OAAO,GAAG,CAAC,CAAC,GAAG,IAAI,CAACA,OAAO,IAAIR,KAAK,CAACqD,GAAG,CAAC3C,UAAU,CAAC;MAExE,IAAI,CAACO,UAAU,CAAC4C,QAAQ,GAAGA,QAAQ;MACnC,IAAI,CAAC5C,UAAU,CAAC6C,QAAQ,GAAGA,QAAQ;MAEnC,IAAI7D,KAAK,CAACyC,QAAQ,CAACC,CAAC,CAAC,IAAK1C,KAAK,CAACyC,QAAQ,CAACb,EAAE,CAAC,IAAI5B,KAAK,CAACyC,QAAQ,CAACX,EAAE,CAAC,IAAI9B,KAAK,CAACyC,QAAQ,CAACZ,EAAE,CAAC,IAAI7B,KAAK,CAACyC,QAAQ,CAACV,EAAE,CAAE,EAAE;QAEhH;QACA,IAAIhC,KAAK,CAAC+D,KAAK,CAAClB,GAAG,EAAE,CAAC,CAAC,IAAI7C,KAAK,CAAC+D,KAAK,CAAChB,GAAG,EAAE,CAAC,CAAC,EAAE;UAC/CA,GAAG,IAAI,IAAI;;QAGZ,IAAI/C,KAAK,CAAC+D,KAAK,CAACjB,GAAG,EAAE,CAAC,CAAC,IAAI9C,KAAK,CAAC+D,KAAK,CAACf,GAAG,EAAE,CAAC,CAAC,EAAE;UAC/CA,GAAG,IAAI,IAAI;;QAGZ,IAAIhD,KAAK,CAAC+D,KAAK,CAACd,GAAG,EAAE,CAAC,CAAC,IAAIjD,KAAK,CAAC+D,KAAK,CAACZ,GAAG,EAAE,CAAC,CAAC,EAAE;UAC/CA,GAAG,IAAI,IAAI;;QAGZ,IAAInD,KAAK,CAAC+D,KAAK,CAACX,GAAG,EAAE,CAAC,CAAC,IAAIpD,KAAK,CAAC+D,KAAK,CAACT,GAAG,EAAE,CAAC,CAAC,EAAE;UAC/CA,GAAG,IAAI,IAAI;;QAGZ,IAAIU,IAAI,GAAGC,IAAI,CAACC,GAAG,CAACjB,GAAG,EAAEE,GAAG,EAAEN,GAAG,EAAEE,GAAG,CAAC;QACvC,IAAIoB,IAAI,GAAGF,IAAI,CAACC,GAAG,CAACd,GAAG,EAAEE,GAAG,EAAER,GAAG,EAAEE,GAAG,CAAC;QACvC,IAAIoB,IAAI,GAAGH,IAAI,CAACI,GAAG,CAACpB,GAAG,EAAEE,GAAG,EAAEN,GAAG,EAAEE,GAAG,CAAC;QACvC,IAAIuB,IAAI,GAAGL,IAAI,CAACI,GAAG,CAACjB,GAAG,EAAEE,GAAG,EAAER,GAAG,EAAEE,GAAG,CAAC;QAEvC,IAAI,CAACuB,KAAK,GAAG;UACZC,CAAC,EAAER,IAAI;UACPS,CAAC,EAAEN,IAAI;UACPO,KAAK,EAAEN,IAAI,GAAGJ,IAAI;UAClBW,MAAM,EAAEL,IAAI,GAAGH;SACf;QAED,IAAIS,GAAG,GAAG,IAAI,CAACnE,oBAAoB;QAEnC,IAAIoE,IAAI,GAAGhC,GAAG,GAAG,CAACE,GAAG,GAAGF,GAAG,IAAI+B,GAAG,GAAG5E,KAAK,CAACqD,GAAG,CAAC3C,UAAU,CAAC;QAC1D,IAAIoE,IAAI,GAAGhC,GAAG,GAAG,CAACE,GAAG,GAAGF,GAAG,IAAI8B,GAAG,GAAG5E,KAAK,CAACkD,GAAG,CAACxC,UAAU,CAAC;QAE1D,IAAIqE,IAAI,GAAGhC,GAAG,GAAG,CAACA,GAAG,GAAGF,GAAG,IAAI+B,GAAG,GAAG5E,KAAK,CAACqD,GAAG,CAAC1C,QAAQ,CAAC;QACxD,IAAIqE,IAAI,GAAGhC,GAAG,GAAG,CAACA,GAAG,GAAGF,GAAG,IAAI8B,GAAG,GAAG5E,KAAK,CAACkD,GAAG,CAACvC,QAAQ,CAAC;QAExD,IAAIsE,IAAI,GAAG1B,GAAG,GAAG,CAACC,GAAG,GAAGD,GAAG,IAAIqB,GAAG,GAAG5E,KAAK,CAACqD,GAAG,CAAC3C,UAAU,CAAC;QAC1D,IAAIwE,IAAI,GAAGzB,GAAG,GAAG,CAACC,GAAG,GAAGD,GAAG,IAAImB,GAAG,GAAG5E,KAAK,CAACkD,GAAG,CAACxC,UAAU,CAAC;QAE1D,IAAIyE,IAAI,GAAG3B,GAAG,GAAG,CAACA,GAAG,GAAGD,GAAG,IAAIqB,GAAG,GAAG5E,KAAK,CAACqD,GAAG,CAAC1C,QAAQ,CAAC;QACxD,IAAIyE,IAAI,GAAG1B,GAAG,GAAG,CAACA,GAAG,GAAGD,GAAG,IAAImB,GAAG,GAAG5E,KAAK,CAACkD,GAAG,CAACvC,QAAQ,CAAC;QAExD,IAAI0E,KAAK,GAAGrF,KAAK,CAACsF,QAAQ,CAAC;UAAEd,CAAC,EAAEK,IAAI;UAAEJ,CAAC,EAAEK;QAAI,CAAE,EAAE;UAAEN,CAAC,EAAEO,IAAI;UAAEN,CAAC,EAAEO;QAAI,CAAE,CAAC;QAEtE,IAAIO,EAAE,GAAG,CAAC5C,CAAC,GAAG3C,KAAK,CAACqD,GAAG,CAACgC,KAAK,CAAC,GAAG1C,CAAC,IAAI3C,KAAK,CAACwF,GAAG,CAACH,KAAK,CAAC,GAAGrF,KAAK,CAACqD,GAAG,CAAC3C,UAAU,CAAC;QAC9E,IAAI+E,EAAE,GAAG,CAAC9C,CAAC,GAAG3C,KAAK,CAACkD,GAAG,CAACmC,KAAK,CAAC,GAAG1C,CAAC,IAAI3C,KAAK,CAACwF,GAAG,CAACH,KAAK,CAAC,GAAGrF,KAAK,CAACkD,GAAG,CAACxC,UAAU,CAAC;QAE9E,IAAIgF,IAAI,GAAG,CAACH,EAAE,GAAG,CAAC,GAAGtC,GAAG,GAAG,CAACE,GAAG,GAAGF,GAAG,IAAI2B,GAAG,GAAG5E,KAAK,CAACqD,GAAG,CAAC3C,UAAU,CAAC;QACpE,IAAIiF,IAAI,GAAG,CAACF,EAAE,GAAG,CAAC,GAAGrC,GAAG,GAAG,CAACE,GAAG,GAAGF,GAAG,IAAIwB,GAAG,GAAG5E,KAAK,CAACkD,GAAG,CAACxC,UAAU,CAAC;QAEpE,IAAIkF,IAAI,GAAG,CAACL,EAAE,GAAG,CAAC,GAAGpC,GAAG,GAAG,CAACA,GAAG,GAAGF,GAAG,IAAI2B,GAAG,GAAG5E,KAAK,CAACqD,GAAG,CAAC1C,QAAQ,CAAC;QAClE,IAAIkF,IAAI,GAAG,CAACJ,EAAE,GAAG,CAAC,GAAGnC,GAAG,GAAG,CAACA,GAAG,GAAGF,GAAG,IAAIwB,GAAG,GAAG5E,KAAK,CAACkD,GAAG,CAACvC,QAAQ,CAAC;QAElE,IAAI+C,GAAG,IAAID,GAAG,EAAE;UACfC,GAAG,IAAI,IAAI;;QAGZ,IAAI,CAACzC,UAAU,CAAC6E,QAAQ,GAAG,CAAC,CAAC;UAAEtB,CAAC,EAAEjB,GAAG;UAAEkB,CAAC,EAAEhB;QAAG,CAAE,EAAE;UAAEe,CAAC,EAAES,IAAI;UAAER,CAAC,EAAES;QAAI,CAAE,EAAE;UAAEV,CAAC,EAAEW,IAAI;UAAEV,CAAC,EAAEW;QAAI,CAAE,EAAE;UAAEZ,CAAC,EAAEhB,GAAG;UAAEiB,CAAC,EAAEf;QAAG,CAAE,CAAC,CAAC;QAEjHmB,IAAI,IAAIU,EAAE,GAAG,CAAC;QACdT,IAAI,IAAIW,EAAE,GAAG,CAAC;QAEdV,IAAI,IAAIQ,EAAE,GAAG,CAAC;QACdP,IAAI,IAAIS,EAAE,GAAG,CAAC;QAEd7C,IAAI,IAAIzC,KAAK,CAAC4F,MAAM,CAAC;UAAEvB,CAAC,EAAE3B,GAAG;UAAE4B,CAAC,EAAE3B;QAAG,CAAE,CAAC;QACxCF,IAAI,IAAI,IAAI1C,UAAU,CAAC8F,OAAO,CAACnC,QAAQ,EAAEC,QAAQ,CAAC,CAACmC,MAAM,CAAC,CAAC;UAAEzB,CAAC,EAAE3B,GAAG;UAAE4B,CAAC,EAAE3B;QAAG,CAAE,EAAE;UAAE0B,CAAC,EAAEK,IAAI;UAAEJ,CAAC,EAAEK;QAAI,CAAE,EAAE;UAAEN,CAAC,EAAEO,IAAI;UAAEN,CAAC,EAAEO;QAAI,CAAE,EAAE;UAAER,CAAC,EAAEzB,GAAG;UAAE0B,CAAC,EAAEzB;QAAG,CAAE,CAAC,CAAC;QAC/IJ,IAAI,IAAIzC,KAAK,CAAC+F,MAAM,CAAC;UAAE1B,CAAC,EAAErB,GAAG;UAAEsB,CAAC,EAAEnB;QAAG,CAAE,CAAC;QACxCV,IAAI,IAAI,IAAI1C,UAAU,CAAC8F,OAAO,CAACnC,QAAQ,EAAEC,QAAQ,CAAC,CAACmC,MAAM,CAAC,CAAC;UAAEzB,CAAC,EAAErB,GAAG;UAAEsB,CAAC,EAAEnB;QAAG,CAAE,EAAE;UAAEkB,CAAC,EAAEoB,IAAI;UAAEnB,CAAC,EAAEoB;QAAI,CAAE,EAAE;UAAErB,CAAC,EAAEkB,IAAI;UAAEjB,CAAC,EAAEkB;QAAI,CAAE,EAAE;UAAEnB,CAAC,EAAEvB,GAAG;UAAEwB,CAAC,EAAErB;QAAG,CAAE,CAAC,CAAC;QAC/IR,IAAI,IAAIzC,KAAK,CAACgG,SAAS,EAAE;;MAG1B,IAAI,CAACC,IAAI,CAACxD,IAAI,GAAGA,IAAI;MAErB,IAAI,IAAI,CAACyD,WAAW,EAAE;QACrB,IAAI,CAACC,WAAW,CAAC1D,IAAI,GAAGA,IAAI;QAC5B,IAAI,CAAC2D,gBAAgB,CAACC,IAAI,GAAG,IAAI,CAACF,WAAW;;MAE9C,IAAI,CAACG,eAAe,EAAE;;EAExB,CAAC;EAQDC,sBAAWpF,8BAAM;IAIjB;;;SAGA;MACC,OAAO,IAAI,CAACqF,gBAAgB,CAAC,QAAQ,CAAC;IACvC,CAAC;IAfD;;;;;;SAMA,UAAkBC,KAAa;MAC9B,IAAI,CAACC,gBAAgB,CAAC,QAAQ,EAAED,KAAK,EAAE,IAAI,CAAC;IAC7C,CAAC;;;;EAeDF,sBAAWpF,4BAAI;IAIf;;;SAGA;MACC,OAAO,IAAI,CAACqF,gBAAgB,CAAC,MAAM,CAAC;IACrC,CAAC;IAfD;;;;;;SAMA,UAAgBC,KAAa;MAC5B,IAAI,CAACC,gBAAgB,CAAC,MAAM,EAAED,KAAK,EAAE,IAAI,CAAC;IAC3C,CAAC;;;;EAeDF,sBAAWpF,8BAAM;IAIjB;;;SAGA;MACC,OAAO,IAAI,CAACqF,gBAAgB,CAAC,QAAQ,CAAC;IACvC,CAAC;IAfD;;;;;;SAMA,UAAkBC,KAAa;MAC9B,IAAI,CAACC,gBAAgB,CAAC,QAAQ,EAAED,KAAK,EAAE,IAAI,CAAC;IAC7C,CAAC;;;;EAeDF,sBAAWpF,4BAAI;IAIf;;;SAGA;MACC,OAAO,IAAI,CAACqF,gBAAgB,CAAC,MAAM,CAAC;IACrC,CAAC;IAfD;;;;;;SAMA,UAAgBC,KAAa;MAC5B,IAAI,CAACC,gBAAgB,CAAC,MAAM,EAAED,KAAK,EAAE,IAAI,CAAC;IAC3C,CAAC;;;;EAeDF,sBAAWpF,iCAAS;IAIpB;;;SAGA;MACC,OAAO,IAAI,CAACqF,gBAAgB,CAAC,WAAW,CAAC;IAC1C,CAAC;IAfD;;;;;;SAMA,UAAqBC,KAAa;MACjC,IAAI,CAACC,gBAAgB,CAAC,WAAW,EAAED,KAAK,EAAE,IAAI,CAAC;IAChD,CAAC;;;;EAcDF,sBAAWpF,4CAAoB;IAI/B;;;SAGA;MACC,OAAO,IAAI,CAACqF,gBAAgB,CAAC,sBAAsB,CAAC;IACrD,CAAC;IAdD;;;;;SAKA,UAAgCC,KAAa;MAC5C,IAAI,CAACC,gBAAgB,CAAC,sBAAsB,EAAED,KAAK,EAAE,IAAI,CAAC;IAC3D,CAAC;;;;EAcDF,sBAAWpF,+BAAO;IAIlB;;;SAGA;MACC,OAAO,IAAI,CAACqF,gBAAgB,CAAC,SAAS,CAAC;IACxC,CAAC;IAdD;;;;;SAKA,UAAmBC,KAAa;MAC/B,IAAI,CAACC,gBAAgB,CAAC,SAAS,EAAED,KAAK,EAAE,IAAI,CAAC;IAC9C,CAAC;;;;EASF,iBAAC;AAAD,CAAC,CA5V+BhH,eAAe;;AA8V/C;;;;;;AAMAC,QAAQ,CAACiH,iBAAiB,CAAC,YAAY,CAAC,GAAGxF,UAAU","names":["FlowDiagramLink","registry","Polyspline","InterfaceColorSet","$math","$type","$smoothing","$path","__extends","_super","_this","className","tension","controlPointDistance","startAngle","endAngle","linkWidth","startX","endX","startY","endY","middleLine","createChild","shouldClone","strokeOpacity","applyTheme","SankeyLink","states","getKey","undefined","setState","validate","isTemplate","x0","y0","x1","y1","dataItem","chart","component","orientation","_a","_b","makeBackwards","_c","_d","isNumber","w","path","xt0","yt0","xt1","yt1","xb0","sin","xb1","yb0","cos","yb1","xm0","xm1","ym0","ym1","zIndex","index","tensionX","tensionY","round","minX","Math","min","minY","maxX","max","maxY","_bbox","x","y","width","height","cpd","kxt0","kyt0","kxt1","kyt1","kxm0","kym0","kxm1","kym1","angle","getAngle","dx","tan","dy","kxb0","kyb0","kxb1","kyb1","segments","moveTo","Tension","smooth","lineTo","closePath","link","maskBullets","bulletsMask","bulletsContainer","mask","positionBullets","Object","getPropertyValue","value","setPropertyValue","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\elements\\SankeyLink.ts"],"sourcesContent":["/**\r\n * SankeyLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SankeyDiagramDataItem, SankeyDiagram } from \"../types/SankeyDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Polyspline } from \"../../core/elements/Polyspline\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SankeyLink]].\r\n */\r\nexport interface ISankeyLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [tension description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartX?: number;\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartY?: number;\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendX?: number;\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendY?: number;\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tlinkWidth?: number;\r\n\r\n\t/**\r\n\t * [controlPointDistance description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tcontrolPointDistance?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyLink]].\r\n */\r\nexport interface ISankeyLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyLinkAdapters extends IFlowDiagramLinkAdapters, ISankeyLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Sankey Diagram.\r\n *\r\n * @see {@link ISankeyLinkEvents} for a list of available events\r\n * @see {@link ISankeyLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SankeyLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n\t */\r\n\tpublic middleLine: Polyspline;\r\n\r\n\tpublic chart: SankeyDiagram;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyLink\";\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tnew InterfaceColorSet();\r\n\r\n\t\tthis.tension = 0.8;\r\n\t\tthis.controlPointDistance = 0.2;\r\n\r\n\t\tthis.startAngle = 0;\r\n\t\tthis.endAngle = 0;\r\n\r\n\t\tthis.linkWidth = 0;\r\n\r\n\t\tthis.startX = 0;\r\n\t\tthis.endX = 0;\r\n\r\n\t\tthis.startY = 0;\r\n\t\tthis.endY = 0;\r\n\r\n\t\tthis.middleLine = this.createChild(Polyspline);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tprotected makeBackwards() {\r\n\t\tif (this.states.getKey(\"backwards\") != undefined) {\r\n\t\t\tthis.setState(\"backwards\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\r\n\t\t\tlet x0 = this.startX\r\n\t\t\tlet y0 = this.startY;\r\n\t\t\tlet x1 = this.endX;\r\n\t\t\tlet y1 = this.endY;\r\n\r\n\t\t\tif (this.states.getKey(\"backwards\")) {\r\n\t\t\t\tthis.setState(\"default\");\r\n\t\t\t}\r\n\r\n\t\t\tif (this.dataItem) {\r\n\t\t\t\tlet chart = this.dataItem.component;\r\n\r\n\t\t\t\tif (chart) {\r\n\t\t\t\t\tif (chart.orientation == \"horizontal\") {\r\n\t\t\t\t\t\tif (x1 < x0) {\r\n\t\t\t\t\t\t\t[x0, x1] = [x1, x0];\r\n\t\t\t\t\t\t\t[y0, y1] = [y1, y0];\r\n\t\t\t\t\t\t\tthis.makeBackwards();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (y1 < y0) {\r\n\t\t\t\t\t\t\t[y0, y1] = [y1, y0];\r\n\t\t\t\t\t\t\t[x0, x1] = [x1, x0];\r\n\t\t\t\t\t\t\tthis.makeBackwards();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(x1)) {\r\n\t\t\t\tx1 = x0;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(y1)) {\r\n\t\t\t\ty1 = y0;\r\n\t\t\t}\r\n\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet w = this.linkWidth;\r\n\r\n\t\t\tlet path = \"\";\r\n\r\n\t\t\tlet xt0 = x0;\r\n\t\t\tlet yt0 = y0;\r\n\r\n\t\t\tlet xt1 = x1;\r\n\t\t\tlet yt1 = y1;\r\n\r\n\t\t\tlet xb0 = x0 + w * $math.sin(startAngle);\r\n\t\t\tlet xb1 = x1 + w * $math.sin(endAngle);\r\n\r\n\t\t\tlet yb0 = y0 + w * $math.cos(startAngle);\r\n\t\t\tlet yb1 = y1 + w * $math.cos(endAngle);\r\n\r\n\t\t\tlet xm0 = x0 + w / 2 * $math.sin(startAngle);\r\n\t\t\tlet xm1 = x1 + w / 2 * $math.sin(endAngle);\r\n\r\n\t\t\tlet ym0 = y0 + w / 2 * $math.cos(startAngle);\r\n\t\t\tlet ym1 = y1 + w / 2 * $math.cos(endAngle);\r\n\r\n\t\t\tthis.zIndex = this.zIndex || this.dataItem.index;\r\n\r\n\t\t\tlet tensionX = this.tension + (1 - this.tension) * $math.sin(startAngle);\r\n\t\t\tlet tensionY = this.tension + (1 - this.tension) * $math.cos(startAngle);\r\n\r\n\t\t\tthis.middleLine.tensionX = tensionX;\r\n\t\t\tthis.middleLine.tensionY = tensionY;\r\n\r\n\t\t\tif ($type.isNumber(w) && ($type.isNumber(x0) && $type.isNumber(x1) && $type.isNumber(y0) && $type.isNumber(y1))) {\r\n\r\n\t\t\t\t// solves issues with gradient fill of straight lines\r\n\t\t\t\tif ($math.round(xt0, 3) == $math.round(xt1, 3)) {\r\n\t\t\t\t\txt1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(yt0, 3) == $math.round(yt1, 3)) {\r\n\t\t\t\t\tyt1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(xb0, 3) == $math.round(xb1, 3)) {\r\n\t\t\t\t\txb1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(yb0, 3) == $math.round(yb1, 3)) {\r\n\t\t\t\t\tyb1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet minX = Math.min(xb0, xb1, xt0, xt1);\r\n\t\t\t\tlet minY = Math.min(yb0, yb1, yt0, yt1);\r\n\t\t\t\tlet maxX = Math.max(xb0, xb1, xt0, xt1);\r\n\t\t\t\tlet maxY = Math.max(yb0, yb1, yt0, yt1);\r\n\r\n\t\t\t\tthis._bbox = {\r\n\t\t\t\t\tx: minX,\r\n\t\t\t\t\ty: minY,\r\n\t\t\t\t\twidth: maxX - minX,\r\n\t\t\t\t\theight: maxY - minY\r\n\t\t\t\t};\r\n\r\n\t\t\t\tlet cpd = this.controlPointDistance;\r\n\r\n\t\t\t\tlet kxt0 = xt0 + (xt1 - xt0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kyt0 = yt0 + (yt1 - yt0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxt1 = xt1 - (xt1 - xt0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kyt1 = yt1 - (yt1 - yt0) * cpd * $math.sin(endAngle);\r\n\r\n\t\t\t\tlet kxm0 = xm0 + (xm1 - xm0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kym0 = ym0 + (ym1 - ym0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxm1 = xm1 - (xm1 - xm0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kym1 = ym1 - (ym1 - ym0) * cpd * $math.sin(endAngle);\r\n\r\n\t\t\t\tlet angle = $math.getAngle({ x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 });\r\n\r\n\t\t\t\tlet dx = (w / $math.cos(angle) - w) / $math.tan(angle) * $math.cos(startAngle);\r\n\t\t\t\tlet dy = (w / $math.sin(angle) - w) * $math.tan(angle) * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxb0 = -dx / 2 + xb0 + (xb1 - xb0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kyb0 = -dy / 2 + yb0 + (yb1 - yb0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxb1 = -dx / 2 + xb1 - (xb1 - xb0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kyb1 = -dy / 2 + yb1 - (yb1 - yb0) * cpd * $math.sin(endAngle);\r\n\r\n\t\t\t\tif (ym1 == ym0) {\r\n\t\t\t\t\tym1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.middleLine.segments = [[{ x: xm0, y: ym0 }, { x: kxm0, y: kym0 }, { x: kxm1, y: kym1 }, { x: xm1, y: ym1 }]];\r\n\r\n\t\t\t\tkxt0 += dx / 2;\r\n\t\t\t\tkyt0 += dy / 2;\r\n\r\n\t\t\t\tkxt1 += dx / 2;\r\n\t\t\t\tkyt1 += dy / 2;\r\n\r\n\t\t\t\tpath += $path.moveTo({ x: xt0, y: yt0 });\r\n\t\t\t\tpath += new $smoothing.Tension(tensionX, tensionY).smooth([{ x: xt0, y: yt0 }, { x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 }, { x: xt1, y: yt1 }]);\r\n\t\t\t\tpath += $path.lineTo({ x: xb1, y: yb1 });\r\n\t\t\t\tpath += new $smoothing.Tension(tensionX, tensionY).smooth([{ x: xb1, y: yb1 }, { x: kxb1, y: kyb1 }, { x: kxb0, y: kyb0 }, { x: xb0, y: yb0 }]);\r\n\t\t\t\tpath += $path.closePath();\r\n\t\t\t}\r\n\r\n\t\t\tthis.link.path = path;\r\n\r\n\t\t\tif (this.maskBullets) {\r\n\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t}\r\n\t\t\tthis.positionBullets();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start X\r\n\t */\r\n\tpublic set startX(value: number) {\r\n\t\tthis.setPropertyValue(\"startX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start X\r\n\t */\r\n\tpublic get startX(): number {\r\n\t\treturn this.getPropertyValue(\"startX\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  End X\r\n\t */\r\n\tpublic set endX(value: number) {\r\n\t\tthis.setPropertyValue(\"endX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End X\r\n\t */\r\n\tpublic get endX(): number {\r\n\t\treturn this.getPropertyValue(\"endX\");\r\n\t}\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start Y\r\n\t */\r\n\tpublic set startY(value: number) {\r\n\t\tthis.setPropertyValue(\"startY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start Y\r\n\t */\r\n\tpublic get startY(): number {\r\n\t\treturn this.getPropertyValue(\"startY\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value End Y\r\n\t */\r\n\tpublic set endY(value: number) {\r\n\t\tthis.setPropertyValue(\"endY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End Y\r\n\t */\r\n\tpublic get endY(): number {\r\n\t\treturn this.getPropertyValue(\"endY\");\r\n\t}\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set linkWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"linkWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get linkWidth(): number {\r\n\t\treturn this.getPropertyValue(\"linkWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance of control point of a link, defines relative distance from a node at which linke should bend\r\n\t * @default 0.2\r\n\t * @param value\r\n\t */\r\n\tpublic set controlPointDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"controlPointDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return relative control point distance\r\n\t */\r\n\tpublic get controlPointDistance(): number {\r\n\t\treturn this.getPropertyValue(\"controlPointDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * Tension of a spline, 1 would make the link to have sharp edges\r\n\t * @default 0.8\r\n\t * @param value\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return tension value\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyLink\"] = SankeyLink;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}