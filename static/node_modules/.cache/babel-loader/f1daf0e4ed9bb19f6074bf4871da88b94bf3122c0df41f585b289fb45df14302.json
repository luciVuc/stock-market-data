{"ast":null,"code":"/**\r\n * Legend-related functionality.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Component } from \"../core/Component\";\nimport { DataItem } from \"../core/DataItem\";\nimport { ListTemplate, ListDisposer } from \"../core/utils/List\";\nimport { RoundedRectangle } from \"../core/elements/RoundedRectangle\";\nimport { Container } from \"../core/Container\";\nimport { Label } from \"../core/elements/Label\";\nimport { keyboard } from \"../core/utils/Keyboard\";\nimport { registry } from \"../core/Registry\";\nimport { getInteraction } from \"../core/interaction/Interaction\";\nimport { percent, Percent } from \"../core/utils/Percent\";\nimport { InterfaceColorSet } from \"../core/utils/InterfaceColorSet\";\nimport * as $utils from \"../core/utils/Utils\";\nimport * as $type from \"../core/utils/Type\";\nimport * as $math from \"../core/utils/Math\";\nimport { Sprite } from \"../core/Sprite\";\nimport { Disposer } from \"../core/utils/Disposer\";\nimport { MouseCursorStyle } from \"../core/interaction/Mouse\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../core/utils/Responsive\";\nimport { Scrollbar } from \"../core/elements/Scrollbar\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[Legend]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar LegendDataItem = /** @class */function (_super) {\n  __extends(LegendDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function LegendDataItem() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * @ignore\r\n     */\n    _this.childrenCreated = false;\n    _this.className = \"LegendDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(LegendDataItem.prototype, \"label\", {\n    /**\r\n     * A legend item's [[Label]] element.\r\n     *\r\n     * @return Label\r\n     */\n    get: function () {\n      var _this = this;\n      if (!this._label) {\n        var label_1 = this.component.labels.create();\n        this._label = label_1;\n        this.addSprite(label_1);\n        this._disposers.push(label_1);\n        label_1.parent = this.itemContainer;\n        this._disposers.push(new Disposer(function () {\n          if ($type.hasValue(_this.component)) {\n            _this.component.labels.removeValue(label_1);\n          }\n        }));\n      }\n      return this._label;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LegendDataItem.prototype, \"color\", {\n    /**\r\n     * @return Main color\r\n     */\n    get: function () {\n      return this.properties.color;\n    },\n    /**\r\n     * Main color of legend data item.\r\n     *\r\n     * This is set by the target element this legend item represents, like\r\n     * a Series or a Slice.\r\n     *\r\n     * It can be used to derive a color in legend's sub-items, like label:\r\n     *\r\n     * ```TypeScript\r\n     * chart.legend.labels.template.text = \"[{color}]{name}[/]\";\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.legend.labels.template.text = \"[{color}]{name}[/]\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"legend\": {\r\n     *     // ...\r\n     *     \"labels\": {\r\n     *       \"text\": \"[{color}]{name}[/]\"\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/legend/#Legend_labels} For more information about configuring legend labels.\r\n     * @param value  Main color\r\n     */\n    set: function (value) {\n      this.setProperty(\"color\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LegendDataItem.prototype, \"valueLabel\", {\n    /**\r\n     * A legend item's [[Label]] element for \"value label\".\r\n     *\r\n     * @return Label\r\n     */\n    get: function () {\n      var _this = this;\n      if (!this._valueLabel) {\n        var valueLabel_1 = this.component.valueLabels.create();\n        this._valueLabel = valueLabel_1;\n        this.addSprite(valueLabel_1);\n        this._disposers.push(valueLabel_1);\n        valueLabel_1.parent = this.itemContainer;\n        this._disposers.push(new Disposer(function () {\n          if ($type.hasValue(_this.component)) {\n            _this.component.valueLabels.removeValue(valueLabel_1);\n          }\n        }));\n      }\n      return this._valueLabel;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LegendDataItem.prototype, \"itemContainer\", {\n    /**\r\n     * A reference to the main [[Container]] that holds legend item's elements:\r\n     * marker and labels.\r\n     *\r\n     * @return Item container\r\n     */\n    get: function () {\n      var _this = this;\n      if (!this._itemContainer) {\n        var component_1 = this.component;\n        var itemContainer_1 = component_1.itemContainers.create();\n        itemContainer_1.parent = component_1;\n        this._itemContainer = itemContainer_1;\n        this.addSprite(itemContainer_1);\n        this._disposers.push(itemContainer_1);\n        // Add click/tap event to toggle item\n        if (itemContainer_1.togglable) {\n          itemContainer_1.events.on(\"toggled\", function (ev) {\n            component_1.toggleDataItem(ev.target.dataItem);\n          }, undefined, false);\n        }\n        // Add focus event so that we can track which object is currently in focus\n        // for keyboard toggling\n        if (itemContainer_1.focusable) {\n          itemContainer_1.events.on(\"hit\", function (ev) {\n            // We need this here in order to reset focused item when it is clicked\n            // normally so that it is not toggled by ENTER afterwards\n            component_1.focusedItem = undefined;\n          }, undefined, false);\n          itemContainer_1.events.on(\"focus\", function (ev) {\n            component_1.focusedItem = ev.target.dataItem;\n          }, undefined, false);\n          itemContainer_1.events.on(\"blur\", function (ev) {\n            component_1.focusedItem = undefined;\n          }, undefined, false);\n        }\n        this._disposers.push(new Disposer(function () {\n          if ($type.hasValue(_this.component)) {\n            _this.component.itemContainers.removeValue(itemContainer_1);\n          }\n        }));\n        if (this.dataContext.uidAttr) {\n          itemContainer_1.readerControls = this.dataContext.uidAttr();\n          itemContainer_1.readerLabelledBy = this.dataContext.uidAttr();\n        }\n        var sprite = this.dataContext;\n        if ((sprite instanceof DataItem || sprite instanceof Sprite) && !sprite.isDisposed()) {\n          var visibilitychanged = function (ev) {\n            itemContainer_1.readerChecked = ev.visible;\n            itemContainer_1.events.disableType(\"toggled\");\n            itemContainer_1.isActive = !ev.visible;\n            itemContainer_1.events.enableType(\"toggled\");\n          };\n          sprite.addDisposer(new Disposer(function () {\n            if (_this.component) {\n              _this.component.dataItems.remove(_this);\n            }\n          }));\n          if (sprite instanceof Sprite) {\n            itemContainer_1.addDisposer(sprite.events.on(\"visibilitychanged\", visibilitychanged, undefined, false));\n            itemContainer_1.addDisposer(sprite.events.on(\"hidden\", function (ev) {\n              itemContainer_1.readerChecked = false;\n              itemContainer_1.events.disableType(\"toggled\");\n              itemContainer_1.isActive = true;\n              itemContainer_1.events.enableType(\"toggled\");\n            }, undefined, false));\n            itemContainer_1.addDisposer(sprite.events.on(\"shown\", function (ev) {\n              itemContainer_1.readerChecked = true;\n              itemContainer_1.events.disableType(\"toggled\");\n              itemContainer_1.isActive = false;\n              itemContainer_1.events.enableType(\"toggled\");\n            }, undefined, false));\n          } else {\n            itemContainer_1.addDisposer(sprite.events.on(\"visibilitychanged\", visibilitychanged, undefined, false));\n          }\n        }\n      }\n      return this._itemContainer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LegendDataItem.prototype, \"marker\", {\n    /**\r\n     * A [[Container]] that holds legend item's marker element.\r\n     *\r\n     * @return Marker\r\n     */\n    get: function () {\n      var _this = this;\n      if (!this._marker) {\n        var marker_1 = this.component.markers.create();\n        this._marker = marker_1;\n        marker_1.parent = this.itemContainer;\n        this.addSprite(marker_1);\n        this._disposers.push(marker_1);\n        this._disposers.push(new Disposer(function () {\n          if ($type.hasValue(_this.component)) {\n            _this.component.markers.removeValue(marker_1);\n          }\n        }));\n      }\n      return this._marker;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return LegendDataItem;\n}(DataItem);\nexport { LegendDataItem };\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a class that carries legend settings.\r\n *\r\n * A legend might change its settings dynamically. Legend can also be shared\r\n * by several elements, requiring different settings.\r\n *\r\n * Having legend's settings in a separate object is a good way to \"hot swap\"\r\n * a set of settings for the legend.\r\n */\nvar LegendSettings = /** @class */function () {\n  function LegendSettings() {\n    /**\r\n     * Should marker be created for each legend item.\r\n     */\n    this.createMarker = true;\n  }\n  return LegendSettings;\n}();\nexport { LegendSettings };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * [[Legend]] class is used to create legend for the chart.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/legend/} for Legend documentation\r\n * @see {@link ILegendEvents} for a list of available events\r\n * @see {@link ILegendAdapters} for a list of available Adapters\r\n */\nvar Legend = /** @class */function (_super) {\n  __extends(Legend, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Legend() {\n    var _this = _super.call(this) || this;\n    _this.className = \"Legend\";\n    // Set defaults\n    _this.layout = \"grid\";\n    _this.setPropertyValue(\"useDefaultMarker\", false);\n    _this.setPropertyValue(\"scrollable\", false);\n    _this.setPropertyValue(\"contentAlign\", \"center\");\n    // Create a template container and list for legend items\n    var itemContainer = new Container();\n    itemContainer.applyOnClones = true;\n    itemContainer.padding(8, 0, 8, 0);\n    itemContainer.margin(0, 10, 0, 10);\n    itemContainer.layout = \"horizontal\";\n    itemContainer.clickable = true;\n    itemContainer.focusable = true;\n    itemContainer.role = \"switch\";\n    itemContainer.togglable = true;\n    itemContainer.cursorOverStyle = MouseCursorStyle.pointer;\n    itemContainer.background.fillOpacity = 0; // creates hit area\n    // Create container list using item template we just created\n    _this.itemContainers = new ListTemplate(itemContainer);\n    _this._disposers.push(new ListDisposer(_this.itemContainers));\n    _this._disposers.push(_this.itemContainers.template);\n    // Set up global keyboard events for toggling elements\n    _this._disposers.push(getInteraction().body.events.on(\"keyup\", function (ev) {\n      if (keyboard.isKey(ev.event, \"enter\") && _this.focusedItem) {\n        var focusedItem = _this.focusedItem;\n        var target = focusedItem.itemContainer;\n        if (target.togglable) {\n          _this.toggleDataItem(focusedItem);\n        } else if (target.clickable && target.events.isEnabled(\"hit\")) {\n          target.dispatchImmediately(\"hit\", {\n            event: ev\n          });\n          // We need this here because \"hit\" event resets `this.focusedItem`\n          // And we need it here\n          _this.focusedItem = focusedItem;\n        }\n      }\n    }, _this));\n    var interfaceColors = new InterfaceColorSet();\n    // Create a template container and list for the a marker\n    var marker = new Container();\n    marker.width = 23;\n    marker.height = 23;\n    marker.interactionsEnabled = false;\n    marker.applyOnClones = true;\n    marker.setStateOnChildren = true;\n    marker.background.fillOpacity = 0;\n    marker.background.strokeOpacity = 0;\n    marker.propertyFields.fill = \"fill\";\n    marker.valign = \"middle\";\n    var disabledColor = interfaceColors.getFor(\"disabledBackground\");\n    marker.events.on(\"childadded\", function (event) {\n      var child = event.newValue;\n      var activeState = child.states.create(\"active\");\n      activeState.properties.stroke = disabledColor;\n      activeState.properties.fill = disabledColor;\n    });\n    _this.markers = new ListTemplate(marker);\n    _this._disposers.push(new ListDisposer(_this.markers));\n    _this._disposers.push(_this.markers.template);\n    // Create a legend background element\n    var rectangle = marker.createChild(RoundedRectangle);\n    rectangle.width = percent(100);\n    rectangle.height = percent(100);\n    rectangle.applyOnClones = true;\n    rectangle.propertyFields.fill = \"fill\"; //othrwise old edge doesn't like as the same pattern is set both on parent and child https://codepen.io/team/amcharts/pen/72d7a98f3fb811d3118795220ff63182\n    rectangle.strokeOpacity = 0;\n    // Create a template container and list for item labels\n    var label = new Label();\n    label.text = \"{name}\";\n    label.margin(0, 5, 0, 5);\n    label.valign = \"middle\";\n    label.applyOnClones = true;\n    label.states.create(\"active\").properties.fill = interfaceColors.getFor(\"disabledBackground\");\n    _this.labels = new ListTemplate(label);\n    _this._disposers.push(new ListDisposer(_this.labels));\n    _this._disposers.push(_this.labels.template);\n    label.interactionsEnabled = false;\n    label.truncate = true;\n    label.fullWords = false;\n    // Create a template container and list for item value labels\n    var valueLabel = new Label();\n    valueLabel.margin(0, 5, 0, 0);\n    valueLabel.valign = \"middle\";\n    valueLabel.width = 50; // to avoid rearranging legend entries when value changes.\n    valueLabel.align = \"right\";\n    valueLabel.textAlign = \"end\";\n    valueLabel.applyOnClones = true;\n    valueLabel.states.create(\"active\").properties.fill = interfaceColors.getFor(\"disabledBackground\");\n    valueLabel.interactionsEnabled = false;\n    _this.valueLabels = new ListTemplate(valueLabel);\n    _this._disposers.push(new ListDisposer(_this.valueLabels));\n    _this._disposers.push(_this.valueLabels.template);\n    _this.position = \"bottom\"; // don't use setPropertyValue here!\n    // Create a state for disabled legend items\n    itemContainer.states.create(\"active\");\n    itemContainer.setStateOnChildren = true;\n    // Apply accessibility settings\n    _this.role = \"group\";\n    _this.events.on(\"layoutvalidated\", _this.handleScrollbar, _this, false);\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n  Legend.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Legend\");\n    }\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n  Legend.prototype.createDataItem = function () {\n    return new LegendDataItem();\n  };\n  /**\r\n   * [validateDataElements description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n  Legend.prototype.validateDataElements = function () {\n    if (this.scrollbar) {\n      this.scrollbar.start = 0;\n      this.scrollbar.end = 1;\n    }\n    _super.prototype.validateDataElements.call(this);\n  };\n  /**\r\n   * [validateDataElement description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem Data item\r\n   * @todo Description\r\n   * @todo Figure out how to update appearance of legend item without losing focus\r\n   * @todo Update legend marker appearance as apperance of related series changes\r\n   */\n  Legend.prototype.validateDataElement = function (dataItem) {\n    _super.prototype.validateDataElement.call(this, dataItem);\n    // Get data item (legend item's) container\n    var container = dataItem.itemContainer;\n    var marker = dataItem.marker;\n    $utils.used(dataItem.label);\n    var valueLabel = dataItem.valueLabel;\n    // Set parent and update current state\n    container.readerChecked = dataItem.dataContext.visible;\n    // Tell series its legend data item\n    dataItem.dataContext.legendDataItem = dataItem;\n    var tempMaxWidth = dataItem.label.maxWidth;\n    if (!(dataItem.label.width instanceof Percent)) {\n      dataItem.label.width = undefined;\n    }\n    if (tempMaxWidth > 0) {\n      dataItem.label.maxWidth = tempMaxWidth;\n    }\n    if (valueLabel.align == \"right\") {\n      valueLabel.width = undefined;\n    }\n    var legendSettings = dataItem.dataContext.legendSettings;\n    // If we are not using default markers, create a unique legend marker based\n    // on the data item type\n    var dataContext = dataItem.dataContext;\n    if (dataContext.createLegendMarker && (!this.useDefaultMarker || !(dataContext instanceof Sprite))) {\n      if (!dataItem.childrenCreated) {\n        dataContext.createLegendMarker(marker);\n        dataItem.childrenCreated = true;\n      }\n    } else {\n      this.markers.template.propertyFields.fill = undefined;\n    }\n    if (dataContext.updateLegendValue) {\n      dataContext.updateLegendValue(); // this solves issue with external legend, as legend is created after chart updates legend values\n    }\n\n    if (dataContext.component && dataContext.component.updateLegendValue) {\n      dataContext.component.updateLegendValue(dataContext);\n    }\n    if (valueLabel.invalid) {\n      valueLabel.validate();\n    }\n    if (valueLabel.text == \"\" || valueLabel.text == undefined) {\n      valueLabel.__disabled = true;\n    } else {\n      valueLabel.__disabled = false;\n    }\n    if (legendSettings && (legendSettings.itemValueText != undefined || legendSettings.valueText != undefined)) {\n      valueLabel.__disabled = false;\n    }\n    var visible = dataItem.dataContext.visible;\n    if (visible === undefined) {\n      visible = true;\n    }\n    visible = $type.toBoolean(visible);\n    dataItem.dataContext.visible = visible;\n    container.events.disableType(\"toggled\");\n    container.isActive = !visible;\n    if (container.isActive) {\n      container.setState(\"active\", 0);\n    } else {\n      container.setState(\"default\", 0);\n    }\n    container.events.enableType(\"toggled\");\n  };\n  Legend.prototype.afterDraw = function () {\n    var _this = this;\n    var maxWidth = this.getPropertyValue(\"maxWidth\");\n    var maxLabelWidth = 0;\n    this.labels.each(function (label) {\n      if (label.invalid) {\n        label.maxWidth = undefined;\n        label.validate();\n      }\n      if (label.measuredWidth + label.pixelMarginLeft + label.pixelMarginRight > maxLabelWidth) {\n        maxLabelWidth = label.measuredWidth + label.pixelMarginLeft + label.pixelMarginRight;\n      }\n    });\n    var maxValueLabelWidth = 0;\n    this.valueLabels.each(function (label) {\n      if (label.invalid) {\n        label.validate();\n      }\n      if (label.measuredWidth + label.pixelMarginLeft + label.pixelMarginRight > maxValueLabelWidth) {\n        maxValueLabelWidth = label.measuredWidth + label.pixelMarginLeft + label.pixelMarginRight;\n      }\n    });\n    var maxMarkerWidth = 0;\n    this.markers.each(function (marker) {\n      if (marker.invalid) {\n        marker.validate();\n      }\n      if (marker.measuredWidth + marker.pixelMarginLeft + marker.pixelMarginRight > maxMarkerWidth) {\n        maxMarkerWidth = marker.measuredWidth + marker.pixelMarginLeft + marker.pixelMarginRight;\n      }\n    });\n    var itemContainer = this.itemContainers.template;\n    var margin = itemContainer.pixelMarginRight + itemContainer.pixelMarginLeft;\n    var maxAdjustedLabelWidth;\n    var trueMaxWidth = maxLabelWidth + maxValueLabelWidth + maxMarkerWidth;\n    if (!$type.isNumber(maxWidth)) {\n      maxAdjustedLabelWidth = maxLabelWidth;\n    } else {\n      maxWidth = maxWidth - margin;\n      if (maxWidth > trueMaxWidth) {\n        maxWidth = trueMaxWidth;\n      }\n      maxAdjustedLabelWidth = maxWidth - maxMarkerWidth - maxValueLabelWidth;\n    }\n    this.labels.each(function (label) {\n      if (_this.valueLabels.template.align == \"right\" || label.measuredWidth > maxAdjustedLabelWidth) {\n        if (!(label.width instanceof Percent)) {\n          label.width = Math.min(label.maxWidth, maxAdjustedLabelWidth - label.pixelMarginLeft - label.pixelMarginRight);\n          label.maxWidth = label.width;\n        }\n      }\n    });\n    if (this.valueLabels.template.align == \"right\") {\n      this.valueLabels.each(function (valueLabel) {\n        valueLabel.width = maxValueLabelWidth - valueLabel.pixelMarginRight - valueLabel.pixelMarginLeft;\n      });\n    }\n    _super.prototype.afterDraw.call(this);\n  };\n  Legend.prototype.handleScrollbar = function () {\n    var scrollbar = this.scrollbar;\n    if (this.scrollable && scrollbar) {\n      scrollbar.height = this.measuredHeight;\n      scrollbar.x = this.measuredWidth - scrollbar.pixelWidth - scrollbar.pixelMarginLeft;\n      if (this.contentHeight > this.measuredHeight) {\n        scrollbar.visible = true;\n        scrollbar.thumb.height = scrollbar.height * this.measuredHeight / this.contentHeight;\n        this.paddingRight = scrollbar.pixelWidth + scrollbar.pixelMarginLeft + +scrollbar.pixelMarginRight;\n      } else {\n        scrollbar.visible = false;\n      }\n      scrollbar.handleThumbPosition();\n      this.updateMasks();\n    }\n  };\n  Object.defineProperty(Legend.prototype, \"position\", {\n    /**\r\n     * @return Position\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"position\");\n    },\n    /**\r\n     * Position of the legend.\r\n     *\r\n     * Options: \"left\", \"right\", \"top\", \"bottom\" (default), or \"absolute\".\r\n     *\r\n     * IMPORTANT: [[MapChart]] will ignore this setting, as it is using different\r\n     * layout structure than other charts.\r\n     *\r\n     * To position legend in [[MapChart]] set legend's `align` (`\"left\"` or\r\n     * `\"right\"`) and `valign` (`\"top\"` or `\"bottom\"`) properties instead.\r\n     *\r\n     * @default \"bottom\"\r\n     * @param value  Position\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"position\", value)) {\n        if (value == \"left\" || value == \"right\") {\n          this.margin(10, 5, 10, 10);\n          this.valign = \"middle\";\n          this.contentAlign = \"none\";\n          this.valueLabels.template.align = \"right\";\n          if (!$type.isNumber(this.maxColumns)) {\n            this.maxColumns = 1;\n          }\n          this.width = undefined;\n          this.maxWidth = 220;\n        } else {\n          this.maxColumns = undefined;\n          this.width = percent(100);\n          this.valueLabels.template.align = \"left\";\n        }\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Legend.prototype, \"useDefaultMarker\", {\n    /**\r\n     * @return Use default marker?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"useDefaultMarker\");\n    },\n    /**\r\n     * Should legend try to mirror the look of the related item when building\r\n     * the marker for legend item?\r\n     *\r\n     * If set to `false` it will try to make the marker look like its related\r\n     * item.\r\n     *\r\n     * E.g. if an item is for a Line Series, it will display a line of the\r\n     * same thickness, color, and will use the same bullets if series have them.\r\n     *\r\n     * If set to `true`, all markers will be shown as squares, regardless of te\r\n     * series type.\r\n     *\r\n     * @default false\r\n     * @param value Use default marker?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"useDefaultMarker\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Legend.prototype, \"scrollable\", {\n    /**\r\n     * @return Legend Scrollable?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"scrollable\");\n    },\n    /**\r\n     * If set to `true` the Legend will display a scrollbar if its contents do\r\n     * not fit into its `maxHeight`.\r\n     *\r\n     * Please note that `maxHeight` is automatically set for Legend when its\r\n     * `position` is set to `\"left\"` or `\"right\"`.\r\n     *\r\n     * @default false\r\n     * @since 4.8.0\r\n     * @param  value  Legend Scrollable?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"scrollable\", value, true)) {\n        if (value) {\n          var scrollbar = this.createChild(Scrollbar);\n          this.scrollbar = scrollbar;\n          scrollbar.isMeasured = false;\n          scrollbar.orientation = \"vertical\";\n          scrollbar.endGrip.__disabled = true;\n          scrollbar.startGrip.__disabled = true;\n          scrollbar.visible = false;\n          scrollbar.marginLeft = 5;\n          this._mouseWheelDisposer = this.events.on(\"wheel\", this.handleWheel, this, false);\n          this._disposers.push(this._mouseWheelDisposer);\n          this._disposers.push(scrollbar.events.on(\"rangechanged\", this.updateMasks, this, false));\n        } else {\n          if (this._mouseWheelDisposer) {\n            this._mouseWheelDisposer.dispose();\n            if (this.scrollbar) {\n              this.scrollbar.dispose();\n              this.scrollbar = undefined;\n            }\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles mouse wheel scrolling of legend.\r\n   *\r\n   * @param  event  Event\r\n   */\n  Legend.prototype.handleWheel = function (event) {\n    var shift = event.shift.y;\n    var scrollbar = this.scrollbar;\n    if (scrollbar) {\n      var ds = shift / 1000 * this.measuredHeight / this.contentHeight;\n      var delta = scrollbar.end - scrollbar.start;\n      if (shift > 0) {\n        scrollbar.start = $math.max(0, scrollbar.start - ds);\n        scrollbar.end = scrollbar.start + delta;\n      } else {\n        scrollbar.end = $math.min(1, scrollbar.end - ds);\n        scrollbar.start = scrollbar.end - delta;\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  Legend.prototype.updateMasks = function () {\n    var _this = this;\n    if (this.scrollbar) {\n      this.itemContainers.each(function (itemContainer) {\n        itemContainer.dy = -_this.scrollbar.thumb.pixelY * _this.contentHeight / _this.measuredHeight;\n        itemContainer.maskRectangle = {\n          x: 0,\n          y: -itemContainer.dy,\n          width: _this.measuredWidth,\n          height: _this.measuredHeight\n        };\n      });\n    }\n  };\n  /**\r\n   * Toggles a legend item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param item Legend item\r\n   * @todo Maybe do it with togglable instead\r\n   */\n  Legend.prototype.toggleDataItem = function (item) {\n    var dataContext = item.dataContext;\n    if (!dataContext.visible || dataContext.isHiding || dataContext instanceof Sprite && dataContext.isHidden) {\n      item.color = item.colorOrig;\n      dataContext.appeared = true;\n      item.itemContainer.isActive = false;\n      if (dataContext.hidden === true) {\n        dataContext.hidden = false;\n      }\n      if (dataContext.show) {\n        dataContext.show();\n      } else {\n        dataContext.visible = true;\n      }\n      this.svgContainer.readerAlert(this.language.translate(\"%1 shown\", this.language.locale, item.label.readerTitle));\n    } else {\n      item.itemContainer.isActive = true;\n      dataContext.appeared = true;\n      if (dataContext.hide) {\n        dataContext.hide();\n      } else {\n        dataContext.visible = false;\n      }\n      this.svgContainer.readerAlert(this.language.translate(\"%1 hidden\", this.language.locale, item.label.readerTitle));\n      item.color = new InterfaceColorSet().getFor(\"disabledBackground\");\n    }\n  };\n  Object.defineProperty(Legend.prototype, \"preloader\", {\n    /**\r\n     * Override preloader method so that legend does not accidentally show its\r\n     * own preloader.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Always `undefined`\r\n     */\n    get: function () {\n      return;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * [handleDataItemPropertyChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Legend.prototype.handleDataItemPropertyChange = function (dataItem, name) {\n    dataItem.valueLabel.invalidate();\n    dataItem.label.invalidate();\n  };\n  return Legend;\n}(Component);\nexport { Legend };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Legend\"] = Legend;\n/**\r\n * Add default responsive rules\r\n */\n/**\r\n * Move legend to below the chart if chart is narrow\r\n */\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.widthXS,\n  state: function (target, stateId) {\n    if (target instanceof Legend && (target.position == \"left\" || target.position == \"right\")) {\n      var state = target.states.create(stateId);\n      state.properties.position = \"bottom\";\n      return state;\n    }\n    return null;\n  }\n});\n/**\r\n * Move legend to the right if chart is very short\r\n */\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.heightXS,\n  state: function (target, stateId) {\n    if (target instanceof Legend && (target.position == \"top\" || target.position == \"bottom\")) {\n      var state = target.states.create(stateId);\n      state.properties.position = \"right\";\n      return state;\n    }\n    return null;\n  }\n});\n/**\r\n * Disable legend altogether on small charts\r\n */\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.isXS,\n  state: function (target, stateId) {\n    if (target instanceof Legend) {\n      var state = target.states.create(stateId);\n      state.properties.disabled = true;\n      return state;\n    }\n    return null;\n  }\n});","map":{"version":3,"mappings":"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","names":["Component","DataItem","ListTemplate","ListDisposer","RoundedRectangle","Container","Label","keyboard","registry","getInteraction","percent","Percent","InterfaceColorSet","$utils","$type","$math","Sprite","Disposer","MouseCursorStyle","defaultRules","ResponsiveBreakpoints","Scrollbar","__extends","_super","_this","className","applyTheme","Object","LegendDataItem","_label","label_1","component","labels","create","addSprite","_disposers","push","parent","itemContainer","hasValue","removeValue","properties","color","value","setProperty","_valueLabel","valueLabel_1","valueLabels","_itemContainer","component_1","itemContainer_1","itemContainers","togglable","events","on","ev","toggleDataItem","target","dataItem","undefined","focusable","focusedItem","dataContext","uidAttr","readerControls","readerLabelledBy","sprite","isDisposed","visibilitychanged","readerChecked","visible","disableType","isActive","enableType","addDisposer","dataItems","remove","_marker","marker_1","markers","layout","setPropertyValue","applyOnClones","padding","margin","clickable","role","cursorOverStyle","pointer","background","fillOpacity","template","body","isKey","event","isEnabled","dispatchImmediately","interfaceColors","marker","width","height","interactionsEnabled","setStateOnChildren","strokeOpacity","propertyFields","fill","valign","disabledColor","getFor","child","newValue","activeState","states","stroke","rectangle","createChild","label","text","truncate","fullWords","valueLabel","align","textAlign","position","handleScrollbar","Legend","applyInternalDefaults","readerTitle","language","translate","scrollbar","start","end","validateDataElements","validateDataElement","container","used","legendDataItem","tempMaxWidth","maxWidth","legendSettings","createLegendMarker","useDefaultMarker","childrenCreated","updateLegendValue","invalid","validate","__disabled","itemValueText","valueText","toBoolean","setState","getPropertyValue","maxLabelWidth","each","measuredWidth","pixelMarginLeft","pixelMarginRight","maxValueLabelWidth","maxMarkerWidth","maxAdjustedLabelWidth","trueMaxWidth","isNumber","Math","min","afterDraw","scrollable","measuredHeight","x","pixelWidth","contentHeight","thumb","paddingRight","handleThumbPosition","updateMasks","contentAlign","maxColumns","invalidate","isMeasured","orientation","endGrip","startGrip","marginLeft","_mouseWheelDisposer","handleWheel","dispose","shift","y","ds","delta","max","dy","pixelY","maskRectangle","item","isHiding","isHidden","colorOrig","appeared","hidden","show","svgContainer","readerAlert","locale","hide","name","registeredClasses","relevant","widthXS","state","stateId","heightXS","isXS","disabled"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\Legend.ts"],"sourcesContent":["/**\r\n * Legend-related functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentDataFields, IComponentAdapters, IComponentEvents } from \"../core/Component\";\r\nimport { DataItem, IDataItemEvents } from \"../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../core/utils/List\";\r\nimport { RoundedRectangle } from \"../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../core/Container\";\r\nimport { Label } from \"../core/elements/Label\";\r\nimport { Optional } from \"../core/utils/Type\";\r\nimport { Preloader } from \"../core/elements/Preloader\";\r\nimport { keyboard } from \"../core/utils/Keyboard\";\r\nimport { registry } from \"../core/Registry\";\r\nimport { getInteraction } from \"../core/interaction/Interaction\";\r\nimport { percent, Percent } from \"../core/utils/Percent\";\r\nimport { InterfaceColorSet } from \"../core/utils/InterfaceColorSet\";\r\nimport { Color } from \"../core/utils/Color\";\r\nimport { RadialGradient } from \"../core/rendering/fills/RadialGradient\";\r\nimport { LinearGradient } from \"../core/rendering/fills/LinearGradient\";\r\nimport { Pattern } from \"../core/rendering/fills/Pattern\";\r\nimport * as $utils from \"../core/utils/Utils\";\r\nimport * as $type from \"../core/utils/Type\";\r\nimport * as $math from \"../core/utils/Math\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../core/Sprite\";\r\nimport { Disposer, IDisposer } from \"../core/utils/Disposer\";\r\nimport { MouseCursorStyle } from \"../core/interaction/Mouse\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../core/utils/Responsive\";\r\nimport { Scrollbar } from \"../core/elements/Scrollbar\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[Legend]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LegendDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * A container data item's elements will be placed in.\r\n\t */\r\n\tprotected _itemContainer: Container;\r\n\r\n\t/**\r\n\t * A [[Label]] element for the item label.\r\n\t */\r\n\tprotected _label: Label;\r\n\r\n\t/**\r\n\t * A [[Container]] for legend item marker.\r\n\t */\r\n\tprotected _marker: Container;\r\n\r\n\t/**\r\n\t * A [[Label]] element for the value label.\r\n\t */\r\n\tprotected _valueLabel: Label;\r\n\r\n\t/**\r\n\t * A data context for legend item.\r\n\t */\r\n\tpublic dataContext: any;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: Legend;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic childrenCreated: boolean = false;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic colorOrig: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LegendDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A legend item's [[Label]] element.\r\n\t *\r\n\t * @return Label\r\n\t */\r\n\tpublic get label(): Label {\r\n\t\tif (!this._label) {\r\n\t\t\tlet label = this.component.labels.create();\r\n\t\t\tthis._label = label;\r\n\t\t\tthis.addSprite(label);\r\n\t\t\tthis._disposers.push(label);\r\n\t\t\tlabel.parent = this.itemContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif ($type.hasValue(this.component)) {\r\n\t\t\t\t\tthis.component.labels.removeValue(label);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * Main color of legend data item.\r\n\t *\r\n\t * This is set by the target element this legend item represents, like\r\n\t * a Series or a Slice.\r\n\t *\r\n\t * It can be used to derive a color in legend's sub-items, like label:\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.legend.labels.template.text = \"[{color}]{name}[/]\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.legend.labels.template.text = \"[{color}]{name}[/]\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"legend\": {\r\n\t *     // ...\r\n\t *     \"labels\": {\r\n\t *       \"text\": \"[{color}]{name}[/]\"\r\n\t *     }\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/legend/#Legend_labels} For more information about configuring legend labels.\r\n\t * @param value  Main color\r\n\t */\r\n\tpublic set color(value: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Main color\r\n\t */\r\n\tpublic get color(): $type.Optional<Color | Pattern | LinearGradient | RadialGradient> {\r\n\t\treturn this.properties.color;\r\n\t}\r\n\r\n\t/**\r\n\t * A legend item's [[Label]] element for \"value label\".\r\n\t *\r\n\t * @return Label\r\n\t */\r\n\tpublic get valueLabel(): Label {\r\n\t\tif (!this._valueLabel) {\r\n\t\t\tlet valueLabel = this.component.valueLabels.create();\r\n\t\t\tthis._valueLabel = valueLabel;\r\n\r\n\t\t\tthis.addSprite(valueLabel);\r\n\t\t\tthis._disposers.push(valueLabel);\r\n\t\t\tvalueLabel.parent = this.itemContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif ($type.hasValue(this.component)) {\r\n\t\t\t\t\tthis.component.valueLabels.removeValue(valueLabel);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._valueLabel;\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to the main [[Container]] that holds legend item's elements:\r\n\t * marker and labels.\r\n\t *\r\n\t * @return Item container\r\n\t */\r\n\tpublic get itemContainer(): Container {\r\n\t\tif (!this._itemContainer) {\r\n\r\n\t\t\tlet component = this.component;\r\n\r\n\t\t\tlet itemContainer = component.itemContainers.create();\r\n\t\t\titemContainer.parent = component;\r\n\t\t\t\r\n\t\t\tthis._itemContainer = itemContainer;\r\n\t\t\tthis.addSprite(itemContainer);\r\n\t\t\tthis._disposers.push(itemContainer);\r\n\r\n\t\t\t// Add click/tap event to toggle item\r\n\t\t\tif (itemContainer.togglable) {\r\n\t\t\t\titemContainer.events.on(\"toggled\", (ev) => {\r\n\t\t\t\t\tcomponent.toggleDataItem(<this>ev.target.dataItem);\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\r\n\t\t\t// Add focus event so that we can track which object is currently in focus\r\n\t\t\t// for keyboard toggling\r\n\t\t\tif (itemContainer.focusable) {\r\n\t\t\t\titemContainer.events.on(\"hit\", (ev) => {\r\n\t\t\t\t\t// We need this here in order to reset focused item when it is clicked\r\n\t\t\t\t\t// normally so that it is not toggled by ENTER afterwards\r\n\t\t\t\t\tcomponent.focusedItem = undefined;\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t\titemContainer.events.on(\"focus\", (ev) => {\r\n\t\t\t\t\tcomponent.focusedItem = <this>ev.target.dataItem;\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t\titemContainer.events.on(\"blur\", (ev) => {\r\n\t\t\t\t\tcomponent.focusedItem = undefined;\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif ($type.hasValue(this.component)) {\r\n\t\t\t\t\tthis.component.itemContainers.removeValue(itemContainer);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tif (this.dataContext.uidAttr) {\r\n\t\t\t\titemContainer.readerControls = this.dataContext.uidAttr();\r\n\t\t\t\titemContainer.readerLabelledBy = this.dataContext.uidAttr();\r\n\t\t\t}\r\n\r\n\t\t\tlet sprite = <any>this.dataContext;\r\n\t\t\tif ((sprite instanceof DataItem || sprite instanceof Sprite) && !sprite.isDisposed()) {\r\n\t\t\t\tconst visibilitychanged = function(ev: AMEvent<Sprite | DataItem, ISpriteEvents & IDataItemEvents>[\"visibilitychanged\"]) {\r\n\t\t\t\t\titemContainer.readerChecked = ev.visible;\r\n\t\t\t\t\titemContainer.events.disableType(\"toggled\");\r\n\t\t\t\t\titemContainer.isActive = !ev.visible;\r\n\t\t\t\t\titemContainer.events.enableType(\"toggled\");\r\n\t\t\t\t};\r\n\r\n\t\t\t\tsprite.addDisposer(new Disposer(() => {\r\n\t\t\t\t\tif (this.component) {\r\n\t\t\t\t\t\tthis.component.dataItems.remove(this);\r\n\t\t\t\t\t}\r\n\t\t\t\t}))\r\n\r\n\t\t\t\tif (sprite instanceof Sprite) {\r\n\t\t\t\t\titemContainer.addDisposer(\r\n\t\t\t\t\t\tsprite.events.on(\"visibilitychanged\", visibilitychanged, undefined, false)\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\titemContainer.addDisposer(\r\n\t\t\t\t\t\tsprite.events.on(\"hidden\", (ev) => {\r\n\t\t\t\t\t\t\titemContainer.readerChecked = false;\r\n\t\t\t\t\t\t\titemContainer.events.disableType(\"toggled\");\r\n\t\t\t\t\t\t\titemContainer.isActive = true;\r\n\t\t\t\t\t\t\titemContainer.events.enableType(\"toggled\");\r\n\t\t\t\t\t\t}, undefined, false)\r\n\t\t\t\t\t)\r\n\t\t\t\t\titemContainer.addDisposer(\r\n\t\t\t\t\t\tsprite.events.on(\"shown\", (ev) => {\r\n\t\t\t\t\t\t\titemContainer.readerChecked = true;\r\n\t\t\t\t\t\t\titemContainer.events.disableType(\"toggled\");\r\n\t\t\t\t\t\t\titemContainer.isActive = false;\r\n\t\t\t\t\t\t\titemContainer.events.enableType(\"toggled\");\r\n\t\t\t\t\t\t}, undefined, false)\r\n\t\t\t\t\t)\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\titemContainer.addDisposer(\r\n\t\t\t\t\t\tsprite.events.on(\"visibilitychanged\", visibilitychanged, undefined, false)\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._itemContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Container]] that holds legend item's marker element.\r\n\t *\r\n\t * @return Marker\r\n\t */\r\n\tpublic get marker(): Container {\r\n\t\tif (!this._marker) {\r\n\t\t\tlet marker = this.component.markers.create();\r\n\t\t\tthis._marker = marker;\r\n\t\t\tmarker.parent = this.itemContainer;\r\n\t\t\tthis.addSprite(marker);\r\n\t\t\tthis._disposers.push(marker);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif ($type.hasValue(this.component)) {\r\n\t\t\t\t\tthis.component.markers.removeValue(marker);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._marker;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a class that carries legend settings.\r\n *\r\n * A legend might change its settings dynamically. Legend can also be shared\r\n * by several elements, requiring different settings.\r\n *\r\n * Having legend's settings in a separate object is a good way to \"hot swap\"\r\n * a set of settings for the legend.\r\n */\r\nexport class LegendSettings {\r\n\r\n\t/**\r\n\t * [valueText description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic valueText: string;\r\n\r\n\t/**\r\n\t * [labelText description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic labelText: string;\r\n\r\n\t/**\r\n\t * A text template for the value part of the legend item.\r\n\t */\r\n\tpublic itemValueText: string;\r\n\r\n\t/**\r\n\t * A text template for the label part of the legend item.\r\n\t */\r\n\tpublic itemLabelText: string;\r\n\r\n\t/**\r\n\t * Should marker be created for each legend item.\r\n\t */\r\n\tpublic createMarker: boolean = true;\r\n}\r\n\r\n/**\r\n * Represents types available for Legend position. Not all charts will pay attention to this, like MapChart. You'll need to use legend.align and legend.valign properties to position legend on MapChart.\r\n */\r\nexport type LegendPosition = \"left\" | \"right\" | \"top\" | \"bottom\" | \"absolute\";\r\n\r\n/**\r\n * Defines data fields for [[Legend]].\r\n */\r\nexport interface ILegendDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * A field name in the data item which holds name of the legend item.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A field name in data item which holds boolean value whether item should\r\n\t * be displayed in legend or not.\r\n\t */\r\n\tvisible?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[Legend]].\r\n */\r\nexport interface ILegendProperties extends IComponentProperties {\r\n\r\n\t/**\r\n\t * Should legend use default marker?\r\n\t *\r\n\t * If set to `false`, the legend will try to mirror the look of the actual\r\n\t * item, like series.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tuseDefaultMarker?: boolean;\r\n\r\n\t/**\r\n\t * Position of the legend.\r\n\t *\r\n\t * Options: \"left\", \"right\", \"top\", \"bottom\" (default), or \"absolute\".\r\n\t *\r\n\t * @default \"bottom\"\r\n\t */\r\n\tposition?: LegendPosition;\r\n\r\n\t/**\r\n\t * If set to `true` the Legend will display a scrollbar if its contents do\r\n\t * not fit into its `maxHeight`.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.8.0\r\n\t */\r\n\tscrollable?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Legend]].\r\n */\r\nexport interface ILegendEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Legend]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILegendAdapters extends IComponentAdapters, ILegendProperties { }\r\n\r\nexport interface ILegendItemEvents {\r\n\tpropertychanged: {\r\n\t\t/**\r\n\t\t * Property key.\r\n\t\t */\r\n\t\tproperty: string;\r\n\t};\r\n}\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * [[Legend]] class is used to create legend for the chart.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/legend/} for Legend documentation\r\n * @see {@link ILegendEvents} for a list of available events\r\n * @see {@link ILegendAdapters} for a list of available Adapters\r\n */\r\nexport class Legend extends Component {\r\n\r\n\t/**\r\n\t * Defines the type of the data fields.\r\n\t */\r\n\tpublic _dataFields: ILegendDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILegendProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILegendAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILegendEvents;\r\n\r\n\t/**\r\n\t * Defines data item type.\r\n\t */\r\n\tpublic _dataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * List of legend Item containers. Legend item containers contain marker, title label and value label.\r\n\t */\r\n\tpublic itemContainers: ListTemplate<Container>;\r\n\r\n\t/**\r\n\t * List of legend item labels.\r\n\t */\r\n\tpublic labels: ListTemplate<Label>;\r\n\r\n\t/**\r\n\t * List of legend item markers.\r\n\t */\r\n\tpublic markers: ListTemplate<Container>;\r\n\r\n\t/**\r\n\t * List of legend item value labels.\r\n\t */\r\n\tpublic valueLabels: ListTemplate<Label>;\r\n\r\n\t/**\r\n\t * Currently focused legend item (for toggling via keyboard)\r\n\t */\r\n\tpublic focusedItem: Optional<this[\"_dataItem\"]>;\r\n\r\n\r\n\tpublic scrollbar: Scrollbar;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Legend\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.setPropertyValue(\"useDefaultMarker\", false);\r\n\t\tthis.setPropertyValue(\"scrollable\", false);\r\n\t\tthis.setPropertyValue(\"contentAlign\", \"center\");\r\n\r\n\t\t// Create a template container and list for legend items\r\n\t\tlet itemContainer: Container = new Container();\r\n\t\titemContainer.applyOnClones = true;\r\n\t\titemContainer.padding(8, 0, 8, 0);\r\n\t\titemContainer.margin(0, 10, 0, 10);\r\n\t\titemContainer.layout = \"horizontal\";\r\n\t\titemContainer.clickable = true;\r\n\t\titemContainer.focusable = true;\r\n\t\titemContainer.role = \"switch\";\r\n\t\titemContainer.togglable = true;\r\n\t\titemContainer.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\titemContainer.background.fillOpacity = 0; // creates hit area\r\n\r\n\t\t// Create container list using item template we just created\r\n\t\tthis.itemContainers = new ListTemplate<Container>(itemContainer);\r\n\t\tthis._disposers.push(new ListDisposer(this.itemContainers));\r\n\t\tthis._disposers.push(this.itemContainers.template);\r\n\r\n\t\t// Set up global keyboard events for toggling elements\r\n\t\tthis._disposers.push(getInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\tif (keyboard.isKey(ev.event, \"enter\") && this.focusedItem) {\r\n\t\t\t\tconst focusedItem = this.focusedItem;\r\n\t\t\t\tconst target = focusedItem.itemContainer;\r\n\t\t\t\tif (target.togglable) {\r\n\t\t\t\t\tthis.toggleDataItem(focusedItem);\r\n\t\t\t\t}\r\n\t\t\t\telse if (target.clickable && target.events.isEnabled(\"hit\")) {\r\n\t\t\t\t\ttarget.dispatchImmediately(\"hit\", { event: ev });\r\n\r\n\t\t\t\t\t// We need this here because \"hit\" event resets `this.focusedItem`\r\n\t\t\t\t\t// And we need it here\r\n\t\t\t\t\tthis.focusedItem = focusedItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, this));\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create a template container and list for the a marker\r\n\t\tlet marker: Container = new Container();\r\n\t\tmarker.width = 23;\r\n\t\tmarker.height = 23;\r\n\t\tmarker.interactionsEnabled = false;\r\n\t\tmarker.applyOnClones = true;\r\n\t\tmarker.setStateOnChildren = true;\r\n\t\tmarker.background.fillOpacity = 0;\r\n\t\tmarker.background.strokeOpacity = 0;\r\n\t\tmarker.propertyFields.fill = \"fill\";\r\n\t\tmarker.valign = \"middle\";\r\n\r\n\t\tlet disabledColor = interfaceColors.getFor(\"disabledBackground\");\r\n\r\n\t\tmarker.events.on(\"childadded\", (event) => {\r\n\t\t\tlet child = event.newValue;\r\n\t\t\tlet activeState = child.states.create(\"active\");\r\n\t\t\tactiveState.properties.stroke = disabledColor;\r\n\t\t\tactiveState.properties.fill = disabledColor;\r\n\t\t});\r\n\r\n\t\tthis.markers = new ListTemplate<Container>(marker);\r\n\t\tthis._disposers.push(new ListDisposer(this.markers));\r\n\t\tthis._disposers.push(this.markers.template);\r\n\r\n\t\t// Create a legend background element\r\n\t\tlet rectangle: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\trectangle.width = percent(100);\r\n\t\trectangle.height = percent(100);\r\n\t\trectangle.applyOnClones = true;\r\n\t\trectangle.propertyFields.fill = \"fill\"; //othrwise old edge doesn't like as the same pattern is set both on parent and child https://codepen.io/team/amcharts/pen/72d7a98f3fb811d3118795220ff63182\r\n\t\trectangle.strokeOpacity = 0;\r\n\r\n\t\t// Create a template container and list for item labels\r\n\t\tlet label: Label = new Label();\r\n\t\tlabel.text = \"{name}\";\r\n\t\tlabel.margin(0, 5, 0, 5);\r\n\t\tlabel.valign = \"middle\";\r\n\t\tlabel.applyOnClones = true;\r\n\t\tlabel.states.create(\"active\").properties.fill = interfaceColors.getFor(\"disabledBackground\");\r\n\t\tthis.labels = new ListTemplate<Label>(label);\r\n\t\tthis._disposers.push(new ListDisposer(this.labels));\r\n\t\tthis._disposers.push(this.labels.template);\r\n\t\tlabel.interactionsEnabled = false;\r\n\t\tlabel.truncate = true;\r\n\t\tlabel.fullWords = false;\r\n\r\n\t\t// Create a template container and list for item value labels\r\n\t\tlet valueLabel: Label = new Label();\r\n\t\tvalueLabel.margin(0, 5, 0, 0);\r\n\t\tvalueLabel.valign = \"middle\";\r\n\t\tvalueLabel.width = 50; // to avoid rearranging legend entries when value changes.\r\n\t\tvalueLabel.align = \"right\";\r\n\t\tvalueLabel.textAlign = \"end\";\r\n\t\tvalueLabel.applyOnClones = true;\r\n\t\tvalueLabel.states.create(\"active\").properties.fill = interfaceColors.getFor(\"disabledBackground\");\r\n\t\tvalueLabel.interactionsEnabled = false;\r\n\r\n\t\tthis.valueLabels = new ListTemplate<Label>(valueLabel);\r\n\t\tthis._disposers.push(new ListDisposer(this.valueLabels));\r\n\t\tthis._disposers.push(this.valueLabels.template);\r\n\r\n\t\tthis.position = \"bottom\"; // don't use setPropertyValue here!\r\n\r\n\t\t// Create a state for disabled legend items\r\n\t\titemContainer.states.create(\"active\");\r\n\t\titemContainer.setStateOnChildren = true;\r\n\r\n\t\t// Apply accessibility settings\r\n\t\tthis.role = \"group\";\r\n\r\n\t\tthis.events.on(\"layoutvalidated\", this.handleScrollbar, this, false);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Legend\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LegendDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected validateDataElements() {\r\n\t\tif (this.scrollbar) {\r\n\t\t\tthis.scrollbar.start = 0;\r\n\t\t\tthis.scrollbar.end = 1;\r\n\t\t}\r\n\t\tsuper.validateDataElements();\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t * @todo Description\r\n\t * @todo Figure out how to update appearance of legend item without losing focus\r\n\t * @todo Update legend marker appearance as apperance of related series changes\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\t// Get data item (legend item's) container\r\n\t\tlet container = dataItem.itemContainer;\r\n\r\n\t\tlet marker = dataItem.marker;\r\n\r\n\t\t$utils.used(dataItem.label);\r\n\t\tlet valueLabel = dataItem.valueLabel;\r\n\r\n\t\t// Set parent and update current state\r\n\t\tcontainer.readerChecked = dataItem.dataContext.visible;\r\n\r\n\t\t// Tell series its legend data item\r\n\t\tdataItem.dataContext.legendDataItem = dataItem;\r\n\r\n\t\tlet tempMaxWidth = dataItem.label.maxWidth;\r\n\t\tif(!(dataItem.label.width instanceof Percent)){\r\n\t\t\tdataItem.label.width = undefined;\t\r\n\t\t}\r\n\t\t\r\n\t\tif (tempMaxWidth > 0) {\r\n\t\t\tdataItem.label.maxWidth = tempMaxWidth;\r\n\t\t}\r\n\t\tif (valueLabel.align == \"right\") {\r\n\t\t\tvalueLabel.width = undefined;\r\n\t\t}\r\n\r\n\t\tlet legendSettings = dataItem.dataContext.legendSettings;\r\n\r\n\t\t// If we are not using default markers, create a unique legend marker based\r\n\t\t// on the data item type\r\n\t\tlet dataContext = dataItem.dataContext;\r\n\r\n\t\tif (dataContext.createLegendMarker && (!this.useDefaultMarker || !(dataContext instanceof Sprite))) {\r\n\t\t\tif (!dataItem.childrenCreated) {\r\n\t\t\t\tdataContext.createLegendMarker(marker);\r\n\t\t\t\tdataItem.childrenCreated = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.markers.template.propertyFields.fill = undefined;\r\n\t\t}\r\n\r\n\t\tif (dataContext.updateLegendValue) {\r\n\t\t\tdataContext.updateLegendValue(); // this solves issue with external legend, as legend is created after chart updates legend values\r\n\t\t}\r\n\r\n\t\tif (dataContext.component && dataContext.component.updateLegendValue) {\r\n\t\t\tdataContext.component.updateLegendValue(dataContext);\r\n\t\t}\r\n\r\n\t\tif (valueLabel.invalid) {\r\n\t\t\tvalueLabel.validate();\r\n\t\t}\r\n\r\n\t\tif (valueLabel.text == \"\" || valueLabel.text == undefined) {\r\n\t\t\tvalueLabel.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvalueLabel.__disabled = false;\r\n\t\t}\r\n\r\n\t\tif (legendSettings && (legendSettings.itemValueText != undefined || legendSettings.valueText != undefined)) {\r\n\t\t\tvalueLabel.__disabled = false;\r\n\t\t}\r\n\r\n\t\tlet visible = dataItem.dataContext.visible;\r\n\r\n\t\tif (visible === undefined) {\r\n\t\t\tvisible = true;\r\n\t\t}\r\n\t\tvisible = $type.toBoolean(visible);\r\n\t\tdataItem.dataContext.visible = visible;\r\n\r\n\t\tcontainer.events.disableType(\"toggled\");\r\n\r\n\t\tcontainer.isActive = !visible;\r\n\t\tif (container.isActive) {\r\n\t\t\tcontainer.setState(\"active\", 0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcontainer.setState(\"default\", 0);\r\n\t\t}\r\n\t\tcontainer.events.enableType(\"toggled\");\r\n\t}\r\n\r\n\r\n\tpublic afterDraw() {\r\n\t\tlet maxWidth = this.getPropertyValue(\"maxWidth\");\r\n\t\tlet maxLabelWidth = 0;\r\n\t\tthis.labels.each((label) => {\r\n\t\t\tif (label.invalid) {\r\n\t\t\t\tlabel.maxWidth = undefined;\r\n\t\t\t\tlabel.validate();\r\n\t\t\t}\r\n\t\t\tif (label.measuredWidth + label.pixelMarginLeft + label.pixelMarginRight > maxLabelWidth) {\r\n\t\t\t\tmaxLabelWidth = label.measuredWidth + label.pixelMarginLeft + label.pixelMarginRight;\r\n\t\t\t}\r\n\r\n\t\t})\r\n\r\n\t\tlet maxValueLabelWidth = 0;\r\n\t\tthis.valueLabels.each((label) => {\r\n\t\t\tif (label.invalid) {\t\t\t\t\r\n\t\t\t\tlabel.validate();\r\n\t\t\t}\r\n\t\t\tif (label.measuredWidth + label.pixelMarginLeft + label.pixelMarginRight > maxValueLabelWidth) {\r\n\t\t\t\tmaxValueLabelWidth = label.measuredWidth + label.pixelMarginLeft + label.pixelMarginRight;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tlet maxMarkerWidth = 0;\r\n\t\tthis.markers.each((marker) => {\r\n\t\t\tif (marker.invalid) {\r\n\t\t\t\tmarker.validate();\r\n\t\t\t}\r\n\t\t\tif (marker.measuredWidth + marker.pixelMarginLeft + marker.pixelMarginRight > maxMarkerWidth) {\r\n\t\t\t\tmaxMarkerWidth = marker.measuredWidth + marker.pixelMarginLeft + marker.pixelMarginRight;\r\n\t\t\t}\r\n\t\t})\r\n\t\tlet itemContainer = this.itemContainers.template;\r\n\t\tlet margin = itemContainer.pixelMarginRight + itemContainer.pixelMarginLeft;\r\n\t\tlet maxAdjustedLabelWidth: number;\r\n\t\tlet trueMaxWidth = maxLabelWidth + maxValueLabelWidth + maxMarkerWidth;\r\n\t\tif (!$type.isNumber(maxWidth)) {\r\n\t\t\tmaxAdjustedLabelWidth = maxLabelWidth;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tmaxWidth = maxWidth - margin;\r\n\t\t\tif (maxWidth > trueMaxWidth) {\r\n\t\t\t\tmaxWidth = trueMaxWidth;\r\n\t\t\t}\r\n\t\t\tmaxAdjustedLabelWidth = maxWidth - maxMarkerWidth - maxValueLabelWidth;\r\n\t\t}\r\n\r\n\t\tthis.labels.each((label) => {\r\n\t\t\tif (this.valueLabels.template.align == \"right\" || label.measuredWidth > maxAdjustedLabelWidth) {\r\n\t\t\t\tif(!(label.width instanceof Percent)){\r\n\t\t\t\t\tlabel.width = Math.min(label.maxWidth, maxAdjustedLabelWidth - label.pixelMarginLeft - label.pixelMarginRight);\r\n\t\t\t\t\tlabel.maxWidth = label.width;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\tif (this.valueLabels.template.align == \"right\") {\r\n\t\t\tthis.valueLabels.each((valueLabel) => {\r\n\t\t\t\tvalueLabel.width = maxValueLabelWidth - valueLabel.pixelMarginRight - valueLabel.pixelMarginLeft;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tsuper.afterDraw();\r\n\t}\r\n\r\n\r\n\tprotected handleScrollbar() {\r\n\t\tlet scrollbar = this.scrollbar;\r\n\t\tif (this.scrollable && scrollbar) {\r\n\t\t\tscrollbar.height = this.measuredHeight;\r\n\t\t\tscrollbar.x = this.measuredWidth - scrollbar.pixelWidth - scrollbar.pixelMarginLeft;\r\n\r\n\t\t\tif (this.contentHeight > this.measuredHeight) {\r\n\t\t\t\tscrollbar.visible = true;\r\n\t\t\t\tscrollbar.thumb.height = scrollbar.height * this.measuredHeight / this.contentHeight;\r\n\t\t\t\tthis.paddingRight = scrollbar.pixelWidth + scrollbar.pixelMarginLeft + + scrollbar.pixelMarginRight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tscrollbar.visible = false;\r\n\t\t\t}\r\n\r\n\t\t\tscrollbar.handleThumbPosition();\r\n\r\n\t\t\tthis.updateMasks();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Position of the legend.\r\n\t *\r\n\t * Options: \"left\", \"right\", \"top\", \"bottom\" (default), or \"absolute\".\r\n\t *\r\n\t * IMPORTANT: [[MapChart]] will ignore this setting, as it is using different\r\n\t * layout structure than other charts.\r\n\t *\r\n\t * To position legend in [[MapChart]] set legend's `align` (`\"left\"` or\r\n\t * `\"right\"`) and `valign` (`\"top\"` or `\"bottom\"`) properties instead.\r\n\t *\r\n\t * @default \"bottom\"\r\n\t * @param value  Position\r\n\t */\r\n\tpublic set position(value: LegendPosition) {\r\n\t\tif (this.setPropertyValue(\"position\", value)) {\r\n\t\t\tif (value == \"left\" || value == \"right\") {\r\n\t\t\t\tthis.margin(10, 5, 10, 10);\r\n\t\t\t\tthis.valign = \"middle\";\r\n\t\t\t\tthis.contentAlign = \"none\";\r\n\t\t\t\tthis.valueLabels.template.align = \"right\";\r\n\r\n\t\t\t\tif (!$type.isNumber(this.maxColumns)) {\r\n\t\t\t\t\tthis.maxColumns = 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.width = undefined;\r\n\t\t\t\tthis.maxWidth = 220;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.maxColumns = undefined;\r\n\t\t\t\tthis.width = percent(100);\r\n\t\t\t\tthis.valueLabels.template.align = \"left\";\r\n\t\t\t}\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position\r\n\t */\r\n\tpublic get position(): LegendPosition {\r\n\t\treturn this.getPropertyValue(\"position\");\r\n\t}\r\n\r\n\t/**\r\n\t * Should legend try to mirror the look of the related item when building\r\n\t * the marker for legend item?\r\n\t *\r\n\t * If set to `false` it will try to make the marker look like its related\r\n\t * item.\r\n\t *\r\n\t * E.g. if an item is for a Line Series, it will display a line of the\r\n\t * same thickness, color, and will use the same bullets if series have them.\r\n\t *\r\n\t * If set to `true`, all markers will be shown as squares, regardless of te\r\n\t * series type.\r\n\t *\r\n\t * @default false\r\n\t * @param value Use default marker?\r\n\t */\r\n\tpublic set useDefaultMarker(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useDefaultMarker\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use default marker?\r\n\t */\r\n\tpublic get useDefaultMarker(): boolean {\r\n\t\treturn this.getPropertyValue(\"useDefaultMarker\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true` the Legend will display a scrollbar if its contents do\r\n\t * not fit into its `maxHeight`.\r\n\t *\r\n\t * Please note that `maxHeight` is automatically set for Legend when its\r\n\t * `position` is set to `\"left\"` or `\"right\"`.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.8.0\r\n\t * @param  value  Legend Scrollable?\r\n\t */\r\n\tpublic set scrollable(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"scrollable\", value, true)) {\r\n\t\t\tif (value) {\r\n\t\t\t\tlet scrollbar = this.createChild(Scrollbar);\r\n\t\t\t\tthis.scrollbar = scrollbar;\r\n\t\t\t\tscrollbar.isMeasured = false;\r\n\t\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\t\tscrollbar.endGrip.__disabled = true;\r\n\t\t\t\tscrollbar.startGrip.__disabled = true;\r\n\t\t\t\tscrollbar.visible = false;\r\n\t\t\t\tscrollbar.marginLeft = 5;\r\n\r\n\t\t\t\tthis._mouseWheelDisposer = this.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\r\n\t\t\t\tthis._disposers.push(scrollbar.events.on(\"rangechanged\", this.updateMasks, this, false));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t\tif (this.scrollbar) {\r\n\t\t\t\t\t\tthis.scrollbar.dispose();\r\n\t\t\t\t\t\tthis.scrollbar = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handles mouse wheel scrolling of legend.\r\n\t *\r\n\t * @param  event  Event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]): void {\r\n\t\tlet shift = event.shift.y;\r\n\t\tlet scrollbar = this.scrollbar\r\n\t\tif (scrollbar) {\r\n\t\t\tlet ds = (shift / 1000 * this.measuredHeight / this.contentHeight);\r\n\t\t\tlet delta = scrollbar.end - scrollbar.start;\r\n\t\t\tif (shift > 0) {\r\n\t\t\t\tscrollbar.start = $math.max(0, scrollbar.start - ds);\r\n\t\t\t\tscrollbar.end = scrollbar.start + delta;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tscrollbar.end = $math.min(1, scrollbar.end - ds);\r\n\t\t\t\tscrollbar.start = scrollbar.end - delta;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateMasks(): void {\r\n\t\tif (this.scrollbar) {\r\n\t\t\tthis.itemContainers.each((itemContainer) => {\r\n\t\t\t\titemContainer.dy = -this.scrollbar.thumb.pixelY * this.contentHeight / this.measuredHeight;\r\n\t\t\t\titemContainer.maskRectangle = { x: 0, y: -itemContainer.dy, width: this.measuredWidth, height: this.measuredHeight }\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend Scrollable?\r\n\t */\r\n\tpublic get scrollable(): boolean {\r\n\t\treturn this.getPropertyValue(\"scrollable\");\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles a legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item Legend item\r\n\t * @todo Maybe do it with togglable instead\r\n\t */\r\n\tpublic toggleDataItem(item: this[\"_dataItem\"]): void {\r\n\t\tlet dataContext = item.dataContext;\r\n\r\n\t\tif (!dataContext.visible || dataContext.isHiding || (dataContext instanceof Sprite && dataContext.isHidden)) {\r\n\t\t\titem.color = item.colorOrig;\r\n\r\n\t\t\tdataContext.appeared = true;\r\n\t\t\titem.itemContainer.isActive = false;\r\n\r\n\t\t\tif (dataContext.hidden === true) {\r\n\t\t\t\tdataContext.hidden = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (dataContext.show) {\r\n\t\t\t\tdataContext.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataContext.visible = true;\r\n\t\t\t}\r\n\r\n\t\t\tthis.svgContainer.readerAlert(this.language.translate(\"%1 shown\", this.language.locale, item.label.readerTitle));\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\titem.itemContainer.isActive = true;\r\n\t\t\tdataContext.appeared = true;\r\n\r\n\t\t\tif (dataContext.hide) {\r\n\t\t\t\tdataContext.hide();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataContext.visible = false;\r\n\t\t\t}\r\n\r\n\t\t\tthis.svgContainer.readerAlert(this.language.translate(\"%1 hidden\", this.language.locale, item.label.readerTitle));\r\n\t\t\titem.color = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Override preloader method so that legend does not accidentally show its\r\n\t * own preloader.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Always `undefined`\r\n\t */\r\n\tpublic get preloader(): Optional<Preloader> {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemPropertyChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemPropertyChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tdataItem.valueLabel.invalidate();\r\n\t\tdataItem.label.invalidate();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Legend\"] = Legend;\r\n\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Move legend to below the chart if chart is narrow\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Legend && (target.position == \"left\" || target.position == \"right\")) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.position = \"bottom\";\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Move legend to the right if chart is very short\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Legend && (target.position == \"top\" || target.position == \"bottom\")) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.position = \"right\";\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Disable legend altogether on small charts\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.isXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Legend) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}