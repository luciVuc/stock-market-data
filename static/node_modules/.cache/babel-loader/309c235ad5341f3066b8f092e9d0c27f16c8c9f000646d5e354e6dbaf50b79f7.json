{"ast":null,"code":"import * as $array from \"./Array\";\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nexport function fromArray(array) {\n  return function (push) {\n    var length = array.length;\n    for (var i = 0; i < length; ++i) {\n      if (!push(array[i])) {\n        break;\n      }\n    }\n  };\n}\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nexport function length(iter) {\n  var sum = 0;\n  iter(function (_) {\n    ++sum;\n    return true;\n  });\n  return sum;\n}\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nexport function toArray(iter) {\n  var output = [];\n  iter(function (value) {\n    output.push(value);\n    return true;\n  });\n  return output;\n}\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nexport function eachContinue(iter, fn) {\n  iter(fn);\n}\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nexport function each(iter, fn) {\n  iter(function (value) {\n    fn(value);\n    return true;\n  });\n}\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nexport function sort(iter, fn) {\n  return fromArray(toArray(iter).sort(fn));\n}\n/**\r\n * [A description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nexport function map(iter, fn) {\n  return function (push) {\n    return iter(function (value) {\n      return push(fn(value));\n    });\n  };\n}\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nexport function filter(iter, fn) {\n  return function (push) {\n    return iter(function (value) {\n      if (fn(value)) {\n        return push(value);\n      } else {\n        return true;\n      }\n    });\n  };\n}\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nexport function concat() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  return function (push) {\n    var go = true;\n    var push2 = function (value) {\n      return go = push(value);\n    };\n    var length = args.length;\n    for (var i = 0; i < length; ++i) {\n      args[i](push2);\n      if (!go) {\n        break;\n      }\n    }\n  };\n}\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nexport function flatten(iter) {\n  return function (push) {\n    var go = true;\n    var push2 = function (value) {\n      return go = push(value);\n    };\n    iter(function (value) {\n      value(push2);\n      return go;\n    });\n  };\n}\n/**\r\n * [number description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nexport function indexed(iter) {\n  return function (push) {\n    var index = 0;\n    iter(function (value) {\n      return push([index++, value]);\n    });\n  };\n}\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nexport function findIndex(iter, matches) {\n  var found = false;\n  var i = 0;\n  iter(function (value) {\n    if (matches(value)) {\n      found = true;\n      return false;\n    } else {\n      ++i;\n      return true;\n    }\n  });\n  return found ? i : -1;\n}\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nexport function find(iter, matches) {\n  var output;\n  iter(function (value) {\n    if (matches(value)) {\n      output = value;\n      return false;\n    } else {\n      return true;\n    }\n  });\n  return output;\n}\n/**\r\n * [A description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nexport function findMap(iter, matches) {\n  var output;\n  iter(function (value) {\n    var v = matches(value);\n    if (v !== null) {\n      output = v;\n      return false;\n    } else {\n      return true;\n    }\n  });\n  return output;\n}\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nexport function contains(iter, matches) {\n  var output = false;\n  iter(function (value) {\n    if (matches(value)) {\n      output = true;\n      return false;\n    } else {\n      return true;\n    }\n  });\n  return output;\n}\n/**\r\n * [A description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nexport function foldl(iter, init, fn) {\n  iter(function (value) {\n    init = fn(init, value);\n    return true;\n  });\n  return init;\n}\n/**\r\n * [min2 description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param left [description]\r\n * @param right [description]\r\n * @return [description]\r\n */\nfunction min2(left, right) {\n  if (left == null || right < left) {\n    return right;\n  } else {\n    return left;\n  }\n}\n/**\r\n * [min description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Verify that this works correctly\r\n * @todo Description\r\n * @param a [description]\r\n * @return [description]\r\n */\nexport function min(a) {\n  return foldl(a, null, min2);\n}\n/**\r\n * [max2 description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param left [description]\r\n * @param right [description]\r\n * @return [description]\r\n */\nfunction max2(left, right) {\n  if (left == null || right > left) {\n    return right;\n  } else {\n    return left;\n  }\n}\n/**\r\n * [max description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Verify that this works correctly\r\n * @todo Description\r\n * @param a [description]\r\n * @return [description]\r\n */\nexport function max(a) {\n  return foldl(a, null, max2);\n}\n/**\r\n * [join description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param iter [description]\r\n * @param separator [description]\r\n * @return [description]\r\n */\nexport function join(iter, separator) {\n  if (separator === void 0) {\n    separator = \"\";\n  }\n  var first = true;\n  var init = \"\";\n  iter(function (value) {\n    if (first) {\n      first = false;\n    } else {\n      init += separator;\n    }\n    init += value;\n    return true;\n  });\n  return init;\n}\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nvar ListIterator = /** @class */function () {\n  /**\r\n   * Constructor\r\n   *\r\n   * @param list [description]\r\n   * @param create [description]\r\n   */\n  function ListIterator(list, create) {\n    // flag specifies if iterator should create new list item if it is reqested for a nextItem but there is no more left in the list\n    this.createNewItems = false;\n    this.list = list;\n    this._create = create;\n    this.reset();\n  }\n  ListIterator.prototype.reset = function () {\n    this._listCopy = toArray(this.list.iterator());\n  };\n  ListIterator.prototype.clear = function () {\n    this._listCopy.length = 0;\n  };\n  ListIterator.prototype.getFirst = function () {\n    return this.returnItem(0);\n  };\n  ListIterator.prototype.getLast = function () {\n    return this.returnItem(this._listCopy.length - 1);\n  };\n  ListIterator.prototype.find = function (fn) {\n    var index = $array.findIndex(this._listCopy, fn);\n    if (index !== -1) {\n      var item = this._listCopy[index];\n      // TODO use removeIndex instead ?\n      $array.remove(this._listCopy, item);\n      return item;\n    } else {\n      return this.getLast();\n    }\n  };\n  ListIterator.prototype.removeItem = function (item) {\n    return $array.remove(this._listCopy, item);\n  };\n  ListIterator.prototype.returnItem = function (index) {\n    if (index >= 0 && index < this._listCopy.length) {\n      var item = this._listCopy[index];\n      // TODO use removeIndex instead ?\n      $array.remove(this._listCopy, item);\n      return item;\n    } else if (this.createNewItems) {\n      return this._create();\n    }\n  };\n  ListIterator.prototype.iterator = function () {\n    return fromArray(this._listCopy);\n  };\n  return ListIterator;\n}();\nexport { ListIterator };","map":{"version":3,"mappings":"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","names":["$array","fromArray","array","push","length","i","iter","sum","_","toArray","output","value","eachContinue","fn","each","sort","map","filter","concat","_i","args","go","push2","flatten","indexed","index","findIndex","matches","found","find","findMap","v","contains","foldl","init","min2","left","right","min","a","max2","max","join","separator","first","list","create","_create","reset","ListIterator","_listCopy","iterator","returnItem","item","remove","getLast","createNewItems"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\core\\utils\\Iterator.ts"],"sourcesContent":["/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport { IClone } from \"./Clone\";\nimport { Ordering } from \"./Order\";\nimport * as $array from \"./Array\";\nimport * as $type from \"./Type\";\n\n\n/**\n * ============================================================================\n * UTILITY FUNCTIONS\n * ============================================================================\n * @hidden\n */\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport interface Iterator<A> {\n\t(push: (value: A) => boolean): void;\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport interface Iterable<A> {\n\titerator(): Iterator<A>;\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function fromArray<A>(array: Array<A>): Iterator<A> {\n\treturn (push) => {\n\t\tconst length = array.length;\n\n\t\tfor (let i = 0; i < length; ++i) {\n\t\t\tif (!push(array[i])) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function length<A>(iter: Iterator<A>): number {\n\tlet sum = 0;\n\n\titer((_) => {\n\t\t++sum;\n\t\treturn true;\n\t});\n\n\treturn sum;\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function toArray<A>(iter: Iterator<A>): Array<A> {\n\tconst output: Array<A> = [];\n\n\titer((value) => {\n\t\toutput.push(value);\n\t\treturn true;\n\t});\n\n\treturn output;\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function eachContinue<A>(iter: Iterator<A>, fn: (value: A) => boolean): void {\n\titer(fn);\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function each<A>(iter: Iterator<A>, fn: (value: A) => void): void {\n\titer((value) => {\n\t\tfn(value);\n\t\treturn true;\n\t});\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function sort<A>(iter: Iterator<A>, fn: (left: A, right: A) => Ordering): Iterator<A> {\n\treturn fromArray(toArray(iter).sort(fn));\n}\n\n/**\n * [A description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function map<A, B>(iter: Iterator<A>, fn: (value: A) => B): Iterator<B> {\n\treturn (push) => iter((value) => push(fn(value)));\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function filter<A>(iter: Iterator<A>, fn: (value: A) => boolean): Iterator<A> {\n\treturn (push) => iter((value) => {\n\t\tif (fn(value)) {\n\t\t\treturn push(value);\n\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t});\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function concat<A>(...args: Array<Iterator<A>>): Iterator<A> {\n\treturn (push) => {\n\t\tlet go = true;\n\n\t\tconst push2 = (value: A) => (go = push(value));\n\n\t\tconst length = args.length;\n\n\t\tfor (let i = 0; i < length; ++i) {\n\t\t\targs[i](push2);\n\n\t\t\tif (!go) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function flatten<A>(iter: Iterator<Iterator<A>>): Iterator<A> {\n\treturn (push) => {\n\t\tlet go = true;\n\n\t\tconst push2 = (value: A) => (go = push(value));\n\n\t\titer((value) => {\n\t\t\tvalue(push2);\n\t\t\treturn go;\n\t\t});\n\t};\n}\n\n/**\n * [number description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function indexed<A>(iter: Iterator<A>): Iterator<[number, A]> {\n\treturn (push) => {\n\t\tlet index = 0;\n\n\t\titer((value) => push([index++, value]));\n\t};\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function findIndex<A>(iter: Iterator<A>, matches: (value: A) => boolean): number {\n\tlet found = false;\n\tlet i = 0;\n\n\titer((value) => {\n\t\tif (matches(value)) {\n\t\t\tfound = true;\n\t\t\treturn false;\n\n\t\t} else {\n\t\t\t++i;\n\t\t\treturn true;\n\t\t}\n\t});\n\n\treturn (found ? i : -1);\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function find<A>(iter: Iterator<A>, matches: (value: A) => boolean): A | undefined {\n\tlet output;\n\n\titer((value) => {\n\t\tif (matches(value)) {\n\t\t\toutput = value;\n\t\t\treturn false;\n\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t});\n\n\treturn output;\n}\n\n/**\n * [A description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function findMap<A, B>(iter: Iterator<A>, matches: (value: A) => B | null): B | undefined {\n\tlet output;\n\n\titer((value) => {\n\t\tconst v = matches(value);\n\n\t\tif (v !== null) {\n\t\t\toutput = v;\n\t\t\treturn false;\n\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t});\n\n\treturn output;\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function contains<A>(iter: Iterator<A>, matches: (value: A) => boolean): boolean {\n\tlet output = false;\n\n\titer((value) => {\n\t\tif (matches(value)) {\n\t\t\toutput = true;\n\t\t\treturn false;\n\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t});\n\n\treturn output;\n}\n\n/**\n * [A description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function foldl<A, B>(iter: Iterator<A>, init: B, fn: (state: B, value: A) => B): B {\n\titer((value) => {\n\t\tinit = fn(init, value);\n\t\treturn true;\n\t});\n\n\treturn init;\n}\n\n/**\n * [min2 description]\n *\n * @ignore Exclude from docs\n * @todo Description\n * @param left [description]\n * @param right [description]\n * @return [description]\n */\nfunction min2(left: number | null, right: number): number {\n\tif (left == null || right < left) {\n\t\treturn right;\n\n\t} else {\n\t\treturn left;\n\t}\n}\n\n/**\n * [min description]\n *\n * @ignore Exclude from docs\n * @todo Verify that this works correctly\n * @todo Description\n * @param a [description]\n * @return [description]\n */\nexport function min(a: Iterator<number>): number | null {\n\treturn foldl(a, null, min2);\n}\n\n/**\n * [max2 description]\n *\n * @ignore Exclude from docs\n * @todo Description\n * @param left [description]\n * @param right [description]\n * @return [description]\n */\nfunction max2(left: number | null, right: number): number {\n\tif (left == null || right > left) {\n\t\treturn right;\n\n\t} else {\n\t\treturn left;\n\t}\n}\n\n/**\n * [max description]\n *\n * @ignore Exclude from docs\n * @todo Verify that this works correctly\n * @todo Description\n * @param a [description]\n * @return [description]\n */\nexport function max(a: Iterator<number>): number | null {\n\treturn foldl(a, null, max2);\n}\n\n\n/**\n * [join description]\n *\n * @ignore Exclude from docs\n * @todo Description\n * @param iter [description]\n * @param separator [description]\n * @return [description]\n */\nexport function join(iter: Iterator<string>, separator: string = \"\"): string {\n\tlet first = true;\n\tlet init = \"\";\n\n\titer((value) => {\n\t\tif (first) {\n\t\t\tfirst = false;\n\n\t\t} else {\n\t\t\tinit += separator;\n\t\t}\n\n\t\tinit += value;\n\n\t\treturn true;\n\t});\n\n\treturn init;\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport class ListIterator<T extends IClone<T>> {\n\tprivate _listCopy!: Array<T>;\n\tprivate _create: () => T;\n\n\tpublic list: Iterable<T>;\n\n\t// flag specifies if iterator should create new list item if it is reqested for a nextItem but there is no more left in the list\n\tpublic createNewItems: boolean = false;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param list [description]\n\t * @param create [description]\n\t */\n\tconstructor(list: Iterable<T>, create: () => T) {\n\t\tthis.list = list;\n\t\tthis._create = create;\n\t\tthis.reset();\n\t}\n\n\treset() {\n\t\tthis._listCopy = toArray(this.list.iterator());\n\t}\n\n\tclear() {\n\t\tthis._listCopy.length = 0;\n\t}\n\n\tgetFirst(): $type.Optional<T> {\n\t\treturn this.returnItem(0);\n\t}\n\n\tgetLast(): $type.Optional<T> {\n\t\treturn this.returnItem(this._listCopy.length - 1);\n\t}\n\n\tfind(fn: (value: T) => boolean): $type.Optional<T> {\n\t\tlet index: number = $array.findIndex(this._listCopy, fn);\n\n\t\tif (index !== -1) {\n\t\t\tlet item = this._listCopy[index];\n\t\t\t// TODO use removeIndex instead ?\n\t\t\t$array.remove(this._listCopy, item);\n\t\t\treturn item;\n\n\t\t} else {\n\t\t\treturn this.getLast();\n\t\t}\n\t}\n\n\tremoveItem(item: T): boolean {\n\t\treturn $array.remove(this._listCopy, item);\n\t}\n\n\tprotected returnItem(index: number): $type.Optional<T> {\n\t\tif (index >= 0 && index < this._listCopy.length) {\n\t\t\tlet item = this._listCopy[index];\n\t\t\t// TODO use removeIndex instead ?\n\t\t\t$array.remove(this._listCopy, item);\n\t\t\treturn item;\n\n\t\t} else if (this.createNewItems) {\n\t\t\treturn this._create();\n\t\t}\n\t}\n\n\titerator() {\n\t\treturn fromArray(this._listCopy);\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}