{"ast":null,"code":"/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { AxisRenderer } from \"./AxisRenderer\";\nimport { AxisFillCircular } from \"./AxisFillCircular\";\nimport { GridCircular } from \"./GridCircular\";\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\nimport { registry } from \"../../core/Registry\";\nimport { percent, Percent } from \"../../core/utils/Percent\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\nimport { AxisBullet } from \"./AxisBullet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * A renderer for circular axis.\r\n */\nvar AxisRendererCircular = /** @class */function (_super) {\n  __extends(AxisRendererCircular, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Related axis\r\n   */\n  function AxisRendererCircular() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * @ignore\r\n     */\n    _this.pixelRadiusReal = 0;\n    // axis.layout = \"none\"; // does not trigger redraw when size changes\n    _this.layout = \"none\";\n    _this.className = \"AxisRendererCircular\";\n    _this.isMeasured = false;\n    _this.startAngle = -90;\n    _this.endAngle = 270;\n    _this.useChartAngles = true;\n    _this.radius = percent(100);\n    _this.isMeasured = false;\n    _this.grid.template.location = 0;\n    _this.labels.template.location = 0;\n    _this.labels.template.radius = 15;\n    _this.ticks.template.location = 0;\n    _this.ticks.template.pixelPerfect = false;\n    _this.tooltipLocation = 0;\n    _this.line.strokeOpacity = 0;\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n  * @ignore\r\n  */\n  AxisRendererCircular.prototype.setAxis = function (axis) {\n    var _this = this;\n    _super.prototype.setAxis.call(this, axis);\n    axis.isMeasured = false;\n    // modify x and y so that tooltip would always be on circle\n    var tooltip = axis.tooltip;\n    tooltip.adapter.add(\"dx\", function (x, target) {\n      var point = $utils.svgPointToSprite({\n        x: target.pixelX,\n        y: target.pixelY\n      }, _this);\n      return _this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\n    });\n    tooltip.adapter.add(\"dy\", function (y, target) {\n      var point = $utils.svgPointToSprite({\n        x: target.pixelX,\n        y: target.pixelY\n      }, _this);\n      return _this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\n    });\n  };\n  /**\r\n   * Validates Axis renderer.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRendererCircular.prototype.validate = function () {\n    // so that radius would be updated\n    if (this.chart && this.chart.invalid) {\n      this.chart.validate();\n    }\n    _super.prototype.validate.call(this);\n  };\n  Object.defineProperty(AxisRendererCircular.prototype, \"axisLength\", {\n    /**\r\n     * Returns actual length of the Axis, in pixels.\r\n     *\r\n     * @return Length (px)\r\n     */\n    get: function () {\n      return 2 * Math.PI * this.pixelRadius;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"radius\", {\n    /**\r\n     * @return Outer radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n    /**\r\n     * Outer radius of the axis.\r\n     *\r\n     * Can be absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"radius\", value, false, false, 10, false)) {\n        if (this.axis) {\n          this.axis.invalidate();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"pixelRadius\", {\n    /**\r\n     * Outer radius in pixels.\r\n     *\r\n     * @return Outer radius (px)\r\n     */\n    get: function () {\n      return $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"innerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function () {\n      var chart = this.chart;\n      var innerRadius = this.getPropertyValue(\"innerRadius\");\n      if (chart) {\n        if (!$type.hasValue(innerRadius)) {\n          innerRadius = chart.innerRadius;\n          if (innerRadius instanceof Percent && chart) {\n            innerRadius = percent(innerRadius.value * chart.innerRadiusModifyer * 100);\n          }\n        } else {\n          if (innerRadius instanceof Percent && chart) {\n            var mr = chart.mr;\n            var value = innerRadius.value;\n            value = Math.max(mr * value, mr - Math.min(chart.plotContainer.innerHeight, chart.plotContainer.innerWidth)) / mr;\n            innerRadius = percent(value * 100);\n          }\n        }\n        return innerRadius;\n      }\n    },\n    /**\r\n     * Inner radius of the axis.\r\n     *\r\n     * Can be absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Inner radius\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"innerRadius\", value, false, false, 10, false)) {\n        if (this.axis) {\n          this.axis.invalidate();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"useChartAngles\", {\n    /**\r\n     * @return Use chart angles\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"useChartAngles\");\n    },\n    /**\r\n     * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n     * inherit them from relative properties from chart.\r\n     *\r\n     * @default false\r\n     * @param value  Use chart's angles\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"useChartAngles\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"pixelInnerRadius\", {\n    /**\r\n     * Inner radius in pixels.\r\n     *\r\n     * @return Inner radius (px)\r\n     */\n    get: function () {\n      return $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position on axis to point coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @param position2  Position (0-1) Position on the second axis\r\n   * @return Point\r\n   */\n  AxisRendererCircular.prototype.positionToPoint = function (position, position2) {\n    if (!$type.isNumber(position2)) {\n      position2 = 1;\n    }\n    var coordinate = this.positionToCoordinate(position);\n    var angle = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\n    var radius = this.pixelRadius;\n    var innerRadius = this.pixelInnerRadius;\n    if (this.axisRendererY) {\n      var realRadius = $math.fitToRange(this.axisRendererY.positionToCoordinate(position2), 0, Infinity);\n      if (realRadius == 0) {\n        realRadius = 0.000001;\n      }\n      var point = {\n        x: realRadius * $math.cos(angle),\n        y: realRadius * $math.sin(angle)\n      };\n      return point;\n    }\n    return {\n      x: $math.cos(angle) * innerRadius + (radius - innerRadius) * $math.cos(angle) * position2,\n      y: $math.sin(angle) * innerRadius + (radius - innerRadius) * $math.sin(angle) * position2\n    };\n  };\n  /**\r\n   * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Angle (0-360)\r\n   */\n  AxisRendererCircular.prototype.positionToAngle = function (position) {\n    var axis = this.axis;\n    var arc = (this.endAngle - this.startAngle) / (axis.end - axis.start);\n    var angle;\n    if (axis.renderer.inversed) {\n      angle = this.startAngle + (axis.end - position) * arc;\n    } else {\n      angle = this.startAngle + (position - axis.start) * arc;\n    }\n    return $math.round(angle, 3);\n  };\n  /**\r\n   * Converts angle on axis to relative position(0-1).\r\n   *\r\n   * @param angle Angle in degrees\r\n   * @return Position (0-1)\r\n   */\n  AxisRendererCircular.prototype.angleToPosition = function (angle) {\n    var axis = this.axis;\n    var arc = (this.endAngle - this.startAngle) / (axis.end - axis.start);\n    var position;\n    if (axis.renderer.inversed) {\n      position = axis.end - (angle - this.startAngle) / arc;\n    } else {\n      position = (angle - this.startAngle) / arc + axis.start;\n    }\n    return $math.round(position, 5);\n  };\n  /**\r\n   * Updates and positions the axis line element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRendererCircular.prototype.updateAxisLine = function () {\n    var radius = this.pixelRadius;\n    var startAngle = this.startAngle;\n    var endAngle = this.endAngle;\n    var arc = $math.min(360, endAngle - startAngle);\n    this.line.path = $path.moveTo({\n      x: radius * $math.cos(startAngle),\n      y: radius * $math.sin(startAngle)\n    }) + $path.arcTo(startAngle, arc, radius, radius);\n  };\n  /**\r\n   * Updates and positions a grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param grid         Grid element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n  AxisRendererCircular.prototype.updateGridElement = function (grid, position, endPosition) {\n    position = position + (endPosition - position) * grid.location;\n    var point = this.positionToPoint(position);\n    if ($type.isNumber(point.x) && $type.isNumber(point.y) && grid.element) {\n      var angle = $math.DEGREES * Math.atan2(point.y, point.x);\n      var radius = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\n      var gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\n      grid.zIndex = 0;\n      var innerRadius = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadiusReal, true);\n      if (!$type.isNumber(innerRadius)) {\n        innerRadius = 0;\n      }\n      grid.path = $path.moveTo({\n        x: innerRadius * $math.cos(angle),\n        y: innerRadius * $math.sin(angle)\n      }) + $path.lineTo({\n        x: radius * $math.cos(angle),\n        y: radius * $math.sin(angle)\n      });\n    }\n    this.toggleVisibility(grid, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions a tick element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param tick         Tick element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n  AxisRendererCircular.prototype.updateTickElement = function (tick, position, endPosition) {\n    position = position + (endPosition - position) * tick.location;\n    var point = this.positionToPoint(position);\n    if (tick.element) {\n      var radius = this.pixelRadius;\n      var angle = $math.DEGREES * Math.atan2(point.y, point.x);\n      var tickLength = tick.length;\n      if (tick.inside) {\n        tickLength = -tickLength;\n      }\n      tick.zIndex = 1;\n      tick.path = $path.moveTo({\n        x: radius * $math.cos(angle),\n        y: radius * $math.sin(angle)\n      }) + $path.lineTo({\n        x: (radius + tickLength) * $math.cos(angle),\n        y: (radius + tickLength) * $math.sin(angle)\n      });\n    }\n    this.toggleVisibility(tick, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions axis bullet.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param bullet       AxisBullet element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n  AxisRendererCircular.prototype.updateBullet = function (bullet, position, endPosition) {\n    var location = 0.5;\n    if (bullet instanceof AxisBullet) {\n      location = bullet.location;\n    }\n    position = position + (endPosition - position) * location;\n    var point = this.positionToPoint(position);\n    var radius = this.pixelRadius;\n    var angle = $math.DEGREES * Math.atan2(point.y, point.x);\n    point = {\n      x: radius * $math.cos(angle),\n      y: radius * $math.sin(angle)\n    };\n    this.positionItem(bullet, point);\n    this.toggleVisibility(bullet, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions a label element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param label        Label element\r\n   * @param position     Starting position\r\n   * @param endPosition  Ending position\r\n   */\n  AxisRendererCircular.prototype.updateLabelElement = function (label, position, endPosition, location) {\n    if (!$type.hasValue(location)) {\n      location = label.location;\n    }\n    position = position + (endPosition - position) * location;\n    label.fixPosition(this.positionToAngle(position), this.pixelRadius);\n    label.zIndex = 2;\n    this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\n  };\n  /**\r\n   * Checks if point is within bounds of a container.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param point Point coordinates\r\n   * @return Fits?\r\n   */\n  AxisRendererCircular.prototype.fitsToBounds = function (point) {\n    return true;\n  };\n  Object.defineProperty(AxisRendererCircular.prototype, \"startAngle\", {\n    /**\r\n     * @return Start angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startAngle\");\n    },\n    /**\r\n     * Start angle of the axis in degrees (0-360).\r\n     *\r\n     * @param value  Start angle\r\n     */\n    set: function (value) {\n      // do not normalize angel here!\n      if (this.setPropertyValue(\"startAngle\", value)) {\n        this.invalidateAxisItems();\n        if (this.axis) {\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"endAngle\", {\n    /**\r\n     * @return End angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endAngle\");\n    },\n    /**\r\n     * End angle of the axis in degrees (0-360).\r\n     *\r\n     * @param value  End angle\r\n     */\n    set: function (value) {\n      // do not normalize angel here!\n      if (this.setPropertyValue(\"endAngle\", value)) {\n        this.invalidateAxisItems();\n        if (this.axis) {\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * [getPositionRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param startPosition  Starting position\r\n   * @param endPosition    End position\r\n   * @return SVG path\r\n   */\n  AxisRendererCircular.prototype.getPositionRangePath = function (startPosition, endPosition, radius, innerRadius, cornerRadius) {\n    var path = \"\";\n    if ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\n      if (!$type.hasValue(radius)) {\n        radius = this.radius;\n      }\n      startPosition = $math.max(startPosition, this.axis.start);\n      endPosition = $math.min(endPosition, this.axis.end);\n      if (endPosition < startPosition) {\n        endPosition = startPosition;\n      }\n      var pixelRadius = $utils.relativeRadiusToValue(radius, this.pixelRadius);\n      var pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\n      var startAngle = this.positionToAngle(startPosition);\n      var endAngle = this.positionToAngle(endPosition);\n      var arc = endAngle - startAngle;\n      path = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\n    }\n    return path;\n  };\n  /**\r\n   * Returns a new grid element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return Grid element\r\n   */\n  AxisRendererCircular.prototype.createGrid = function () {\n    return new GridCircular();\n  };\n  /**\r\n   * Returns a new fill element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return Fill element\r\n   */\n  AxisRendererCircular.prototype.createFill = function (axis) {\n    return new AxisFillCircular(axis);\n  };\n  /**\r\n   * Returns a new label element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return Label element\r\n   */\n  AxisRendererCircular.prototype.createLabel = function () {\n    return new AxisLabelCircular();\n  };\n  /**\r\n   * Converts a point at specific coordinates to a relative position (0-1)\r\n   * on the axis.\r\n   *\r\n   * @param point  Point\r\n   * @return Position (0-1)\r\n   */\n  AxisRendererCircular.prototype.pointToPosition = function (point) {\n    var angle = $math.fitAngleToRange($math.getAngle(point), this.startAngle, this.endAngle);\n    return this.coordinateToPosition((angle - this.startAngle) / 360 * this.axisLength);\n  };\n  return AxisRendererCircular;\n}(AxisRenderer);\nexport { AxisRendererCircular };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;","map":{"version":3,"mappings":"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","names":["AxisRenderer","AxisFillCircular","GridCircular","AxisLabelCircular","registry","percent","Percent","$math","$path","$utils","$type","AxisBullet","__extends","_super","_this","layout","className","isMeasured","startAngle","endAngle","useChartAngles","radius","grid","template","location","labels","ticks","pixelPerfect","tooltipLocation","line","strokeOpacity","applyTheme","AxisRendererCircular","axis","setAxis","tooltip","adapter","add","x","target","point","svgPointToSprite","pixelX","y","pixelY","pixelRadius","Math","cos","atan2","sin","chart","invalid","validate","Object","PI","getPropertyValue","value","setPercentProperty","invalidate","relativeRadiusToValue","pixelRadiusReal","innerRadius","hasValue","innerRadiusModifyer","mr","max","min","plotContainer","innerHeight","innerWidth","setPropertyValue","position","position2","isNumber","coordinate","positionToCoordinate","angle","axisLength","pixelInnerRadius","axisRendererY","realRadius","fitToRange","Infinity","arc","end","start","renderer","inversed","round","path","moveTo","arcTo","endPosition","positionToPoint","element","DEGREES","gridInnerRadius","zIndex","lineTo","toggleVisibility","tick","tickLength","length","inside","bullet","positionItem","label","fixPosition","positionToAngle","minLabelPosition","maxLabelPosition","invalidateAxisItems","invalidateSeries","startPosition","cornerRadius","fitAngleToRange","getAngle","coordinateToPosition","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\axes\\AxisRendererCircular.ts"],"sourcesContent":["/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { AxisRendererRadial } from \"./AxisRendererRadial\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis in degrees (0-360).\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis in degrees (0-360).\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if axis should use it's own start/end angles or the ones set on chart.\r\n\t */\r\n\tuseChartAngles?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererCircularEvents;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\r\n\t/**\r\n\t * Y axis renderer\r\n\t */\r\n\tpublic axisRendererY: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.useChartAngles = true;\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"innerRadius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\tlet chart = <RadarChart>this.chart;\t\t\r\n\t\tlet innerRadius = this.getPropertyValue(\"innerRadius\");\r\n\t\tif(chart){\r\n\t\t\tif (!$type.hasValue(innerRadius)) {\r\n\t\t\t\tinnerRadius = chart.innerRadius;\r\n\r\n\t\t\t\tif (innerRadius instanceof Percent && chart) {\r\n\t\t\t\t\tinnerRadius = percent(innerRadius.value * chart.innerRadiusModifyer * 100)\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (innerRadius instanceof Percent && chart) {\r\n\t\t\t\t\tlet mr = chart.mr;\r\n\t\t\t\t\tlet value = innerRadius.value;\r\n\t\t\t\t\tvalue = Math.max(mr * value, mr - Math.min(chart.plotContainer.innerHeight, chart.plotContainer.innerWidth)) / mr;\r\n\t\t\t\t\tinnerRadius = percent(value * 100);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn innerRadius;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n\t * inherit them from relative properties from chart.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Use chart's angles\r\n\t */\r\n\tpublic set useChartAngles(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useChartAngles\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use chart angles\r\n\t */\r\n\tpublic get useChartAngles(): boolean {\r\n\t\treturn this.getPropertyValue(\"useChartAngles\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @param position2  Position (0-1) Position on the second axis\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?: number): IPoint {\r\n\r\n\t\tif (!$type.isNumber(position2)) {\r\n\t\t\tposition2 = 1;\r\n\t\t}\r\n\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\tlet radius = this.pixelRadius;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (this.axisRendererY) {\r\n\t\t\tlet realRadius = $math.fitToRange(this.axisRendererY.positionToCoordinate(position2), 0, Infinity)\r\n\r\n\t\t\tif(realRadius == 0){\r\n\t\t\t\trealRadius = 0.000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet point = { x: realRadius * $math.cos(angle), y: realRadius * $math.sin(angle) };\r\n\t\t\treturn point;\r\n\t\t}\r\n\r\n\t\treturn { x: $math.cos(angle) * innerRadius + (radius - innerRadius) * $math.cos(angle) * position2, y: $math.sin(angle) * innerRadius + (radius - innerRadius) * $math.sin(angle) * position2 };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts angle on axis to relative position(0-1).\r\n\t *\r\n\t * @param angle Angle in degrees\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic angleToPosition(angle: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\t\tlet position: number\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tposition = axis.end - (angle - this.startAngle) / arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = (angle - this.startAngle) / arc + axis.start;\r\n\t\t}\r\n\r\n\t\treturn $math.round(position, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = $math.min(360, endAngle - startAngle);\t\t\r\n\t\tthis.line.path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif ($type.isNumber(point.x) && $type.isNumber(point.y) && grid.element) {\r\n\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadiusReal, true);\r\n\r\n\t\t\tif(!$type.isNumber(innerRadius)){\r\n\t\t\t\tinnerRadius = 0;\r\n\t\t\t}\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions axis bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\r\n\t\tpoint = { x: radius * $math.cos(angle), y: radius * $math.sin(angle) }\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlabel.fixPosition(this.positionToAngle(position), this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point Point coordinates\r\n\t * @return Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\tlet angle = $math.fitAngleToRange($math.getAngle(point), this.startAngle, this.endAngle);\r\n\t\treturn this.coordinateToPosition((angle - this.startAngle) / 360 * this.axisLength);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}