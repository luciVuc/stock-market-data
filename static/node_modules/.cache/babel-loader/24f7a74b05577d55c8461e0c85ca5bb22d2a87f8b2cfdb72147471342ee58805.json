{"ast":null,"code":"/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { registry, is } from \"./Registry\";\nimport { Container } from \"./Container\";\nimport { raf } from \"./utils/AsyncPending\";\nimport { triggerIdle } from \"./utils/AsyncPending\";\nimport * as $array from \"./utils/Array\";\nimport * as $object from \"./utils/Object\";\nimport * as $log from \"./utils/Log\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * The main class that handles system-wide tasks, like caching, heartbeats, etc.\r\n * @important\r\n */\nvar System = /** @class */function () {\n  /**\r\n   * Performs initialization of the System object.\r\n   *\r\n   * Called when the first [[Sprite]] object is created.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  function System() {\n    /**\r\n     * A flag indicating if the system is on pause.\r\n     */\n    this._isPaused = false;\n    /**\r\n     * Holds the list of currently playing animations.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    this.animations = [];\n    /**\r\n     * Unique ID of the object.\r\n     */\n    this.uid = registry.getUniqueId();\n    /**\r\n     * @todo Description\r\n     * @todo Needed?\r\n     * @ignore Exclude from docs\r\n     */\n    this.dummyCounter = 0;\n    this._frameRequested = false;\n    this.updateStepDuration = 45;\n    this.time = Date.now();\n  }\n  /**\r\n   * Reports time elapsed since timer was reset.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Needed?\r\n   * @param msg    Message to report in console\r\n   * @param reset  Reset time counter\r\n   */\n  System.prototype.reportTime = function (msg, reset) {\n    if (this.dummyCounter < 6) {\n      //console.log(Date.now() - this.time, msg, this.dummyCounter2);\n    }\n    if (reset) {\n      this.time = Date.now();\n    }\n  };\n  /**\r\n   * Performs \"heartbeat\" operations `frameRate` number of times per second.\r\n   *\r\n   * When the chart element is invalidated, it is not immediately redrawn.\r\n   *\r\n   * Instead it waits for the next `update()` cycle to be re-validated.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Maybe should be private?\r\n   */\n  System.prototype.update = function () {\n    var _this = this;\n    if (this._isPaused) {\n      return;\n    }\n    this._frameRequested = false;\n    var time = Date.now();\n    registry.dispatchImmediately(\"enterframe\");\n    //this.validateLayouts();\n    //this.validatePositions();\n    /*\r\n            for (let key in registry.invalidLayouts) {\r\n                this.validateLayouts(key);\r\n            }\r\n            for (let key in registry.invalidPositions) {\r\n                this.validatePositions(key);\r\n            }\r\n    */\n    var skippedComponents = [];\n    // data objects first - do all calculations\n    // only data is parsed in chunks, thats why we do for loop instead of a while like with other invalid items.\n    // important to go backwards, as items are removed!\n    // TODO use iterator instead\n    for (var key in registry.invalidDatas) {\n      if ($object.hasKey(registry.invalidDatas, key)) {\n        var invalidData = registry.invalidDatas[key];\n        while (invalidData.length > 0) {\n          var component = invalidData[0];\n          var dataProvider = component.dataProvider;\n          if (!component.isDisposed()) {\n            if (dataProvider && dataProvider.dataInvalid) {\n              try {\n                dataProvider.validateData();\n                if (dataProvider.dataValidationProgress < 1) {\n                  break;\n                }\n              } catch (e) {\n                $array.remove(invalidData, dataProvider);\n                dataProvider.raiseCriticalError(e);\n              }\n            } else {\n              try {\n                component.validateData();\n                if (component.dataValidationProgress < 1) {\n                  break;\n                }\n              } catch (e) {\n                $array.remove(invalidData, component);\n                component.raiseCriticalError(e);\n              }\n            }\n          } else {\n            $array.remove(invalidData, component);\n          }\n        }\n        if (Date.now() - time > this.updateStepDuration) {\n          break;\n        }\n      }\n    }\n    while (registry.invalidRawDatas.length > 0) {\n      var component = registry.invalidRawDatas[0];\n      if (!component.isDisposed()) {\n        try {\n          component.validateRawData();\n        } catch (e) {\n          $array.remove(registry.invalidRawDatas, component);\n          component.raiseCriticalError(e);\n        }\n      } else {\n        $array.remove(registry.invalidRawDatas, component);\n      }\n    }\n    // TODO use iterator instead\n    while (registry.invalidDataItems.length > 0) {\n      var component = registry.invalidDataItems[0];\n      var dataProvider = component.dataProvider;\n      // this is needed to avoid partial value validation when data is parsed in chunks\n      if (component.isDisposed() || component.dataInvalid || dataProvider && dataProvider.dataInvalid) {\n        // void\n      } else {\n        try {\n          component.validateDataItems();\n        } catch (e) {\n          $array.remove(registry.invalidDataItems, component);\n          component.raiseCriticalError(e);\n        }\n      }\n      // this might seem too much, as validateValues removes from invalidDataItems aswell, but just to be sure (in case validateData is overriden and no super is called)\n      $array.remove(registry.invalidDataItems, component);\n    }\n    // TODO use iterator instead\n    while (registry.invalidDataRange.length > 0) {\n      var component = registry.invalidDataRange[0];\n      var dataProvider = component.dataProvider;\n      if (component.isDisposed() || component.dataInvalid || dataProvider && dataProvider.dataInvalid) {\n        // void\n      } else {\n        try {\n          component.validateDataRange();\n          if (!component.skipRangeEvent) {\n            component.dispatchImmediately(\"datarangechanged\");\n          }\n          component.skipRangeEvent = false;\n        } catch (e) {\n          $array.remove(registry.invalidDataRange, component);\n          component.raiseCriticalError(e);\n        }\n      }\n      // this might seem too much, as validateDataRange removes from invalidDataRange aswell, but just to be sure (in case validateData is overriden and no super is called)\n      $array.remove(registry.invalidDataRange, component);\n    }\n    var skippedSprites = [];\n    // display objects later\n    // TODO use iterator instead\n    $object.each(registry.invalidLayouts, function (key) {\n      _this.validateLayouts(key);\n    });\n    $object.each(registry.invalidPositions, function (key) {\n      _this.validatePositions(key);\n    });\n    var hasSkipped = false;\n    time = Date.now();\n    $object.each(registry.invalidSprites, function (key, invalidSprites) {\n      var count = 0;\n      while (invalidSprites.length > 0) {\n        _this.validateLayouts(key);\n        _this.validatePositions(key);\n        count++;\n        if (count == 5) {\n          if (Date.now() - time > _this.updateStepDuration) {\n            break;\n          }\n          count = 0;\n        }\n        var sprite = invalidSprites[invalidSprites.length - 1];\n        // we need to check this, as validateLayout might validate sprite\n        if (sprite && !sprite.isDisposed()) {\n          if (!sprite._systemCheckIfValidate()) {\n            // void\n            skippedSprites.push(sprite);\n          } else {\n            if (!_this.checkIfValidate2(sprite)) {\n              // void\n              skippedSprites.push(sprite);\n            } else {\n              try {\n                sprite._systemUpdate(skippedSprites);\n              } catch (e) {\n                sprite.invalid = false;\n                $array.remove(invalidSprites, sprite);\n                sprite.raiseCriticalError(e);\n              }\n            }\n          }\n          // this might seem too much, but it's ok\n          sprite.invalid = false;\n        }\n        $array.remove(invalidSprites, sprite);\n      }\n      registry.invalidSprites[key] = registry.invalidSprites[key].concat(skippedSprites);\n    });\n    $object.each(registry.invalidSprites, function (key, value) {\n      if (value.length > 0) {\n        hasSkipped = true;\n      }\n    });\n    $object.each(registry.invalidDatas, function (key, value) {\n      if (value.length > 0) {\n        hasSkipped = true;\n      }\n    });\n    // TODO make this more efficient\n    // TODO don't copy the array\n    $array.each($array.copy(this.animations), function (x) {\n      x.update();\n    });\n    //if(!hasSkipped){\n    $object.each(registry.invalidLayouts, function (key) {\n      _this.validateLayouts(key);\n    });\n    $object.each(registry.invalidPositions, function (key) {\n      _this.validatePositions(key);\n    });\n    //}\n    triggerIdle();\n    $object.each(registry.invalidLayouts, function (key) {\n      _this.validateLayouts(key);\n    });\n    $object.each(registry.invalidPositions, function (key) {\n      _this.validatePositions(key);\n    });\n    registry.dispatchImmediately(\"exitframe\");\n    if (hasSkipped || this.animations.length > 0 || skippedComponents.length > 0) {\n      this.requestFrame();\n    }\n    if (this.updateStepDuration < 200) {\n      var all0_1 = true;\n      $object.each(registry.invalidDatas, function (key, value) {\n        if (value.length > 0) {\n          all0_1 = false;\n        }\n      });\n      $object.each(registry.invalidSprites, function (key, value) {\n        if (value.length > 0) {\n          all0_1 = false;\n        }\n      });\n      if (all0_1) {\n        this.updateStepDuration = 200;\n      }\n    }\n  };\n  System.prototype.checkIfValidate2 = function (sprite) {\n    if (sprite.dataItem && sprite.dataItem.component && sprite.dataItem.component.dataInvalid && !sprite.dataItem.component.isTemplate) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n  /**\r\n   * Requests new animation frame\r\n   */\n  System.prototype.requestFrame = function () {\n    var _this = this;\n    if (!this._frameRequested) {\n      raf(function () {\n        _this.update();\n      });\n      this._frameRequested = true;\n    }\n  };\n  /**\r\n   * Call this method if you update data or config of a chart that is in\r\n   * hidden container, after revealing the container, so that labels and\r\n   * possibly other elements can correctly arrange themselves.\r\n   *\r\n   * @since 4.7.10\r\n   * @param  container  Target container\r\n   */\n  System.prototype.softInvalidate = function (container) {\n    var _this = this;\n    container.children.each(function (child) {\n      if (child instanceof Container) {\n        _this.softInvalidate(child);\n      }\n      if (child.measureFailed) {\n        if (is(child, \"Label\")) {\n          child.hardInvalidate();\n        } else {\n          child.invalidate();\n        }\n        child.measureFailed = false;\n      }\n    });\n  };\n  /**\r\n   * Triggers position re-validation on all [[Sprite]] elements that have\r\n   * invalid(ated) positions.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Maybe should be private?\r\n   */\n  System.prototype.validatePositions = function (id) {\n    // invalid positions\n    // TODO use iterator instead\n    var invalidPositions = registry.invalidPositions[id];\n    while (invalidPositions.length > 0) {\n      var sprite = invalidPositions[invalidPositions.length - 1];\n      if (!sprite.isDisposed()) {\n        try {\n          sprite._systemValidatePositions();\n        } catch (e) {\n          sprite.positionInvalid = false;\n          $array.remove(invalidPositions, sprite);\n          sprite.raiseCriticalError(e);\n        }\n      } else {\n        $array.remove(invalidPositions, sprite);\n      }\n    }\n  };\n  /**\r\n   * Triggers position re-validation on all [[Container]] elements that have\r\n   * invalid(ated) layouts.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Maybe should be private?\r\n   */\n  System.prototype.validateLayouts = function (id) {\n    // invalid positions\n    // TODO use iterator instead\n    var invalidLayouts = registry.invalidLayouts[id];\n    while (invalidLayouts.length > 0) {\n      var container = invalidLayouts[invalidLayouts.length - 1];\n      if (!container.isDisposed()) {\n        try {\n          container.children.each(function (sprite) {\n            sprite._systemValidateLayouts();\n          });\n          container.validateLayout();\n        } catch (e) {\n          container.layoutInvalid = false;\n          $array.remove(invalidLayouts, container);\n          container.raiseCriticalError(e);\n        }\n      } else {\n        $array.remove(invalidLayouts, container);\n      }\n    }\n  };\n  /**\r\n   * Outputs string to console if `verbose` is `true`.\r\n   *\r\n   * @param value Message to output to console\r\n   */\n  System.prototype.log = function (value) {\n    $log.log(value);\n  };\n  Object.defineProperty(System.prototype, \"isPaused\", {\n    /**\r\n     * @return Is system on pause?\r\n     */\n    get: function () {\n      return this._isPaused;\n    },\n    /**\r\n     * Pauses all the processes of all the amCharts objects on the page\r\n     *\r\n     * @return is paused?\r\n     */\n    set: function (value) {\n      this._isPaused = value;\n      if (!value) {\n        this._frameRequested = false;\n        this.requestFrame();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * amCharts Version.\r\n   *\r\n   * This follows npm's semver specification.\r\n   *\r\n   * @see {@link https://docs.npmjs.com/misc/semver}\r\n   */\n  System.VERSION = \"4.10.32\";\n  return System;\n}();\nexport { System };\n/**\r\n * A singleton global instance of [[System]].\r\n *\r\n * All code should use this, rather than instantiating their\r\n * own System objects.\r\n */\nexport var system = new System();","map":{"version":3,"mappings":"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","names":["registry","is","Container","raf","triggerIdle","$array","$object","$log","getUniqueId","time","Date","now","System","msg","reset","dummyCounter","_isPaused","_frameRequested","dispatchImmediately","skippedComponents","key","invalidDatas","hasKey","invalidData","length","component","dataProvider","isDisposed","dataInvalid","validateData","dataValidationProgress","e","remove","raiseCriticalError","updateStepDuration","invalidRawDatas","validateRawData","invalidDataItems","validateDataItems","invalidDataRange","validateDataRange","skipRangeEvent","skippedSprites","each","invalidLayouts","_this","validateLayouts","invalidPositions","validatePositions","hasSkipped","invalidSprites","count","sprite","_systemCheckIfValidate","push","checkIfValidate2","_systemUpdate","invalid","concat","value","copy","animations","x","update","requestFrame","all0_1","dataItem","isTemplate","container","children","child","softInvalidate","measureFailed","hardInvalidate","invalidate","id","_systemValidatePositions","positionInvalid","_systemValidateLayouts","validateLayout","layoutInvalid","log","Object","system"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\core\\System.ts"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { registry, is } from \"./Registry\";\r\nimport { Sprite } from \"./Sprite\";\r\nimport { Container } from \"./Container\";\r\nimport { Component } from \"./Component\";\r\nimport { Label } from \"./elements/Label\";\r\nimport { raf } from \"./utils/AsyncPending\";\r\nimport { IAnimationObject } from \"./utils/Animation\";\r\nimport { triggerIdle } from \"./utils/AsyncPending\";\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\nimport * as $log from \"./utils/Log\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * The main class that handles system-wide tasks, like caching, heartbeats, etc.\r\n * @important\r\n */\r\nexport class System {\r\n\t/**\r\n\t * A flag indicating if the system is on pause.\r\n\t */\r\n\tprotected _isPaused: boolean = false;\r\n\r\n\t/**\r\n\t * Holds the list of currently playing animations.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic animations: Array<IAnimationObject> = [];\r\n\r\n\t/**\r\n\t * Unique ID of the object.\r\n\t */\r\n\tpublic uid: string = registry.getUniqueId();\r\n\r\n\t/**\r\n\t * amCharts Version.\r\n\t *\r\n\t * This follows npm's semver specification.\r\n\t *\r\n\t * @see {@link https://docs.npmjs.com/misc/semver}\r\n\t */\r\n\tstatic VERSION: string = \"4.10.32\";\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t * @todo Needed?\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic dummyCounter: number = 0;\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic time: number;\r\n\r\n\r\n\tprotected _frameRequested: boolean = false;\r\n\r\n\tpublic updateStepDuration: number = 45;\r\n\r\n\t/**\r\n\t * Performs initialization of the System object.\r\n\t *\r\n\t * Called when the first [[Sprite]] object is created.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic constructor() {\r\n\t\tthis.time = Date.now();\r\n\t}\r\n\r\n\t/**\r\n\t * Reports time elapsed since timer was reset.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Needed?\r\n\t * @param msg    Message to report in console\r\n\t * @param reset  Reset time counter\r\n\t */\r\n\tpublic reportTime(msg: string, reset?: boolean): void {\r\n\t\tif (this.dummyCounter < 6) {\r\n\t\t\t//console.log(Date.now() - this.time, msg, this.dummyCounter2);\r\n\t\t}\r\n\t\tif (reset) {\r\n\t\t\tthis.time = Date.now();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs \"heartbeat\" operations `frameRate` number of times per second.\r\n\t *\r\n\t * When the chart element is invalidated, it is not immediately redrawn.\r\n\t *\r\n\t * Instead it waits for the next `update()` cycle to be re-validated.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Maybe should be private?\r\n\t */\r\n\tpublic update(): void {\r\n\r\n\t\tif (this._isPaused) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._frameRequested = false;\r\n\r\n\t\tlet time = Date.now();\r\n\r\n\t\tregistry.dispatchImmediately(\"enterframe\");\r\n\r\n\t\t//this.validateLayouts();\r\n\t\t//this.validatePositions();\r\n\t\t/*\r\n\t\t\t\tfor (let key in registry.invalidLayouts) {\r\n\t\t\t\t\tthis.validateLayouts(key);\r\n\t\t\t\t}\r\n\t\t\t\tfor (let key in registry.invalidPositions) {\r\n\t\t\t\t\tthis.validatePositions(key);\r\n\t\t\t\t}\r\n\t\t*/\r\n\r\n\t\tlet skippedComponents: Component[] = [];\r\n\r\n\t\t// data objects first - do all calculations\r\n\t\t// only data is parsed in chunks, thats why we do for loop instead of a while like with other invalid items.\r\n\t\t// important to go backwards, as items are removed!\r\n\t\t// TODO use iterator instead\r\n\r\n\t\tfor (let key in registry.invalidDatas) {\r\n\t\t\tif ($object.hasKey(registry.invalidDatas, key)) {\r\n\t\t\t\tlet invalidData = registry.invalidDatas[key];\r\n\r\n\t\t\t\twhile (invalidData.length > 0) {\r\n\t\t\t\t\tlet component: Component = invalidData[0];\r\n\t\t\t\t\tlet dataProvider: $type.Optional<Component> = component.dataProvider;\r\n\r\n\t\t\t\t\tif (!component.isDisposed()) {\r\n\r\n\t\t\t\t\t\tif (dataProvider && dataProvider.dataInvalid) {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tdataProvider.validateData();\r\n\t\t\t\t\t\t\t\tif (dataProvider.dataValidationProgress < 1) {\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch (e) {\r\n\t\t\t\t\t\t\t\t$array.remove(invalidData, dataProvider);\r\n\t\t\t\t\t\t\t\tdataProvider.raiseCriticalError(e);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tcomponent.validateData();\r\n\t\t\t\t\t\t\t\tif (component.dataValidationProgress < 1) {\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch (e) {\r\n\t\t\t\t\t\t\t\t$array.remove(invalidData, component);\r\n\t\t\t\t\t\t\t\tcomponent.raiseCriticalError(e);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t$array.remove(invalidData, component);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (Date.now() - time > this.updateStepDuration) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\twhile (registry.invalidRawDatas.length > 0) {\r\n\t\t\tlet component: Component = registry.invalidRawDatas[0];\r\n\t\t\tif (!component.isDisposed()) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcomponent.validateRawData();\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t$array.remove(registry.invalidRawDatas, component);\r\n\t\t\t\t\tcomponent.raiseCriticalError(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t$array.remove(registry.invalidRawDatas, component);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// TODO use iterator instead\r\n\t\twhile (registry.invalidDataItems.length > 0) {\r\n\t\t\tlet component: Component = registry.invalidDataItems[0];\r\n\r\n\t\t\tlet dataProvider: $type.Optional<Component> = component.dataProvider;\r\n\r\n\t\t\t// this is needed to avoid partial value validation when data is parsed in chunks\r\n\t\t\tif (component.isDisposed() || component.dataInvalid || (dataProvider && dataProvider.dataInvalid)) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcomponent.validateDataItems();\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t$array.remove(registry.invalidDataItems, component);\r\n\t\t\t\t\tcomponent.raiseCriticalError(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// this might seem too much, as validateValues removes from invalidDataItems aswell, but just to be sure (in case validateData is overriden and no super is called)\r\n\t\t\t$array.remove(registry.invalidDataItems, component);\r\n\t\t}\r\n\r\n\t\t// TODO use iterator instead\r\n\t\twhile (registry.invalidDataRange.length > 0) {\r\n\t\t\tlet component: Component = registry.invalidDataRange[0];\r\n\r\n\t\t\tlet dataProvider: $type.Optional<Component> = component.dataProvider;\r\n\r\n\t\t\tif (component.isDisposed() || component.dataInvalid || (dataProvider && dataProvider.dataInvalid)) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcomponent.validateDataRange();\r\n\t\t\t\t\tif (!component.skipRangeEvent) {\r\n\t\t\t\t\t\tcomponent.dispatchImmediately(\"datarangechanged\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcomponent.skipRangeEvent = false;\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t$array.remove(registry.invalidDataRange, component);\r\n\t\t\t\t\tcomponent.raiseCriticalError(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// this might seem too much, as validateDataRange removes from invalidDataRange aswell, but just to be sure (in case validateData is overriden and no super is called)\r\n\t\t\t$array.remove(registry.invalidDataRange, component);\r\n\t\t}\r\n\r\n\t\tlet skippedSprites: Sprite[] = [];\r\n\r\n\t\t// display objects later\r\n\t\t// TODO use iterator instead\r\n\r\n\t\t$object.each(registry.invalidLayouts, (key) => {\r\n\t\t\tthis.validateLayouts(key);\r\n\t\t});\r\n\r\n\t\t$object.each(registry.invalidPositions, (key) => {\r\n\t\t\tthis.validatePositions(key);\r\n\t\t});\r\n\r\n\r\n\t\tlet hasSkipped: boolean = false;\r\n\r\n\t\ttime = Date.now();\r\n\r\n\t\t$object.each(registry.invalidSprites, (key, invalidSprites) => {\r\n\t\t\tlet count = 0;\r\n\r\n\t\t\twhile (invalidSprites.length > 0) {\r\n\t\t\t\tthis.validateLayouts(key);\r\n\t\t\t\tthis.validatePositions(key);\r\n\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif (count == 5) {\r\n\t\t\t\t\tif (Date.now() - time > this.updateStepDuration) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcount = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet sprite: Sprite = invalidSprites[invalidSprites.length - 1];\r\n\r\n\t\t\t\t// we need to check this, as validateLayout might validate sprite\r\n\t\t\t\tif (sprite && !sprite.isDisposed()) {\r\n\t\t\t\t\tif (!sprite._systemCheckIfValidate()) {\r\n\t\t\t\t\t\t// void\r\n\t\t\t\t\t\tskippedSprites.push(sprite);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (!this.checkIfValidate2(sprite)) {\r\n\t\t\t\t\t\t\t// void\r\n\t\t\t\t\t\t\tskippedSprites.push(sprite);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tsprite._systemUpdate(skippedSprites);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch (e) {\r\n\t\t\t\t\t\t\t\tsprite.invalid = false;\r\n\t\t\t\t\t\t\t\t$array.remove(invalidSprites, sprite);\r\n\t\t\t\t\t\t\t\tsprite.raiseCriticalError(e);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// this might seem too much, but it's ok\r\n\t\t\t\t\tsprite.invalid = false;\r\n\t\t\t\t}\r\n\t\t\t\t$array.remove(invalidSprites, sprite);\r\n\t\t\t}\r\n\r\n\t\t\tregistry.invalidSprites[key] = registry.invalidSprites[key].concat(skippedSprites);\r\n\t\t});\r\n\r\n\t\t$object.each(registry.invalidSprites, (key, value) => {\r\n\t\t\tif (value.length > 0) {\r\n\t\t\t\thasSkipped = true;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$object.each(registry.invalidDatas, (key, value) => {\r\n\t\t\tif (value.length > 0) {\r\n\t\t\t\thasSkipped = true;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// TODO make this more efficient\r\n\t\t// TODO don't copy the array\r\n\t\t$array.each($array.copy(this.animations), (x) => {\r\n\t\t\tx.update();\r\n\t\t});\r\n\r\n\t\t//if(!hasSkipped){\r\n\t\t$object.each(registry.invalidLayouts, (key) => {\r\n\t\t\tthis.validateLayouts(key);\r\n\t\t});\r\n\r\n\t\t$object.each(registry.invalidPositions, (key) => {\r\n\t\t\tthis.validatePositions(key);\r\n\t\t});\r\n\t\t//}\r\n\r\n\t\ttriggerIdle();\r\n\r\n\t\t$object.each(registry.invalidLayouts, (key) => {\r\n\t\t\tthis.validateLayouts(key);\r\n\t\t});\r\n\r\n\t\t$object.each(registry.invalidPositions, (key) => {\r\n\t\t\tthis.validatePositions(key);\r\n\t\t});\r\n\r\n\r\n\t\tregistry.dispatchImmediately(\"exitframe\");\r\n\r\n\t\tif (hasSkipped || this.animations.length > 0 || skippedComponents.length > 0) {\r\n\t\t\tthis.requestFrame();\r\n\t\t}\r\n\r\n\t\tif (this.updateStepDuration < 200) {\r\n\t\t\tlet all0 = true;\r\n\r\n\t\t\t$object.each(registry.invalidDatas, (key, value) => {\r\n\t\t\t\tif (value.length > 0) {\r\n\t\t\t\t\tall0 = false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t$object.each(registry.invalidSprites, (key, value) => {\r\n\t\t\t\tif (value.length > 0) {\r\n\t\t\t\t\tall0 = false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (all0) {\r\n\t\t\t\tthis.updateStepDuration = 200;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic checkIfValidate2(sprite: Sprite): boolean {\r\n\t\tif (sprite.dataItem && sprite.dataItem.component && sprite.dataItem.component.dataInvalid && !sprite.dataItem.component.isTemplate) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Requests new animation frame\r\n\t */\r\n\tpublic requestFrame() {\r\n\t\tif (!this._frameRequested) {\r\n\r\n\t\t\traf(() => {\r\n\t\t\t\tthis.update();\r\n\t\t\t});\r\n\t\t\tthis._frameRequested = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Call this method if you update data or config of a chart that is in\r\n\t * hidden container, after revealing the container, so that labels and\r\n\t * possibly other elements can correctly arrange themselves.\r\n\t *\r\n\t * @since 4.7.10\r\n\t * @param  container  Target container\r\n\t */\r\n\tpublic softInvalidate(container: Container) {\r\n\t\tcontainer.children.each((child) => {\r\n\t\t\tif (child instanceof Container) {\r\n\t\t\t\tthis.softInvalidate(child);\r\n\t\t\t}\r\n\t\t\tif (child.measureFailed) {\r\n\t\t\t\tif (is<Label>(child, \"Label\")) {\r\n\t\t\t\t\tchild.hardInvalidate();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tchild.invalidate();\r\n\t\t\t\t}\r\n\t\t\t\tchild.measureFailed = false;\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers position re-validation on all [[Sprite]] elements that have\r\n\t * invalid(ated) positions.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Maybe should be private?\r\n\t */\r\n\tpublic validatePositions(id: string): void {\r\n\t\t// invalid positions\r\n\t\t// TODO use iterator instead\r\n\t\tlet invalidPositions = registry.invalidPositions[id];\r\n\r\n\t\twhile (invalidPositions.length > 0) {\r\n\t\t\tlet sprite: Sprite = invalidPositions[invalidPositions.length - 1];\r\n\t\t\tif (!sprite.isDisposed()) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tsprite._systemValidatePositions();\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\tsprite.positionInvalid = false;\r\n\t\t\t\t\t$array.remove(invalidPositions, sprite);\r\n\t\t\t\t\tsprite.raiseCriticalError(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t$array.remove(invalidPositions, sprite);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers position re-validation on all [[Container]] elements that have\r\n\t * invalid(ated) layouts.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Maybe should be private?\r\n\t */\r\n\tpublic validateLayouts(id: string): void {\r\n\t\t// invalid positions\r\n\t\t// TODO use iterator instead\r\n\t\tlet invalidLayouts = registry.invalidLayouts[id];\r\n\t\twhile (invalidLayouts.length > 0) {\r\n\t\t\tlet container: Container = invalidLayouts[invalidLayouts.length - 1];\r\n\t\t\tif (!container.isDisposed()) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcontainer.children.each((sprite) => {\r\n\t\t\t\t\t\tsprite._systemValidateLayouts();\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tcontainer.validateLayout();\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\tcontainer.layoutInvalid = false;\r\n\t\t\t\t\t$array.remove(invalidLayouts, container);\r\n\t\t\t\t\tcontainer.raiseCriticalError(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t$array.remove(invalidLayouts, container);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Outputs string to console if `verbose` is `true`.\r\n\t *\r\n\t * @param value Message to output to console\r\n\t */\r\n\tpublic log(value: any): void {\r\n\t\t$log.log(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Pauses all the processes of all the amCharts objects on the page\r\n\t *\r\n\t * @return is paused?\r\n\t */\r\n\tpublic set isPaused(value: boolean) {\r\n\t\tthis._isPaused = value;\r\n\t\tif (!value) {\r\n\t\t\tthis._frameRequested = false;\r\n\t\t\tthis.requestFrame();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Is system on pause?\r\n\t */\r\n\tpublic get isPaused(): boolean {\r\n\t\treturn this._isPaused;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * A singleton global instance of [[System]].\r\n *\r\n * All code should use this, rather than instantiating their\r\n * own System objects.\r\n */\r\nexport const system: System = new System();\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}