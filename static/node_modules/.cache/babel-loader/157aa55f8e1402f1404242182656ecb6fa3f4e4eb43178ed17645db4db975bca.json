{"ast":null,"code":"/**\r\n * Contains code and logic for generating radial gradients.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { BaseObject } from \"../../Base\";\nimport { List } from \"../../utils/List\";\nimport { getGhostPaper } from \"../Paper\";\nimport { registry } from \"../../Registry\";\nimport * as $iter from \"../../utils/Iterator\";\nimport * as $type from \"../../utils/Type\";\nimport { Percent } from \"../../utils/Percent\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Radial gradient class.\r\n */\nvar RadialGradient = /** @class */function (_super) {\n  __extends(RadialGradient, _super);\n  /**\r\n   * Constructor\r\n   */\n  function RadialGradient() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * List of colors switch definitions in a gradient.\r\n     */\n    _this._stops = new List();\n    _this.element = _this.paper.addGroup(\"radialGradient\");\n    _this.id = \"gradient-\" + registry.getUniqueId();\n    _this.element.attr({\n      \"id\": _this.id\n    });\n    _this._disposers.push(_this.element);\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Draws gradient.\r\n   */\n  RadialGradient.prototype.draw = function () {\n    var _this = this;\n    var gradientElement = this.element;\n    if ($type.isNumber(this.cx)) {\n      var value = this.cx;\n      if (value instanceof Percent) {\n        value = value.percent + \"%\";\n      }\n      gradientElement.attr({\n        \"cx\": value\n      });\n    }\n    if ($type.isNumber(this.cy)) {\n      var value = this.cy;\n      if (value instanceof Percent) {\n        value = value.percent + \"%\";\n      }\n      gradientElement.attr({\n        \"cy\": value\n      });\n    }\n    if (this.fx) {\n      var value = this.fx;\n      if (value instanceof Percent) {\n        value = value.percent + \"%\";\n      }\n      gradientElement.attr({\n        \"fx\": value\n      });\n    }\n    if (this.fy) {\n      var value = this.fy;\n      if (value instanceof Percent) {\n        value = value.percent + \"%\";\n      }\n      gradientElement.attr({\n        \"fy\": value\n      });\n    }\n    gradientElement.removeChildNodes();\n    $iter.each($iter.indexed(this._stops.iterator()), function (a) {\n      var i = a[0];\n      var stop = a[1];\n      var offset = stop.offset;\n      if (!$type.isNumber(offset)) {\n        offset = i / (_this._stops.length - 1);\n      }\n      var gradientStop = _this.paper.add(\"stop\");\n      if ($type.hasValue(stop.color)) {\n        gradientStop.attr({\n          \"stop-color\": stop.color.toString()\n        });\n      }\n      if ($type.isNumber(stop.opacity)) {\n        gradientStop.attr({\n          \"stop-opacity\": stop.opacity\n        });\n      }\n      if ($type.isNumber(offset)) {\n        gradientStop.attr({\n          \"offset\": offset\n        });\n      }\n      gradientElement.add(gradientStop);\n    });\n  };\n  /**\r\n   * Adds a color step to the gradient.\r\n   *\r\n   * @param color    Color (hex code or named color)\r\n   * @param opacity  Opacity (value from 0 to 1; 0 completely transaprent, 1 fully opaque)\r\n   * @param offset   Position of color in the gradient (value 0 to 1; 0 meaning start of the gradient and 1 end)\r\n   */\n  RadialGradient.prototype.addColor = function (color, opacity, offset) {\n    this._stops.push({\n      color: color,\n      opacity: opacity,\n      offset: offset\n    });\n    this.draw();\n  };\n  Object.defineProperty(RadialGradient.prototype, \"paper\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Paper\r\n     */\n    get: function () {\n      if (this._paper) {\n        return this._paper;\n      }\n      return getGhostPaper();\n    },\n    /**\r\n     * A [[Paper]] instace to use for the gradient.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param paper  Paper\r\n     */\n    set: function (paper) {\n      if (this._paper != paper) {\n        this._paper = paper;\n        this.draw();\n        paper.appendDef(this.element);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadialGradient.prototype, \"cx\", {\n    get: function () {\n      return this._cx;\n    },\n    /**\r\n     * Center x coordinate of the gradient, can be set as number or Percent\r\n     *\r\n     * @param point  Center point\r\n     */\n    set: function (value) {\n      this._cx = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadialGradient.prototype, \"cy\", {\n    get: function () {\n      return this._cy;\n    },\n    /**\r\n     * Center y coordinate of the gradient, can be set as number or Percent\r\n     *\r\n     * @param point  Center point\r\n     */\n    set: function (value) {\n      this._cy = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadialGradient.prototype, \"fx\", {\n    get: function () {\n      return this._fx;\n    },\n    /**\r\n     * y coordinate of the focal point of a gradient, can be set in pixels or as Percent\r\n     *\r\n     * @param point  Center point\r\n     */\n    set: function (value) {\n      this._fx = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadialGradient.prototype, \"fy\", {\n    get: function () {\n      return this._fy;\n    },\n    /**\r\n     * y coordinate of the focal point of a gradient, can be set in pixels or as Percent\r\n     *\r\n     * @param point  Center point\r\n     */\n    set: function (value) {\n      this._fy = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  RadialGradient.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    this.stops.copyFrom(source.stops);\n    this.cx = source.cx;\n    this.cy = source.cy;\n    this.fx = source.fx;\n    this.fy = source.fy;\n  };\n  Object.defineProperty(RadialGradient.prototype, \"stops\", {\n    /**\r\n     * A list of color stops in the gradient.\r\n     *\r\n     * @return Stops\r\n     */\n    get: function () {\n      return this._stops;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Clears the gradient.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  RadialGradient.prototype.clear = function () {\n    this._stops.clear();\n  };\n  return RadialGradient;\n}(BaseObject);\nexport { RadialGradient };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"RadialGradient\"] = RadialGradient;","map":{"version":3,"mappings":"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","names":["BaseObject","List","getGhostPaper","registry","$iter","$type","Percent","__extends","_super","_this","element","paper","addGroup","id","getUniqueId","attr","_disposers","push","applyTheme","RadialGradient","gradientElement","isNumber","cx","value","percent","cy","fx","fy","removeChildNodes","each","indexed","_stops","iterator","a","i","stop","offset","length","gradientStop","add","hasValue","color","toString","opacity","draw","Object","_paper","appendDef","_cx","_cy","_fx","_fy","source","copyFrom","stops","clear","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\core\\rendering\\fills\\RadialGradient.ts"],"sourcesContent":["/**\r\n * Contains code and logic for generating radial gradients.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../../Base\";\r\nimport { List } from \"../../utils/List\";\r\nimport { Group } from \"../Group\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { Paper, getGhostPaper } from \"../Paper\";\r\nimport { registry } from \"../../Registry\";\r\nimport { IGradientStop } from \"./LinearGradient\";\r\nimport { Color } from \"../../utils/Color\";\r\nimport * as $iter from \"../../utils/Iterator\";\r\nimport * as $type from \"../../utils/Type\";\r\nimport { Percent } from \"../../utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Radial gradient class.\r\n */\r\nexport class RadialGradient extends BaseObject {\r\n\r\n\t/**\r\n\t * List of colors switch definitions in a gradient.\r\n\t */\r\n\tprotected _stops: List<IGradientStop> = new List<IGradientStop>();\r\n\r\n\t/**\r\n\t * An SVG `<group>` element used to draw gradient.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic element: Group;\r\n\r\n\t/**\r\n\t * Reference to Paper to add element to.\r\n\t */\r\n\tprotected _paper: $type.Optional<Paper>;\r\n\r\n\t/**\r\n\t * A center x coordinate for the radial gradient, can be set in pixels or as Percent\r\n\t */\r\n\tprotected _cx: $type.Optional<number | Percent>;\r\n\r\n\t/**\r\n\t * A center y coordinate for the radial gradient, can be set in pixels or as Percent\r\n\t */\r\n\tprotected _cy: $type.Optional<number | Percent>;\r\n\r\n\t/**\r\n\t * A y coordinate of the focal point of a gradient, can be set in pixels or as Percent\r\n\t */\r\n\tprotected _fx: $type.Optional<number | Percent>;\r\n\r\n\t/**\r\n\t * A y coordinate of the focal point of a gradient, can be set in pixels or as Percent\r\n\t */\r\n\tprotected _fy: $type.Optional<number | Percent>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.element = this.paper.addGroup(\"radialGradient\");\r\n\t\tthis.id = \"gradient-\" + registry.getUniqueId();\r\n\t\tthis.element.attr({ \"id\": this.id });\r\n\t\tthis._disposers.push(this.element);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws gradient.\r\n\t */\r\n\tprotected draw(): void {\r\n\r\n\t\tlet gradientElement = this.element;\r\n\r\n\t\tif ($type.isNumber(this.cx)) {\r\n\t\t\tlet value:any = this.cx;\r\n\t\t\tif(value instanceof Percent){\r\n\t\t\t\tvalue = value.percent + \"%\";\r\n\t\t\t}\r\n\t\t\tgradientElement.attr({ \"cx\": value });\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(this.cy)) {\r\n\t\t\tlet value:any = this.cy;\r\n\t\t\tif(value instanceof Percent){\r\n\t\t\t\tvalue = value.percent + \"%\";\r\n\t\t\t}\r\n\t\t\tgradientElement.attr({ \"cy\": value });\r\n\t\t}\r\n\r\n\t\tif (this.fx) {\r\n\t\t\tlet value:any = this.fx;\r\n\t\t\tif(value instanceof Percent){\r\n\t\t\t\tvalue = value.percent + \"%\";\r\n\t\t\t}\r\n\t\t\tgradientElement.attr({ \"fx\": value});\r\n\t\t}\r\n\r\n\t\tif (this.fy) {\r\n\t\t\tlet value:any = this.fy;\r\n\t\t\tif(value instanceof Percent){\r\n\t\t\t\tvalue = value.percent + \"%\";\r\n\t\t\t}\r\n\t\t\tgradientElement.attr({ \"fy\": value});\r\n\t\t}\r\n\r\n\t\tgradientElement.removeChildNodes();\r\n\r\n\t\t$iter.each($iter.indexed(this._stops.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet stop = a[1];\r\n\t\t\tlet offset: $type.Optional<number> = stop.offset;\r\n\r\n\t\t\tif (!$type.isNumber(offset)) {\r\n\t\t\t\toffset = i / (this._stops.length - 1)\r\n\t\t\t}\r\n\r\n\t\t\tlet gradientStop: AMElement = this.paper.add(\"stop\");\r\n\t\t\tif ($type.hasValue(stop.color)) {\r\n\t\t\t\tgradientStop.attr({ \"stop-color\": stop.color.toString() });\r\n\t\t\t}\r\n\t\t\tif ($type.isNumber(stop.opacity)) {\r\n\t\t\t\tgradientStop.attr({ \"stop-opacity\": stop.opacity });\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(offset)) {\r\n\t\t\t\tgradientStop.attr({ \"offset\": offset });\r\n\t\t\t}\r\n\r\n\t\t\tgradientElement.add(gradientStop);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a color step to the gradient.\r\n\t *\r\n\t * @param color    Color (hex code or named color)\r\n\t * @param opacity  Opacity (value from 0 to 1; 0 completely transaprent, 1 fully opaque)\r\n\t * @param offset   Position of color in the gradient (value 0 to 1; 0 meaning start of the gradient and 1 end)\r\n\t */\r\n\tpublic addColor(color: Color, opacity?: number, offset?: number): void {\r\n\t\tthis._stops.push({ color: color, opacity: opacity, offset: offset });\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Paper]] instace to use for the gradient.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param paper  Paper\r\n\t */\r\n\tpublic set paper(paper: Paper) {\r\n\t\tif (this._paper != paper) {\r\n\t\t\tthis._paper = paper;\r\n\t\t\tthis.draw();\r\n\t\t\tpaper.appendDef(this.element);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Paper\r\n\t */\r\n\tpublic get paper(): Paper {\r\n\t\tif (this._paper) {\r\n\t\t\treturn this._paper;\r\n\t\t}\r\n\t\treturn getGhostPaper();\r\n\t}\r\n\r\n\t/**\r\n\t * Center x coordinate of the gradient, can be set as number or Percent\r\n\t *\r\n\t * @param point  Center point\r\n\t */\r\n\tpublic set cx(value: $type.Optional<number | Percent>) {\r\n\t\tthis._cx = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\tpublic get cx(): $type.Optional<number | Percent> {\r\n\t\treturn this._cx;\r\n\t}\r\n\r\n\t/**\r\n\t * Center y coordinate of the gradient, can be set as number or Percent\r\n\t *\r\n\t * @param point  Center point\r\n\t */\r\n\tpublic set cy(value: $type.Optional<number | Percent>) {\r\n\t\tthis._cy = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\tpublic get cy(): $type.Optional<number | Percent> {\r\n\t\treturn this._cy;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * y coordinate of the focal point of a gradient, can be set in pixels or as Percent\r\n\t *\r\n\t * @param point  Center point\r\n\t */\r\n\tpublic set fx(value: $type.Optional<number | Percent>) {\r\n\t\tthis._fx = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\tpublic get fx(): $type.Optional<number | Percent> {\r\n\t\treturn this._fx;\r\n\t}\r\n\r\n\t/**\r\n\t * y coordinate of the focal point of a gradient, can be set in pixels or as Percent\r\n\t *\r\n\t * @param point  Center point\r\n\t */\r\n\tpublic set fy(value: $type.Optional<number | Percent>) {\r\n\t\tthis._fy = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\tpublic get fy(): $type.Optional<number | Percent> {\r\n\t\treturn this._fy;\r\n\t}\r\n\r\n\r\n\r\n\tpublic copyFrom(source:this){\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tthis.stops.copyFrom(source.stops);\r\n\r\n\t\tthis.cx = source.cx;\r\n\t\tthis.cy = source.cy;\r\n\r\n\t\tthis.fx = source.fx;\r\n\t\tthis.fy = source.fy;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of color stops in the gradient.\r\n\t *\r\n\t * @return Stops\r\n\t */\r\n\tpublic get stops(): List<IGradientStop> {\r\n\t\treturn this._stops;\r\n\t}\r\n\r\n\t/**\r\n\t * Clears the gradient.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic clear(): void {\r\n\t\tthis._stops.clear();\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadialGradient\"] = RadialGradient;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}