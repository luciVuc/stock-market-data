{"ast":null,"code":"/**\r\n * Functionality for drawing simple ClockHands\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../../core/Container\";\nimport { Circle } from \"../../core/elements/Circle\";\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\nvar ClockHand = /** @class */function (_super) {\n  __extends(ClockHand, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ClockHand() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * An Axis hand is related to.\r\n     */\n    _this._axis = new MutableValueDisposer();\n    _this.className = \"ClockHand\";\n    var interfaceColors = new InterfaceColorSet();\n    _this.fill = interfaceColors.getFor(\"alternativeBackground\");\n    _this.stroke = _this.fill;\n    var pin = new Circle();\n    pin.radius = 5;\n    _this.pin = pin;\n    _this.isMeasured = false;\n    _this.startWidth = 5;\n    _this.endWidth = 1;\n    _this.width = percent(100);\n    _this.height = percent(100);\n    _this.radius = percent(100);\n    _this.innerRadius = percent(0);\n    var hand = new Trapezoid();\n    _this.hand = hand;\n    _this._disposers.push(_this._axis);\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Re(validates) the clock hand, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  ClockHand.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n    var hand = this.hand;\n    hand.width = this.pixelWidth;\n    var h = Math.max(this.startWidth, this.endWidth);\n    hand.height = h;\n    hand.leftSide = percent(this.startWidth / h * 100);\n    hand.rightSide = percent(this.endWidth / h * 100);\n    if (this.axis) {\n      var renderer = this.axis.renderer;\n      var x0 = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\n      var x1 = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\n      hand.x = x0;\n      hand.y = -h / 2;\n      hand.width = x1 - x0;\n    }\n  };\n  Object.defineProperty(ClockHand.prototype, \"pin\", {\n    /**\r\n     * @return Pin element\r\n     */\n    get: function () {\n      return this._pin;\n    },\n    /**\r\n     * A circle element used as hand's base. (pin)\r\n     *\r\n     * @param pin  Pin element\r\n     */\n    set: function (pin) {\n      if (this._pin) {\n        this.removeDispose(this._pin);\n      }\n      if (pin) {\n        this._pin = pin;\n        pin.parent = this;\n        this._disposers.push(pin);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"hand\", {\n    /**\r\n     * @return Hand element\r\n     */\n    get: function () {\n      return this._hand;\n    },\n    /**\r\n     * A trapezoid shape used for hand itself.\r\n     *\r\n     * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n     * `endWidth` properties.\r\n     *\r\n     * Set `endWidth` to 1 (px) to make it pointy.\r\n     *\r\n     * @param hand  Hand element\r\n     */\n    set: function (hand) {\n      if (this._hand) {\n        this.removeDispose(this._hand);\n      }\n      if (hand) {\n        this._hand = hand;\n        hand.parent = this;\n        this._disposers.push(hand);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"radius\", {\n    /**\r\n     * @return Radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n    /**\r\n     * Radius of the hand's outer end. (tip)\r\n     *\r\n     * Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @default Percent(0)\r\n     * @param value  Radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"innerRadius\", {\n    /**\r\n     * @return Radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n    /**\r\n     * Radius of the hand's inner end. (base)\r\n     *\r\n     * Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @default Percent(0)\r\n     * @param value  Radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"startWidth\", {\n    /**\r\n     * @return Width (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startWidth\");\n    },\n    /**\r\n     * Width, in pixels, of the clock hand's inner end. (base)\r\n     *\r\n     * @default 5\r\n     * @param value  Width (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startWidth\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"endWidth\", {\n    /**\r\n     * @return Width (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endWidth\");\n    },\n    /**\r\n     * Width, in pixels, of the clock hand's outer end. (tip)\r\n     *\r\n     * @default 1\r\n     * @param value  Width (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endWidth\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"rotationDirection\", {\n    /**\r\n     * @return rotationDirection\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"rotationDirection\");\n    },\n    /**\r\n     * Rotation direction\r\n     *\r\n     * @default any\r\n     * @param value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"rotationDirection\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Moves clock hand to particular value.\r\n   *\r\n   * If `duration` is set to a number in milliseconds, the hand will move\r\n   * to the new position gracefully, rather than jumping rigth to it.\r\n   *\r\n   * Alternatively, you can also set `value` directly.\r\n   *\r\n   * @param value     New value\r\n   * @param duration  Animation duration (ms)\r\n   * @param easing  Animation easing function\r\n   */\n  ClockHand.prototype.showValue = function (value, duration, easing) {\n    this._value = value;\n    if (value != undefined) {\n      if (!$type.isNumber(duration)) {\n        duration = 0;\n      }\n      if (this.axis) {\n        var renderer = this.axis.renderer;\n        var newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\n        var currentAngle = this.rotation;\n        if (this.rotationDirection == \"clockWise\") {\n          if (newAngle < currentAngle) {\n            this.rotation = currentAngle - 360;\n          }\n        }\n        if (this.rotationDirection == \"counterClockWise\") {\n          if (newAngle > currentAngle) {\n            this.rotation = currentAngle + 360;\n          }\n        }\n        this.animate({\n          property: \"rotation\",\n          to: newAngle\n        }, duration, easing);\n      }\n    }\n  };\n  Object.defineProperty(ClockHand.prototype, \"currentPosition\", {\n    /**\r\n     * Returns hand's relative position on axis\r\n     */\n    get: function () {\n      if (this.axis) {\n        var renderer = this.axis.renderer;\n        return renderer.angleToPosition(this.rotation);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this._value;\n    },\n    /**\r\n     * A current value clock hand is pointing to.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.showValue(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"axis\", {\n    /**\r\n     * @return Axis\r\n     */\n    get: function () {\n      return this._axis.get();\n    },\n    /**\r\n     * An Axis clock hand is associated with.\r\n     *\r\n     * Hand's `value` relates to values on the Axis.\r\n     *\r\n     * @param axis  Axis\r\n     */\n    set: function (axis) {\n      if (this.axis != axis) {\n        this._axis.set(axis, new MultiDisposer([axis.events.on(\"datavalidated\", this.updateValue, this, false), axis.events.on(\"datarangechanged\", this.updateValue, this, false), axis.events.on(\"dataitemsvalidated\", this.updateValue, this, false), axis.events.on(\"propertychanged\", this.invalidate, this, false)]));\n      }\n      if (axis) {\n        var chart = axis.chart;\n        if (chart) {\n          this.rotation = chart.startAngle;\n        }\n      }\n      this.parent = axis.renderer;\n      this.zIndex = 5;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Triggers `value` accessor, so that Hand animates to new position, in case\r\n   * value has changed.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  ClockHand.prototype.updateValue = function () {\n    this.value = this.value;\n  };\n  /**\r\n  * Processes JSON-based config before it is applied to the object.\r\n  *\r\n  * @ignore Exclude from docs\r\n  * @param config  Config\r\n  */\n  ClockHand.prototype.processConfig = function (config) {\n    if (config) {\n      // Connect clock hands with axes\n      if ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\n        config.axis = this.map.getKey(config.axis);\n      }\n    }\n    _super.prototype.processConfig.call(this, config);\n  };\n  return ClockHand;\n}(Container);\nexport { ClockHand };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;","map":{"version":3,"mappings":"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","names":["Container","Circle","Trapezoid","MutableValueDisposer","MultiDisposer","percent","registry","InterfaceColorSet","$utils","$type","__extends","_super","_this","className","interfaceColors","fill","getFor","stroke","pin","radius","isMeasured","startWidth","endWidth","width","height","innerRadius","hand","_disposers","push","_axis","applyTheme","ClockHand","validate","pixelWidth","h","Math","max","leftSide","rightSide","axis","renderer","x0","relativeRadiusToValue","pixelRadius","x1","x","y","Object","_pin","removeDispose","parent","_hand","getPropertyValue","value","setPercentProperty","setPropertyValue","duration","easing","_value","undefined","isNumber","newAngle","positionToAngle","anyToPosition","currentAngle","rotation","rotationDirection","animate","property","to","angleToPosition","showValue","get","set","events","on","updateValue","invalidate","chart","startAngle","zIndex","config","hasValue","isString","map","hasKey","getKey","processConfig","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\elements\\ClockHand.ts"],"sourcesContent":["/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"counterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IClockHandEvents;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t *\r\n\t * @param pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t *\r\n\t * @param hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t *\r\n\t * @param value     New value\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns hand's relative position on axis\r\n\t */\r\n\tpublic get currentPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\treturn renderer.angleToPosition(this.rotation);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"dataitemsvalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"propertychanged\", this.invalidate, this, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}