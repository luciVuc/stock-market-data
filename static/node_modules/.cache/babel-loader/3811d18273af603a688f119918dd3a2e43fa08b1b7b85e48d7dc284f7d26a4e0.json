{"ast":null,"code":"/**\r\n * XY Chart module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { SerialChart, SerialChartDataItem } from \"./SerialChart\";\nimport { Container } from \"../../core/Container\";\nimport { List, ListDisposer } from \"../../core/utils/List\";\nimport { Color } from \"../../core/utils/Color\";\nimport { ValueAxis } from \"../axes/ValueAxis\";\nimport { DateAxis } from \"../axes/DateAxis\";\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\nimport { XYSeries } from \"../series/XYSeries\";\nimport { Disposer } from \"../../core/utils/Disposer\";\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $number from \"../../core/utils/Number\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar XYChartDataItem = /** @class */function (_super) {\n  __extends(XYChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function XYChartDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"XYChartDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return XYChartDataItem;\n}(SerialChartDataItem);\nexport { XYChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\nvar XYChart = /** @class */function (_super) {\n  __extends(XYChart, _super);\n  /**\r\n   * Constructor\r\n   */\n  function XYChart() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * Defines the type of horizontal axis rederer.\r\n     */\n    _this._axisRendererX = AxisRendererX;\n    /**\r\n     * Defines the type of vertical axis rederer.\r\n     */\n    _this._axisRendererY = AxisRendererY;\n    /**\r\n     * @ignore\r\n     */\n    _this._seriesPoints = [];\n    _this.className = \"XYChart\";\n    // Set defaults\n    //this.margin(10, 10, 10, 10);\n    _this.maskBullets = true;\n    _this.arrangeTooltips = true;\n    // Create main chart container\n    var chartContainer = _this.chartContainer;\n    chartContainer.layout = \"vertical\";\n    _this.padding(15, 15, 15, 15);\n    // Create top axes container\n    var topAxesCont = chartContainer.createChild(Container);\n    topAxesCont.shouldClone = false;\n    topAxesCont.layout = \"vertical\";\n    topAxesCont.width = percent(100);\n    topAxesCont.zIndex = 1;\n    _this.topAxesContainer = topAxesCont;\n    // Create vertical axes and plot area container\n    // Plot area and vertical axes share the whole width of the chart,\n    // so we need to put then into a separate container so that layouting\n    // engine takes care of the positioning\n    var yAxesAndPlotCont = chartContainer.createChild(Container);\n    yAxesAndPlotCont.shouldClone = false;\n    yAxesAndPlotCont.layout = \"horizontal\";\n    yAxesAndPlotCont.width = percent(100);\n    yAxesAndPlotCont.height = percent(100);\n    yAxesAndPlotCont.zIndex = 0;\n    _this.yAxesAndPlotContainer = yAxesAndPlotCont;\n    // Create a container for bottom axes\n    var bottomAxesCont = chartContainer.createChild(Container);\n    bottomAxesCont.shouldClone = false;\n    bottomAxesCont.width = percent(100);\n    bottomAxesCont.layout = \"vertical\";\n    bottomAxesCont.zIndex = 1;\n    _this.bottomAxesContainer = bottomAxesCont;\n    // Create a container for left-side axes\n    var leftAxesCont = yAxesAndPlotCont.createChild(Container);\n    leftAxesCont.shouldClone = false;\n    leftAxesCont.layout = \"horizontal\";\n    leftAxesCont.height = percent(100);\n    leftAxesCont.contentAlign = \"right\";\n    leftAxesCont.events.on(\"transformed\", _this.updateXAxesMargins, _this, false);\n    leftAxesCont.zIndex = 1;\n    _this.leftAxesContainer = leftAxesCont;\n    // Create a container for plot area\n    var plotCont = yAxesAndPlotCont.createChild(Container);\n    plotCont.shouldClone = false;\n    plotCont.height = percent(100);\n    plotCont.width = percent(100);\n    // Create transparend background for plot container so that hover works\n    // on all of it\n    plotCont.background.fillOpacity = 0;\n    _this.plotContainer = plotCont;\n    // must go below plot container\n    _this.mouseWheelBehavior = \"none\";\n    _this._cursorContainer = plotCont;\n    // Create a container for right-side axes\n    var rightAxesCont = yAxesAndPlotCont.createChild(Container);\n    rightAxesCont.shouldClone = false;\n    rightAxesCont.layout = \"horizontal\";\n    rightAxesCont.height = percent(100);\n    rightAxesCont.zIndex = 1;\n    rightAxesCont.events.on(\"transformed\", _this.updateXAxesMargins, _this, false);\n    _this.rightAxesContainer = rightAxesCont;\n    _this.seriesContainer.parent = plotCont;\n    _this.bulletsContainer.parent = plotCont;\n    var zoomOutButton = plotCont.createChild(ZoomOutButton);\n    zoomOutButton.shouldClone = false;\n    zoomOutButton.align = \"right\";\n    zoomOutButton.valign = \"top\";\n    zoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\n    zoomOutButton.marginTop = 5;\n    zoomOutButton.marginRight = 5;\n    zoomOutButton.hide(0);\n    _this.zoomOutButton = zoomOutButton;\n    // Create a container for bullets\n    var axisBulletsContainer = _this.plotContainer.createChild(Container);\n    axisBulletsContainer.shouldClone = false;\n    axisBulletsContainer.width = percent(100);\n    axisBulletsContainer.height = percent(100);\n    axisBulletsContainer.isMeasured = false;\n    axisBulletsContainer.zIndex = 4;\n    axisBulletsContainer.layout = \"none\";\n    _this.axisBulletsContainer = axisBulletsContainer;\n    _this._bulletMask = _this.plotContainer;\n    _this.events.on(\"beforedatavalidated\", function () {\n      _this.series.each(function (series) {\n        series.dataGrouped = false;\n        series._baseInterval = {};\n      });\n    }, _this, false);\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n  XYChart.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    this.zoomOutButton.exportable = false;\n    // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"X/Y chart\");\n    }\n  };\n  /**\r\n   * Draws the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  XYChart.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    this.seriesContainer.toFront();\n    this.bulletsContainer.toFront();\n    if (this.maskBullets) {\n      this.bulletsContainer.mask = this._bulletMask;\n    }\n    this.updateSeriesLegend();\n  };\n  /**\r\n   * Triggers a redrawing of all chart's series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  XYChart.prototype.updatePlotElements = function () {\n    $iter.each(this.series.iterator(), function (series) {\n      series.invalidate();\n    });\n  };\n  /**\r\n   * Triggers data (re)validation which in turn can cause a redraw of the\r\n   * whole chart or just aprticular series / elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  XYChart.prototype.validateData = function () {\n    // tell axes that data changed\n    if (this._parseDataFrom == 0) {\n      $iter.each(this.xAxes.iterator(), function (axis) {\n        axis.dataChangeUpdate();\n      });\n      $iter.each(this.yAxes.iterator(), function (axis) {\n        axis.dataChangeUpdate();\n      });\n      $iter.each(this.series.iterator(), function (series) {\n        series.dataChangeUpdate();\n      });\n    }\n    _super.prototype.validateData.call(this);\n  };\n  /**\r\n   * Updates margins for horizontal axes based on settings and available space.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  XYChart.prototype.updateXAxesMargins = function () {\n    var leftAxesWidth = this.leftAxesContainer.measuredWidth;\n    var rightAxesWidth = this.rightAxesContainer.measuredWidth;\n    var bottomAxesCont = this.bottomAxesContainer;\n    if (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\n      bottomAxesCont.paddingLeft = leftAxesWidth;\n      bottomAxesCont.paddingRight = rightAxesWidth;\n    }\n    var topAxesCont = this.topAxesContainer;\n    if (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\n      topAxesCont.paddingLeft = leftAxesWidth;\n      topAxesCont.paddingRight = rightAxesWidth;\n    }\n  };\n  /**\r\n   * Triggers a re-initialization of this element.\r\n   *\r\n   * Will result in complete redrawing of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  XYChart.prototype.reinit = function () {\n    _super.prototype.reinit.call(this);\n    this.series.each(function (series) {\n      series.appeared = false;\n    });\n  };\n  /**\r\n   * Triggers an update on the horizontal axis when one of its properties\r\n   * change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event An event object\r\n   */\n  XYChart.prototype.handleXAxisChange = function (event) {\n    this.updateXAxis(event.target);\n  };\n  /**\r\n   * Triggers an update on the vertical axis when one of its properties\r\n   * change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event An event object\r\n   */\n  XYChart.prototype.handleYAxisChange = function (event) {\n    this.updateYAxis(event.target);\n  };\n  /**\r\n   * Sets up a new horizontal (X) axis when it is added to the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Axis insert event\r\n   */\n  XYChart.prototype.processXAxis = function (event) {\n    var axis = event.newValue;\n    axis.chart = this;\n    if (!axis.renderer) {\n      axis.renderer = new this._axisRendererX();\n      axis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this, false);\n    }\n    axis.axisLetter = \"X\";\n    axis.events.on(\"startendchanged\", this.handleXAxisRangeChange, this, false);\n    //axis.events.on(\"endchanged\", this.handleXAxisRangeChange, this, false);\n    // Although axis does not use data directly, we set dataProvider here\n    // (but not add to chart data users) to hold up rendering before data\n    // is parsed (system handles this)\n    axis.dataProvider = this;\n    this.updateXAxis(axis.renderer);\n    this.processAxis(axis);\n  };\n  /**\r\n   * Sets up a new vertical (Y) axis when it is added to the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Axis insert event\r\n   */\n  XYChart.prototype.processYAxis = function (event) {\n    var axis = event.newValue;\n    axis.chart = this;\n    if (!axis.renderer) {\n      axis.renderer = new this._axisRendererY();\n      axis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this, false);\n    }\n    axis.axisLetter = \"Y\";\n    axis.events.on(\"startendchanged\", this.handleYAxisRangeChange, this, false);\n    //axis.events.on(\"endchanged\", this.handleYAxisRangeChange, this, false);\n    // Although axis does not use data directly, we set dataProvider here\n    // (but not add to chart data users) to hold up rendering before data\n    // is parsed (system handles this)\n    axis.dataProvider = this;\n    this.updateYAxis(axis.renderer);\n    this.processAxis(axis);\n  };\n  /**\r\n   * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n   * value range changes.\r\n   */\n  XYChart.prototype.handleXAxisRangeChange = function () {\n    var range = this.getCommonAxisRange(this.xAxes);\n    if (this.scrollbarX) {\n      this.zoomAxes(this.xAxes, range, true);\n    }\n    this.toggleZoomOutButton();\n    this.updateScrollbar(this.scrollbarX, range);\n  };\n  /**\r\n   * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n   * zoomed out or not.\r\n   */\n  XYChart.prototype.toggleZoomOutButton = function () {\n    if (this.zoomOutButton) {\n      var show_1 = false;\n      $iter.eachContinue(this.xAxes.iterator(), function (axis) {\n        if (axis.toggleZoomOutButton) {\n          if (axis.maxZoomCount > 0) {\n            var minZoomFactor = axis.maxZoomFactor / axis.maxZoomCount;\n            if ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\n              show_1 = true;\n              return false;\n            }\n          } else {\n            if ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\n              show_1 = true;\n              return false;\n            }\n          }\n        }\n        return true;\n      });\n      $iter.eachContinue(this.yAxes.iterator(), function (axis) {\n        if (axis.toggleZoomOutButton) {\n          if (axis.maxZoomCount > 0) {\n            var minZoomFactor = axis.maxZoomFactor / axis.maxZoomCount;\n            if ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\n              show_1 = true;\n              return false;\n            }\n          } else {\n            if ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\n              show_1 = true;\n              return false;\n            }\n          }\n          return true;\n        }\n      });\n      if (!this.seriesAppeared) {\n        show_1 = false;\n      }\n      if (show_1) {\n        this.zoomOutButton.show();\n      } else {\n        this.zoomOutButton.hide();\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   * moved this check to a separate method so that we could override it in TreeMapSeries\r\n   */\n  XYChart.prototype.seriesAppeared = function () {\n    var appeared = false;\n    $iter.each(this.series.iterator(), function (series) {\n      if (!series.appeared) {\n        appeared = false;\n        return false;\n      }\n    });\n    return appeared;\n  };\n  /**\r\n   * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n   * value range changes.\r\n   */\n  XYChart.prototype.handleYAxisRangeChange = function () {\n    var range = this.getCommonAxisRange(this.yAxes);\n    if (this.scrollbarY) {\n      this.zoomAxes(this.yAxes, range, true);\n    }\n    this.toggleZoomOutButton();\n    this.updateScrollbar(this.scrollbarY, range);\n  };\n  /**\r\n   * Updates a relative scrollbar whenever data range of the axis changes.\r\n   *\r\n   * @param scrollbar  Scrollbar instance\r\n   * @param range      New data (values) range of the axis\r\n   */\n  XYChart.prototype.updateScrollbar = function (scrollbar, range) {\n    if (scrollbar) {\n      scrollbar.skipRangeEvents();\n      scrollbar.start = range.start;\n      scrollbar.end = range.end;\n    }\n  };\n  /**\r\n   * Returns a common range of values between a list of axes.\r\n   *\r\n   * This is used to synchronize the zoom between multiple axes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axes  A list of axes\r\n   * @return Common value range\r\n   */\n  XYChart.prototype.getCommonAxisRange = function (axes) {\n    var start;\n    var end;\n    axes.each(function (axis) {\n      if (!axis.zoomable || axis instanceof ValueAxis && axis.syncWithAxis) {} else {\n        var axisStart = axis.start;\n        var axisEnd = axis.end;\n        if (axis.renderer.inversed) {\n          axisStart = 1 - axis.end;\n          axisEnd = 1 - axis.start;\n        }\n        if (!$type.isNumber(start) || axisStart < start) {\n          start = axisStart;\n        }\n        if (!$type.isNumber(end) || axisEnd > end) {\n          end = axisEnd;\n        }\n      }\n    });\n    return {\n      start: start,\n      end: end\n    };\n  };\n  /**\r\n   * Triggers (re)rendering of the horizontal (X) axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axis  Axis\r\n   */\n  XYChart.prototype.updateXAxis = function (renderer) {\n    var axis = renderer.axis;\n    if (renderer.opposite) {\n      axis.parent = this.topAxesContainer;\n      axis.toFront();\n    } else {\n      axis.parent = this.bottomAxesContainer;\n      axis.toBack();\n    }\n    if (axis.renderer) {\n      axis.renderer.processRenderer();\n    }\n  };\n  /**\r\n   * Triggers (re)rendering of the vertical (Y) axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axis  Axis\r\n   */\n  XYChart.prototype.updateYAxis = function (renderer) {\n    var axis = renderer.axis;\n    if (renderer.opposite) {\n      axis.parent = this.rightAxesContainer;\n      axis.toBack();\n    } else {\n      axis.parent = this.leftAxesContainer;\n      axis.toFront();\n    }\n    if (axis.renderer) {\n      axis.renderer.processRenderer();\n    }\n  };\n  /**\r\n   * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n   * and containers for placement.\r\n   *\r\n   * @param axis  Axis\r\n   */\n  XYChart.prototype.processAxis = function (axis) {\n    var _this = this;\n    // Value axis does not use data directly, only category axis does\n    if (axis instanceof CategoryAxis) {\n      this._dataUsers.moveValue(axis);\n    }\n    var renderer = axis.renderer;\n    renderer.gridContainer.parent = this.plotContainer;\n    renderer.gridContainer.toBack();\n    renderer.breakContainer.parent = this.plotContainer;\n    renderer.breakContainer.toFront();\n    renderer.breakContainer.zIndex = 10;\n    axis.addDisposer(new Disposer(function () {\n      _this.dataUsers.removeValue(axis);\n    }));\n    renderer.bulletsContainer.parent = this.axisBulletsContainer;\n    this._disposers.push(axis.events.on(\"positionchanged\", function () {\n      var point = $utils.spritePointToSprite({\n        x: 0,\n        y: 0\n      }, axis, _this.axisBulletsContainer);\n      if (axis.renderer instanceof AxisRendererY) {\n        renderer.bulletsContainer.y = point.y;\n      }\n      if (axis.renderer instanceof AxisRendererX) {\n        renderer.bulletsContainer.x = point.x;\n      }\n    }, undefined, false));\n    this.plotContainer.events.on(\"maxsizechanged\", function () {\n      if (_this.inited) {\n        axis.invalidateDataItems();\n        _this.updateSeriesMasks();\n      }\n    }, axis, false);\n  };\n  /**\r\n   * This is done because for some reason IE doesn't change mask if path of a\r\n   * mask changes.\r\n   */\n  XYChart.prototype.updateSeriesMasks = function () {\n    if ($utils.isIE()) {\n      this.series.each(function (series) {\n        var mask = series.mainContainer.mask;\n        series.mainContainer.mask = undefined;\n        series.mainContainer.mask = mask;\n      });\n    }\n  };\n  XYChart.prototype.handleSeriesRemoved = function (event) {\n    var series = event.oldValue;\n    if (series) {\n      if (series.xAxis) {\n        series.xAxis.series.removeValue(series);\n        series.xAxis.invalidateProcessedData();\n      }\n      if (series.yAxis) {\n        series.yAxis.series.removeValue(series);\n        series.yAxis.invalidateProcessedData();\n      }\n      // otherwise extremes won't change\n      this.series.each(function (series) {\n        series.resetExtremes();\n      });\n    }\n    _super.prototype.handleSeriesRemoved.call(this, event);\n  };\n  Object.defineProperty(XYChart.prototype, \"xAxes\", {\n    /**\r\n     * A list of horizontal (X) axes.\r\n     *\r\n     * @return List of axes\r\n     */\n    get: function () {\n      if (!this._xAxes) {\n        this._xAxes = new List();\n        this._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\n        this._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\n        this._disposers.push(new ListDisposer(this._xAxes, false));\n      }\n      return this._xAxes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n  XYChart.prototype.handleAxisRemoval = function (event) {\n    var axis = event.oldValue;\n    this.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\n    if (axis.autoDispose) {\n      axis.dispose();\n    }\n  };\n  Object.defineProperty(XYChart.prototype, \"yAxes\", {\n    /**\r\n     * A list of vertical (Y) axes.\r\n     *\r\n     * @return List of axes\r\n     */\n    get: function () {\n      if (!this._yAxes) {\n        this._yAxes = new List();\n        this._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\n        this._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\n        this._disposers.push(new ListDisposer(this._yAxes, false));\n      }\n      return this._yAxes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Decorates a new [[XYSeries]] object with required parameters when it is\r\n   * added to the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n  XYChart.prototype.handleSeriesAdded = function (event) {\n    try {\n      _super.prototype.handleSeriesAdded.call(this, event);\n      var series = event.newValue;\n      if (this.xAxes.length == 0 || this.yAxes.length == 0) {\n        registry.removeFromInvalidComponents(series);\n        series.dataInvalid = false;\n      }\n      $utils.used(series.xAxis); // this is enough to get axis, handled in getter\n      $utils.used(series.yAxis); // this is enough to get axis, handled in getter\n      series.maskBullets = series.maskBullets;\n      if (series.fill == undefined) {\n        if (this.patterns) {\n          if (!$type.hasValue(series.stroke)) {\n            series.stroke = this.colors.next();\n          }\n          series.fill = this.patterns.next();\n          if ($type.hasValue(series.fillOpacity)) {\n            series.fill.backgroundOpacity = series.fillOpacity;\n          }\n          if (series.stroke instanceof Color) {\n            series.fill.stroke = series.stroke;\n            series.fill.fill = series.stroke;\n          }\n        } else {\n          series.fill = this.colors.next();\n        }\n      }\n      if (!$type.hasValue(series.stroke)) {\n        series.stroke = series.fill;\n      }\n    } catch (e) {\n      this.raiseCriticalError(e);\n    }\n  };\n  Object.defineProperty(XYChart.prototype, \"cursor\", {\n    /**\r\n     * @return Cursor\r\n     */\n    get: function () {\n      return this._cursor;\n    },\n    /**\r\n     * Chart's [[Cursor]].\r\n     *\r\n     * @param cursor  Cursor\r\n     */\n    set: function (cursor) {\n      if (this._cursor != cursor) {\n        if (this._cursor) {\n          this.removeDispose(this._cursor);\n        }\n        this._cursor = cursor;\n        if (cursor) {\n          // TODO this is wrong, fix it\n          this._disposers.push(cursor);\n          cursor.chart = this;\n          cursor.shouldClone = false;\n          cursor.parent = this._cursorContainer;\n          cursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\n          cursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\n          cursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\n          cursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\n          cursor.events.on(\"panning\", this.handleCursorPanning, this, false);\n          cursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\n          cursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\n          cursor.events.on(\"hidden\", this.handleHideCursor, this, false);\n          cursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\n          if (this.tapToActivate) {\n            // We need this in order to setup cursor properly\n            this.setTapToActivate(this.tapToActivate);\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Performs tasks when the cursor's position changes, e.g. shows proper\r\n   * tooltips on axes and series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  XYChart.prototype.handleCursorPositionChange = function () {\n    var cursor = this.cursor;\n    if (cursor.visible && !cursor.isHiding) {\n      var xPosition_1 = this.cursor.xPosition;\n      var yPosition_1 = this.cursor.yPosition;\n      this.showSeriesTooltip({\n        x: xPosition_1,\n        y: yPosition_1\n      });\n      var exceptAxes_1 = [];\n      var snapToSeries = cursor.snapToSeries;\n      if (snapToSeries && !cursor.downPoint) {\n        if (snapToSeries instanceof XYSeries) {\n          snapToSeries = [snapToSeries];\n        }\n        var dataItems_1 = [];\n        $array.each(snapToSeries, function (snpSeries) {\n          if (!snpSeries.isHidden && !snpSeries.isHiding) {\n            var xAxis = snpSeries.xAxis;\n            var yAxis = snpSeries.yAxis;\n            if (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis) && yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\n              snpSeries.dataItems.each(function (dataItem) {\n                dataItems_1.push(dataItem);\n              });\n              $array.move(exceptAxes_1, snpSeries.yAxis);\n              $array.move(exceptAxes_1, snpSeries.xAxis);\n            } else {\n              if (snpSeries.baseAxis == snpSeries.xAxis) {\n                $array.move(exceptAxes_1, snpSeries.yAxis);\n                dataItems_1.push(xAxis.getSeriesDataItem(snpSeries, xAxis.toAxisPosition(xPosition_1), true));\n              }\n              if (snpSeries.baseAxis == snpSeries.yAxis) {\n                $array.move(exceptAxes_1, snpSeries.xAxis);\n                dataItems_1.push(yAxis.getSeriesDataItem(snpSeries, yAxis.toAxisPosition(yPosition_1), true));\n              }\n            }\n          }\n        });\n        var closestDataItem_1 = this.getClosest(dataItems_1, xPosition_1, yPosition_1);\n        if (closestDataItem_1) {\n          this.series.each(function (series) {\n            var closestSeries = closestDataItem_1.component;\n            if (series != closestSeries) {\n              series.hideTooltip();\n              if (series.xAxis != closestSeries.xAxis) {\n                series.xAxis.hideTooltip();\n                exceptAxes_1.push(series.xAxis);\n              }\n              if (series.yAxis != closestSeries.yAxis) {\n                series.yAxis.hideTooltip();\n                exceptAxes_1.push(series.yAxis);\n              }\n            }\n          });\n          closestDataItem_1.component.showTooltipAtDataItem(closestDataItem_1);\n          cursor.handleSnap(closestDataItem_1.component);\n        }\n      }\n      //}\n      this._seriesPoints = [];\n      if (this._cursorXPosition != xPosition_1) {\n        this.showAxisTooltip(this.xAxes, xPosition_1, exceptAxes_1);\n      }\n      if (this._cursorYPosition != yPosition_1) {\n        this.showAxisTooltip(this.yAxes, yPosition_1, exceptAxes_1);\n      }\n      if (this.arrangeTooltips) {\n        this.sortSeriesTooltips(this._seriesPoints);\n      }\n      if (this.legend) {\n        this.legend.afterDraw();\n      }\n    }\n  };\n  /**\r\n   * Finds closest data item to position out of the array of items.\r\n   *\r\n   * @since 4.9.29\r\n   * @param   dataItems  Array of items\r\n   * @param              xPosition X position\r\n   * @param              yPosition Y position\r\n   * @return             Data item\r\n   */\n  XYChart.prototype.getClosest = function (dataItems, xPosition, yPosition) {\n    var minDistance = Infinity;\n    var closestDataItem;\n    $array.eachContinue(dataItems, function (dataItem) {\n      if (dataItem) {\n        var xAxis = dataItem.component.xAxis;\n        var yAxis = dataItem.component.yAxis;\n        var xPos = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.toAxisPosition(xPosition)));\n        var yPos = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.toAxisPosition(yPosition)));\n        var xField = dataItem.component.xField;\n        var yField = dataItem.component.yField;\n        if (xAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(xField))) {\n          return true;\n        }\n        if (yAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(yField))) {\n          return true;\n        }\n        var dxPosition = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.getPositionX(dataItem, xField, dataItem.locations[xField], \"valueX\")));\n        var dyPosition = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.getPositionY(dataItem, yField, dataItem.locations[yField], \"valueY\")));\n        var distance = Math.sqrt(Math.pow(xPos - dxPosition, 2) + Math.pow(yPos - dyPosition, 2));\n        if (distance < minDistance) {\n          minDistance = distance;\n          closestDataItem = dataItem;\n        }\n        return true;\n      }\n    });\n    return closestDataItem;\n  };\n  /**\r\n   * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  XYChart.prototype.handleHideCursor = function () {\n    this.hideObjectTooltip(this.xAxes);\n    this.hideObjectTooltip(this.yAxes);\n    this.hideObjectTooltip(this.series);\n    this._cursorXPosition = undefined;\n    this._cursorYPosition = undefined;\n    this.updateSeriesLegend();\n  };\n  /**\r\n   * Updates values for each series' legend item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  XYChart.prototype.updateSeriesLegend = function () {\n    $iter.each(this.series.iterator(), function (series) {\n      series.updateLegendValue();\n    });\n  };\n  /**\r\n   * Hides a tooltip for a list of objects.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param sprites  A list of sprites to hide tooltip for\r\n   */\n  XYChart.prototype.hideObjectTooltip = function (sprites) {\n    $iter.each(sprites.iterator(), function (sprite) {\n      if (sprite.cursorTooltipEnabled) {\n        sprite.hideTooltip(0);\n      }\n    });\n  };\n  /**\r\n   * Shows a tooltip for all chart's series, using specific coordinates as a\r\n   * reference point.\r\n   *\r\n   * The tooltip might be shown at different coordinates depending on the\r\n   * actual data point's position, overlapping with other tooltips, etc.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position  Reference point\r\n   */\n  XYChart.prototype.showSeriesTooltip = function (position) {\n    var _this = this;\n    if (!position) {\n      this.series.each(function (series) {\n        series.hideTooltip();\n      });\n      return;\n    }\n    var seriesPoints = [];\n    this.series.each(function (series) {\n      //if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\n      if (series.xAxis instanceof DateAxis && series.xAxis.snapTooltip || series.yAxis instanceof DateAxis && series.yAxis.snapTooltip) {\n        // void\n      } else {\n        var point = series.showTooltipAtPosition(position.x, position.y);\n        if (point) {\n          series.tooltip.setBounds($utils.spriteRectToSvg({\n            x: 0,\n            y: 0,\n            width: _this.pixelWidth,\n            height: _this.pixelHeight\n          }, _this));\n          seriesPoints.push({\n            series: series,\n            point: point\n          });\n        }\n      }\n      //}\n    });\n\n    if (this.arrangeTooltips) {\n      this.sortSeriesTooltips(seriesPoints);\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  XYChart.prototype.sortSeriesTooltips = function (seriesPoints) {\n    if (seriesPoints.length > 0) {\n      var cursor_1 = this.cursor;\n      if (cursor_1 && $type.isNumber(cursor_1.maxTooltipDistance)) {\n        var cursorPoint_1 = $utils.spritePointToSvg({\n          x: cursor_1.point.x,\n          y: cursor_1.point.y\n        }, cursor_1);\n        var nearestSeries_1;\n        var nearestPoint_1;\n        var smallestDistance_1 = Infinity;\n        $array.each(seriesPoints, function (seriesPoint) {\n          var series = seriesPoint.series;\n          var fixedPoint = seriesPoint.point;\n          if (fixedPoint) {\n            var point = {\n              x: fixedPoint.x,\n              y: fixedPoint.y\n            };\n            var distance = Math.abs($math.getDistance(point, cursorPoint_1));\n            if (distance < smallestDistance_1) {\n              nearestPoint_1 = point;\n              smallestDistance_1 = distance;\n              nearestSeries_1 = series;\n            }\n          }\n        });\n        var newSeriesPoints_1 = [];\n        if (nearestSeries_1) {\n          $array.each(seriesPoints, function (seriesPoint) {\n            if (Math.abs($math.getDistance(seriesPoint.point, nearestPoint_1)) <= Math.abs(cursor_1.maxTooltipDistance)) {\n              newSeriesPoints_1.push({\n                series: seriesPoint.series,\n                point: seriesPoint.point\n              });\n            } else {\n              var tooltipDataItem = seriesPoint.series.tooltipDataItem;\n              if (tooltipDataItem) {\n                $array.each(tooltipDataItem.sprites, function (sprite) {\n                  sprite.isHover = false;\n                  sprite.handleOutReal(); // to avoid flicker\n                });\n              }\n\n              seriesPoint.series.hideTooltip(0);\n            }\n          });\n          if (cursor_1.maxTooltipDistance < 0) {\n            if (newSeriesPoints_1.length > 0) {\n              $array.each(newSeriesPoints_1, function (np) {\n                if (nearestSeries_1 != np.series) {\n                  np.series.hideTooltip(0);\n                }\n              });\n            }\n            newSeriesPoints_1 = [{\n              series: nearestSeries_1,\n              point: nearestPoint_1\n            }];\n          }\n        }\n        seriesPoints = newSeriesPoints_1;\n      }\n      var topLeft_1 = $utils.spritePointToSvg({\n        x: -0.5,\n        y: -0.5\n      }, this.plotContainer);\n      var bottomRight_1 = $utils.spritePointToSvg({\n        x: this.plotContainer.pixelWidth + 0.5,\n        y: this.plotContainer.pixelHeight + 0.5\n      }, this.plotContainer);\n      var sum_1 = 0;\n      var filteredSeriesPoints_1 = [];\n      $array.each(seriesPoints, function (seriesPoint) {\n        var point = seriesPoint.point;\n        if (point && $math.isInRectangle(point, {\n          x: topLeft_1.x,\n          y: topLeft_1.y,\n          width: bottomRight_1.x - topLeft_1.x,\n          height: bottomRight_1.y - topLeft_1.y\n        })) {\n          filteredSeriesPoints_1.push({\n            point: point,\n            series: seriesPoint.series\n          });\n          sum_1 += point.y;\n        }\n      });\n      seriesPoints = filteredSeriesPoints_1;\n      var firstSeries = this.series.getIndex(0);\n      var inversed = false;\n      if (firstSeries && firstSeries.yAxis && firstSeries.yAxis.renderer.inversed) {\n        inversed = true;\n      }\n      if (inversed) {\n        seriesPoints.sort(function (a, b) {\n          return $number.order(a.point.y, b.point.y);\n        });\n      } else {\n        seriesPoints.sort(function (a, b) {\n          return $number.order(b.point.y, a.point.y);\n        });\n        seriesPoints.reverse();\n      }\n      var averageY = sum_1 / seriesPoints.length;\n      var maxY = $utils.svgPointToDocument({\n        x: 0,\n        y: 0\n      }, this.svgContainer.SVGContainer).y;\n      if (seriesPoints.length > 0) {\n        var top_1 = topLeft_1.y;\n        var bottom = bottomRight_1.y;\n        // TODO is this needed ?\n        $utils.spritePointToDocument({\n          x: 0,\n          y: top_1\n        }, this);\n        var dropped = false;\n        if (averageY > top_1 + (bottom - top_1) / 2) {\n          var nextHeight = bottom;\n          for (var i = seriesPoints.length - 1; i >= 0; i--) {\n            var series = seriesPoints[i].series;\n            var tooltip = series.tooltip;\n            var pointY = seriesPoints[i].point.y;\n            tooltip.setBounds({\n              x: 0,\n              y: -maxY,\n              width: this.pixelWidth,\n              height: nextHeight + maxY\n            });\n            if (tooltip.invalid) {\n              tooltip.validate();\n            }\n            tooltip.toBack();\n            nextHeight = $utils.spritePointToSvg({\n              x: 0,\n              y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop\n            }, tooltip).y;\n            if (nextHeight < -maxY) {\n              dropped = true;\n              break;\n            }\n          }\n        }\n        if (averageY <= top_1 + (bottom - top_1) / 2 || dropped) {\n          var nextY = top_1;\n          for (var i = 0, len = seriesPoints.length; i < len; i++) {\n            var series = seriesPoints[i].series;\n            var pointY = seriesPoints[i].point.y;\n            var tooltip = series.tooltip;\n            tooltip.setBounds({\n              x: 0,\n              y: nextY,\n              width: this.pixelWidth,\n              height: bottom\n            });\n            if (tooltip.invalid) {\n              tooltip.validate();\n            }\n            tooltip.toBack();\n            nextY = $utils.spritePointToSvg({\n              x: 0,\n              y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom\n            }, tooltip).y;\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * Shows tooltips for a list of axes at specific position.\r\n   *\r\n   * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n   * vertical axes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axes      List of axes to show tooltip on\r\n   * @param position  Position (px)\r\n   */\n  XYChart.prototype.showAxisTooltip = function (axes, position, except) {\n    var _this = this;\n    $iter.each(axes.iterator(), function (axis) {\n      if (!except || except.indexOf(axis) == -1) {\n        if (_this.dataItems.length > 0 || axis.dataItems.length > 0) {\n          axis.showTooltipAtPosition(position);\n        }\n      }\n    });\n  };\n  /**\r\n   * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n   *\r\n   * @param axis   Axis\r\n   * @param range  Range\r\n   * @return Modified range\r\n   */\n  XYChart.prototype.getUpdatedRange = function (axis, range) {\n    if (!axis) {\n      return;\n    }\n    var start;\n    var end;\n    var inversed = axis.renderer.inversed;\n    if (inversed) {\n      $math.invertRange(range);\n      start = 1 - axis.end;\n      end = 1 - axis.start;\n    } else {\n      start = axis.start;\n      end = axis.end;\n    }\n    var difference = end - start;\n    return {\n      start: start + range.start * difference,\n      end: start + range.end * difference\n    };\n  };\n  /**\r\n   * Performs zoom and other operations when user finishes zooming using chart\r\n   * cursor, e.g. zooms axes.\r\n   *\r\n   * @param event Cursor's event\r\n   */\n  XYChart.prototype.handleCursorZoomEnd = function (event) {\n    var cursor = this.cursor;\n    var behavior = cursor.behavior;\n    if (behavior == \"zoomX\" || behavior == \"zoomXY\") {\n      var xRange = cursor.xRange;\n      if (xRange && this.xAxes.length > 0) {\n        xRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\n        xRange.priority = \"start\";\n        this.zoomAxes(this.xAxes, xRange);\n      }\n    }\n    if (behavior == \"zoomY\" || behavior == \"zoomXY\") {\n      var yRange = cursor.yRange;\n      if (yRange && this.yAxes.length > 0) {\n        yRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\n        yRange.priority = \"start\";\n        this.zoomAxes(this.yAxes, yRange);\n      }\n    }\n    this.handleHideCursor();\n  };\n  /**\r\n   * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n   *\r\n   * @param event Cursor's event\r\n   */\n  XYChart.prototype.handleCursorPanStart = function (event) {\n    var xAxis = this.xAxes.getIndex(0);\n    if (xAxis) {\n      this._panStartXRange = {\n        start: xAxis.start,\n        end: xAxis.end\n      };\n      if (xAxis.renderer.inversed) {\n        this._panStartXRange = $math.invertRange(this._panStartXRange);\n      }\n    }\n    var yAxis = this.yAxes.getIndex(0);\n    if (yAxis) {\n      this._panStartYRange = {\n        start: yAxis.start,\n        end: yAxis.end\n      };\n      if (yAxis.renderer.inversed) {\n        this._panStartYRange = $math.invertRange(this._panStartYRange);\n      }\n    }\n  };\n  /**\r\n   * Performs zoom and other operations when user ends panning\r\n   *\r\n   * @param event Cursor's event\r\n   */\n  XYChart.prototype.handleCursorPanEnd = function (event) {\n    var cursor = this.cursor;\n    var behavior = cursor.behavior;\n    if (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\n      var panEndRange = this._panEndXRange;\n      var panStartRange = this._panStartXRange;\n      var delta = 0;\n      if (panEndRange.start < 0) {\n        delta = panEndRange.start;\n      }\n      if (panStartRange.end > 1) {\n        if (panEndRange.end > panStartRange.end) {\n          delta = panEndRange.end - panStartRange.end;\n        }\n      } else if (panEndRange.end > 1) {\n        delta = panEndRange.end - 1;\n      }\n      this.zoomAxes(this.xAxes, {\n        start: panEndRange.start - delta,\n        end: panEndRange.end - delta\n      }, false, cursor.snapOnPan);\n      this._panEndXRange = undefined;\n      this._panStartXRange = undefined;\n    }\n    if (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\n      var panEndRange = this._panEndYRange;\n      var delta = 0;\n      if (panEndRange.start < 0) {\n        delta = panEndRange.start;\n      }\n      if (panEndRange.end > 1) {\n        delta = panEndRange.end - 1;\n      }\n      this.zoomAxes(this.yAxes, {\n        start: panEndRange.start - delta,\n        end: panEndRange.end - delta\n      }, false, cursor.snapOnPan);\n      this._panEndYRange = undefined;\n      this._panStartYRange = undefined;\n    }\n  };\n  XYChart.prototype.handleCursorCanceled = function () {\n    this._panEndXRange = undefined;\n    this._panStartXRange = undefined;\n  };\n  /**\r\n   * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n   *\r\n   * @param event Cursor's event\r\n   */\n  XYChart.prototype.handleCursorPanning = function (event) {\n    var cursor = this.cursor;\n    var behavior = cursor.behavior;\n    var maxPanOut = cursor.maxPanOut;\n    if (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\n      var panStartRange = this._panStartXRange;\n      var range = cursor.xRange;\n      var axisRange = this.getCommonAxisRange(this.xAxes);\n      var difference = panStartRange.end - panStartRange.start;\n      var delta = range.start * (axisRange.end - axisRange.start);\n      var newStart = Math.max(-maxPanOut, delta + panStartRange.start);\n      var newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\n      if (newStart <= 0) {\n        newEnd = newStart + difference;\n      }\n      if (newEnd >= 1) {\n        newStart = newEnd - difference;\n      }\n      var newRange = {\n        start: newStart,\n        end: newEnd\n      };\n      this._panEndXRange = newRange;\n      this.zoomAxes(this.xAxes, newRange, false, false, cursor.maxPanOut);\n    }\n    if (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\n      var panStartRange = this._panStartYRange;\n      var range = cursor.yRange;\n      var axisRange = this.getCommonAxisRange(this.yAxes);\n      var difference = panStartRange.end - panStartRange.start;\n      var delta = range.start * (axisRange.end - axisRange.start);\n      var newStart = Math.max(-maxPanOut, delta + panStartRange.start);\n      var newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\n      if (newStart <= 0) {\n        newEnd = newStart + difference;\n      }\n      if (newEnd >= 1) {\n        newStart = newEnd - difference;\n      }\n      var newRange = {\n        start: newStart,\n        end: newEnd\n      };\n      this._panEndYRange = newRange;\n      this.zoomAxes(this.yAxes, newRange, false, false, cursor.maxPanOut);\n    }\n    this.handleHideCursor();\n  };\n  /**\r\n   * @ignore\r\n   */\n  XYChart.prototype.handleYAxisSet = function (series) {};\n  /**\r\n   * Performs zoom and other operations when user starts zooming using chart\r\n   * cursor, e.g. zooms axes.\r\n   *\r\n   * @param event Cursor's event\r\n   */\n  XYChart.prototype.handleCursorZoomStart = function (event) {\n    // Nothing here\n    // This method is here only as a \"placeholder\" for extending classes to\n    // override if necessary\n  };\n  Object.defineProperty(XYChart.prototype, \"scrollbarX\", {\n    /**\r\n     * @return Scrollbar\r\n     */\n    get: function () {\n      return this._scrollbarX;\n    },\n    /**\r\n     * Horizontal (X) scrollbar.\r\n     *\r\n     * @param scrollbar Scrollbar\r\n     */\n    set: function (scrollbar) {\n      var _this = this;\n      if (this._scrollbarX) {\n        this.removeDispose(this._scrollbarX);\n      }\n      this._scrollbarX = scrollbar;\n      if (scrollbar) {\n        this._disposers.push(scrollbar);\n        scrollbar.parent = this.topAxesContainer;\n        scrollbar.shouldClone = false;\n        scrollbar.startGrip.exportable = false;\n        scrollbar.endGrip.exportable = false;\n        scrollbar.toBack();\n        scrollbar.orientation = \"horizontal\";\n        scrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false);\n        this.events.on(\"datavalidated\", function () {\n          return scrollbar.updateThumb(false);\n        }, this, false);\n        // accessibility related\n        scrollbar.adapter.add(\"positionValue\", function (arg) {\n          var xAxis = _this.xAxes.getIndex(0);\n          if (xAxis) {\n            arg.value = xAxis.getPositionLabel(xAxis.renderer.inversed ? 1 - arg.position : arg.position);\n          }\n          return arg;\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart.prototype, \"scrollbarY\", {\n    /**\r\n     * @return Scrollbar\r\n     */\n    get: function () {\n      return this._scrollbarY;\n    },\n    /**\r\n     * Vertical (Y) scrollbar.\r\n     *\r\n     * @param scrollbar Scrollbar\r\n     */\n    set: function (scrollbar) {\n      var _this = this;\n      if (this._scrollbarY) {\n        this.removeDispose(this._scrollbarY);\n      }\n      this._scrollbarY = scrollbar;\n      if (scrollbar) {\n        this._disposers.push(scrollbar);\n        scrollbar.parent = this.rightAxesContainer;\n        scrollbar.startGrip.exportable = false;\n        scrollbar.shouldClone = false;\n        scrollbar.endGrip.exportable = false;\n        scrollbar.toFront();\n        scrollbar.orientation = \"vertical\";\n        scrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false);\n        this.events.on(\"datavalidated\", function () {\n          return scrollbar.updateThumb(false);\n        }, this, false);\n        // accessibility related\n        scrollbar.adapter.add(\"positionValue\", function (arg) {\n          var yAxis = _this.yAxes.getIndex(0);\n          if (yAxis) {\n            arg.value = yAxis.getPositionLabel(arg.position);\n          }\n          return arg;\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n   * on it changes.\r\n   *\r\n   * @param event Scrollbar range change event\r\n   */\n  XYChart.prototype.handleXScrollbarChange = function (event) {\n    if (this.inited) {\n      var scrollbar = event.target;\n      var range = scrollbar.range;\n      if (range.start == 0) {\n        range.priority = \"start\";\n      }\n      if (range.end == 1) {\n        range.priority = \"end\";\n      }\n      range = this.zoomAxes(this.xAxes, range);\n      scrollbar.fixRange(range);\n    }\n  };\n  /**\r\n   * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n   * on it changes.\r\n   *\r\n   * @param event Scrollbar range change event\r\n   */\n  XYChart.prototype.handleYScrollbarChange = function (event) {\n    if (this.inited) {\n      var scrollbar = event.target;\n      var range = scrollbar.range;\n      if (range.end == 1) {\n        range.priority = \"end\";\n      }\n      if (range.start == 0) {\n        range.priority = \"start\";\n      }\n      range = this.zoomAxes(this.yAxes, range);\n      scrollbar.fixRange(range);\n    }\n  };\n  /**\r\n   * Zooms axes that are affected by to specific relative range.\r\n   *\r\n   * @param axes       List of axes to zoom\r\n   * @param range      Range of values to zoom to (0-1)\r\n   * @param instantly  If set to `true` will skip zooming animation\r\n   * @return Recalculated range that is common to all involved axes\r\n   */\n  XYChart.prototype.zoomAxes = function (axes, range, instantly, round, declination, stop) {\n    var realRange = {\n      start: 0,\n      end: 1\n    };\n    this.showSeriesTooltip(); // hides\n    var originalRange = range;\n    if (!this.dataInvalid) {\n      $iter.each(axes.iterator(), function (axis) {\n        var maxZoomFactor = axis.maxZoomFactor;\n        if ($type.isNumber(axis.minZoomCount)) {\n          maxZoomFactor = maxZoomFactor / axis.minZoomCount;\n        }\n        if (stop && 1 / (range.end - range.start) >= maxZoomFactor) {\n          // void\n        } else {\n          if (axis.zoomable) {\n            if (axis.renderer.inversed) {\n              range = $math.invertRange(originalRange);\n            } else {\n              range = originalRange;\n            }\n            axis.hideTooltip(0);\n            if (round) {\n              //let diff = range.end - range.start;\n              if (axis instanceof CategoryAxis) {\n                var cellWidth = axis.getCellEndPosition(0) - axis.getCellStartPosition(0);\n                range.start = axis.roundPosition(range.start + cellWidth / 2 - axis.startLocation * cellWidth, axis.startLocation);\n                range.end = axis.roundPosition(range.end - cellWidth / 2 + (1 - axis.endLocation) * cellWidth, axis.endLocation);\n              } else {\n                var d = 0.0001;\n                range.start = axis.roundPosition(range.start + d, 0, axis.startLocation);\n                range.end = axis.roundPosition(range.end + d, 0, axis.endLocation);\n              }\n            }\n            var axisRange = axis.zoom(range, instantly, instantly, declination);\n            if (axis.renderer.inversed) {\n              axisRange = $math.invertRange(axisRange);\n            }\n            realRange = axisRange;\n          }\n        }\n      });\n    }\n    return realRange;\n  };\n  Object.defineProperty(XYChart.prototype, \"maskBullets\", {\n    /**\r\n     * @return Mask bullet container?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maskBullets\");\n    },\n    /**\r\n     * Indicates if bullet container is masked.\r\n     *\r\n     * If it is set to `true`, any bullets that do not fit into bullet container\r\n     * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n     * of the plot area so they are not cut off.\r\n     *\r\n     * @param value Mask bullet container?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"maskBullets\", value, true) && this.bulletsContainer) {\n        if (value) {\n          this.bulletsContainer.mask = this._bulletMask;\n        } else {\n          this.bulletsContainer.mask = undefined;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart.prototype, \"arrangeTooltips\", {\n    /**\r\n     * @return Arrange tooltips?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"arrangeTooltips\");\n    },\n    /**\r\n     * Indicates if chart should arrange series tooltips so that they would not\r\n     * overlap.\r\n     *\r\n     * If set to `true` (default), the chart will adjust vertical positions of\r\n     * all simultaneously shown tooltips to avoid overlapping.\r\n     *\r\n     * However, if you have a vertically-arranged chart, it might not make sense,\r\n     * because tooltips would most probably not be aligned horizontally. In this\r\n     * case it would probably be a good idea to set this setting to `false`.\r\n     *\r\n     * @default true\r\n     * @param value Arrange tooltips?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"arrangeTooltips\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles mouse wheel event.\r\n   *\r\n   * @param event  Original event\r\n   */\n  XYChart.prototype.handleWheel = function (event) {\n    var plotContainer = this.plotContainer;\n    var svgPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\n    var plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\n    var shift = event.shift.y;\n    this.handleWheelReal(shift, this.mouseWheelBehavior, plotPoint);\n  };\n  /**\r\n   * Handles mouse wheel event.\r\n   *\r\n   * @param event  Original event\r\n   */\n  XYChart.prototype.handleHorizontalWheel = function (event) {\n    var plotContainer = this.plotContainer;\n    var svgPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\n    var plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\n    this.handleWheelReal(event.shift.x, this.horizontalMouseWheelBehavior, plotPoint);\n  };\n  /**\r\n   * @ignore\r\n   */\n  XYChart.prototype.handleWheelReal = function (shift, mouseWheelBehavior, plotPoint) {\n    if (shift != 0) {\n      var plotContainer = this.plotContainer;\n      var rangeX = this.getCommonAxisRange(this.xAxes);\n      var rangeY = this.getCommonAxisRange(this.yAxes);\n      var shiftStep = .1;\n      var maxPanOut = 0;\n      if (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\n        var xAxis = this.xAxes.getIndex(0);\n        var round = false;\n        var singleItemStep = shiftStep;\n        if (xAxis instanceof CategoryAxis) {\n          singleItemStep = .5 / ((rangeX.end - rangeX.start) * xAxis.dataItems.length);\n          round = true;\n        }\n        shiftStep = Math.max(0.2, singleItemStep);\n        var differenceX = rangeX.end - rangeX.start;\n        var newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100 * (rangeX.end - rangeX.start));\n        var newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (rangeX.end - rangeX.start), 1 + maxPanOut);\n        if (newStartX <= 0) {\n          newEndX = newStartX + differenceX;\n        }\n        if (newEndX >= 1) {\n          newStartX = newEndX - differenceX;\n        }\n        this.zoomAxes(this.xAxes, {\n          start: newStartX,\n          end: newEndX\n        }, undefined, round);\n      }\n      if (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\n        var yAxis = this.yAxes.getIndex(0);\n        var singleItemStep = shiftStep;\n        var round = false;\n        if (yAxis instanceof CategoryAxis) {\n          singleItemStep = .5 / ((rangeX.end - rangeX.start) * yAxis.dataItems.length);\n          round = true;\n        }\n        shiftStep = Math.max(0.2, singleItemStep);\n        shift *= -1;\n        var differenceY = rangeY.end - rangeY.start;\n        var newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100 * (rangeY.end - rangeY.start));\n        var newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * (rangeY.end - rangeY.start), 1 + maxPanOut);\n        if (newStartY <= 0) {\n          newEndY = newStartY + differenceY;\n        }\n        if (newEndY >= 1) {\n          newStartY = newEndY - differenceY;\n        }\n        this.zoomAxes(this.yAxes, {\n          start: newStartY,\n          end: newEndY\n        }, undefined, round);\n      }\n      if (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\n        var locationX = plotPoint.x / plotContainer.maxWidth;\n        var location2X = this.xAxes.getIndex(0).toAxisPosition(locationX);\n        var newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * (rangeX.end - rangeX.start) * shift / 100 * locationX);\n        newStartX = Math.min(newStartX, location2X);\n        var newEndX = Math.min(rangeX.end + shiftStep * (rangeX.end - rangeX.start) * shift / 100 * (1 - locationX), 1 + maxPanOut);\n        newEndX = Math.max(newEndX, location2X);\n        this.zoomAxes(this.xAxes, {\n          start: newStartX,\n          end: newEndX\n        }, undefined);\n      }\n      if (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\n        var locationY = plotPoint.y / plotContainer.maxHeight;\n        var location2Y = this.yAxes.getIndex(0).toAxisPosition(locationY);\n        var newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * (rangeY.end - rangeY.start) * shift / 100 * (1 - locationY));\n        newStartY = Math.min(newStartY, location2Y);\n        var newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY * (rangeY.end - rangeY.start), 1 + maxPanOut);\n        newEndY = Math.max(newEndY, location2Y);\n        this.zoomAxes(this.yAxes, {\n          start: newStartY,\n          end: newEndY\n        }, undefined);\n      }\n    }\n  };\n  Object.defineProperty(XYChart.prototype, \"mouseWheelBehavior\", {\n    /**\r\n     * @return Mouse wheel behavior\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"mouseWheelBehavior\");\n    },\n    /**\r\n     * Specifies action for when mouse wheel is used when over the chart.\r\n     *\r\n     * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`,`\"panXY\"`, `\"none\"` (default).\r\n     *\r\n     * You can control sensitivity of wheel zooming via `mouseOptions`.\r\n     *\r\n     * @default \"none\"\r\n     * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n     * @param mouse wheel behavior\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\n        if (value != \"none\") {\n          this._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\n          this._disposers.push(this._mouseWheelDisposer);\n        } else {\n          if (this._mouseWheelDisposer) {\n            this.plotContainer.wheelable = false;\n            this.plotContainer.hoverable = false;\n            this._mouseWheelDisposer.dispose();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart.prototype, \"horizontalMouseWheelBehavior\", {\n    /**\r\n     * @return Horizontal mouse wheel behavior\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"horizontalMouseWheelBehavior\");\n    },\n    /**\r\n     * Specifies action for when horizontal mouse wheel is used when over the chart.\r\n     *\r\n     * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n     *\r\n     * @default \"none\"\r\n     * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n     * @param mouse wheel behavior\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"horizontalMouseWheelBehavior\", value)) {\n        if (value != \"none\") {\n          this._mouseWheelDisposer2 = this.plotContainer.events.on(\"wheel\", this.handleHorizontalWheel, this, false);\n          this._disposers.push(this._mouseWheelDisposer2);\n        } else {\n          if (this._mouseWheelDisposer2) {\n            this.plotContainer.wheelable = false;\n            this.plotContainer.hoverable = false;\n            this._mouseWheelDisposer2.dispose();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n   * so that particular chart types can popuplate this setting with their\r\n   * own type-specific data fields so they are parsed properly.\r\n   *\r\n   * @param fields  Array of date fields\r\n   * @return Array of date fields populated with chart's date fields\r\n   */\n  XYChart.prototype.dataSourceDateFields = function (fields) {\n    var _this = this;\n    // Process parent\n    fields = _super.prototype.dataSourceDateFields.call(this, fields);\n    // Check if we have any series with date-fields\n    $iter.each(this.series.iterator(), function (series) {\n      fields = _this.populateDataSourceFields(fields, series.dataFields, [\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]);\n    });\n    return fields;\n  };\n  /**\r\n   * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n   * so that particular chart types can popuplate this setting with their\r\n   * own type-specific data fields so they are parsed properly.\r\n   *\r\n   * @param value  Array of number fields\r\n   * @return Array of number fields populated with chart's number fields\r\n   */\n  XYChart.prototype.dataSourceNumberFields = function (fields) {\n    var _this = this;\n    fields = _super.prototype.dataSourceDateFields.call(this, fields);\n    // Check if we have any series with date-fields\n    $iter.each(this.series.iterator(), function (series) {\n      fields = _this.populateDataSourceFields(fields, series.dataFields, [\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]);\n    });\n    return fields;\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n  XYChart.prototype.processConfig = function (config) {\n    if (config) {\n      // Save axis ranges for later processing\n      var xAxes = [];\n      var yAxes = [];\n      // Set up axes\n      if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\n        for (var i = 0, len = config.xAxes.length; i < len; i++) {\n          if (!config.xAxes[i].type) {\n            throw Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\n          } else if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\n            // Maybe convert string dates?\n            for (var x = 0, len_1 = config.xAxes[i][\"axisRanges\"].length; x < len_1; x++) {\n              var range = config.xAxes[i][\"axisRanges\"][x];\n              if ($type.hasValue(range.date) && $type.isString(range.date)) {\n                range.date = this.dateFormatter.parse(range.date);\n              }\n              if ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\n                range.endDate = this.dateFormatter.parse(range.endDate);\n              }\n            }\n            xAxes.push({\n              axisRanges: config.xAxes[i][\"axisRanges\"],\n              index: i\n            });\n            delete config.xAxes[i][\"axisRanges\"];\n          }\n        }\n      }\n      if ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\n        for (var i = 0, len = config.yAxes.length; i < len; i++) {\n          if (!config.yAxes[i].type) {\n            throw Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\n          } else if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\n            // Maybe convert string dates?\n            for (var x = 0, len_2 = config.yAxes[i][\"axisRanges\"].length; x < len_2; x++) {\n              var range = config.yAxes[i][\"axisRanges\"][x];\n              if ($type.hasValue(range.date) && $type.isString(range.date)) {\n                range.date = this.dateFormatter.parse(range.date);\n              }\n              if ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\n                range.endDate = this.dateFormatter.parse(range.endDate);\n              }\n            }\n            yAxes.push({\n              axisRanges: config.yAxes[i][\"axisRanges\"],\n              index: i\n            });\n            delete config.yAxes[i][\"axisRanges\"];\n          }\n        }\n      }\n      // Set up series\n      if ($type.hasValue(config.series) && $type.isArray(config.series)) {\n        for (var i = 0, len = config.series.length; i < len; i++) {\n          config.series[i].type = config.series[i].type || \"LineSeries\";\n        }\n      }\n      // Set up cursor\n      if ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\n        config.cursor.type = \"XYCursor\";\n      }\n      // Set up scrollbars\n      if ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\n        config.scrollbarX.type = \"Scrollbar\";\n      }\n      if ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\n        config.scrollbarY.type = \"Scrollbar\";\n      }\n      _super.prototype.processConfig.call(this, config);\n      // Finish up with ranges.\n      // We need to do this here because series are processed last in JSON\n      // config. Therefore their respective objects are not yet are available\n      // when axis (and respectively their ranges) are being processed.\n      if (yAxes.length) {\n        for (var i = 0, len = yAxes.length; i < len; i++) {\n          this.yAxes.getIndex(yAxes[i].index).config = {\n            axisRanges: yAxes[i].axisRanges\n          };\n        }\n      }\n      if (xAxes.length) {\n        for (var i = 0, len = xAxes.length; i < len; i++) {\n          this.xAxes.getIndex(xAxes[i].index).config = {\n            axisRanges: xAxes[i].axisRanges\n          };\n        }\n      }\n    }\n  };\n  /**\r\n   * This function is used to sort element's JSON config properties, so that\r\n   * some properties that absolutely need to be processed last, can be put at\r\n   * the end.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param a  Element 1\r\n   * @param b  Element 2\r\n   * @return Sorting number\r\n   */\n  XYChart.prototype.configOrder = function (a, b) {\n    if (a == b) {\n      return 0;\n    }\n    // Must come last\n    else if (a == \"scrollbarX\") {\n      return 1;\n    } else if (b == \"scrollbarX\") {\n      return -1;\n    } else if (a == \"scrollbarY\") {\n      return 1;\n    } else if (b == \"scrollbarY\") {\n      return -1;\n    } else if (a == \"cursor\") {\n      return 1;\n    } else if (b == \"cursor\") {\n      return -1;\n    } else if (a == \"series\") {\n      return 1;\n    } else if (b == \"series\") {\n      return -1;\n    } else {\n      return _super.prototype.configOrder.call(this, a, b);\n    }\n  };\n  /**\r\n   * Creates a new Series of type suitable for this chart.\r\n   *\r\n   * @return New series\r\n   */\n  XYChart.prototype.createSeries = function () {\n    return new XYSeries();\n  };\n  Object.defineProperty(XYChart.prototype, \"zoomOutButton\", {\n    /**\r\n     * @return Zoom out button\r\n     */\n    get: function () {\n      return this._zoomOutButton;\n    },\n    /**\r\n     * A [[Button]] element that is used for zooming out the chart.\r\n     *\r\n     * This button appears only when chart is zoomed in, and disappears\r\n     * autoamatically when it is zoome dout.\r\n     *\r\n     * @param button  Zoom out button\r\n     */\n    set: function (button) {\n      var _this = this;\n      this._zoomOutButton = button;\n      if (button) {\n        button.events.on(\"hit\", function () {\n          _this.zoomAxes(_this.xAxes, {\n            start: 0,\n            end: 1\n          });\n          _this.zoomAxes(_this.yAxes, {\n            start: 0,\n            end: 1\n          });\n        }, undefined, false);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all parameters from another [[XYChart]].\r\n   *\r\n   * @param source Source XYChart\r\n   */\n  XYChart.prototype.copyFrom = function (source) {\n    var _this = this;\n    source.xAxes.each(function (axis) {\n      var a = _this.xAxes.push(axis.clone());\n      a.chart = _this;\n      a.renderer.chart = _this;\n    });\n    source.yAxes.each(function (axis) {\n      var a = _this.yAxes.push(axis.clone());\n      a.renderer.chart = _this;\n      a.chart = _this;\n    });\n    //this.xAxes.copyFrom(source.xAxes);\n    //this.yAxes.copyFrom(source.yAxes);\n    _super.prototype.copyFrom.call(this, source);\n    //this.zoomOutButton.copyFrom(source.zoomOutButton);\n    if (source.cursor) {\n      this.cursor = source.cursor.clone();\n    }\n    if (source.scrollbarX) {\n      this.scrollbarX = source.scrollbarX.clone();\n    }\n    if (source.scrollbarY) {\n      this.scrollbarY = source.scrollbarY.clone();\n    }\n    //@todo copy all container properties\n  };\n  /**\r\n   * @ignore\r\n   */\n  XYChart.prototype.disposeData = function () {\n    _super.prototype.disposeData.call(this);\n    var scrollbarX = this.scrollbarX;\n    if (scrollbarX && scrollbarX instanceof XYChartScrollbar) {\n      scrollbarX.scrollbarChart.disposeData();\n    }\n    var scrollbarY = this.scrollbarY;\n    if (scrollbarY && scrollbarY instanceof XYChartScrollbar) {\n      scrollbarY.scrollbarChart.disposeData();\n    }\n    this.xAxes.each(function (axis) {\n      if (axis instanceof CategoryAxis) {\n        axis.disposeData();\n      }\n    });\n    this.yAxes.each(function (axis) {\n      if (axis instanceof CategoryAxis) {\n        axis.disposeData();\n      }\n    });\n  };\n  /**\r\n   * Adds one or several (array) of data items to the existing data.\r\n   *\r\n   * @param rawDataItem One or many raw data item objects\r\n   */\n  XYChart.prototype.addData = function (rawDataItem, removeCount) {\n    if (this.scrollbarX instanceof XYChartScrollbar) {\n      this.addScrollbarData(this.scrollbarX, removeCount);\n    }\n    if (this.scrollbarY instanceof XYChartScrollbar) {\n      this.addScrollbarData(this.scrollbarY, removeCount);\n    }\n    _super.prototype.addData.call(this, rawDataItem, removeCount);\n  };\n  /**\r\n   * @ignore\r\n   */\n  XYChart.prototype.addScrollbarData = function (scrollbar, removeCount) {\n    var chart = scrollbar.scrollbarChart;\n    chart._parseDataFrom = chart.data.length;\n    chart.invalidateData();\n  };\n  /**\r\n   * @ignore\r\n   */\n  XYChart.prototype.removeScrollbarData = function (scrollbar, removeCount) {\n    var chart = scrollbar.scrollbarChart;\n    if ($type.isNumber(removeCount)) {\n      while (removeCount > 0) {\n        var dataItem = this.dataItems.getIndex(0);\n        if (dataItem) {\n          chart.dataItems.remove(dataItem);\n        }\n        chart.dataUsers.each(function (dataUser) {\n          var dataItem = dataUser.dataItems.getIndex(0);\n          if (dataItem) {\n            dataUser.dataItems.remove(dataItem);\n          }\n        });\n        chart._parseDataFrom--;\n        removeCount--;\n      }\n      chart.invalidateData();\n    }\n  };\n  /**\r\n   * Removes elements from the beginning of data\r\n   *\r\n   * @param count number of elements to remove\r\n   */\n  XYChart.prototype.removeData = function (count) {\n    if (this.scrollbarX instanceof XYChartScrollbar) {\n      this.removeScrollbarData(this.scrollbarX, count);\n    }\n    if (this.scrollbarY instanceof XYChartScrollbar) {\n      this.removeScrollbarData(this.scrollbarY, count);\n    }\n    _super.prototype.removeData.call(this, count);\n  };\n  /**\r\n   * @param  value  Tap to activate?\r\n   */\n  XYChart.prototype.setTapToActivate = function (value) {\n    _super.prototype.setTapToActivate.call(this, value);\n    if (this.cursor) {\n      this.cursor.interactions.isTouchProtected = value;\n      this.plotContainer.interactions.isTouchProtected = value;\n    }\n  };\n  XYChart.prototype.handleTapToActivate = function () {\n    _super.prototype.handleTapToActivate.call(this);\n    if (this.cursor) {\n      this.cursor.interactions.isTouchProtected = false;\n      this.plotContainer.interactions.isTouchProtected = false;\n    }\n  };\n  XYChart.prototype.handleTapToActivateDeactivation = function () {\n    _super.prototype.handleTapToActivateDeactivation.call(this);\n    if (this.cursor) {\n      this.cursor.interactions.isTouchProtected = true;\n      this.plotContainer.interactions.isTouchProtected = true;\n    }\n  };\n  return XYChart;\n}(SerialChart);\nexport { XYChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"XYChart\"] = XYChart;\n/**\r\n * Add default responsive rules\r\n */\n/**\r\n * Remove horizontal scrollbar on narrow charts.\r\n */\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.maybeXS,\n  state: function (target, stateId) {\n    if (target instanceof XYChart && target.scrollbarX) {\n      var state = target.states.create(stateId);\n      var sbstate = target.scrollbarX.states.create(stateId);\n      sbstate.properties.disabled = true;\n      return state;\n    }\n    return null;\n  }\n});\n/**\r\n * Remove vertical scrollbar on short charts.\r\n */\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.maybeXS,\n  state: function (target, stateId) {\n    if (target instanceof XYChart && target.scrollbarY) {\n      var state = target.states.create(stateId);\n      var sbstate = target.scrollbarY.states.create(stateId);\n      sbstate.properties.disabled = true;\n      return state;\n    }\n    return null;\n  }\n});","map":{"version":3,"mappings":"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","names":["SerialChart","SerialChartDataItem","Container","List","ListDisposer","Color","ValueAxis","DateAxis","AxisRendererX","AxisRendererY","CategoryAxis","XYSeries","Disposer","ZoomOutButton","percent","registry","XYChartScrollbar","$math","$iter","$type","$utils","$array","$number","defaultRules","ResponsiveBreakpoints","__extends","_super","_this","className","applyTheme","maskBullets","arrangeTooltips","chartContainer","layout","padding","topAxesCont","createChild","shouldClone","width","zIndex","topAxesContainer","yAxesAndPlotCont","height","yAxesAndPlotContainer","bottomAxesCont","bottomAxesContainer","leftAxesCont","contentAlign","events","on","updateXAxesMargins","leftAxesContainer","plotCont","background","fillOpacity","plotContainer","mouseWheelBehavior","_cursorContainer","rightAxesCont","rightAxesContainer","seriesContainer","parent","bulletsContainer","zoomOutButton","align","valign","Number","MAX_SAFE_INTEGER","marginTop","marginRight","hide","axisBulletsContainer","isMeasured","_bulletMask","series","each","dataGrouped","_baseInterval","XYChart","applyInternalDefaults","exportable","hasValue","readerTitle","language","translate","draw","toFront","mask","updateSeriesLegend","iterator","invalidate","_parseDataFrom","xAxes","axis","dataChangeUpdate","yAxes","validateData","leftAxesWidth","measuredWidth","rightAxesWidth","paddingLeft","paddingRight","reinit","appeared","event","updateXAxis","target","updateYAxis","newValue","chart","renderer","_axisRendererX","observe","handleXAxisChange","axisLetter","handleXAxisRangeChange","dataProvider","processAxis","_axisRendererY","handleYAxisChange","handleYAxisRangeChange","range","getCommonAxisRange","scrollbarX","zoomAxes","toggleZoomOutButton","updateScrollbar","show_1","eachContinue","maxZoomCount","minZoomFactor","maxZoomFactor","round","end","start","seriesAppeared","show","scrollbarY","scrollbar","skipRangeEvents","axes","zoomable","syncWithAxis","axisStart","axisEnd","inversed","isNumber","opposite","toBack","processRenderer","_dataUsers","moveValue","gridContainer","breakContainer","addDisposer","dataUsers","removeValue","_disposers","push","point","spritePointToSprite","x","y","undefined","inited","invalidateDataItems","updateSeriesMasks","isIE","mainContainer","oldValue","xAxis","invalidateProcessedData","yAxis","resetExtremes","handleSeriesRemoved","Object","_xAxes","processXAxis","handleAxisRemoval","autoDispose","dispose","_yAxes","processYAxis","handleSeriesAdded","length","removeFromInvalidComponents","dataInvalid","used","fill","patterns","stroke","colors","next","backgroundOpacity","e","raiseCriticalError","_cursor","cursor","removeDispose","handleCursorPositionChange","handleCursorZoomStart","handleCursorZoomEnd","handleCursorPanStart","handleCursorPanning","handleCursorPanEnd","handleCursorCanceled","handleHideCursor","tapToActivate","setTapToActivate","visible","isHiding","xPosition_1","xPosition","yPosition_1","yPosition","showSeriesTooltip","exceptAxes_1","snapToSeries","downPoint","dataItems_1","snpSeries","isHidden","dataItems","dataItem","move","baseAxis","getSeriesDataItem","toAxisPosition","closestDataItem_1","getClosest","closestSeries","component","hideTooltip","showTooltipAtDataItem","handleSnap","_seriesPoints","_cursorXPosition","showAxisTooltip","_cursorYPosition","sortSeriesTooltips","legend","afterDraw","minDistance","Infinity","closestDataItem","xPos","positionToCoordinate","toGlobalPosition","yPos","xField","yField","getValue","dxPosition","getPositionX","locations","dyPosition","getPositionY","distance","Math","sqrt","pow","hideObjectTooltip","updateLegendValue","sprites","sprite","cursorTooltipEnabled","position","seriesPoints","snapTooltip","showTooltipAtPosition","tooltip","setBounds","spriteRectToSvg","pixelWidth","pixelHeight","cursor_1","maxTooltipDistance","cursorPoint_1","spritePointToSvg","nearestSeries_1","nearestPoint_1","smallestDistance_1","seriesPoint","fixedPoint","abs","getDistance","newSeriesPoints_1","tooltipDataItem","isHover","handleOutReal","np","topLeft_1","bottomRight_1","sum_1","filteredSeriesPoints_1","isInRectangle","firstSeries","getIndex","sort","a","b","order","reverse","averageY","maxY","svgPointToDocument","svgContainer","SVGContainer","top_1","bottom","spritePointToDocument","dropped","nextHeight","i","pointY","invalid","validate","label","pixelY","pixelMarginTop","nextY","len","measuredHeight","pixelMarginBottom","except","indexOf","invertRange","difference","behavior","xRange","getUpdatedRange","priority","yRange","_panStartXRange","_panStartYRange","_panEndXRange","panEndRange","panStartRange","delta","snapOnPan","_panEndYRange","maxPanOut","axisRange","newStart","max","newEnd","min","newRange","_scrollbarX","startGrip","endGrip","orientation","handleXScrollbarChange","updateThumb","adapter","add","arg","value","getPositionLabel","_scrollbarY","handleYScrollbarChange","fixRange","instantly","declination","stop","realRange","originalRange","minZoomCount","cellWidth","getCellEndPosition","getCellStartPosition","roundPosition","startLocation","endLocation","d","zoom","getPropertyValue","setPropertyValue","svgPoint","documentPointToSvg","htmlContainer","cssScale","plotPoint","svgPointToSprite","shift","handleWheelReal","horizontalMouseWheelBehavior","rangeX","rangeY","shiftStep","singleItemStep","differenceX","newStartX","newEndX","differenceY","newStartY","newEndY","locationX","maxWidth","location2X","locationY","maxHeight","location2Y","_mouseWheelDisposer","handleWheel","wheelable","hoverable","_mouseWheelDisposer2","handleHorizontalWheel","fields","dataSourceDateFields","populateDataSourceFields","dataFields","config","isArray","type","Error","len_1","date","isString","dateFormatter","parse","endDate","axisRanges","index","len_2","processConfig","configOrder","_zoomOutButton","button","source","clone","copyFrom","disposeData","scrollbarChart","rawDataItem","removeCount","addScrollbarData","addData","data","invalidateData","remove","dataUser","count","removeScrollbarData","removeData","interactions","isTouchProtected","handleTapToActivate","handleTapToActivateDeactivation","registeredClasses","relevant","maybeXS","state","stateId","states","create","sbstate","properties","disabled"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\types\\XYChart.ts"],"sourcesContent":["/**\r\n * XY Chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { List, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { Scrollbar, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { XYCursor, IXYCursorEvents } from \"../cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, Disposer } from \"../../core/utils/Disposer\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\r\n\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $number from \"../../core/utils/Number\";\r\n\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart]].\r\n */\r\nexport interface IXYChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[XYChart]].\r\n */\r\nexport interface IXYChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * A container that is used as a maske for bullets so that they can't\r\n\t * \"spill\" outside of the plot area.\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @default \"none\"\r\n\t */\r\n\tmouseWheelBehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when horizontal mouse wheel is rotated.\r\n\t *\r\n\t * @default \"none\"\r\n\t */\r\n\thorizontalMouseWheelBehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Specifies if chart should arrange series tooltips so that they won't\r\n\t * overlap.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tarrangeTooltips?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart]].\r\n */\r\nexport interface IXYChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartAdapters extends ISerialChartAdapters, IXYChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IXYChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: XYSeries;\r\n\r\n\t/**\r\n\t * A list of horizontal axes.\r\n\t */\r\n\tprotected _xAxes: List<Axis<this[\"_xAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A list of vertical axes.\r\n\t */\r\n\tprotected _yAxes: List<Axis<this[\"_yAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A container that holds vertical axes and plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic yAxesAndPlotContainer: Container\r\n\r\n\t/**\r\n\t * A container that holds top axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic topAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds bottom axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic bottomAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds left axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic leftAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds right axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic rightAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container for plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic plotContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to horizontal [[Scrollbar]].\r\n\t */\r\n\tprotected _scrollbarX: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to vertical [[Scrollbar]].\r\n\t */\r\n\tprotected _scrollbarY: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to chart's cursor.\r\n\t */\r\n\tpublic _cursor: XYCursor;\r\n\r\n\t/**\r\n\t * A container that chart's cursor is placed in.\r\n\t */\r\n\tprotected _cursorContainer: Container;\r\n\r\n\t/**\r\n\t * Defines the type of horizontal axis rederer.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX = AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis rederer.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY = AxisRendererY;\r\n\r\n\t/**\r\n\t * Defines the type horizontal axis renderer.\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis renderer.\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererY;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t */\r\n\tprotected _zoomOutButton: Button;\r\n\r\n\t/**\r\n\t * An element that is used as a mask to contain bullets from spilling out of\r\n\t * the plot area.\r\n\t */\r\n\tprotected _bulletMask: Sprite;\r\n\r\n\r\n\tprotected _panStartXRange: IRange;\r\n\r\n\tprotected _panStartYRange: IRange;\r\n\r\n\tprotected _panEndXRange: IRange;\r\n\r\n\tprotected _panEndYRange: IRange;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\tprotected _mouseWheelDisposer2: IDisposer;\r\n\r\n\tprotected _cursorXPosition: number;\r\n\r\n\tprotected _cursorYPosition: number;\r\n\r\n\t/**\r\n\t * Holds a reference to the container axis bullets are drawn in.\r\n\t */\r\n\tpublic axisBulletsContainer: Container;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYChart\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.margin(10, 10, 10, 10);\r\n\t\tthis.maskBullets = true;\r\n\t\tthis.arrangeTooltips = true;\r\n\r\n\t\t// Create main chart container\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.layout = \"vertical\";\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Create top axes container\r\n\t\tlet topAxesCont = chartContainer.createChild(Container);\r\n\t\ttopAxesCont.shouldClone = false;\r\n\t\ttopAxesCont.layout = \"vertical\";\r\n\t\ttopAxesCont.width = percent(100);\r\n\t\ttopAxesCont.zIndex = 1;\r\n\t\tthis.topAxesContainer = topAxesCont;\r\n\r\n\t\t// Create vertical axes and plot area container\r\n\t\t// Plot area and vertical axes share the whole width of the chart,\r\n\t\t// so we need to put then into a separate container so that layouting\r\n\t\t// engine takes care of the positioning\r\n\t\tlet yAxesAndPlotCont = chartContainer.createChild(Container);\r\n\t\tyAxesAndPlotCont.shouldClone = false;\r\n\t\tyAxesAndPlotCont.layout = \"horizontal\";\r\n\t\tyAxesAndPlotCont.width = percent(100);\r\n\t\tyAxesAndPlotCont.height = percent(100);\r\n\t\tyAxesAndPlotCont.zIndex = 0;\r\n\t\tthis.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n\r\n\t\t// Create a container for bottom axes\r\n\t\tlet bottomAxesCont = chartContainer.createChild(Container);\r\n\t\tbottomAxesCont.shouldClone = false;\r\n\t\tbottomAxesCont.width = percent(100);\r\n\t\tbottomAxesCont.layout = \"vertical\";\r\n\t\tbottomAxesCont.zIndex = 1;\r\n\t\tthis.bottomAxesContainer = bottomAxesCont;\r\n\r\n\t\t// Create a container for left-side axes\r\n\t\tlet leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tleftAxesCont.shouldClone = false;\r\n\t\tleftAxesCont.layout = \"horizontal\";\r\n\t\tleftAxesCont.height = percent(100);\r\n\t\tleftAxesCont.contentAlign = \"right\";\r\n\t\tleftAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tleftAxesCont.zIndex = 1;\r\n\t\tthis.leftAxesContainer = leftAxesCont;\r\n\r\n\t\t// Create a container for plot area\r\n\t\tlet plotCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tplotCont.shouldClone = false;\r\n\t\tplotCont.height = percent(100);\r\n\t\tplotCont.width = percent(100);\r\n\t\t// Create transparend background for plot container so that hover works\r\n\t\t// on all of it\r\n\t\tplotCont.background.fillOpacity = 0;\r\n\t\tthis.plotContainer = plotCont;\r\n\r\n\t\t// must go below plot container\r\n\t\tthis.mouseWheelBehavior = \"none\";\r\n\r\n\t\tthis._cursorContainer = plotCont;\r\n\r\n\t\t// Create a container for right-side axes\r\n\t\tlet rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\trightAxesCont.shouldClone = false;\r\n\t\trightAxesCont.layout = \"horizontal\";\r\n\t\trightAxesCont.height = percent(100);\r\n\t\trightAxesCont.zIndex = 1;\r\n\t\trightAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tthis.rightAxesContainer = rightAxesCont;\r\n\r\n\t\tthis.seriesContainer.parent = plotCont;\r\n\t\tthis.bulletsContainer.parent = plotCont;\r\n\r\n\t\tlet zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.align = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\t// Create a container for bullets\r\n\t\tlet axisBulletsContainer: Container = this.plotContainer.createChild(Container);\r\n\t\taxisBulletsContainer.shouldClone = false;\r\n\t\taxisBulletsContainer.width = percent(100);\r\n\t\taxisBulletsContainer.height = percent(100);\r\n\t\taxisBulletsContainer.isMeasured = false;\r\n\t\taxisBulletsContainer.zIndex = 4;\r\n\t\taxisBulletsContainer.layout = \"none\";\r\n\t\tthis.axisBulletsContainer = axisBulletsContainer;\r\n\r\n\t\tthis._bulletMask = this.plotContainer;\r\n\r\n\t\tthis.events.on(\"beforedatavalidated\", () => {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.dataGrouped = false;\r\n\t\t\t\tseries._baseInterval = {};\r\n\t\t\t})\r\n\t\t}, this, false);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tthis.zoomOutButton.exportable = false;\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tthis.seriesContainer.toFront();\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tif (this.maskBullets) {\r\n\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t}\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a redrawing of all chart's series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updatePlotElements(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers data (re)validation which in turn can cause a redraw of the\r\n\t * whole chart or just aprticular series / elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\t// tell axes that data changed\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.dataChangeUpdate();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates margins for horizontal axes based on settings and available space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateXAxesMargins(): void {\r\n\r\n\t\tlet leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n\t\tlet rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n\t\tlet bottomAxesCont = this.bottomAxesContainer;\r\n\r\n\t\tif (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\tbottomAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\tbottomAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\r\n\t\tlet topAxesCont = this.topAxesContainer;\r\n\r\n\t\tif (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\ttopAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\ttopAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a re-initialization of this element.\r\n\t *\r\n\t * Will result in complete redrawing of the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic reinit(): void {\r\n\t\tsuper.reinit();\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\tseries.appeared = false;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the horizontal axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event An event object\r\n\t */\r\n\tpublic handleXAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateXAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the vertical axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event An event object\r\n\t */\r\n\tpublic handleYAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateYAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new horizontal (X) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Axis insert event\r\n\t */\r\n\tpublic processXAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\tif (!axis.renderer) {\r\n\t\t\taxis.renderer = new this._axisRendererX();\r\n\t\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this, false);\r\n\t\t}\r\n\t\taxis.axisLetter = \"X\";\r\n\r\n\t\taxis.events.on(\"startendchanged\", this.handleXAxisRangeChange, this, false);\r\n\t\t//axis.events.on(\"endchanged\", this.handleXAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateXAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new vertical (Y) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Axis insert event\r\n\t */\r\n\tpublic processYAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\t\tif (!axis.renderer) {\r\n\t\t\taxis.renderer = new this._axisRendererY();\r\n\t\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this, false);\r\n\t\t}\r\n\t\taxis.axisLetter = \"Y\";\r\n\r\n\t\taxis.events.on(\"startendchanged\", this.handleYAxisRangeChange, this, false);\r\n\t\t//axis.events.on(\"endchanged\", this.handleYAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateYAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.zoomAxes(this.xAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarX, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n\t * zoomed out or not.\r\n\t */\r\n\tpublic toggleZoomOutButton() {\r\n\t\tif (this.zoomOutButton) {\r\n\t\t\tlet show = false;\r\n\r\n\t\t\t$iter.eachContinue(this.xAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif (axis.toggleZoomOutButton) {\r\n\t\t\t\t\tif (axis.maxZoomCount > 0) {\r\n\t\t\t\t\t\tlet minZoomFactor: number = axis.maxZoomFactor / axis.maxZoomCount;\r\n\t\t\t\t\t\tif ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\r\n\t\t\t\t\t\t\tshow = true;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\r\n\t\t\t\t\t\t\tshow = true;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\t$iter.eachContinue(this.yAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif (axis.toggleZoomOutButton) {\r\n\t\t\t\t\tif (axis.maxZoomCount > 0) {\r\n\t\t\t\t\t\tlet minZoomFactor: number = axis.maxZoomFactor / axis.maxZoomCount;\r\n\t\t\t\t\t\tif ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\r\n\t\t\t\t\t\t\tshow = true;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\r\n\t\t\t\t\t\t\tshow = true;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.seriesAppeared) {\r\n\t\t\t\tshow = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (show) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * moved this check to a separate method so that we could override it in TreeMapSeries\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\tlet appeared: boolean = false;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.appeared) {\r\n\t\t\t\tappeared = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn appeared;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.zoomAxes(this.yAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarY, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a relative scrollbar whenever data range of the axis changes.\r\n\t *\r\n\t * @param scrollbar  Scrollbar instance\r\n\t * @param range      New data (values) range of the axis\r\n\t */\r\n\tprotected updateScrollbar(scrollbar: Scrollbar, range: IRange): void {\r\n\t\tif (scrollbar) {\r\n\t\t\tscrollbar.skipRangeEvents();\r\n\t\t\tscrollbar.start = range.start;\r\n\t\t\tscrollbar.end = range.end;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a common range of values between a list of axes.\r\n\t *\r\n\t * This is used to synchronize the zoom between multiple axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axes  A list of axes\r\n\t * @return Common value range\r\n\t */\r\n\tpublic getCommonAxisRange(axes: List<Axis>): IRange {\r\n\t\tlet start: Optional<number>;\r\n\t\tlet end: Optional<number>;\r\n\r\n\t\taxes.each((axis) => {\r\n\t\t\tif (!axis.zoomable || (axis instanceof ValueAxis && axis.syncWithAxis)) {\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet axisStart = axis.start;\r\n\t\t\t\tlet axisEnd = axis.end;\r\n\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\taxisStart = 1 - axis.end;\r\n\t\t\t\t\taxisEnd = 1 - axis.start;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!$type.isNumber(start) || (axisStart < start)) {\r\n\t\t\t\t\tstart = axisStart;\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.isNumber(end) || (axisEnd > end)) {\r\n\t\t\t\t\tend = axisEnd;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.topAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.bottomAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.rightAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.leftAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n\t * and containers for placement.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\t// Value axis does not use data directly, only category axis does\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\tthis._dataUsers.moveValue(axis);\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\r\n\t\trenderer.gridContainer.parent = this.plotContainer;\r\n\t\trenderer.gridContainer.toBack();\r\n\r\n\t\trenderer.breakContainer.parent = this.plotContainer;\r\n\t\trenderer.breakContainer.toFront();\r\n\t\trenderer.breakContainer.zIndex = 10;\r\n\r\n\t\taxis.addDisposer(new Disposer(() => {\r\n\t\t\tthis.dataUsers.removeValue(axis);\r\n\t\t}))\r\n\r\n\t\trenderer.bulletsContainer.parent = this.axisBulletsContainer;\r\n\r\n\t\tthis._disposers.push(axis.events.on(\"positionchanged\", () => {\r\n\t\t\tlet point = $utils.spritePointToSprite({ x: 0, y: 0 }, axis, this.axisBulletsContainer);\r\n\t\t\tif (axis.renderer instanceof AxisRendererY) {\r\n\t\t\t\trenderer.bulletsContainer.y = point.y;\r\n\t\t\t}\r\n\t\t\tif (axis.renderer instanceof AxisRendererX) {\r\n\t\t\t\trenderer.bulletsContainer.x = point.x;\r\n\t\t\t}\r\n\t\t}, undefined, false));\r\n\r\n\t\tthis.plotContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\taxis.invalidateDataItems();\r\n\t\t\t\tthis.updateSeriesMasks();\r\n\t\t\t}\r\n\t\t}, axis, false);\r\n\t}\r\n\r\n\t/**\r\n\t * This is done because for some reason IE doesn't change mask if path of a\r\n\t * mask changes.\r\n\t */\r\n\tprotected updateSeriesMasks(): void {\r\n\t\tif ($utils.isIE()) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tlet mask = series.mainContainer.mask;\r\n\t\t\t\tseries.mainContainer.mask = undefined;\r\n\t\t\t\tseries.mainContainer.mask = mask;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet series = event.oldValue;\r\n\r\n\t\tif (series) {\r\n\t\t\tif (series.xAxis) {\r\n\t\t\t\tseries.xAxis.series.removeValue(series);\r\n\t\t\t\tseries.xAxis.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t\tif (series.yAxis) {\r\n\t\t\t\tseries.yAxis.series.removeValue(series);\r\n\t\t\t\tseries.yAxis.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t\t// otherwise extremes won't change\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.resetExtremes();\r\n\t\t\t})\r\n\t\t}\r\n\t\tsuper.handleSeriesRemoved(event);\r\n\t}\r\n\r\n\t/**\r\n\t * A list of horizontal (X) axes.\r\n\t *\r\n\t * @return List of axes\r\n\t */\r\n\tpublic get xAxes(): List<Axis<this[\"_xAxisRendererType\"]>> {\r\n\t\tif (!this._xAxes) {\r\n\t\t\tthis._xAxes = new List<Axis<this[\"_xAxisRendererType\"]>>();\r\n\t\t\tthis._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\r\n\t\t\tthis._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._xAxes, false));\r\n\t\t}\r\n\r\n\t\treturn this._xAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic handleAxisRemoval(event: IListEvents<Axis>[\"removed\"]) {\r\n\t\tlet axis = event.oldValue;\r\n\t\tthis.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\r\n\t\tif (axis.autoDispose) {\r\n\t\t\taxis.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of vertical (Y) axes.\r\n\t *\r\n\t * @return List of axes\r\n\t */\r\n\tpublic get yAxes(): List<Axis<this[\"_yAxisRendererType\"]>> {\r\n\t\tif (!this._yAxes) {\r\n\t\t\tthis._yAxes = new List<Axis<this[\"_yAxisRendererType\"]>>();\r\n\t\t\tthis._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\r\n\t\t\tthis._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._yAxes, false));\r\n\t\t}\r\n\r\n\t\treturn this._yAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[XYSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]): void {\r\n\t\ttry {\r\n\t\t\tsuper.handleSeriesAdded(event);\r\n\t\t\tlet series: XYSeries = event.newValue;\r\n\r\n\t\t\tif (this.xAxes.length == 0 || this.yAxes.length == 0) {\r\n\t\t\t\tregistry.removeFromInvalidComponents(series);\r\n\t\t\t\tseries.dataInvalid = false;\r\n\t\t\t}\r\n\r\n\t\t\t$utils.used(series.xAxis); // this is enough to get axis, handled in getter\r\n\t\t\t$utils.used(series.yAxis); // this is enough to get axis, handled in getter\r\n\r\n\t\t\tseries.maskBullets = series.maskBullets;\r\n\r\n\t\t\tif (series.fill == undefined) {\r\n\t\t\t\tif (this.patterns) {\r\n\t\t\t\t\tif (!$type.hasValue(series.stroke)) {\r\n\t\t\t\t\t\tseries.stroke = this.colors.next();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tseries.fill = this.patterns.next();\r\n\t\t\t\t\tif ($type.hasValue(series.fillOpacity)) {\r\n\t\t\t\t\t\tseries.fill.backgroundOpacity = series.fillOpacity;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (series.stroke instanceof Color) {\r\n\t\t\t\t\t\tseries.fill.stroke = series.stroke;\r\n\t\t\t\t\t\tseries.fill.fill = series.stroke;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.fill = this.colors.next();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.hasValue(series.stroke)) {\r\n\t\t\t\tseries.stroke = series.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's [[Cursor]].\r\n\t *\r\n\t * @param cursor  Cursor\r\n\t */\r\n\tpublic set cursor(cursor: this[\"_cursor\"]) {\r\n\t\tif (this._cursor != cursor) {\r\n\t\t\tif (this._cursor) {\r\n\t\t\t\tthis.removeDispose(this._cursor);\r\n\t\t\t}\r\n\r\n\t\t\tthis._cursor = cursor;\r\n\r\n\t\t\tif (cursor) {\r\n\t\t\t\t// TODO this is wrong, fix it\r\n\t\t\t\tthis._disposers.push(cursor);\r\n\t\t\t\tcursor.chart = this;\r\n\t\t\t\tcursor.shouldClone = false;\r\n\t\t\t\tcursor.parent = this._cursorContainer;\r\n\t\t\t\tcursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\r\n\t\t\t\tcursor.events.on(\"panning\", this.handleCursorPanning, this, false);\r\n\t\t\t\tcursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\r\n\t\t\t\tcursor.events.on(\"hidden\", this.handleHideCursor, this, false);\r\n\t\t\t\tcursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n\r\n\t\t\t\tif (this.tapToActivate) {\r\n\t\t\t\t\t// We need this in order to setup cursor properly\r\n\t\t\t\t\tthis.setTapToActivate(this.tapToActivate);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Cursor\r\n\t */\r\n\tpublic get cursor(): this[\"_cursor\"] {\r\n\t\treturn this._cursor;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks when the cursor's position changes, e.g. shows proper\r\n\t * tooltips on axes and series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleCursorPositionChange(): void {\r\n\r\n\t\tlet cursor = this.cursor;\r\n\r\n\t\tif (cursor.visible && !cursor.isHiding) {\r\n\t\t\tlet xPosition: number = this.cursor.xPosition;\r\n\t\t\tlet yPosition: number = this.cursor.yPosition;\r\n\r\n\t\t\tthis.showSeriesTooltip({\r\n\t\t\t\tx: xPosition,\r\n\t\t\t\ty: yPosition\r\n\t\t\t});\r\n\r\n\t\t\tlet exceptAxes: Axis[] = [];\r\n\t\t\tlet snapToSeries = cursor.snapToSeries;\r\n\r\n\t\t\tif (snapToSeries && !cursor.downPoint) {\r\n\t\t\t\tif (snapToSeries instanceof XYSeries) {\r\n\t\t\t\t\tsnapToSeries = [snapToSeries];\r\n\t\t\t\t}\r\n\t\t\t\tlet dataItems: XYSeriesDataItem[] = [];\r\n\r\n\t\t\t\t$array.each(snapToSeries, (snpSeries) => {\r\n\t\t\t\t\tif (!snpSeries.isHidden && !snpSeries.isHiding) {\r\n\r\n\t\t\t\t\t\tlet xAxis = snpSeries.xAxis;\r\n\t\t\t\t\t\tlet yAxis = snpSeries.yAxis;\r\n\r\n\t\t\t\t\t\tif (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis) && yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\r\n\r\n\t\t\t\t\t\t\tsnpSeries.dataItems.each((dataItem) => {\r\n\t\t\t\t\t\t\t\tdataItems.push(dataItem);\r\n\t\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t\t$array.move(exceptAxes, snpSeries.yAxis);\r\n\t\t\t\t\t\t\t$array.move(exceptAxes, snpSeries.xAxis);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (snpSeries.baseAxis == snpSeries.xAxis) {\r\n\t\t\t\t\t\t\t\t$array.move(exceptAxes, snpSeries.yAxis);\r\n\t\t\t\t\t\t\t\tdataItems.push(xAxis.getSeriesDataItem(snpSeries, xAxis.toAxisPosition(xPosition), true));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (snpSeries.baseAxis == snpSeries.yAxis) {\r\n\t\t\t\t\t\t\t\t$array.move(exceptAxes, snpSeries.xAxis);\r\n\t\t\t\t\t\t\t\tdataItems.push(yAxis.getSeriesDataItem(snpSeries, yAxis.toAxisPosition(yPosition), true));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\tlet closestDataItem = this.getClosest(dataItems, xPosition, yPosition);\r\n\r\n\t\t\t\tif (closestDataItem) {\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\tlet closestSeries = closestDataItem.component;\r\n\t\t\t\t\t\tif (series != closestSeries) {\r\n\t\t\t\t\t\t\tseries.hideTooltip();\r\n\t\t\t\t\t\t\tif (series.xAxis != closestSeries.xAxis) {\r\n\t\t\t\t\t\t\t\tseries.xAxis.hideTooltip();\r\n\t\t\t\t\t\t\t\texceptAxes.push(series.xAxis);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (series.yAxis != closestSeries.yAxis) {\r\n\t\t\t\t\t\t\t\tseries.yAxis.hideTooltip();\r\n\t\t\t\t\t\t\t\texceptAxes.push(series.yAxis);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tclosestDataItem.component.showTooltipAtDataItem(closestDataItem);\r\n\t\t\t\t\tcursor.handleSnap(closestDataItem.component);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//}\r\n\t\t\tthis._seriesPoints = [];\r\n\r\n\t\t\tif (this._cursorXPosition != xPosition) {\r\n\t\t\t\tthis.showAxisTooltip(this.xAxes, xPosition, exceptAxes);\r\n\t\t\t}\r\n\t\t\tif (this._cursorYPosition != yPosition) {\r\n\t\t\t\tthis.showAxisTooltip(this.yAxes, yPosition, exceptAxes);\r\n\t\t\t}\r\n\t\t\tif (this.arrangeTooltips) {\r\n\t\t\t\tthis.sortSeriesTooltips(this._seriesPoints);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.legend) {\r\n\t\t\t\tthis.legend.afterDraw();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Finds closest data item to position out of the array of items.\r\n\t *\r\n\t * @since 4.9.29\r\n\t * @param   dataItems  Array of items\r\n\t * @param              xPosition X position\r\n\t * @param              yPosition Y position\r\n\t * @return             Data item\r\n\t */\r\n\tpublic getClosest(dataItems: XYSeriesDataItem[], xPosition: number, yPosition: number): XYSeriesDataItem {\r\n\t\tlet minDistance = Infinity;\r\n\t\tlet closestDataItem: XYSeriesDataItem\r\n\r\n\t\t$array.eachContinue(dataItems, (dataItem) => {\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet xAxis = dataItem.component.xAxis;\r\n\t\t\t\tlet yAxis = dataItem.component.yAxis;\r\n\r\n\t\t\t\tlet xPos = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.toAxisPosition(xPosition)));\r\n\t\t\t\tlet yPos = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.toAxisPosition(yPosition)));\r\n\r\n\t\t\t\tlet xField = dataItem.component.xField;\r\n\t\t\t\tlet yField = dataItem.component.yField;\r\n\r\n\t\t\t\tif (xAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(xField))) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\tif (yAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(yField))) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet dxPosition = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.getPositionX(dataItem, xField, dataItem.locations[xField], \"valueX\")));\r\n\t\t\t\tlet dyPosition = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.getPositionY(dataItem, yField, dataItem.locations[yField], \"valueY\")));\r\n\r\n\t\t\t\tlet distance = Math.sqrt(Math.pow(xPos - dxPosition, 2) + Math.pow(yPos - dyPosition, 2));\r\n\r\n\t\t\t\tif (distance < minDistance) {\r\n\t\t\t\t\tminDistance = distance;\r\n\t\t\t\t\tclosestDataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn closestDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleHideCursor(): void {\r\n\t\tthis.hideObjectTooltip(this.xAxes);\r\n\t\tthis.hideObjectTooltip(this.yAxes);\r\n\t\tthis.hideObjectTooltip(this.series);\r\n\t\tthis._cursorXPosition = undefined;\r\n\t\tthis._cursorYPosition = undefined;\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates values for each series' legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSeriesLegend(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.updateLegendValue();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Hides a tooltip for a list of objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param sprites  A list of sprites to hide tooltip for\r\n\t */\r\n\tpublic hideObjectTooltip(sprites: List<Axis | XYSeries>): void {\r\n\t\t$iter.each(sprites.iterator(), (sprite) => {\r\n\t\t\tif (sprite.cursorTooltipEnabled) {\r\n\t\t\t\tsprite.hideTooltip(0);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a tooltip for all chart's series, using specific coordinates as a\r\n\t * reference point.\r\n\t *\r\n\t * The tooltip might be shown at different coordinates depending on the\r\n\t * actual data point's position, overlapping with other tooltips, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Reference point\r\n\t */\r\n\tpublic showSeriesTooltip(position?: IPoint): void {\r\n\r\n\t\tif (!position) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.hideTooltip();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\t//if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\r\n\r\n\t\t\tif ((series.xAxis instanceof DateAxis && series.xAxis.snapTooltip) || (series.yAxis instanceof DateAxis && series.yAxis.snapTooltip)) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet point = series.showTooltipAtPosition(position.x, position.y);\r\n\t\t\t\tif (point) {\r\n\t\t\t\t\tseries.tooltip.setBounds($utils.spriteRectToSvg({ x: 0, y: 0, width: this.pixelWidth, height: this.pixelHeight }, this));\r\n\t\t\t\t\tseriesPoints.push({ series: series, point: point });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//}\r\n\t\t});\r\n\r\n\t\tif (this.arrangeTooltips) {\r\n\t\t\tthis.sortSeriesTooltips(seriesPoints);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic sortSeriesTooltips(seriesPoints: { point: IPoint, series: XYSeries }[]) {\r\n\t\tif (seriesPoints.length > 0) {\r\n\t\t\tlet cursor = this.cursor;\r\n\r\n\t\t\tif (cursor && $type.isNumber(cursor.maxTooltipDistance)) {\r\n\r\n\t\t\t\tlet cursorPoint = $utils.spritePointToSvg({ x: cursor.point.x, y: cursor.point.y }, cursor);\r\n\r\n\t\t\t\tlet nearestSeries: XYSeries;\r\n\t\t\t\tlet nearestPoint: IPoint;\r\n\t\t\t\tlet smallestDistance: number = Infinity;\r\n\r\n\t\t\t\t$array.each(seriesPoints, (seriesPoint) => {\r\n\t\t\t\t\tlet series = seriesPoint.series;\r\n\t\t\t\t\tlet fixedPoint = seriesPoint.point;\r\n\t\t\t\t\tif (fixedPoint) {\r\n\t\t\t\t\t\tlet point = { x: fixedPoint.x, y: fixedPoint.y };\r\n\r\n\t\t\t\t\t\tlet distance = Math.abs($math.getDistance(point, cursorPoint));\r\n\t\t\t\t\t\tif (distance < smallestDistance) {\r\n\t\t\t\t\t\t\tnearestPoint = point;\r\n\t\t\t\t\t\t\tsmallestDistance = distance;\r\n\t\t\t\t\t\t\tnearestSeries = series;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tlet newSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t\t\tif (nearestSeries) {\r\n\r\n\t\t\t\t\t$array.each(seriesPoints, (seriesPoint) => {\r\n\t\t\t\t\t\tif (Math.abs($math.getDistance(seriesPoint.point, nearestPoint)) <= Math.abs(cursor.maxTooltipDistance)) {\r\n\t\t\t\t\t\t\tnewSeriesPoints.push({ series: seriesPoint.series, point: seriesPoint.point });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlet tooltipDataItem = seriesPoint.series.tooltipDataItem;\r\n\t\t\t\t\t\t\tif (tooltipDataItem) {\r\n\t\t\t\t\t\t\t\t$array.each(tooltipDataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\t\tsprite.isHover = false;\r\n\t\t\t\t\t\t\t\t\tsprite.handleOutReal(); // to avoid flicker\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tseriesPoint.series.hideTooltip(0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tif (cursor.maxTooltipDistance < 0) {\r\n\t\t\t\t\t\tif (newSeriesPoints.length > 0) {\r\n\t\t\t\t\t\t\t$array.each(newSeriesPoints, (np) => {\r\n\t\t\t\t\t\t\t\tif (nearestSeries != np.series) {\r\n\t\t\t\t\t\t\t\t\tnp.series.hideTooltip(0);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tnewSeriesPoints = [{ series: nearestSeries, point: nearestPoint }];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseriesPoints = newSeriesPoints;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet topLeft = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n\t\t\tlet bottomRight = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n\r\n\t\t\tlet sum = 0;\r\n\t\t\tlet filteredSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t\t$array.each(seriesPoints, (seriesPoint) => {\r\n\t\t\t\tlet point = seriesPoint.point;\r\n\t\t\t\tif (point && $math.isInRectangle(point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {\r\n\t\t\t\t\tfilteredSeriesPoints.push({ point: point, series: seriesPoint.series });\r\n\t\t\t\t\tsum += point.y;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tseriesPoints = filteredSeriesPoints;\r\n\r\n\t\t\tlet firstSeries = this.series.getIndex(0);\r\n\t\t\tlet inversed = false;\r\n\t\t\tif (firstSeries && firstSeries.yAxis && firstSeries.yAxis.renderer.inversed) {\r\n\t\t\t\tinversed = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (inversed) {\r\n\t\t\t\tseriesPoints.sort((a, b) => $number.order(a.point.y, b.point.y))\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseriesPoints.sort((a, b) => $number.order(b.point.y, a.point.y))\r\n\t\t\t\tseriesPoints.reverse();\r\n\t\t\t}\r\n\r\n\t\t\tlet averageY = sum / seriesPoints.length;\r\n\t\t\tlet maxY = $utils.svgPointToDocument({ x: 0, y: 0 }, this.svgContainer.SVGContainer).y;\r\n\r\n\t\t\tif (seriesPoints.length > 0) {\r\n\t\t\t\tlet top = topLeft.y;\r\n\t\t\t\tlet bottom = bottomRight.y;\r\n\r\n\t\t\t\t// TODO is this needed ?\r\n\t\t\t\t$utils.spritePointToDocument({ x: 0, y: top }, this);\r\n\r\n\t\t\t\tlet dropped = false;\r\n\r\n\t\t\t\tif (averageY > top + (bottom - top) / 2) {\r\n\t\t\t\t\tlet nextHeight = bottom;\r\n\t\t\t\t\tfor (let i = seriesPoints.length - 1; i >= 0; i--) {\r\n\t\t\t\t\t\tlet series = seriesPoints[i].series;\r\n\r\n\t\t\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\t\t\tlet pointY = seriesPoints[i].point.y;\r\n\r\n\t\t\t\t\t\ttooltip.setBounds({ x: 0, y: -maxY, width: this.pixelWidth, height: nextHeight + maxY });\r\n\r\n\t\t\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttooltip.toBack();\r\n\t\t\t\t\t\tnextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n\r\n\t\t\t\t\t\tif (nextHeight < -maxY) {\r\n\t\t\t\t\t\t\tdropped = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (averageY <= top + (bottom - top) / 2 || dropped) {\r\n\t\t\t\t\tlet nextY = top;\r\n\t\t\t\t\tfor (let i = 0, len = seriesPoints.length; i < len; i++) {\r\n\t\t\t\t\t\tlet series = seriesPoints[i].series;\r\n\t\t\t\t\t\tlet pointY = seriesPoints[i].point.y;\r\n\t\t\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\t\t\ttooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n\r\n\t\t\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttooltip.toBack();\r\n\r\n\t\t\t\t\t\tnextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows tooltips for a list of axes at specific position.\r\n\t *\r\n\t * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n\t * vertical axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axes      List of axes to show tooltip on\r\n\t * @param position  Position (px)\r\n\t */\r\n\tpublic showAxisTooltip(axes: List<Axis>, position: number, except?: Axis[]): void {\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tif (!except || except.indexOf(axis) == -1) {\r\n\t\t\t\tif (this.dataItems.length > 0 || axis.dataItems.length > 0) {\r\n\t\t\t\t\taxis.showTooltipAtPosition(position);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n\t *\r\n\t * @param axis   Axis\r\n\t * @param range  Range\r\n\t * @return Modified range\r\n\t */\r\n\tpublic getUpdatedRange(axis: Axis<this[\"_xAxisRendererType\"]>, range: IRange): IRange {\r\n\r\n\t\tif (!axis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet start: number;\r\n\t\tlet end: number;\r\n\t\tlet inversed = axis.renderer.inversed;\r\n\r\n\t\tif (inversed) {\r\n\t\t\t$math.invertRange(range);\r\n\r\n\t\t\tstart = 1 - axis.end;\r\n\t\t\tend = 1 - axis.start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstart = axis.start;\r\n\t\t\tend = axis.end;\r\n\t\t}\r\n\r\n\t\tlet difference: number = end - start;\r\n\r\n\t\treturn {\r\n\t\t\tstart: start + range.start * difference,\r\n\t\t\tend: start + range.end * difference\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user finishes zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomEnd(event: IXYCursorEvents[\"zoomended\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tif (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n\t\t\tlet xRange: IRange = cursor.xRange;\r\n\t\t\tif (xRange && this.xAxes.length > 0) {\r\n\t\t\t\txRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n\t\t\t\txRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.xAxes, xRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n\t\t\tlet yRange: IRange = cursor.yRange;\r\n\t\t\tif (yRange && this.yAxes.length > 0) {\r\n\t\t\t\tyRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n\t\t\t\tyRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.yAxes, yRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanStart(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\tif (xAxis) {\r\n\t\t\tthis._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n\t\t\tif (xAxis.renderer.inversed) {\r\n\t\t\t\tthis._panStartXRange = $math.invertRange(this._panStartXRange)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\tif (yAxis) {\r\n\t\t\tthis._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n\t\t\tif (yAxis.renderer.inversed) {\r\n\t\t\t\tthis._panStartYRange = $math.invertRange(this._panStartYRange)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user ends panning\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanEnd(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\r\n\t\tif (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndXRange;\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet delta = 0;\r\n\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\r\n\t\t\tif (panStartRange.end > 1) {\r\n\t\t\t\tif (panEndRange.end > panStartRange.end) {\r\n\t\t\t\t\tdelta = panEndRange.end - panStartRange.end;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, cursor.snapOnPan);\r\n\t\t\tthis._panEndXRange = undefined;\r\n\t\t\tthis._panStartXRange = undefined;\r\n\t\t}\r\n\t\tif (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndYRange;\r\n\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, cursor.snapOnPan);\r\n\t\t\tthis._panEndYRange = undefined;\r\n\t\t\tthis._panStartYRange = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleCursorCanceled(): void {\r\n\t\tthis._panEndXRange = undefined;\r\n\t\tthis._panStartXRange = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanning(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tlet maxPanOut = cursor.maxPanOut;\r\n\t\tif (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet range = cursor.xRange;\r\n\r\n\t\t\tlet axisRange = this.getCommonAxisRange(this.xAxes);\r\n\r\n\t\t\tlet difference = (panStartRange.end - panStartRange.start);\r\n\t\t\tlet delta = range.start * (axisRange.end - axisRange.start);\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndXRange = newRange;\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, newRange, false, false, cursor.maxPanOut);\r\n\t\t}\r\n\r\n\t\tif (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartYRange;\r\n\t\t\tlet range = cursor.yRange;\r\n\r\n\t\t\tlet axisRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start * (axisRange.end - axisRange.start);\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndYRange = newRange;\r\n\t\t\tthis.zoomAxes(this.yAxes, newRange, false, false, cursor.maxPanOut);\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic handleYAxisSet(series: XYSeries) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user starts zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomStart(event: IXYCursorEvents[\"zoomstarted\"]): void {\r\n\r\n\t\t// Nothing here\r\n\t\t// This method is here only as a \"placeholder\" for extending classes to\r\n\t\t// override if necessary\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal (X) scrollbar.\r\n\t *\r\n\t * @param scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarX(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarX) {\r\n\t\t\tthis.removeDispose(this._scrollbarX);\r\n\t\t}\r\n\t\tthis._scrollbarX = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.topAxesContainer;\r\n\t\t\tscrollbar.shouldClone = false;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toBack();\r\n\t\t\tscrollbar.orientation = \"horizontal\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false);\r\n\t\t\tthis.events.on(\"datavalidated\", () => scrollbar.updateThumb(false), this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tif (xAxis) {\r\n\t\t\t\t\targ.value = xAxis.getPositionLabel(\r\n\t\t\t\t\t\txAxis.renderer.inversed\r\n\t\t\t\t\t\t\t? 1 - arg.position\r\n\t\t\t\t\t\t\t: arg.position\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scrollbar\r\n\t */\r\n\tpublic get scrollbarX(): Scrollbar {\r\n\t\treturn this._scrollbarX;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical (Y) scrollbar.\r\n\t *\r\n\t * @param scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarY(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarY) {\r\n\t\t\tthis.removeDispose(this._scrollbarY);\r\n\t\t}\r\n\t\tthis._scrollbarY = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.rightAxesContainer;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.shouldClone = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toFront();\r\n\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false);\r\n\t\t\tthis.events.on(\"datavalidated\", () => scrollbar.updateThumb(false), this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tif (yAxis) {\r\n\t\t\t\t\targ.value = yAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scrollbar\r\n\t */\r\n\tpublic get scrollbarY(): Scrollbar {\r\n\t\treturn this._scrollbarY;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param event Scrollbar range change event\r\n\t */\r\n\tprotected handleXScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\r\n\t\tif (this.inited) {\r\n\t\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\t\tlet range = scrollbar.range;\r\n\r\n\t\t\tif (range.start == 0) {\r\n\t\t\t\trange.priority = \"start\";\r\n\t\t\t}\r\n\r\n\t\t\tif (range.end == 1) {\r\n\t\t\t\trange.priority = \"end\";\r\n\t\t\t}\r\n\r\n\t\t\trange = this.zoomAxes(this.xAxes, range);\r\n\r\n\t\t\tscrollbar.fixRange(range);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param event Scrollbar range change event\r\n\t */\r\n\tprotected handleYScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tif (this.inited) {\r\n\t\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\t\tlet range = scrollbar.range;\r\n\t\t\tif (range.end == 1) {\r\n\t\t\t\trange.priority = \"end\";\r\n\t\t\t}\r\n\t\t\tif (range.start == 0) {\r\n\t\t\t\trange.priority = \"start\";\r\n\t\t\t}\r\n\t\t\trange = this.zoomAxes(this.yAxes, range);\r\n\t\t\tscrollbar.fixRange(range);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes that are affected by to specific relative range.\r\n\t *\r\n\t * @param axes       List of axes to zoom\r\n\t * @param range      Range of values to zoom to (0-1)\r\n\t * @param instantly  If set to `true` will skip zooming animation\r\n\t * @return Recalculated range that is common to all involved axes\r\n\t */\r\n\tprotected zoomAxes(axes: List<Axis<this[\"_xAxisRendererType\"]>>, range: IRange, instantly?: boolean, round?: boolean, declination?: number, stop?: boolean): IRange {\r\n\t\tlet realRange: IRange = { start: 0, end: 1 };\r\n\r\n\t\tthis.showSeriesTooltip(); // hides\r\n\r\n\t\tlet originalRange = range;\r\n\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\t$iter.each(axes.iterator(), (axis) => {\r\n\r\n\t\t\t\tlet maxZoomFactor = axis.maxZoomFactor;\r\n\t\t\t\tif ($type.isNumber(axis.minZoomCount)) {\r\n\t\t\t\t\tmaxZoomFactor = maxZoomFactor / axis.minZoomCount\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (stop && 1 / (range.end - range.start) >= maxZoomFactor) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (axis.zoomable) {\r\n\t\t\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\t\t\trange = $math.invertRange(originalRange);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\trange = originalRange;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\taxis.hideTooltip(0);\r\n\r\n\t\t\t\t\t\tif (round) {\r\n\t\t\t\t\t\t\t//let diff = range.end - range.start;\r\n\t\t\t\t\t\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\t\t\t\t\t\tlet cellWidth = axis.getCellEndPosition(0) - axis.getCellStartPosition(0);\r\n\r\n\t\t\t\t\t\t\t\trange.start = axis.roundPosition(range.start + cellWidth / 2 - (axis.startLocation) * cellWidth, axis.startLocation);\r\n\t\t\t\t\t\t\t\trange.end = axis.roundPosition(range.end - cellWidth / 2 + (1 - axis.endLocation) * cellWidth, axis.endLocation);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlet d = 0.0001;\r\n\t\t\t\t\t\t\t\trange.start = axis.roundPosition(range.start + d, 0, axis.startLocation);\r\n\t\t\t\t\t\t\t\trange.end = axis.roundPosition(range.end + d, 0, axis.endLocation);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet axisRange: IRange = axis.zoom(range, instantly, instantly, declination);\r\n\r\n\t\t\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\t\t\taxisRange = $math.invertRange(axisRange);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\trealRange = axisRange;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn realRange;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if bullet container is masked.\r\n\t *\r\n\t * If it is set to `true`, any bullets that do not fit into bullet container\r\n\t * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n\t * of the plot area so they are not cut off.\r\n\t *\r\n\t * @param value Mask bullet container?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"maskBullets\", value, true) && this.bulletsContainer) {\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.bulletsContainer.mask = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mask bullet container?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if chart should arrange series tooltips so that they would not\r\n\t * overlap.\r\n\t *\r\n\t * If set to `true` (default), the chart will adjust vertical positions of\r\n\t * all simultaneously shown tooltips to avoid overlapping.\r\n\t *\r\n\t * However, if you have a vertically-arranged chart, it might not make sense,\r\n\t * because tooltips would most probably not be aligned horizontally. In this\r\n\t * case it would probably be a good idea to set this setting to `false`.\r\n\t *\r\n\t * @default true\r\n\t * @param value Arrange tooltips?\r\n\t */\r\n\tpublic set arrangeTooltips(value: boolean) {\r\n\t\tthis.setPropertyValue(\"arrangeTooltips\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Arrange tooltips?\r\n\t */\r\n\tpublic get arrangeTooltips(): boolean {\r\n\t\treturn this.getPropertyValue(\"arrangeTooltips\");\r\n\t}\r\n\r\n\t/**\r\n\t * Handles mouse wheel event.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\t\tlet plotContainer = this.plotContainer;\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n\t\tlet shift = event.shift.y;\r\n\r\n\t\tthis.handleWheelReal(shift, this.mouseWheelBehavior, plotPoint);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles mouse wheel event.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleHorizontalWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\t\tlet plotContainer = this.plotContainer;\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n\r\n\t\tthis.handleWheelReal(event.shift.x, this.horizontalMouseWheelBehavior, plotPoint)\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleWheelReal(shift: number, mouseWheelBehavior: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\", plotPoint: IPoint) {\r\n\t\tif (shift != 0) {\r\n\t\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\t\tlet rangeX: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\t\tlet rangeY: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\t\tlet shiftStep = .1;\r\n\r\n\t\t\tlet maxPanOut = 0;\r\n\r\n\t\t\tif (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tlet round = false;\r\n\t\t\t\tlet singleItemStep = shiftStep;\r\n\t\t\t\tif (xAxis instanceof CategoryAxis) {\r\n\t\t\t\t\tsingleItemStep = .5 / ((rangeX.end - rangeX.start) * xAxis.dataItems.length);\r\n\t\t\t\t\tround = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tshiftStep = Math.max(0.2, singleItemStep);\r\n\r\n\t\t\t\tlet differenceX = rangeX.end - rangeX.start;\r\n\r\n\t\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100 * (rangeX.end - rangeX.start));\r\n\t\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (rangeX.end - rangeX.start), 1 + maxPanOut);\r\n\r\n\t\t\t\tif (newStartX <= 0) {\r\n\t\t\t\t\tnewEndX = newStartX + differenceX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (newEndX >= 1) {\r\n\t\t\t\t\tnewStartX = newEndX - differenceX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX }, undefined, round);\r\n\t\t\t}\r\n\r\n\t\t\tif (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\r\n\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tlet singleItemStep = shiftStep;\r\n\t\t\t\tlet round = false;\r\n\t\t\t\tif (yAxis instanceof CategoryAxis) {\r\n\t\t\t\t\tsingleItemStep = .5 / ((rangeX.end - rangeX.start) * yAxis.dataItems.length);\r\n\t\t\t\t\tround = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tshiftStep = Math.max(0.2, singleItemStep);\r\n\r\n\t\t\t\tshift *= -1;\r\n\t\t\t\tlet differenceY = rangeY.end - rangeY.start;\r\n\r\n\t\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100 * (rangeY.end - rangeY.start));\r\n\t\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * (rangeY.end - rangeY.start), 1 + maxPanOut);\r\n\r\n\t\t\t\tif (newStartY <= 0) {\r\n\t\t\t\t\tnewEndY = newStartY + differenceY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (newEndY >= 1) {\r\n\t\t\t\t\tnewStartY = newEndY - differenceY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY }, undefined, round);\r\n\t\t\t}\r\n\r\n\t\t\tif (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\t\tlet locationX = plotPoint.x / plotContainer.maxWidth;\r\n\r\n\t\t\t\tlet location2X = this.xAxes.getIndex(0).toAxisPosition(locationX);\r\n\r\n\t\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * (rangeX.end - rangeX.start) * shift / 100 * locationX);\r\n\t\t\t\tnewStartX = Math.min(newStartX, location2X);\r\n\r\n\t\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * (rangeX.end - rangeX.start) * shift / 100 * (1 - locationX), 1 + maxPanOut);\r\n\t\t\t\tnewEndX = Math.max(newEndX, location2X);\r\n\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX }, undefined);\r\n\t\t\t}\r\n\r\n\t\t\tif (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\t\tlet locationY = plotPoint.y / plotContainer.maxHeight;\r\n\r\n\t\t\t\tlet location2Y = this.yAxes.getIndex(0).toAxisPosition(locationY);\r\n\r\n\t\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * (rangeY.end - rangeY.start) * shift / 100 * (1 - locationY));\r\n\t\t\t\tnewStartY = Math.min(newStartY, location2Y);\r\n\r\n\t\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY * (rangeY.end - rangeY.start), 1 + maxPanOut);\r\n\t\t\t\tnewEndY = Math.max(newEndY, location2Y);\r\n\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY }, undefined);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies action for when mouse wheel is used when over the chart.\r\n\t *\r\n\t * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`,`\"panXY\"`, `\"none\"` (default).\r\n\t *\r\n\t * You can control sensitivity of wheel zooming via `mouseOptions`.\r\n\t *\r\n\t * @default \"none\"\r\n\t * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n\t * @param mouse wheel behavior\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis.plotContainer.wheelable = false;\r\n\t\t\t\t\tthis.plotContainer.hoverable = false;\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies action for when horizontal mouse wheel is used when over the chart.\r\n\t *\r\n\t * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n\t *\r\n\t * @default \"none\"\r\n\t * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n\t * @param mouse wheel behavior\r\n\t */\r\n\tpublic set horizontalMouseWheelBehavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"horizontalMouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer2 = this.plotContainer.events.on(\"wheel\", this.handleHorizontalWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer2);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer2) {\r\n\t\t\t\t\tthis.plotContainer.wheelable = false;\r\n\t\t\t\t\tthis.plotContainer.hoverable = false;\r\n\t\t\t\t\tthis._mouseWheelDisposer2.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal mouse wheel behavior\r\n\t */\r\n\tpublic get horizontalMouseWheelBehavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"horizontalMouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param fields  Array of date fields\r\n\t * @return Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(fields: string[]): string[] {\r\n\t\t// Process parent\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param value  Array of number fields\r\n\t * @return Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(fields: string[]): string[] {\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Save axis ranges for later processing\r\n\t\t\tlet xAxes: any[] = [];\r\n\t\t\tlet yAxes: any[] = [];\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.xAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n\r\n\t\t\t\t\t\t// Maybe convert string dates?\r\n\t\t\t\t\t\tfor (let x = 0, len = config.xAxes[i][\"axisRanges\"].length; x < len; x++) {\r\n\t\t\t\t\t\t\tlet range = config.xAxes[i][\"axisRanges\"][x];\r\n\t\t\t\t\t\t\tif ($type.hasValue(range.date) && $type.isString(range.date)) {\r\n\t\t\t\t\t\t\t\trange.date = this.dateFormatter.parse(range.date);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\r\n\t\t\t\t\t\t\t\trange.endDate = this.dateFormatter.parse(range.endDate);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\txAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.xAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.xAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.yAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n\r\n\t\t\t\t\t\t// Maybe convert string dates?\r\n\t\t\t\t\t\tfor (let x = 0, len = config.yAxes[i][\"axisRanges\"].length; x < len; x++) {\r\n\t\t\t\t\t\t\tlet range = config.yAxes[i][\"axisRanges\"][x];\r\n\t\t\t\t\t\t\tif ($type.hasValue(range.date) && $type.isString(range.date)) {\r\n\t\t\t\t\t\t\t\trange.date = this.dateFormatter.parse(range.date);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\r\n\t\t\t\t\t\t\t\trange.endDate = this.dateFormatter.parse(range.endDate);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tyAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.yAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.yAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"LineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"XYCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up scrollbars\r\n\t\t\tif ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n\t\t\t\tconfig.scrollbarX.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n\t\t\t\tconfig.scrollbarY.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\r\n\t\t\t// Finish up with ranges.\r\n\t\t\t// We need to do this here because series are processed last in JSON\r\n\t\t\t// config. Therefore their respective objects are not yet are available\r\n\t\t\t// when axis (and respectively their ranges) are being processed.\r\n\t\t\tif (yAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = yAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.yAxes.getIndex(yAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: yAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (xAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = xAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.xAxes.getIndex(xAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: xAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"scrollbarX\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarX\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"scrollbarY\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarY\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"cursor\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"cursor\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Series of type suitable for this chart.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new XYSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: Button) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: 0, end: 1 });\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: 0, end: 1 });\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): Button {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[XYChart]].\r\n\t *\r\n\t * @param source Source XYChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\r\n\t\tsource.xAxes.each((axis) => {\r\n\t\t\tlet a = this.xAxes.push(axis.clone());\r\n\t\t\ta.chart = this;\r\n\t\t\ta.renderer.chart = this;\r\n\t\t})\r\n\r\n\t\tsource.yAxes.each((axis) => {\r\n\t\t\tlet a = this.yAxes.push(axis.clone());\r\n\t\t\ta.renderer.chart = this;\r\n\t\t\ta.chart = this;\r\n\t\t})\r\n\r\n\t\t//this.xAxes.copyFrom(source.xAxes);\r\n\t\t//this.yAxes.copyFrom(source.yAxes);\r\n\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\t//this.zoomOutButton.copyFrom(source.zoomOutButton);\r\n\r\n\t\tif (source.cursor) {\r\n\t\t\tthis.cursor = source.cursor.clone();\r\n\t\t}\r\n\r\n\t\tif (source.scrollbarX) {\r\n\t\t\tthis.scrollbarX = source.scrollbarX.clone();\r\n\t\t}\r\n\r\n\t\tif (source.scrollbarY) {\r\n\t\t\tthis.scrollbarY = source.scrollbarY.clone();\r\n\t\t}\r\n\t\t//@todo copy all container properties\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\r\n\t\tlet scrollbarX = this.scrollbarX;\r\n\t\tif (scrollbarX && scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarX.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tlet scrollbarY = this.scrollbarY;\r\n\t\tif (scrollbarY && scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarY.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxes.each((axis) => {\r\n\t\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\t\taxis.disposeData();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.yAxes.each((axis) => {\r\n\t\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\t\taxis.disposeData();\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Adds one or several (array) of data items to the existing data.\r\n\t *\r\n\t * @param rawDataItem One or many raw data item objects\r\n\t */\r\n\tpublic addData(rawDataItem: Object | Object[], removeCount?: number): void {\r\n\t\tif (this.scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tthis.addScrollbarData(this.scrollbarX, removeCount);\r\n\t\t}\r\n\t\tif (this.scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tthis.addScrollbarData(this.scrollbarY, removeCount);\r\n\t\t}\r\n\r\n\t\tsuper.addData(rawDataItem, removeCount);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected addScrollbarData(scrollbar: XYChartScrollbar, removeCount: number) {\r\n\t\tlet chart = scrollbar.scrollbarChart;\r\n\t\tchart._parseDataFrom = chart.data.length;\r\n\t\tchart.invalidateData();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected removeScrollbarData(scrollbar: XYChartScrollbar, removeCount: number) {\r\n\t\tlet chart = scrollbar.scrollbarChart;\r\n\t\tif ($type.isNumber(removeCount)) {\r\n\t\t\twhile (removeCount > 0) {\r\n\t\t\t\tlet dataItem = this.dataItems.getIndex(0);\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchart.dataItems.remove(dataItem);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tchart.dataUsers.each((dataUser) => {\r\n\t\t\t\t\tlet dataItem = dataUser.dataItems.getIndex(0);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tdataUser.dataItems.remove(dataItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tchart._parseDataFrom--;\r\n\r\n\t\t\t\tremoveCount--;\r\n\t\t\t}\r\n\r\n\t\t\tchart.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes elements from the beginning of data\r\n\t *\r\n\t * @param count number of elements to remove\r\n\t */\r\n\tpublic removeData(count: $type.Optional<number>) {\r\n\t\tif (this.scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tthis.removeScrollbarData(this.scrollbarX, count);\r\n\t\t}\r\n\t\tif (this.scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tthis.removeScrollbarData(this.scrollbarY, count);\r\n\t\t}\r\n\r\n\t\tsuper.removeData(count);\r\n\t}\r\n\r\n\t/**\r\n\t * @param  value  Tap to activate?\r\n\t */\r\n\tprotected setTapToActivate(value: boolean): void {\r\n\t\tsuper.setTapToActivate(value);\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = value;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = value;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleTapToActivate(): void {\r\n\t\tsuper.handleTapToActivate();\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = false;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = false;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleTapToActivateDeactivation(): void {\r\n\t\tsuper.handleTapToActivateDeactivation();\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = true;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = true;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Remove horizontal scrollbar on narrow charts.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof XYChart && target.scrollbarX) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tlet sbstate = target.scrollbarX.states.create(stateId);\r\n\t\t\tsbstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Remove vertical scrollbar on short charts.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof XYChart && target.scrollbarY) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tlet sbstate = target.scrollbarY.states.create(stateId);\r\n\t\t\tsbstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}