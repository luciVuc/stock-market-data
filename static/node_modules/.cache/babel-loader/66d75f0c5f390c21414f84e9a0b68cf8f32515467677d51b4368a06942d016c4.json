{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Sprite } from \"../../core/Sprite\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * AxisFill is a base class used to defines fill shapes for various\r\n * type-specific Axes.\r\n *\r\n * Axis fills are used to add fills to specific ranges of those axes.\r\n *\r\n * @see {@link IAxisFillEvents} for a list of available events\r\n * @see {@link IAxisFillAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar AxisFill = /** @class */function (_super) {\n  __extends(AxisFill, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Axis\r\n   */\n  function AxisFill(axis) {\n    var _this = _super.call(this) || this;\n    _this.axis = axis;\n    _this.element = _this.paper.add(\"path\");\n    _this.className = \"AxisFill\";\n    _this.isMeasured = false;\n    _this.location = 0;\n    _this.above = false;\n    var interfaceColors = new InterfaceColorSet();\n    _this.fill = interfaceColors.getFor(\"alternativeBackground\");\n    _this.fillOpacity = 0;\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n  AxisFill.prototype.setDisabled = function (value) {\n    var changed = _super.prototype.setDisabled.call(this, value);\n    if (this.axis) {\n      this.axis.invalidateDataItems();\n    }\n    return changed;\n  };\n  /**\r\n   * Draws the fill element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  AxisFill.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    if (this.__disabled || this.disabled) {\n      return;\n    }\n    if (this.axis && $type.isNumber(this.startPosition) && $type.isNumber(this.endPosition)) {\n      this.fillPath = this.axis.getPositionRangePath(this.startPosition, this.endPosition);\n      this.path = this.fillPath;\n      if (this.isMeasured) {\n        this.measure();\n      }\n    }\n  };\n  Object.defineProperty(AxisFill.prototype, \"startPosition\", {\n    /**\r\n     * @return Start position\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startPosition\");\n    },\n    /**\r\n     * An actual starting position of the fill.\r\n     *\r\n     * @param value  Starting position\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startPosition\", value);\n      this.invalidate(); // this is needed as relative position might not change when zooming\n    },\n\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisFill.prototype, \"endPosition\", {\n    /**\r\n     * @return End position\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endPosition\");\n    },\n    /**\r\n     * An actual end position of the fill.\r\n     *\r\n     * @param value End position\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endPosition\", value);\n      this.invalidate(); // this is needed as relative position might not change when zooming\n    },\n\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisFill.prototype, \"location\", {\n    /**\r\n     * @return Location (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"location\");\n    },\n    /**\r\n     * Relative location of the fill. (0-1)\r\n     *\r\n     * @param value Location (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"location\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n  AxisFill.prototype.setPath = function (value) {\n    if (this.setPropertyValue(\"path\", value)) {\n      this.element.attr({\n        \"d\": value\n      });\n      return true;\n    }\n    return false;\n  };\n  Object.defineProperty(AxisFill.prototype, \"above\", {\n    /**\r\n     * @return Draw above series?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"above\");\n    },\n    /**\r\n     * Normally fill goes below series. Set this to `true` to go above.\r\n     *\r\n     * @default false\r\n     * @since 4.5.9\r\n     * @param  value  Draw above series?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"above\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return AxisFill;\n}(Sprite);\nexport { AxisFill };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"AxisFill\"] = AxisFill;","map":{"version":3,"mappings":"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","names":["Sprite","registry","InterfaceColorSet","$type","__extends","axis","_super","_this","element","paper","add","className","isMeasured","location","above","interfaceColors","fill","getFor","fillOpacity","applyTheme","AxisFill","value","changed","setDisabled","invalidateDataItems","draw","__disabled","disabled","isNumber","startPosition","endPosition","fillPath","getPositionRangePath","path","measure","Object","getPropertyValue","setPropertyValue","invalidate","attr","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\axes\\AxisFill.ts"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { Axis, AxisItemLocation, AxisDataItem } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFill]].\r\n */\r\nexport interface IAxisFillProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Start position. (0-1)\r\n\t */\r\n\tstartPosition?: number;\r\n\r\n\t/**\r\n\t * End position. (0-1)\r\n\t */\r\n\tendPosition?: number;\r\n\r\n\t/**\r\n\t * Location within the axis.\r\n\t */\r\n\tlocation?: number;\r\n\r\n\t/**\r\n\t * Normally fill goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tabove?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFill]].\r\n */\r\nexport interface IAxisFillEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFill]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillAdapters extends ISpriteAdapters, IAxisFillProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * AxisFill is a base class used to defines fill shapes for various\r\n * type-specific Axes.\r\n *\r\n * Axis fills are used to add fills to specific ranges of those axes.\r\n *\r\n * @see {@link IAxisFillEvents} for a list of available events\r\n * @see {@link IAxisFillAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class AxisFill extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisFillProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisFillAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisFillEvents;\r\n\r\n\t/**\r\n\t * A referecent to Axis element this fill is applied to.\r\n\t */\r\n\tpublic axis: Axis;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * [_dataItem description]\r\n\t *\r\n\t * Not sure what this is doing here?\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper();\r\n\t\tthis.axis = axis;\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.className = \"AxisFill\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.location = 0;\r\n\r\n\t\tthis.above = false;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setDisabled(value: boolean): boolean {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (this.axis) {\r\n\t\t\tthis.axis.invalidateDataItems();\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tif (this.__disabled || this.disabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.axis && $type.isNumber(this.startPosition) && $type.isNumber(this.endPosition)) {\r\n\t\t\tthis.fillPath = this.axis.getPositionRangePath(this.startPosition, this.endPosition);\r\n\t\t\tthis.path = this.fillPath;\r\n\t\t\tif (this.isMeasured) {\r\n\t\t\t\tthis.measure();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * An actual starting position of the fill.\r\n\t *\r\n\t * @param value  Starting position\r\n\t */\r\n\tpublic set startPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"startPosition\", value);\r\n\t\tthis.invalidate(); // this is needed as relative position might not change when zooming\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start position\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\treturn this.getPropertyValue(\"startPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * An actual end position of the fill.\r\n\t *\r\n\t * @param value End position\r\n\t */\r\n\tpublic set endPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"endPosition\", value);\r\n\t\tthis.invalidate(); // this is needed as relative position might not change when zooming\r\n\t}\r\n\r\n\t/**\r\n\t * @return End position\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\treturn this.getPropertyValue(\"endPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location of the fill. (0-1)\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tpublic set location(value: AxisItemLocation) {\r\n\t\tthis.setPropertyValue(\"location\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get location(): AxisItemLocation {\r\n\t\treturn this.getPropertyValue(\"location\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setPath(value: string): boolean {\r\n\t\tif (this.setPropertyValue(\"path\", value)) {\r\n\t\t\tthis.element.attr({ \"d\": value });\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Normally fill goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.5.9\r\n\t * @param  value  Draw above series?\r\n\t */\r\n\tpublic set above(value: boolean) {\r\n\t\tthis.setPropertyValue(\"above\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Draw above series?\r\n\t */\r\n\tpublic get above(): boolean {\r\n\t\treturn this.getPropertyValue(\"above\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFill\"] = AxisFill;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}