{"ast":null,"code":"/**\r\n * Duration formatting functionality.\r\n */\nimport { __extends } from \"tslib\";\nimport { Language } from \"../utils/Language\";\nimport { BaseObject } from \"../Base\";\nimport { getTextFormatter } from \"../formatters/TextFormatter\";\nimport { registry } from \"../Registry\";\nimport * as $strings from \"../utils/Strings\";\nimport * as $object from \"../utils/Object\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $type from \"../utils/Type\";\nimport * as $math from \"../utils/Math\";\n/**\r\n * DurationFormatter class. Formats numbers as durations.\r\n *\r\n * `1000` as `16:40`\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting\r\n */\nvar DurationFormatter = /** @class */function (_super) {\n  __extends(DurationFormatter, _super);\n  /**\r\n   * Constructor\r\n   */\n  function DurationFormatter() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * A base value for negative numbers. Will treat all numbers below this value\r\n     * as negative numbers.\r\n     */\n    _this._negativeBase = 0;\n    /**\r\n     * A base unit to consider values are in.\r\n     *\r\n     * @default \"s\"\r\n     */\n    _this._baseUnit = \"second\";\n    /**\r\n     * Output format to produce. If the format calls for applying color to the\r\n     * formatted value, this setting will determine what markup to use: SVG or\r\n     * HTML.\r\n     *\r\n     * Available options: svg, html.\r\n     *\r\n     * @default \"svg\"\r\n     */\n    _this._outputFormat = \"svg\";\n    /**\r\n     * How many milliseconds each unit represents.\r\n     */\n    _this._unitValues = {\n      \"millisecond\": 1,\n      \"second\": 1000,\n      \"minute\": 60000,\n      \"hour\": 3600000,\n      \"day\": 86400000,\n      \"week\": 604800000,\n      \"month\": 2592000000,\n      \"year\": 31536000000\n    };\n    /**\r\n     * Collection of aliases for units.\r\n     */\n    _this._unitAliases = {\n      \"Y\": \"y\",\n      \"D\": \"d\",\n      \"H\": \"h\",\n      \"K\": \"h\",\n      \"k\": \"h\",\n      \"n\": \"S\"\n    };\n    _this.className = \"DurationFormatter\";\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Formats the number according as duration.\r\n   *\r\n   * For example `1000` (base unit seconds) would be converted to `16:40` as in\r\n   * 16 minutes and 40 seconds.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting\r\n   * @param value   Value to format\r\n   * @param format  Format to apply\r\n   * @param base    Override base unit\r\n   * @return Formatted number\r\n   */\n  DurationFormatter.prototype.format = function (value, format, base) {\n    // no language?\n    if (!this.language) {\n      if (this.sprite) {\n        this.language = this.sprite.language;\n      } else {\n        this.language = new Language();\n      }\n    }\n    // no base unit?\n    var baseUnit = base || this._baseUnit;\n    // no format passed in or empty\n    if (typeof format === \"undefined\" || format === \"\") {\n      if ($type.hasValue(this.durationFormat)) {\n        format = this.durationFormat;\n      } else {\n        format = this.getFormat($type.toNumber(value), null, baseUnit);\n      }\n    }\n    // Clean format\n    format = $utils.cleanFormat(format);\n    // get format info (it will also deal with parser caching)\n    var info = this.parseFormat(format, baseUnit);\n    // cast to number just in case\n    // TODO: maybe use better casting\n    var source = Number(value);\n    // format and replace the number\n    var details;\n    if (source > this._negativeBase) {\n      details = info.positive;\n    } else if (source < this._negativeBase) {\n      details = info.negative;\n    } else {\n      details = info.zero;\n    }\n    // Format\n    var formatted = this.applyFormat(source, details);\n    // Apply color?\n    if (details.color !== \"\") {\n      if (this._outputFormat === \"svg\") {\n        formatted = \"<tspan fill='\" + details.color + \"'>\" + formatted + \"</tspan>\";\n      } else if (this._outputFormat === \"html\") {\n        formatted = \"<span style='color: \" + details.color + \";'>\" + formatted + \"</span>\";\n      }\n    }\n    return formatted;\n  };\n  /**\r\n   * Parses supplied format into structured object which can be used to format\r\n   * the number.\r\n   *\r\n   * @param format  Format string, i.e. \"#,###.00\"\r\n   * @param base    Override base unit\r\n   * @return Parsed information\r\n   */\n  DurationFormatter.prototype.parseFormat = function (format, base) {\n    var _this = this;\n    // Check cache\n    var cached = this.getCache(format);\n    if ($type.hasValue(cached)) {\n      return cached;\n    }\n    // no base unit?\n    var baseUnit = base || this._baseUnit;\n    // Initialize duration parsing info\n    var info = {\n      \"positive\": {\n        \"color\": \"\",\n        \"template\": \"\",\n        \"parts\": [],\n        \"source\": \"\",\n        \"baseUnit\": baseUnit,\n        \"parsed\": false,\n        \"absolute\": false\n      },\n      \"negative\": {\n        \"color\": \"\",\n        \"template\": \"\",\n        \"parts\": [],\n        \"source\": \"\",\n        \"baseUnit\": baseUnit,\n        \"parsed\": false,\n        \"absolute\": false\n      },\n      \"zero\": {\n        \"color\": \"\",\n        \"template\": \"\",\n        \"parts\": [],\n        \"source\": \"\",\n        \"baseUnit\": baseUnit,\n        \"parsed\": false,\n        \"absolute\": false\n      }\n    };\n    // Escape double vertical bars (that mean display one vertical bar)\n    format = format.replace(\"||\", $strings.PLACEHOLDER2);\n    // Split it up and deal with different formats\n    var parts = format.split(\"|\");\n    info.positive.source = parts[0];\n    if (typeof parts[2] === \"undefined\") {\n      info.zero = info.positive;\n    } else {\n      info.zero.source = parts[2];\n    }\n    if (typeof parts[1] === \"undefined\") {\n      info.negative = info.positive;\n    } else {\n      info.negative.source = parts[1];\n    }\n    // Parse each\n    $object.each(info, function (part, item) {\n      // Already parsed\n      if (item.parsed) {\n        return;\n      }\n      // Check cached\n      if (typeof _this.getCache(item.source) !== \"undefined\") {\n        info[part] = _this.getCache(item.source);\n        return;\n      }\n      // Begin parsing\n      var partFormat = item.source;\n      // Check for [] directives\n      var dirs = [];\n      dirs = item.source.match(/^\\[([^\\]]*)\\]/);\n      if (dirs && dirs.length && dirs[0] !== \"\") {\n        partFormat = item.source.substr(dirs[0].length);\n        item.color = dirs[1];\n      }\n      // Let TextFormatter split into chunks\n      var chunks = getTextFormatter().chunk(partFormat, true);\n      for (var i = 0; i < chunks.length; i++) {\n        var chunk = chunks[i];\n        // replace back double vertical bar\n        chunk.text = chunk.text.replace($strings.PLACEHOLDER2, \"|\");\n        if (chunk.type === \"value\") {\n          // Just \"Duration\"?\n          // if (chunk.text.toLowerCase() === \"duration\") {\n          // \tchunk.text = durationFormat;\n          // }\n          // Check for \"a\" (absolute) modifier\n          if (chunk.text.match(/[yYMdDwhHKkmsSn]+a/)) {\n            item.absolute = true;\n            chunk.text = chunk.text.replace(/([yYMdDwhHKkmsSn]+)a/, \"$1\");\n          }\n          // Find all possible parts\n          var matches = chunk.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);\n          if (matches) {\n            // Populate template\n            for (var x = 0; x < matches.length; x++) {\n              // Is it an alias?\n              if (!$type.hasValue(matches[x])) {\n                matches[x] = _this._unitAliases[matches[x]];\n              }\n              item.parts.push(matches[x]);\n              chunk.text = chunk.text.replace(matches[x], $strings.PLACEHOLDER);\n            }\n          }\n        }\n        // Apply to template\n        item.template += chunk.text;\n      }\n      // Apply style formatting\n      //item.template = getTextFormatter().format(item.template, this.outputFormat);\n      // Save cache\n      _this.setCache(item.source, item);\n      // Mark this as parsed\n      item.parsed = true;\n    });\n    // Save cache (the whole thing)\n    this.setCache(format, info);\n    return info;\n  };\n  /**\r\n   * Applies parsed format to a numeric value.\r\n   *\r\n   * @param value    Value\r\n   * @param details  Parsed format as returned by {parseFormat}\r\n   * @return Formatted duration\r\n   */\n  DurationFormatter.prototype.applyFormat = function (value, details) {\n    // Use absolute values\n    var negative = !details.absolute && value < this._negativeBase;\n    value = Math.abs(value);\n    // Recalculate to milliseconds\n    var tstamp = this.toTimeStamp(value, details.baseUnit);\n    // Init return value\n    var res = details.template;\n    // Iterate through duration parts\n    for (var i = 0, len = details.parts.length; i < len; i++) {\n      // Gather the part\n      var part = details.parts[i];\n      var unit = this.toTimeUnit(part.substr(0, 1));\n      var digits = part.length;\n      // Calculate current unit value\n      var ints = Math.floor(tstamp / this._unitValues[unit]);\n      res = res.replace($strings.PLACEHOLDER, $utils.padString(ints, digits, \"0\"));\n      // Reduce timestamp\n      tstamp -= ints * this._unitValues[unit];\n    }\n    // Reapply negative sign\n    if (negative) {\n      res = \"-\" + res;\n    }\n    return res;\n  };\n  /**\r\n   * Converts numeric value to timestamp in milliseconds.\r\n   *\r\n   * @param value     A source value\r\n   * @param baseUnit  Base unit the source value is in: \"q\", \"s\", \"i\", \"h\", \"d\", \"w\", \"m\", \"y\"\r\n   * @return Value representation as a timestamp in milliseconds\r\n   */\n  DurationFormatter.prototype.toTimeStamp = function (value, baseUnit) {\n    return value * this._unitValues[baseUnit];\n  };\n  DurationFormatter.prototype.toTimeUnit = function (code) {\n    switch (code) {\n      case \"S\":\n        return \"millisecond\";\n      case \"s\":\n        return \"second\";\n      case \"m\":\n        return \"minute\";\n      case \"h\":\n        return \"hour\";\n      case \"d\":\n        return \"day\";\n      case \"w\":\n        return \"week\";\n      case \"M\":\n        return \"month\";\n      case \"y\":\n        return \"year\";\n    }\n    ;\n  };\n  /**\r\n   * Invalidates the parent [[Sprite]] object.\r\n   */\n  DurationFormatter.prototype.invalidateSprite = function () {\n    if (this.sprite) {\n      this.sprite.invalidate();\n    }\n  };\n  Object.defineProperty(DurationFormatter.prototype, \"baseUnit\", {\n    /**\r\n     * @return Base unit\r\n     */\n    get: function () {\n      return this._baseUnit;\n    },\n    /**\r\n     * Base unit the values are in.\r\n     *\r\n     * A base unit will be used to recalculate the numeric value to millisecond\r\n     * timestamps.\r\n     *\r\n     * Available options:\r\n     *\r\n     * * \"millisecond\"\r\n     * * \"second\"\r\n     * * \"minute\"\r\n     * * \"hour\"\r\n     * * \"day\"\r\n     * * \"week\"\r\n     * * \"month\"\r\n     * * \"year\"\r\n     *\r\n     * @default \"s\"\r\n     * @param baseUnit  A base unit\r\n     */\n    set: function (baseUnit) {\n      this._baseUnit = baseUnit;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DurationFormatter.prototype, \"outputFormat\", {\n    /**\r\n     * Getter for output format.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Output format\r\n     */\n    get: function () {\n      return this._outputFormat;\n    },\n    /**\r\n     * Setter for output format: \"svg\" or \"html.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Output format\r\n     */\n    set: function (outputFormat) {\n      this._outputFormat = outputFormat.toLowerCase();\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns appropriate default format for the value.\r\n   *\r\n   * If `maxValue` is sepcified, it will use that value to determine the time\r\n   * unit for the format.\r\n   *\r\n   * For example if your `baseUnit` is `\"second\"` and you pass in `10`, you\r\n   * will get `\"10\"`.\r\n   *\r\n   * However, you might want it to be formatted in the context of bigger scale,\r\n   * say 10 minutes (600 seconds). If you pass in `600` as `maxValue`, all\r\n   * values, including small ones will use format with minutes, e.g.:\r\n   * `00:10`, `00:50`, `12: 30`, etc.\r\n   *\r\n   * @param value     Value to format\r\n   * @param maxValue  Maximum value to be used to determine format\r\n   * @param baseUnit  Base unit of the value\r\n   * @return Format\r\n   */\n  DurationFormatter.prototype.getFormat = function (value, maxValue, baseUnit) {\n    // Is format override set?\n    if ($type.hasValue(this.durationFormat)) {\n      return this.durationFormat;\n    }\n    // Get base unit\n    if (!baseUnit) {\n      baseUnit = this.baseUnit;\n    }\n    if ($type.hasValue(maxValue) && value != maxValue) {\n      value = Math.abs(value);\n      maxValue = Math.abs(maxValue);\n      var maxUnit = this.getValueUnit($math.max(value, maxValue), baseUnit);\n      //let diffUnit = this.getValueUnit(Math.abs(maxValue - value), baseUnit);\n      //console.log(maxUnit, diffUnit);\n      return this.durationFormats[baseUnit][maxUnit];\n    } else {\n      var unit = this.getValueUnit(value, baseUnit);\n      return this.durationFormats[baseUnit][unit];\n    }\n  };\n  /**\r\n   * Returns value's closest denominator time unit, e.g 100 seconds is\r\n   * `\"minute\"`, while 59 seconds would still be `second`.\r\n   *\r\n   * @param value     Source duration value\r\n   * @param baseUnit  Base unit\r\n   * @return Denominator\r\n   */\n  DurationFormatter.prototype.getValueUnit = function (value, baseUnit) {\n    // Get base unit\n    if (!baseUnit) {\n      baseUnit = this.baseUnit;\n    }\n    // Convert to milliseconds\n    var currentUnit;\n    var ms = this.getMilliseconds(value, baseUnit);\n    $object.eachContinue(this._unitValues, function (key, val) {\n      if (key == baseUnit || currentUnit) {\n        var num = ms / val;\n        if (num <= 1) {\n          if (!currentUnit) {\n            currentUnit = key;\n          }\n          return false;\n        }\n        currentUnit = key;\n      }\n      return true;\n    });\n    return currentUnit;\n  };\n  /**\r\n   * Converts value to milliseconds according to `baseUnit`.\r\n   *\r\n   * @param value     Source duration value\r\n   * @param baseUnit  Base unit\r\n   * @return Value in milliseconds\r\n   */\n  DurationFormatter.prototype.getMilliseconds = function (value, baseUnit) {\n    // Get base unit\n    if (!baseUnit) {\n      baseUnit = this.baseUnit;\n    }\n    return value * this._unitValues[baseUnit];\n  };\n  Object.defineProperty(DurationFormatter.prototype, \"durationFormat\", {\n    /**\r\n     * @return Format\r\n     */\n    get: function () {\n      return this._durationFormat;\n    },\n    /**\r\n     * If set, this format will be used instead of the one determined dynamically\r\n     * based on the basedUnit and range of values.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Available fomatting codes\r\n     * @param value  Format\r\n     */\n    set: function (value) {\n      if (this._durationFormat != value) {\n        this._durationFormat = value;\n        this.invalidateSprite();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DurationFormatter.prototype, \"durationFormats\", {\n    /**\r\n     * @return Formats\r\n     */\n    get: function () {\n      if (!this._durationFormats) {\n        this._durationFormats = {\n          \"millisecond\": {\n            \"millisecond\": this.language.translate(\"_duration_millisecond\"),\n            \"second\": this.language.translate(\"_duration_millisecond_second\"),\n            \"minute\": this.language.translate(\"_duration_millisecond_minute\"),\n            \"hour\": this.language.translate(\"_duration_millisecond_hour\"),\n            \"day\": this.language.translate(\"_duration_millisecond_day\"),\n            \"week\": this.language.translate(\"_duration_millisecond_week\"),\n            \"month\": this.language.translate(\"_duration_millisecond_month\"),\n            \"year\": this.language.translate(\"_duration_millisecond_year\")\n          },\n          \"second\": {\n            \"second\": this.language.translate(\"_duration_second\"),\n            \"minute\": this.language.translate(\"_duration_second_minute\"),\n            \"hour\": this.language.translate(\"_duration_second_hour\"),\n            \"day\": this.language.translate(\"_duration_second_day\"),\n            \"week\": this.language.translate(\"_duration_second_week\"),\n            \"month\": this.language.translate(\"_duration_second_month\"),\n            \"year\": this.language.translate(\"_duration_second_year\")\n          },\n          \"minute\": {\n            \"minute\": this.language.translate(\"_duration_minute\"),\n            \"hour\": this.language.translate(\"_duration_minute_hour\"),\n            \"day\": this.language.translate(\"_duration_minute_day\"),\n            \"week\": this.language.translate(\"_duration_minute_week\"),\n            \"month\": this.language.translate(\"_duration_minute_month\"),\n            \"year\": this.language.translate(\"_duration_minute_year\")\n          },\n          \"hour\": {\n            \"hour\": this.language.translate(\"_duration_hour\"),\n            \"day\": this.language.translate(\"_duration_hour_day\"),\n            \"week\": this.language.translate(\"_duration_hour_week\"),\n            \"month\": this.language.translate(\"_duration_hour_month\"),\n            \"year\": this.language.translate(\"_duration_hour_year\")\n          },\n          \"day\": {\n            \"day\": this.language.translate(\"_duration_day\"),\n            \"week\": this.language.translate(\"_duration_day_week\"),\n            \"month\": this.language.translate(\"_duration_day_month\"),\n            \"year\": this.language.translate(\"_duration_day_year\")\n          },\n          \"week\": {\n            \"week\": this.language.translate(\"_duration_week\"),\n            \"month\": this.language.translate(\"_duration_week_month\"),\n            \"year\": this.language.translate(\"_duration_week_year\")\n          },\n          \"month\": {\n            \"month\": this.language.translate(\"_duration_month\"),\n            \"year\": this.language.translate(\"_duration_month_year\")\n          },\n          \"year\": {\n            \"year\": this.language.translate(\"_duration_year\")\n          }\n        };\n      }\n      return this._durationFormats;\n    },\n    /**\r\n     * Duration formats for various combination of base units.\r\n     *\r\n     * @param value  Formats\r\n     */\n    set: function (value) {\n      this._durationFormats = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return DurationFormatter;\n}(BaseObject);\nexport { DurationFormatter };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"DurationFormatter\"] = DurationFormatter;","map":{"version":3,"mappings":"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","names":["Language","BaseObject","getTextFormatter","registry","$strings","$object","$utils","$type","$math","__extends","_super","_this","className","applyTheme","DurationFormatter","value","format","base","language","sprite","baseUnit","_baseUnit","hasValue","durationFormat","getFormat","toNumber","cleanFormat","info","parseFormat","source","Number","details","_negativeBase","positive","negative","zero","formatted","applyFormat","color","_outputFormat","cached","getCache","replace","PLACEHOLDER2","parts","split","each","part","item","parsed","partFormat","dirs","match","length","substr","chunks","chunk","i","text","type","absolute","matches","x","_unitAliases","push","PLACEHOLDER","template","setCache","Math","abs","tstamp","toTimeStamp","res","len","unit","toTimeUnit","digits","ints","floor","_unitValues","padString","code","invalidate","Object","invalidateSprite","outputFormat","toLowerCase","maxValue","maxUnit","getValueUnit","max","durationFormats","currentUnit","ms","getMilliseconds","eachContinue","key","val","num","_durationFormat","_durationFormats","translate","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\core\\formatters\\DurationFormatter.ts"],"sourcesContent":["/**\r\n * Duration formatting functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Language } from \"../utils/Language\";\r\nimport { BaseObject } from \"../Base\";\r\nimport { ITextChunk, getTextFormatter } from \"../formatters/TextFormatter\";\r\nimport { registry } from \"../Registry\";\r\nimport { TimeUnit } from \"../defs/TimeUnit\";\r\nimport { Optional } from \"../utils/Type\";\r\nimport * as $strings from \"../utils/Strings\";\r\nimport * as $object from \"../utils/Object\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $math from \"../utils/Math\";\r\n\r\n/**\r\n * DurationFormatter class. Formats numbers as durations.\r\n *\r\n * `1000` as `16:40`\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting\r\n */\r\nexport class DurationFormatter extends BaseObject {\r\n\r\n\t/**\r\n\t * If set will force this format to be used, regardless of the scale.\r\n\t */\r\n\tprotected _durationFormat: string;\r\n\r\n\t/**\r\n\t * Holds duration formats for various possible scenarios.\r\n\t */\r\n\tprotected _durationFormats: Partial<Record<TimeUnit, Partial<Record<TimeUnit, string>>>>;\r\n\r\n\t/**\r\n\t * A base value for negative numbers. Will treat all numbers below this value\r\n\t * as negative numbers.\r\n\t */\r\n\tprotected _negativeBase: number = 0;\r\n\r\n\t/**\r\n\t * A base unit to consider values are in.\r\n\t *\r\n\t * @default \"s\"\r\n\t */\r\n\tprotected _baseUnit: TimeUnit = \"second\";\r\n\r\n\t/**\r\n\t * Output format to produce. If the format calls for applying color to the\r\n\t * formatted value, this setting will determine what markup to use: SVG or\r\n\t * HTML.\r\n\t *\r\n\t * Available options: svg, html.\r\n\t *\r\n\t * @default \"svg\"\r\n\t */\r\n\tprotected _outputFormat: string = \"svg\";\r\n\r\n\r\n\t/**\r\n\t * How many milliseconds each unit represents.\r\n\t */\r\n\tprotected _unitValues: Record<TimeUnit, number> = {\r\n\t\t\"millisecond\": 1,\r\n\t\t\"second\": 1000,\r\n\t\t\"minute\": 60000,\r\n\t\t\"hour\": 3600000,\r\n\t\t\"day\": 86400000,\r\n\t\t\"week\": 604800000,\r\n\t\t\"month\": 2592000000,\r\n\t\t\"year\": 31536000000,\r\n\t};\r\n\r\n\t/**\r\n\t * Collection of aliases for units.\r\n\t */\r\n\tprotected _unitAliases: { [index: string]: string } = {\r\n\t\t\"Y\": \"y\",\r\n\t\t\"D\": \"d\",\r\n\t\t\"H\": \"h\",\r\n\t\t\"K\": \"h\",\r\n\t\t\"k\": \"h\",\r\n\t\t\"n\": \"S\"\r\n\t};\r\n\r\n\t/**\r\n\t * Holds reference to parent [[Sprite]] object.\r\n\t */\r\n\tpublic sprite: $type.Optional<Sprite>;\r\n\r\n\t/**\r\n\t * Holds reference to [[Language]] object.\r\n\t */\r\n\tpublic language: $type.Optional<Language>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationFormatter\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the number according as duration.\r\n\t *\r\n\t * For example `1000` (base unit seconds) would be converted to `16:40` as in\r\n\t * 16 minutes and 40 seconds.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting\r\n\t * @param value   Value to format\r\n\t * @param format  Format to apply\r\n\t * @param base    Override base unit\r\n\t * @return Formatted number\r\n\t */\r\n\tpublic format(value: number | string, format?: string, base?: TimeUnit): string {\r\n\r\n\t\t// no language?\r\n\t\tif (!this.language) {\r\n\t\t\tif (this.sprite) {\r\n\t\t\t\tthis.language = this.sprite.language;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.language = new Language;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// no base unit?\r\n\t\tlet baseUnit = base || this._baseUnit;\r\n\r\n\t\t// no format passed in or empty\r\n\t\tif (typeof format === \"undefined\" || format === \"\") {\r\n\t\t\tif ($type.hasValue(this.durationFormat)) {\r\n\t\t\t\tformat = this.durationFormat;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tformat = this.getFormat($type.toNumber(value), null, baseUnit);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Clean format\r\n\t\tformat = $utils.cleanFormat(format);\r\n\r\n\t\t// get format info (it will also deal with parser caching)\r\n\t\tlet info = this.parseFormat(format, baseUnit);\r\n\r\n\t\t// cast to number just in case\r\n\t\t// TODO: maybe use better casting\r\n\t\tlet source: number = Number(value);\r\n\r\n\t\t// format and replace the number\r\n\t\tlet details;\r\n\t\tif (source > this._negativeBase) {\r\n\t\t\tdetails = info.positive;\r\n\t\t}\r\n\t\telse if (source < this._negativeBase) {\r\n\t\t\tdetails = info.negative;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdetails = info.zero;\r\n\t\t}\r\n\r\n\r\n\t\t// Format\r\n\t\tlet formatted = this.applyFormat(source, details);\r\n\r\n\t\t// Apply color?\r\n\t\tif (details.color !== \"\") {\r\n\t\t\tif (this._outputFormat === \"svg\") {\r\n\t\t\t\tformatted = \"<tspan fill='\" + details.color + \"'>\" + formatted + \"</tspan>\";\r\n\t\t\t}\r\n\t\t\telse if (this._outputFormat === \"html\") {\r\n\t\t\t\tformatted = \"<span style='color: \" + details.color + \";'>\" + formatted + \"</span>\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn formatted;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses supplied format into structured object which can be used to format\r\n\t * the number.\r\n\t *\r\n\t * @param format  Format string, i.e. \"#,###.00\"\r\n\t * @param base    Override base unit\r\n\t * @return Parsed information\r\n\t */\r\n\tprotected parseFormat(format: string, base?: TimeUnit): any {\r\n\r\n\t\t// Check cache\r\n\t\tlet cached = this.getCache(format);\r\n\t\tif ($type.hasValue(cached)) {\r\n\t\t\treturn cached;\r\n\t\t}\r\n\r\n\t\t// no base unit?\r\n\t\tlet baseUnit = base || this._baseUnit;\r\n\r\n\t\t// Initialize duration parsing info\r\n\t\tlet info = {\r\n\t\t\t\"positive\": {\r\n\t\t\t\t\"color\": \"\",\r\n\t\t\t\t\"template\": \"\",\r\n\t\t\t\t\"parts\": <any>[],\r\n\t\t\t\t\"source\": \"\",\r\n\t\t\t\t\"baseUnit\": baseUnit,\r\n\t\t\t\t\"parsed\": false,\r\n\t\t\t\t\"absolute\": false\r\n\t\t\t},\r\n\t\t\t\"negative\": {\r\n\t\t\t\t\"color\": \"\",\r\n\t\t\t\t\"template\": \"\",\r\n\t\t\t\t\"parts\": <any>[],\r\n\t\t\t\t\"source\": \"\",\r\n\t\t\t\t\"baseUnit\": baseUnit,\r\n\t\t\t\t\"parsed\": false,\r\n\t\t\t\t\"absolute\": false\r\n\t\t\t},\r\n\t\t\t\"zero\": {\r\n\t\t\t\t\"color\": \"\",\r\n\t\t\t\t\"template\": \"\",\r\n\t\t\t\t\"parts\": <any>[],\r\n\t\t\t\t\"source\": \"\",\r\n\t\t\t\t\"baseUnit\": baseUnit,\r\n\t\t\t\t\"parsed\": false,\r\n\t\t\t\t\"absolute\": false\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Escape double vertical bars (that mean display one vertical bar)\r\n\t\tformat = format.replace(\"||\", $strings.PLACEHOLDER2);\r\n\r\n\t\t// Split it up and deal with different formats\r\n\t\tlet parts = format.split(\"|\");\r\n\t\tinfo.positive.source = parts[0];\r\n\r\n\t\tif (typeof parts[2] === \"undefined\") {\r\n\t\t\tinfo.zero = info.positive;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tinfo.zero.source = parts[2];\r\n\t\t}\r\n\r\n\t\tif (typeof parts[1] === \"undefined\") {\r\n\t\t\tinfo.negative = info.positive;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tinfo.negative.source = parts[1];\r\n\t\t}\r\n\r\n\t\t// Parse each\r\n\t\t$object.each(info, (part, item) => {\r\n\t\t\t// Already parsed\r\n\t\t\tif (item.parsed) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Check cached\r\n\t\t\tif (typeof this.getCache(item.source) !== \"undefined\") {\r\n\t\t\t\tinfo[part] = this.getCache(item.source);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Begin parsing\r\n\t\t\tlet partFormat: string = item.source;\r\n\r\n\t\t\t// Check for [] directives\r\n\t\t\tlet dirs: string[] | null = [];\r\n\t\t\tdirs = item.source.match(/^\\[([^\\]]*)\\]/);\r\n\t\t\tif (dirs && dirs.length && dirs[0] !== \"\") {\r\n\t\t\t\tpartFormat = item.source.substr(dirs[0].length);\r\n\t\t\t\titem.color = dirs[1];\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// Let TextFormatter split into chunks\r\n\t\t\tlet chunks: ITextChunk[] = getTextFormatter().chunk(partFormat, true);\r\n\t\t\tfor (let i: number = 0; i < chunks.length; i++) {\r\n\t\t\t\tlet chunk: ITextChunk = chunks[i];\r\n\r\n\t\t\t\t// replace back double vertical bar\r\n\t\t\t\tchunk.text = chunk.text.replace($strings.PLACEHOLDER2, \"|\");\r\n\r\n\t\t\t\tif (chunk.type === \"value\") {\r\n\r\n\t\t\t\t\t// Just \"Duration\"?\r\n\t\t\t\t\t// if (chunk.text.toLowerCase() === \"duration\") {\r\n\t\t\t\t\t// \tchunk.text = durationFormat;\r\n\t\t\t\t\t// }\r\n\r\n\t\t\t\t\t// Check for \"a\" (absolute) modifier\r\n\t\t\t\t\tif (chunk.text.match(/[yYMdDwhHKkmsSn]+a/)) {\r\n\t\t\t\t\t\titem.absolute = true;\r\n\t\t\t\t\t\tchunk.text = chunk.text.replace(/([yYMdDwhHKkmsSn]+)a/, \"$1\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Find all possible parts\r\n\t\t\t\t\tlet matches = chunk.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);\r\n\r\n\t\t\t\t\tif (matches) {\r\n\t\t\t\t\t\t// Populate template\r\n\t\t\t\t\t\tfor (let x = 0; x < matches.length; x++) {\r\n\t\t\t\t\t\t\t// Is it an alias?\r\n\t\t\t\t\t\t\tif (!$type.hasValue(matches[x])) {\r\n\t\t\t\t\t\t\t\tmatches[x] = this._unitAliases[matches[x]];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\titem.parts.push(matches[x]);\r\n\t\t\t\t\t\t\tchunk.text = chunk.text.replace(matches[x], $strings.PLACEHOLDER);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Apply to template\r\n\t\t\t\titem.template += chunk.text;\r\n\t\t\t}\r\n\r\n\t\t\t// Apply style formatting\r\n\t\t\t//item.template = getTextFormatter().format(item.template, this.outputFormat);\r\n\r\n\t\t\t// Save cache\r\n\t\t\tthis.setCache(item.source, item);\r\n\r\n\t\t\t// Mark this as parsed\r\n\t\t\titem.parsed = true;\r\n\t\t});\r\n\r\n\t\t// Save cache (the whole thing)\r\n\t\tthis.setCache(format, info);\r\n\r\n\t\treturn info;\r\n\t}\r\n\r\n\t/**\r\n\t * Applies parsed format to a numeric value.\r\n\t *\r\n\t * @param value    Value\r\n\t * @param details  Parsed format as returned by {parseFormat}\r\n\t * @return Formatted duration\r\n\t */\r\n\tprotected applyFormat(value: number, details: any): string {\r\n\r\n\t\t// Use absolute values\r\n\t\tlet negative: boolean = !details.absolute && (value < this._negativeBase);\r\n\t\tvalue = Math.abs(value);\r\n\r\n\t\t// Recalculate to milliseconds\r\n\t\tlet tstamp: number = this.toTimeStamp(value, details.baseUnit);\r\n\r\n\t\t// Init return value\r\n\t\tlet res: string = details.template;\r\n\r\n\t\t// Iterate through duration parts\r\n\t\tfor (let i = 0, len = details.parts.length; i < len; i++) {\r\n\r\n\t\t\t// Gather the part\r\n\t\t\tlet part: string = details.parts[i];\r\n\t\t\tlet unit: TimeUnit = this.toTimeUnit(part.substr(0, 1));\r\n\t\t\tlet digits: number = part.length;\r\n\r\n\t\t\t// Calculate current unit value\r\n\t\t\tlet ints: number = Math.floor(tstamp / this._unitValues[unit]);\r\n\t\t\tres = res.replace($strings.PLACEHOLDER, $utils.padString(ints, digits, \"0\"));\r\n\r\n\t\t\t// Reduce timestamp\r\n\t\t\ttstamp -= ints * this._unitValues[unit];\r\n\t\t}\r\n\r\n\t\t// Reapply negative sign\r\n\t\tif (negative) {\r\n\t\t\tres = \"-\" + res;\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts numeric value to timestamp in milliseconds.\r\n\t *\r\n\t * @param value     A source value\r\n\t * @param baseUnit  Base unit the source value is in: \"q\", \"s\", \"i\", \"h\", \"d\", \"w\", \"m\", \"y\"\r\n\t * @return Value representation as a timestamp in milliseconds\r\n\t */\r\n\tpublic toTimeStamp(value: number, baseUnit: TimeUnit): number {\r\n\t\treturn value * this._unitValues[baseUnit];\r\n\t}\r\n\r\n\tprotected toTimeUnit(code: string): Optional<TimeUnit> {\r\n\t\tswitch (code) {\r\n\t\t\tcase \"S\":\r\n\t\t\t\treturn \"millisecond\";\r\n\t\t\tcase \"s\":\r\n\t\t\t\treturn \"second\";\r\n\t\t\tcase \"m\":\r\n\t\t\t\treturn \"minute\";\r\n\t\t\tcase \"h\":\r\n\t\t\t\treturn \"hour\";\r\n\t\t\tcase \"d\":\r\n\t\t\t\treturn \"day\";\r\n\t\t\tcase \"w\":\r\n\t\t\t\treturn \"week\";\r\n\t\t\tcase \"M\":\r\n\t\t\t\treturn \"month\";\r\n\t\t\tcase \"y\":\r\n\t\t\t\treturn \"year\";\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates the parent [[Sprite]] object.\r\n\t */\r\n\tprotected invalidateSprite(): void {\r\n\t\tif (this.sprite) {\r\n\t\t\tthis.sprite.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Base unit the values are in.\r\n\t *\r\n\t * A base unit will be used to recalculate the numeric value to millisecond\r\n\t * timestamps.\r\n\t *\r\n\t * Available options:\r\n\t *\r\n\t * * \"millisecond\"\r\n\t * * \"second\"\r\n\t * * \"minute\"\r\n\t * * \"hour\"\r\n\t * * \"day\"\r\n\t * * \"week\"\r\n\t * * \"month\"\r\n\t * * \"year\"\r\n\t *\r\n\t * @default \"s\"\r\n\t * @param baseUnit  A base unit\r\n\t */\r\n\tpublic set baseUnit(baseUnit: TimeUnit) {\r\n\t\tthis._baseUnit = baseUnit;\r\n\t\tthis.invalidateSprite();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Base unit\r\n\t */\r\n\tpublic get baseUnit(): TimeUnit {\r\n\t\treturn this._baseUnit;\r\n\t}\r\n\r\n\t/**\r\n\t * Setter for output format: \"svg\" or \"html.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Output format\r\n\t */\r\n\tpublic set outputFormat(outputFormat: string) {\r\n\t\tthis._outputFormat = outputFormat.toLowerCase();\r\n\t\tthis.invalidateSprite();\r\n\t}\r\n\r\n\t/**\r\n\t * Getter for output format.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Output format\r\n\t */\r\n\tpublic get outputFormat(): string {\r\n\t\treturn this._outputFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns appropriate default format for the value.\r\n\t *\r\n\t * If `maxValue` is sepcified, it will use that value to determine the time\r\n\t * unit for the format.\r\n\t *\r\n\t * For example if your `baseUnit` is `\"second\"` and you pass in `10`, you\r\n\t * will get `\"10\"`.\r\n\t *\r\n\t * However, you might want it to be formatted in the context of bigger scale,\r\n\t * say 10 minutes (600 seconds). If you pass in `600` as `maxValue`, all\r\n\t * values, including small ones will use format with minutes, e.g.:\r\n\t * `00:10`, `00:50`, `12: 30`, etc.\r\n\t *\r\n\t * @param value     Value to format\r\n\t * @param maxValue  Maximum value to be used to determine format\r\n\t * @param baseUnit  Base unit of the value\r\n\t * @return Format\r\n\t */\r\n\tpublic getFormat(value: number, maxValue?: number, baseUnit?: TimeUnit): string {\r\n\r\n\t\t// Is format override set?\r\n\t\tif ($type.hasValue(this.durationFormat)) {\r\n\t\t\treturn this.durationFormat;\r\n\t\t}\r\n\r\n\t\t// Get base unit\r\n\t\tif (!baseUnit) {\r\n\t\t\tbaseUnit = this.baseUnit;\r\n\t\t}\r\n\r\n\t\tif ($type.hasValue(maxValue) && value != maxValue) {\r\n\t\t\tvalue = Math.abs(value);\r\n\t\t\tmaxValue = Math.abs(maxValue);\r\n\t\t\tlet maxUnit = this.getValueUnit($math.max(value, maxValue), baseUnit);\r\n\t\t\t//let diffUnit = this.getValueUnit(Math.abs(maxValue - value), baseUnit);\r\n\t\t\t//console.log(maxUnit, diffUnit);\r\n\t\t\treturn this.durationFormats[baseUnit][maxUnit];\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet unit = this.getValueUnit(value, baseUnit);\r\n\t\t\treturn this.durationFormats[baseUnit][unit];\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns value's closest denominator time unit, e.g 100 seconds is\r\n\t * `\"minute\"`, while 59 seconds would still be `second`.\r\n\t *\r\n\t * @param value     Source duration value\r\n\t * @param baseUnit  Base unit\r\n\t * @return Denominator\r\n\t */\r\n\tpublic getValueUnit(value: number, baseUnit?: TimeUnit): TimeUnit {\r\n\r\n\t\t// Get base unit\r\n\t\tif (!baseUnit) {\r\n\t\t\tbaseUnit = this.baseUnit;\r\n\t\t}\r\n\r\n\t\t// Convert to milliseconds\r\n\t\tlet currentUnit: TimeUnit;\r\n\t\tlet ms = this.getMilliseconds(value, baseUnit);\r\n\t\t$object.eachContinue(this._unitValues, (key, val) => {\r\n\t\t\tif (key == baseUnit || currentUnit) {\r\n\t\t\t\tlet num = ms / val;\r\n\t\t\t\tif (num <= 1) {\r\n\t\t\t\t\tif (!currentUnit) {\r\n\t\t\t\t\t\tcurrentUnit = key;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tcurrentUnit = key;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn currentUnit;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts value to milliseconds according to `baseUnit`.\r\n\t *\r\n\t * @param value     Source duration value\r\n\t * @param baseUnit  Base unit\r\n\t * @return Value in milliseconds\r\n\t */\r\n\tpublic getMilliseconds(value: number, baseUnit?: TimeUnit): number {\r\n\r\n\t\t// Get base unit\r\n\t\tif (!baseUnit) {\r\n\t\t\tbaseUnit = this.baseUnit;\r\n\t\t}\r\n\r\n\t\treturn value * this._unitValues[baseUnit];\r\n\t}\r\n\r\n\t/**\r\n\t * If set, this format will be used instead of the one determined dynamically\r\n\t * based on the basedUnit and range of values.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Available fomatting codes\r\n\t * @param value  Format\r\n\t */\r\n\tpublic set durationFormat(value: string) {\r\n\t\tif (this._durationFormat != value) {\r\n\t\t\tthis._durationFormat = value;\r\n\t\t\tthis.invalidateSprite();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Format\r\n\t */\r\n\tpublic get durationFormat(): Optional<string> {\r\n\t\treturn this._durationFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Duration formats for various combination of base units.\r\n\t *\r\n\t * @param value  Formats\r\n\t */\r\n\tpublic set durationFormats(value: Partial<Record<TimeUnit, Partial<Record<TimeUnit, string>>>>) {\r\n\t\tthis._durationFormats = value;\r\n\t\tthis.invalidateSprite();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Formats\r\n\t */\r\n\tpublic get durationFormats(): Partial<Record<TimeUnit, Partial<Record<TimeUnit, string>>>> {\r\n\t\tif (!this._durationFormats) {\r\n\t\t\tthis._durationFormats = {\r\n\t\t\t\t\"millisecond\": {\r\n\t\t\t\t\t\"millisecond\": this.language.translate(\"_duration_millisecond\"),\r\n\t\t\t\t\t\"second\": this.language.translate(\"_duration_millisecond_second\"),\r\n\t\t\t\t\t\"minute\": this.language.translate(\"_duration_millisecond_minute\"),\r\n\t\t\t\t\t\"hour\": this.language.translate(\"_duration_millisecond_hour\"),\r\n\t\t\t\t\t\"day\": this.language.translate(\"_duration_millisecond_day\"),\r\n\t\t\t\t\t\"week\": this.language.translate(\"_duration_millisecond_week\"),\r\n\t\t\t\t\t\"month\": this.language.translate(\"_duration_millisecond_month\"),\r\n\t\t\t\t\t\"year\": this.language.translate(\"_duration_millisecond_year\")\r\n\t\t\t\t},\r\n\t\t\t\t\"second\": {\r\n\t\t\t\t\t\"second\": this.language.translate(\"_duration_second\"),\r\n\t\t\t\t\t\"minute\": this.language.translate(\"_duration_second_minute\"),\r\n\t\t\t\t\t\"hour\": this.language.translate(\"_duration_second_hour\"),\r\n\t\t\t\t\t\"day\": this.language.translate(\"_duration_second_day\"),\r\n\t\t\t\t\t\"week\": this.language.translate(\"_duration_second_week\"),\r\n\t\t\t\t\t\"month\": this.language.translate(\"_duration_second_month\"),\r\n\t\t\t\t\t\"year\": this.language.translate(\"_duration_second_year\")\r\n\t\t\t\t},\r\n\t\t\t\t\"minute\": {\r\n\t\t\t\t\t\"minute\": this.language.translate(\"_duration_minute\"),\r\n\t\t\t\t\t\"hour\": this.language.translate(\"_duration_minute_hour\"),\r\n\t\t\t\t\t\"day\": this.language.translate(\"_duration_minute_day\"),\r\n\t\t\t\t\t\"week\": this.language.translate(\"_duration_minute_week\"),\r\n\t\t\t\t\t\"month\": this.language.translate(\"_duration_minute_month\"),\r\n\t\t\t\t\t\"year\": this.language.translate(\"_duration_minute_year\")\r\n\t\t\t\t},\r\n\t\t\t\t\"hour\": {\r\n\t\t\t\t\t\"hour\": this.language.translate(\"_duration_hour\"),\r\n\t\t\t\t\t\"day\": this.language.translate(\"_duration_hour_day\"),\r\n\t\t\t\t\t\"week\": this.language.translate(\"_duration_hour_week\"),\r\n\t\t\t\t\t\"month\": this.language.translate(\"_duration_hour_month\"),\r\n\t\t\t\t\t\"year\": this.language.translate(\"_duration_hour_year\")\r\n\t\t\t\t},\r\n\t\t\t\t\"day\": {\r\n\t\t\t\t\t\"day\": this.language.translate(\"_duration_day\"),\r\n\t\t\t\t\t\"week\": this.language.translate(\"_duration_day_week\"),\r\n\t\t\t\t\t\"month\": this.language.translate(\"_duration_day_month\"),\r\n\t\t\t\t\t\"year\": this.language.translate(\"_duration_day_year\")\r\n\t\t\t\t},\r\n\t\t\t\t\"week\": {\r\n\t\t\t\t\t\"week\": this.language.translate(\"_duration_week\"),\r\n\t\t\t\t\t\"month\": this.language.translate(\"_duration_week_month\"),\r\n\t\t\t\t\t\"year\": this.language.translate(\"_duration_week_year\")\r\n\t\t\t\t},\r\n\t\t\t\t\"month\": {\r\n\t\t\t\t\t\"month\": this.language.translate(\"_duration_month\"),\r\n\t\t\t\t\t\"year\": this.language.translate(\"_duration_month_year\")\r\n\t\t\t\t},\r\n\t\t\t\t\"year\": {\r\n\t\t\t\t\t\"year\": this.language.translate(\"_duration_year\")\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t\treturn this._durationFormats;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationFormatter\"] = DurationFormatter;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}