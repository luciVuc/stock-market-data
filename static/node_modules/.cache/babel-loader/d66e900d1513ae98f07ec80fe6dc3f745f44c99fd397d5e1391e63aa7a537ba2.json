{"ast":null,"code":"/**\r\n * Line drawing functionality.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Sprite } from \"../Sprite\";\nimport { color } from \"../utils/Color\";\nimport { LinearGradient } from \"../rendering/fills/LinearGradient\";\nimport { registry } from \"../Registry\";\nimport * as $type from \"../utils/Type\";\nimport * as $math from \"../utils/Math\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Draws a line.\r\n *\r\n * @see {@link ILineEvents} for a list of available events\r\n * @see {@link ILineAdapters} for a list of available Adapters\r\n */\nvar Line = /** @class */function (_super) {\n  __extends(Line, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Line() {\n    var _this = _super.call(this) || this;\n    _this.className = \"Line\";\n    _this.element = _this.paper.add(\"line\");\n    _this.fill = color(); //\"none\";\n    _this.x1 = 0;\n    _this.y1 = 0;\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Draws the line.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Line.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    if (this.x1 == this.x2 || this.y1 == this.y2) {\n      this.pixelPerfect = true;\n    } else {\n      this.pixelPerfect = false;\n    }\n    this.x1 = this.x1;\n    this.x2 = this.x2;\n    this.y1 = this.y1;\n    this.y2 = this.y2;\n  };\n  Object.defineProperty(Line.prototype, \"x1\", {\n    /**\r\n     * @return X\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"x1\");\n    },\n    /**\r\n     * X coordinate of first end.\r\n     *\r\n     * @param value X\r\n     */\n    set: function (value) {\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n      var delta = 0;\n      if (this.pixelPerfect && this.stroke instanceof LinearGradient) {\n        delta = 0.00001;\n      }\n      this.setPropertyValue(\"x1\", value, true);\n      this.element.attr({\n        \"x1\": value + delta\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Line.prototype, \"x2\", {\n    /**\r\n     * @return X\r\n     */\n    get: function () {\n      var value = this.getPropertyValue(\"x2\");\n      if (!$type.isNumber(value)) {\n        value = this.pixelWidth;\n      }\n      return value;\n    },\n    /**\r\n     * X coordinate of second end.\r\n     *\r\n     * @param value X\r\n     */\n    set: function (value) {\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n      this.setPropertyValue(\"x2\", value, true);\n      this.element.attr({\n        \"x2\": value\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Line.prototype, \"y1\", {\n    /**\r\n     * @return Y\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"y1\");\n    },\n    /**\r\n     * Y coordinate of first end.\r\n     *\r\n     * @param value Y\r\n     */\n    set: function (value) {\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n      var delta = 0;\n      if (this.pixelPerfect && this.stroke instanceof LinearGradient) {\n        delta = 0.00001;\n      }\n      this.setPropertyValue(\"y1\", value, true);\n      this.element.attr({\n        \"y1\": value + delta\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Line.prototype, \"y2\", {\n    /**\r\n     * @return Y\r\n     */\n    get: function () {\n      var value = this.getPropertyValue(\"y2\");\n      if (!$type.isNumber(value)) {\n        value = this.pixelHeight;\n      }\n      return value;\n    },\n    /**\r\n     * Y coordinate of second end.\r\n     *\r\n     * @param value Y\r\n     */\n    set: function (value) {\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n      this.setPropertyValue(\"y2\", value, true);\n      this.element.attr({\n        \"y2\": value\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position along the line (0-1) into pixel coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Coordinates\r\n   */\n  Line.prototype.positionToPoint = function (position) {\n    var point1 = {\n      x: this.x1,\n      y: this.y1\n    };\n    var point2 = {\n      x: this.x2,\n      y: this.y2\n    };\n    var point = $math.getMidPoint(point1, point2, position);\n    var angle = $math.getAngle(point1, point2);\n    return {\n      x: point.x,\n      y: point.y,\n      angle: angle\n    };\n  };\n  return Line;\n}(Sprite);\nexport { Line };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Line\"] = Line;","map":{"version":3,"mappings":"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","names":["Sprite","color","LinearGradient","registry","$type","$math","__extends","_super","_this","className","element","paper","add","fill","x1","y1","applyTheme","Line","draw","x2","y2","pixelPerfect","Object","getPropertyValue","value","isNumber","delta","stroke","setPropertyValue","attr","pixelWidth","pixelHeight","position","point1","x","y","point2","point","getMidPoint","angle","getAngle","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\core\\elements\\Line.ts"],"sourcesContent":["/**\r\n * Line drawing functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport { color } from \"../utils/Color\";\r\nimport { LinearGradient } from \"../rendering/fills/LinearGradient\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $math from \"../utils/Math\";\r\nimport { IOrientationPoint } from \"../defs/IPoint\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Line]].\r\n */\r\nexport interface ILineProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * X coordinate of first end.\r\n\t */\r\n\tx1?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of first end.\r\n\t */\r\n\ty1?: number;\r\n\r\n\t/**\r\n\t * X coordinate of second end.\r\n\t */\r\n\tx2?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of second end.\r\n\t */\r\n\ty2?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Line]].\r\n */\r\nexport interface ILineEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Line]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineAdapters extends ISpriteAdapters, ILineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a line.\r\n *\r\n * @see {@link ILineEvents} for a list of available events\r\n * @see {@link ILineAdapters} for a list of available Adapters\r\n */\r\nexport class Line extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILineEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Line\";\r\n\t\tthis.element = this.paper.add(\"line\");\r\n\t\tthis.fill = color(); //\"none\";\r\n\r\n\t\tthis.x1 = 0;\r\n\t\tthis.y1 = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.x1 == this.x2 || this.y1 == this.y2) {\r\n\t\t\tthis.pixelPerfect = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.pixelPerfect = false;\r\n\t\t}\r\n\r\n\t\tthis.x1 = this.x1;\r\n\t\tthis.x2 = this.x2;\r\n\r\n\t\tthis.y1 = this.y1;\r\n\t\tthis.y2 = this.y2;\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of first end.\r\n\t *\r\n\t * @param value X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t}\r\n\t\tlet delta = 0;\r\n\t\tif (this.pixelPerfect && this.stroke instanceof LinearGradient) {\r\n\t\t\tdelta = 0.00001;\r\n\t\t}\r\n\r\n\t\tthis.setPropertyValue(\"x1\", value, true);\r\n\t\tthis.element.attr({ \"x1\": value + delta });\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.getPropertyValue(\"x1\");\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of second end.\r\n\t *\r\n\t * @param value X\r\n\t */\r\n\tpublic set x2(value: number) {\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"x2\", value, true);\r\n\t\tthis.element.attr({ \"x2\": value });\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x2(): number {\r\n\t\tlet value = this.getPropertyValue(\"x2\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.pixelWidth;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of first end.\r\n\t *\r\n\t * @param value Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t}\r\n\r\n\t\tlet delta = 0;\r\n\t\tif (this.pixelPerfect && this.stroke instanceof LinearGradient) {\r\n\t\t\tdelta = 0.00001;\r\n\t\t}\r\n\r\n\t\tthis.setPropertyValue(\"y1\", value, true);\r\n\t\tthis.element.attr({ \"y1\": value + delta });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.getPropertyValue(\"y1\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of second end.\r\n\t *\r\n\t * @param value Y\r\n\t */\r\n\tpublic set y2(value: number) {\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"y2\", value, true);\r\n\t\tthis.element.attr({ \"y2\": value });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y2(): number {\r\n\t\tlet value = this.getPropertyValue(\"y2\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.pixelHeight;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tlet point1 = { x: this.x1, y: this.y1 };\r\n\t\tlet point2 = { x: this.x2, y: this.y2 };\r\n\t\tlet point = $math.getMidPoint(point1, point2, position);\r\n\t\tlet angle = $math.getAngle(point1, point2);\r\n\r\n\t\treturn {x:point.x, y:point.y, angle:angle};\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Line\"] = Line;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}