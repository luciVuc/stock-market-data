{"ast":null,"code":"/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Column } from \"./Column\";\nimport { Sprite } from \"../../core/Sprite\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport { registry } from \"../../core/Registry\";\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\nimport { percent } from \"../../core/utils/Percent\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar CurvedColumn = /** @class */function (_super) {\n  __extends(CurvedColumn, _super);\n  /**\r\n   * Constructor\r\n   */\n  function CurvedColumn() {\n    var _this = _super.call(this) || this;\n    _this.className = \"CurvedColumn\";\n    return _this;\n  }\n  /**\r\n   * [createAssets description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n  CurvedColumn.prototype.createAssets = function () {\n    this.curvedColumn = this.createChild(Sprite);\n    this.curvedColumn.shouldClone = false;\n    this.setPropertyValue(\"tension\", 0.7);\n    this.width = percent(120);\n    this.height = percent(120);\n    // some dirty hack so that if user access column, it won't get error\n    this.column = this.curvedColumn;\n  };\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  CurvedColumn.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    var w = this.realWidth;\n    var h = this.realHeight;\n    var x = this.realX - this.pixelX;\n    var y = this.realY - this.pixelY;\n    var points;\n    // TODO can this be removed ?\n    $utils.used(this.width);\n    var tensionX = 1;\n    var tensionY = 1;\n    if (this.orientation == \"vertical\") {\n      tensionX = this.tension;\n      points = [{\n        x: 0,\n        y: h + y\n      }, {\n        x: w / 2,\n        y: y\n      }, {\n        x: w,\n        y: h + y\n      }];\n    } else {\n      tensionY = this.tension;\n      h = Math.abs(h);\n      points = [{\n        x: x,\n        y: h\n      }, {\n        x: x + w,\n        y: h / 2\n      }, {\n        x: x,\n        y: 0\n      }];\n    }\n    var path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\n    this.column.path = path;\n  };\n  /**\r\n   * Copies all parameters from another [[CurvedColumn]].\r\n   *\r\n   * @param source  Source CurvedColumn\r\n   */\n  CurvedColumn.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    if (this.curvedColumn) {\n      this.curvedColumn.copyFrom(source.curvedColumn);\n    }\n  };\n  Object.defineProperty(CurvedColumn.prototype, \"tension\", {\n    /**\r\n     * @return Tension (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tension\");\n    },\n    /**\r\n     * Horizontal tension of the curve.\r\n     *\r\n     * Tension defines how \"lose\" the line will be.\r\n     *\r\n     * 1 is the maximum tension which would result in pointy columns with\r\n     * straight edges.\r\n     *\r\n     * The smaller the tension th wider the column will be.\r\n     *\r\n     * @default 0.7\r\n     * @param value tension (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tension\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CurvedColumn.prototype, \"orientation\", {\n    /**\r\n     * Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"orientation\");\n    },\n    /**\r\n     * Orientation of the column.\r\n     *\r\n     * Available options: \"vertical\" (default) and \"horizontal\".\r\n     *\r\n     * @default \"vertical\"\r\n     * @param value  Orientation\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"orientation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return CurvedColumn;\n}(Column);\nexport { CurvedColumn };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;","map":{"version":3,"mappings":"AAAA;;;;;AAKA;;;;;;AAMA,SAASA,MAAM,QAA2D,UAAU;AACpF,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,OAAO,KAAKC,KAAK,MAAM,2BAA2B;AAClD,OAAO,KAAKC,MAAM,MAAM,wBAAwB;AAChD,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,OAAO,KAAKC,UAAU,MAAM,gCAAgC;AAG5D,SAASC,OAAO,QAAQ,0BAA0B;AAmDlD;;;;;;AAOA;;;;;;;AAOA;EAAkCC;EAsBjC;;;EAGA;IAAA,YACCC,iBAAO;IACPC,KAAI,CAACC,SAAS,GAAG,cAAc;;EAChC;EAEA;;;;;;EAMUC,mCAAY,GAAtB;IACC,IAAI,CAACC,YAAY,GAAG,IAAI,CAACC,WAAW,CAACZ,MAAM,CAAC;IAC5C,IAAI,CAACW,YAAY,CAACE,WAAW,GAAG,KAAK;IAErC,IAAI,CAACC,gBAAgB,CAAC,SAAS,EAAE,GAAG,CAAC;IAErC,IAAI,CAACC,KAAK,GAAGV,OAAO,CAAC,GAAG,CAAC;IACzB,IAAI,CAACW,MAAM,GAAGX,OAAO,CAAC,GAAG,CAAC;IAE1B;IACA,IAAI,CAACY,MAAM,GAAQ,IAAI,CAACN,YAAY;EACrC,CAAC;EAED;;;;;EAKOD,2BAAI,GAAX;IACCH,iBAAMW,IAAI,WAAE;IACZ,IAAIC,CAAC,GAAG,IAAI,CAACC,SAAS;IACtB,IAAIC,CAAC,GAAG,IAAI,CAACC,UAAU;IACvB,IAAIC,CAAC,GAAG,IAAI,CAACC,KAAK,GAAG,IAAI,CAACC,MAAM;IAChC,IAAIC,CAAC,GAAG,IAAI,CAACC,KAAK,GAAG,IAAI,CAACC,MAAM;IAEhC,IAAIC,MAAgB;IAEpB;IACA3B,MAAM,CAAC4B,IAAI,CAAC,IAAI,CAACf,KAAK,CAAC;IAEvB,IAAIgB,QAAQ,GAAG,CAAC;IAChB,IAAIC,QAAQ,GAAG,CAAC;IAEhB,IAAI,IAAI,CAACC,WAAW,IAAI,UAAU,EAAE;MACnCF,QAAQ,GAAG,IAAI,CAACG,OAAO;MACvBL,MAAM,GAAG,CAAC;QAAEN,CAAC,EAAE,CAAC;QAAEG,CAAC,EAAEL,CAAC,GAAGK;MAAC,CAAE,EAAE;QAAEH,CAAC,EAAEJ,CAAC,GAAG,CAAC;QAAEO,CAAC,EAAEA;MAAC,CAAE,EAAE;QAAEH,CAAC,EAAEJ,CAAC;QAAEO,CAAC,EAAEL,CAAC,GAAGK;MAAC,CAAE,CAAC;KACrE,MACI;MACJM,QAAQ,GAAG,IAAI,CAACE,OAAO;MACvBb,CAAC,GAAGc,IAAI,CAACC,GAAG,CAACf,CAAC,CAAC;MACfQ,MAAM,GAAG,CAAC;QAAEN,CAAC,EAAEA,CAAC;QAAEG,CAAC,EAAEL;MAAC,CAAE,EAAE;QAAEE,CAAC,EAAEA,CAAC,GAAGJ,CAAC;QAAEO,CAAC,EAAEL,CAAC,GAAG;MAAC,CAAE,EAAE;QAAEE,CAAC,EAAEA,CAAC;QAAEG,CAAC,EAAE;MAAC,CAAE,CAAC;;IAGlE,IAAIW,IAAI,GAAGpC,KAAK,CAACqC,MAAM,CAACT,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,IAAIzB,UAAU,CAACmC,OAAO,CAACR,QAAQ,EAAEC,QAAQ,CAAC,CAACQ,MAAM,CAACX,MAAM,CAAC;IAC9F,IAAI,CAACZ,MAAM,CAACoB,IAAI,GAAGA,IAAI;EACxB,CAAC;EAED;;;;;EAKO3B,+BAAQ,GAAf,UAAgB+B,MAAY;IAC3BlC,iBAAMmC,QAAQ,YAACD,MAAM,CAAC;IACtB,IAAI,IAAI,CAAC9B,YAAY,EAAE;MACtB,IAAI,CAACA,YAAY,CAAC+B,QAAQ,CAACD,MAAM,CAAC9B,YAAY,CAAC;;EAEjD,CAAC;EAeDgC,sBAAWjC,iCAAO;IAIlB;;;SAGA;MACC,OAAO,IAAI,CAACkC,gBAAgB,CAAC,SAAS,CAAC;IACxC,CAAC;IAtBD;;;;;;;;;;;;;SAaA,UAAmBC,KAAa;MAC/B,IAAI,CAAC/B,gBAAgB,CAAC,SAAS,EAAE+B,KAAK,EAAE,IAAI,CAAC;IAC9C,CAAC;;;;EAiBDF,sBAAWjC,qCAAW;IAItB;;;SAGA;MACC,OAAO,IAAI,CAACkC,gBAAgB,CAAC,aAAa,CAAC;IAC5C,CAAC;IAjBD;;;;;;;;SAQA,UAAuBC,KAAkB;MACxC,IAAI,CAAC/B,gBAAgB,CAAC,aAAa,EAAE+B,KAAK,EAAE,IAAI,CAAC;IAClD,CAAC;;;;EASF,mBAAC;AAAD,CAAC,CA1IiC9C,MAAM;;AA4IxC;;;;;;AAMAI,QAAQ,CAAC2C,iBAAiB,CAAC,cAAc,CAAC,GAAGpC,YAAY","names":["Column","Sprite","$path","$utils","registry","$smoothing","percent","__extends","_super","_this","className","CurvedColumn","curvedColumn","createChild","shouldClone","setPropertyValue","width","height","column","draw","w","realWidth","h","realHeight","x","realX","pixelX","y","realY","pixelY","points","used","tensionX","tensionY","orientation","tension","Math","abs","path","moveTo","Tension","smooth","source","copyFrom","Object","getPropertyValue","value","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\elements\\CurvedColumn.ts"],"sourcesContent":["/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnProperties extends IColumnProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Tension\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * Orientation of the column\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnAdapters extends IColumnAdapters, ICurvedColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurvedColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurvedColumnEvents;\r\n\r\n\t/**\r\n\t * The element that holds curved column shape.\r\n\t */\r\n\tpublic curvedColumn: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * [createAssets description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected createAssets(): void {\r\n\t\tthis.curvedColumn = this.createChild(Sprite);\r\n\t\tthis.curvedColumn.shouldClone = false;\r\n\r\n\t\tthis.setPropertyValue(\"tension\", 0.7);\r\n\r\n\t\tthis.width = percent(120);\r\n\t\tthis.height = percent(120);\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.curvedColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet w = this.realWidth;\r\n\t\tlet h = this.realHeight;\r\n\t\tlet x = this.realX - this.pixelX;\r\n\t\tlet y = this.realY - this.pixelY;\r\n\r\n\t\tlet points: IPoint[];\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\t$utils.used(this.width);\r\n\r\n\t\tlet tensionX = 1;\r\n\t\tlet tensionY = 1;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\ttensionX = this.tension;\r\n\t\t\tpoints = [{ x: 0, y: h + y }, { x: w / 2, y: y }, { x: w, y: h + y }];\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttensionY = this.tension;\r\n\t\t\th = Math.abs(h);\r\n\t\t\tpoints = [{ x: x, y: h }, { x: x + w, y: h / 2 }, { x: x, y: 0 }];\r\n\t\t}\r\n\r\n\t\tlet path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\r\n\t\tthis.column.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[CurvedColumn]].\r\n\t *\r\n\t * @param source  Source CurvedColumn\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.curvedColumn) {\r\n\t\t\tthis.curvedColumn.copyFrom(source.curvedColumn);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension of the curve.\r\n\t *\r\n\t * Tension defines how \"lose\" the line will be.\r\n\t *\r\n\t * 1 is the maximum tension which would result in pointy columns with\r\n\t * straight edges.\r\n\t *\r\n\t * The smaller the tension th wider the column will be.\r\n\t *\r\n\t * @default 0.7\r\n\t * @param value tension (0-1)\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tension (0-1)\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the column.\r\n\t *\r\n\t * Available options: \"vertical\" (default) and \"horizontal\".\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}