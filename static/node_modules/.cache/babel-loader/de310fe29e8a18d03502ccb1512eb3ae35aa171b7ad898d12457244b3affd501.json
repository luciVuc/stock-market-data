{"ast":null,"code":"/**\r\n * Functionality for drawing waved circles.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Circle } from \"./Circle\";\nimport { registry } from \"../Registry\";\nimport * as $path from \"../rendering/Path\";\nimport * as $math from \"../utils/Math\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Draws a waved circle.\r\n *\r\n * @see {@link IWavedCircleEvents} for a list of available events\r\n * @see {@link IWavedCircleAdapters} for a list of available Adapters\r\n */\nvar WavedCircle = /** @class */function (_super) {\n  __extends(WavedCircle, _super);\n  /**\r\n   * Constructor\r\n   */\n  function WavedCircle() {\n    var _this = _super.call(this) || this;\n    _this.className = \"WavedCircle\";\n    _this.element = _this.paper.add(\"path\");\n    _this.waveLength = 16;\n    _this.waveHeight = 4;\n    _this.fill = undefined;\n    _this.fillOpacity = 0;\n    _this.tension = 0.8;\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Draws the waved line.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  WavedCircle.prototype.draw = function () {\n    var path = \"\";\n    var radius = this.pixelRadius;\n    if (radius > 0) {\n      var points = this.getPoints(radius);\n      path = $path.moveTo(points[0]) + new $smoothing.Tension(this.tension, this.tension).smooth(points);\n    }\n    var innerRadius = this.pixelInnerRadius;\n    if (innerRadius > 0) {\n      var points = this.getPoints(innerRadius);\n      points.reverse();\n      path += $path.moveTo(points[0]) + new $smoothing.Tension(this.tension, this.tension).smooth(points);\n    }\n    this.path = path;\n  };\n  /**\r\n   * Returns points that circle consists of.\r\n   *\r\n   * @param radius  Radius (px)\r\n   * @return Points\r\n   */\n  WavedCircle.prototype.getPoints = function (radius) {\n    var circleLength = radius * Math.PI * 2;\n    var halfWaveHeight = this.waveHeight / 2;\n    var waveLength = circleLength / Math.round(circleLength / this.waveLength);\n    var halfWaveLength = waveLength / 2;\n    var points = [];\n    var count = circleLength / waveLength;\n    for (var i = 0; i <= count; i++) {\n      var angle1 = i * waveLength / circleLength * 360;\n      var angle2 = (i * waveLength + halfWaveLength) / circleLength * 360;\n      points.push({\n        x: (radius - halfWaveHeight) * $math.cos(angle1),\n        y: (radius - halfWaveHeight) * $math.sin(angle1)\n      });\n      points.push({\n        x: (radius + halfWaveHeight) * $math.cos(angle2),\n        y: (radius + halfWaveHeight) * $math.sin(angle2)\n      });\n    }\n    points.pop();\n    return points;\n  };\n  Object.defineProperty(WavedCircle.prototype, \"innerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n    /**\r\n     * Inner radius of the circle in pixels (absolute) or [[Percent]] (relative).\r\n     *\r\n     * @param value  Inner radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedCircle.prototype, \"pixelInnerRadius\", {\n    /**\r\n     * Calculated inner radius of the circle in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Inner radius (px)\r\n     */\n    get: function () {\n      return $utils.relativeToValue(this.innerRadius, $math.min(this.innerWidth / 2, this.innerHeight / 2));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedCircle.prototype, \"waveLength\", {\n    /**\r\n     * @return Wave length (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"waveLength\");\n    },\n    /**\r\n     * Wave length in pixels.\r\n     *\r\n     * @default 16\r\n     * @param value  Wave length (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"waveLength\", value);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedCircle.prototype, \"waveHeight\", {\n    /**\r\n     * @return Wave height (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"waveHeight\");\n    },\n    /**\r\n     * Wave height in pixels.\r\n     *\r\n     * @default 4\r\n     * @param value  Wave height (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"waveHeight\", value);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedCircle.prototype, \"tension\", {\n    /**\r\n     * @return Tension\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tension\");\n    },\n    /**\r\n     * Tension of the wave.\r\n     *\r\n     * @default 0.8\r\n     * @param value  Tension\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tension\", value);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return WavedCircle;\n}(Circle);\nexport { WavedCircle };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"WavedCircle\"] = WavedCircle;","map":{"version":3,"mappings":"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","names":["Circle","registry","$path","$math","$utils","$smoothing","__extends","_super","_this","className","element","paper","add","waveLength","waveHeight","fill","undefined","fillOpacity","tension","applyTheme","WavedCircle","path","radius","pixelRadius","points","getPoints","moveTo","Tension","smooth","innerRadius","pixelInnerRadius","reverse","circleLength","Math","PI","halfWaveHeight","round","halfWaveLength","count","i","angle1","angle2","push","x","cos","y","sin","pop","Object","getPropertyValue","value","setPercentProperty","invalidate","relativeToValue","min","innerWidth","innerHeight","setPropertyValue","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\core\\elements\\WavedCircle.ts"],"sourcesContent":["/**\r\n * Functionality for drawing waved circles.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Circle, ICircleProperties, ICircleAdapters, ICircleEvents } from \"./Circle\";\r\nimport { IWavedShape } from \"../defs/IWavedShape\";\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { Percent } from \"../utils/Percent\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[WavedCircle]].\r\n */\r\nexport interface IWavedCircleProperties extends ICircleProperties {\r\n\r\n\t/**\r\n\t * Wave length in pixels.\r\n\t *\r\n\t * @default 16\r\n\t */\r\n\twaveLength?: number;\r\n\r\n\t/**\r\n\t * Wave height in pixels.\r\n\t *\r\n\t * @default 4\r\n\t */\r\n\twaveHeight?: number;\r\n\r\n\t/**\r\n\t * Wave tension.\r\n\t *\r\n\t * @default 0.8\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * Inner radius of the circle in pixels.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[WavedCircle]].\r\n */\r\nexport interface IWavedCircleEvents extends ICircleEvents { }\r\n\r\n/**\r\n * Defines adapters for [[WavedCircle]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IWavedCircleAdapters extends ICircleAdapters, IWavedCircleProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a waved circle.\r\n *\r\n * @see {@link IWavedCircleEvents} for a list of available events\r\n * @see {@link IWavedCircleAdapters} for a list of available Adapters\r\n */\r\nexport class WavedCircle extends Circle implements IWavedShape {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IWavedCircleProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IWavedCircleAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IWavedCircleEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"WavedCircle\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.waveLength = 16;\r\n\t\tthis.waveHeight = 4;\r\n\r\n\t\tthis.fill = undefined;\r\n\t\tthis.fillOpacity = 0;\r\n\t\tthis.tension = 0.8;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tlet path: string = \"\";\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\r\n\t\tif (radius > 0) {\r\n\t\t\tlet points: IPoint[] = this.getPoints(radius);\r\n\t\t\tpath = $path.moveTo(points[0]) + new $smoothing.Tension(this.tension, this.tension).smooth(points);\r\n\t\t}\r\n\r\n\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\t\tif (innerRadius > 0) {\r\n\t\t\tlet points: IPoint[] = this.getPoints(innerRadius);\r\n\t\t\tpoints.reverse();\r\n\t\t\tpath += $path.moveTo(points[0]) + new $smoothing.Tension(this.tension, this.tension).smooth(points);\r\n\t\t}\r\n\r\n\t\tthis.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns points that circle consists of.\r\n\t *\r\n\t * @param radius  Radius (px)\r\n\t * @return Points\r\n\t */\r\n\tprotected getPoints(radius: number): IPoint[] {\r\n\t\tlet circleLength: number = radius * Math.PI * 2;\r\n\t\tlet halfWaveHeight: number = this.waveHeight / 2;\r\n\r\n\t\tlet waveLength = circleLength / Math.round(circleLength / this.waveLength);\r\n\t\tlet halfWaveLength: number = waveLength / 2;\r\n\t\tlet points: IPoint[] = [];\r\n\r\n\t\tlet count = circleLength / waveLength;\r\n\t\tfor (let i = 0; i <= count; i++) {\r\n\t\t\tlet angle1: number = (i * waveLength) / circleLength * 360;\r\n\t\t\tlet angle2: number = (i * waveLength + halfWaveLength) / circleLength * 360;\r\n\r\n\t\t\tpoints.push({ x: (radius - halfWaveHeight) * $math.cos(angle1), y: (radius - halfWaveHeight) * $math.sin(angle1) });\r\n\t\t\tpoints.push({ x: (radius + halfWaveHeight) * $math.cos(angle2), y: (radius + halfWaveHeight) * $math.sin(angle2) });\r\n\t\t}\r\n\t\tpoints.pop();\r\n\t\treturn points;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circle in pixels (absolute) or [[Percent]] (relative).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Calculated inner radius of the circle in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeToValue(this.innerRadius, $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Wave length in pixels.\r\n\t *\r\n\t * @default 16\r\n\t * @param value  Wave length (px)\r\n\t */\r\n\tpublic set waveLength(value: number) {\r\n\t\tthis.setPropertyValue(\"waveLength\", value);\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Wave length (px)\r\n\t */\r\n\tpublic get waveLength(): number {\r\n\t\treturn this.getPropertyValue(\"waveLength\");\r\n\t}\r\n\r\n\t/**\r\n\t * Wave height in pixels.\r\n\t *\r\n\t * @default 4\r\n\t * @param value  Wave height (px)\r\n\t */\r\n\tpublic set waveHeight(value: number) {\r\n\t\tthis.setPropertyValue(\"waveHeight\", value);\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Wave height (px)\r\n\t */\r\n\tpublic get waveHeight(): number {\r\n\t\treturn this.getPropertyValue(\"waveHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Tension of the wave.\r\n\t *\r\n\t * @default 0.8\r\n\t * @param value  Tension\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value);\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tension\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"WavedCircle\"] = WavedCircle;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}