{"ast":null,"code":"/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Component } from \"../../core/Component\";\nimport { DataItem } from \"../../core/DataItem\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { TextLink } from \"../../core/elements/TextLink\";\nimport { Triangle } from \"../../core/elements/Triangle\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { percent } from \"../../core/utils/Percent\";\nimport * as $iter from \"../../core/utils/Iterator\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar NavigationBarDataItem = /** @class */function (_super) {\n  __extends(NavigationBarDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function NavigationBarDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"NavigationBarDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(NavigationBarDataItem.prototype, \"name\", {\n    /**\r\n     * @return Name\r\n     */\n    get: function () {\n      return this.properties[\"name\"];\n    },\n    /**\r\n     * Name of the navigation bar item.\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function (value) {\n      this.setProperty(\"name\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return NavigationBarDataItem;\n}(DataItem);\nexport { NavigationBarDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\nvar NavigationBar = /** @class */function (_super) {\n  __extends(NavigationBar, _super);\n  /**\r\n   * Constructor\r\n   */\n  function NavigationBar() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"NavigationBar\";\n    var interfaceColors = new InterfaceColorSet();\n    var textLink = new TextLink();\n    textLink.valign = \"middle\";\n    textLink.paddingTop = 8;\n    textLink.paddingBottom = 8;\n    _this.paddingBottom = 2;\n    _this.links = new ListTemplate(textLink);\n    _this._disposers.push(new ListDisposer(_this.links));\n    _this._disposers.push(textLink);\n    _this._linksIterator = new $iter.ListIterator(_this.links, function () {\n      return _this.links.create();\n    });\n    _this._linksIterator.createNewItems = true;\n    var triangle = new Triangle();\n    triangle.direction = \"right\";\n    triangle.width = 8;\n    triangle.height = 12;\n    triangle.fill = interfaceColors.getFor(\"alternativeBackground\");\n    triangle.fillOpacity = 0.5;\n    triangle.valign = \"middle\";\n    triangle.marginLeft = 10;\n    triangle.marginRight = 10;\n    _this.separators = new ListTemplate(triangle);\n    _this._disposers.push(new ListDisposer(_this.separators));\n    _this._disposers.push(triangle);\n    var activeLink = new TextLink();\n    _this.activeLink = activeLink;\n    activeLink.copyFrom(textLink);\n    activeLink.valign = \"middle\";\n    activeLink.fontWeight = \"bold\";\n    _this.width = percent(100);\n    _this.layout = \"grid\";\n    _this.dataFields.name = \"name\";\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Completely redraws the navigation bar.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  NavigationBar.prototype.validateDataElements = function () {\n    this.removeChildren();\n    this._linksIterator.reset();\n    _super.prototype.validateDataElements.call(this);\n    //@todo: dispose\n  };\n  /**\r\n   * Creates a visual element for a data item (nav item).\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n  NavigationBar.prototype.validateDataElement = function (dataItem) {\n    _super.prototype.validateDataElement.call(this, dataItem);\n    var textLink;\n    if (dataItem.index < this.dataItems.length - 1) {\n      textLink = this._linksIterator.getLast();\n      textLink.parent = this;\n      var separator = this.separators.create();\n      separator.parent = this;\n      separator.valign = \"middle\";\n    } else {\n      textLink = this.activeLink;\n      textLink.events.copyFrom(this.links.template.events);\n      textLink.hide(0);\n      textLink.show();\n      textLink.parent = this;\n    }\n    textLink.dataItem = dataItem;\n    textLink.text = dataItem.name;\n    textLink.validate();\n  };\n  return NavigationBar;\n}(Component);\nexport { NavigationBar };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;","map":{"version":3,"mappings":"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","names":["Component","DataItem","ListTemplate","ListDisposer","TextLink","Triangle","registry","InterfaceColorSet","percent","$iter","__extends","_super","_this","className","applyTheme","Object","NavigationBarDataItem","properties","value","setProperty","interfaceColors","textLink","valign","paddingTop","paddingBottom","links","_disposers","push","_linksIterator","ListIterator","create","createNewItems","triangle","direction","width","height","fill","getFor","fillOpacity","marginLeft","marginRight","separators","activeLink","copyFrom","fontWeight","layout","dataFields","name","NavigationBar","removeChildren","reset","validateDataElements","dataItem","validateDataElement","index","dataItems","length","getLast","parent","separator","events","template","hide","show","text","validate","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\elements\\NavigationBar.ts"],"sourcesContent":["/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentAdapters, IComponentEvents, IComponentDataFields } from \"../../core/Component\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class NavigationBarDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBarDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Name of the navigation bar item.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setProperty(\"name\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties[\"name\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * Name of nav var item.\r\n\t */\r\n\tname?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarProperties extends IComponentProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[NavigationBar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface INavigationBarAdapters extends IComponentAdapters, INavigationBarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nexport class NavigationBar extends Component {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: INavigationBarDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: INavigationBarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: INavigationBarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: INavigationBarEvents;\r\n\r\n\t/**\r\n\t * A list of breadcrumbs (links) in the nav bar.\r\n\t */\r\n\tpublic links: ListTemplate<TextLink>;\r\n\r\n\t/**\r\n\t * [_linksIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _linksIterator: $iter.ListIterator<TextLink>;\r\n\r\n\t/**\r\n\t * [_separatorsIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _separatorsIterator: $iter.ListIterator<Sprite>;\r\n\r\n\t/**\r\n\t * A reference to the link which is currently active.\r\n\t */\r\n\tpublic activeLink: TextLink;\r\n\r\n\t/**\r\n\t * A list of elements used as nav bar item separators.\r\n\t */\r\n\tpublic separators: ListTemplate<Triangle>;\r\n\r\n\t/**\r\n\t * Identifies the type of the [[DataItem]] used in this element.\r\n\t */\r\n\tpublic _dataItem!: NavigationBarDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet textLink = new TextLink();\r\n\t\ttextLink.valign = \"middle\";\r\n\t\ttextLink.paddingTop = 8;\r\n\t\ttextLink.paddingBottom = 8;\r\n\r\n\t\tthis.paddingBottom = 2;\r\n\r\n\t\tthis.links = new ListTemplate<TextLink>(textLink);\r\n\t\tthis._disposers.push(new ListDisposer(this.links));\r\n\t\tthis._disposers.push(textLink);\r\n\r\n\t\tthis._linksIterator = new $iter.ListIterator<TextLink>(this.links, () => this.links.create());\r\n\t\tthis._linksIterator.createNewItems = true;\r\n\r\n\t\tlet triangle = new Triangle();\r\n\t\ttriangle.direction = \"right\";\r\n\t\ttriangle.width = 8;\r\n\t\ttriangle.height = 12;\r\n\t\ttriangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\ttriangle.fillOpacity = 0.5;\r\n\t\ttriangle.valign = \"middle\";\r\n\t\ttriangle.marginLeft = 10;\r\n\t\ttriangle.marginRight = 10;\r\n\r\n\t\tthis.separators = new ListTemplate<Triangle>(triangle);\r\n\t\tthis._disposers.push(new ListDisposer(this.separators));\r\n\t\tthis._disposers.push(triangle);\r\n\r\n\t\tlet activeLink = new TextLink();\r\n\t\tthis.activeLink = activeLink;\r\n\t\tactiveLink.copyFrom(textLink);\r\n\t\tactiveLink.valign = \"middle\";\r\n\t\tactiveLink.fontWeight = \"bold\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.dataFields.name = \"name\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Completely redraws the navigation bar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tthis.removeChildren();\r\n\t\tthis._linksIterator.reset();\r\n\t\tsuper.validateDataElements();\r\n\t\t//@todo: dispose\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a visual element for a data item (nav item).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tlet textLink: TextLink;\r\n\t\tif (dataItem.index < this.dataItems.length - 1) {\r\n\t\t\ttextLink = this._linksIterator.getLast();\r\n\t\t\ttextLink.parent = this;\r\n\t\t\tlet separator = this.separators.create();\r\n\t\t\tseparator.parent = this;\r\n\t\t\tseparator.valign = \"middle\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttextLink = this.activeLink;\r\n\t\t\ttextLink.events.copyFrom(this.links.template.events);\r\n\t\t\ttextLink.hide(0);\r\n\t\t\ttextLink.show();\r\n\t\t\ttextLink.parent = this;\r\n\t\t}\r\n\t\ttextLink.dataItem = dataItem;\r\n\t\ttextLink.text = dataItem.name;\r\n\t\ttextLink.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}