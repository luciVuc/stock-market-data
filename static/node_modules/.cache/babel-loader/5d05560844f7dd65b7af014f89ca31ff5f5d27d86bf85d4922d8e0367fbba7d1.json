{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { Percent } from \"./Percent\";\nimport { Color } from \"./Color\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport * as $object from \"./Object\";\n/**\r\n * @ignore\r\n */\nexport function waitForAnimations(animations) {\n  return __awaiter(this, void 0, void 0, function () {\n    var promises_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!(animations !== undefined)) return [3 /*break*/, 2];\n          promises_1 = [];\n          $object.each(animations, function (_, animation) {\n            promises_1.push(animation.waitForStop());\n          });\n          return [4 /*yield*/, Promise.all(promises_1)];\n        case 1:\n          _a.sent();\n          _a.label = 2;\n        case 2:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * @ignore\r\n */\nexport function normalize(value, min, max) {\n  if (min === max) {\n    return 0;\n  } else {\n    return Math.min(Math.max((value - min) * (1 / (max - min)), 0), 1);\n  }\n}\n/**\r\n * @ignore\r\n */\nexport function range(diff, from, to) {\n  return from + diff * (to - from);\n}\n/**\r\n * @ignore\r\n */\nexport function defaultInterpolate(diff, from, to) {\n  if (diff >= 1) {\n    return to;\n  } else {\n    return from;\n  }\n}\n/**\r\n * @ignore\r\n */\nexport function percentInterpolate(diff, from, to) {\n  return new Percent(range(diff, from.percent, to.percent));\n}\n/**\r\n * @ignore\r\n */\nexport function colorInterpolate(diff, from, to) {\n  return Color.interpolate(diff, from, to);\n}\n/**\r\n * @ignore\r\n */\nexport function getInterpolate(from, to) {\n  if (typeof from === \"number\" && typeof to === \"number\") {\n    return range;\n  }\n  if (from instanceof Percent && to instanceof Percent) {\n    return percentInterpolate;\n  }\n  if (from instanceof Color && to instanceof Color) {\n    return colorInterpolate;\n  }\n  return defaultInterpolate;\n}\n/**\r\n * @ignore\r\n */\nvar AnimationTime = /** @class */function () {\n  function AnimationTime(entity, duration) {\n    Object.defineProperty(this, \"_entity\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_duration\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_playingDuration\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, \"_startingTime\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, \"_current\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_from\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_to\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"events\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new EventDispatcher()\n    });\n    Object.defineProperty(this, \"easing\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._entity = entity;\n    this._duration = duration;\n  }\n  Object.defineProperty(AnimationTime.prototype, \"_stopEvent\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var type = \"stopped\";\n      if (this.events.isEnabled(type)) {\n        this.events.dispatch(type, {\n          type: type,\n          target: this\n        });\n      }\n    }\n  });\n  Object.defineProperty(AnimationTime.prototype, \"_runAnimation\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (currentTime) {\n      if (this._playingDuration !== null) {\n        if (this._startingTime === null) {\n          this._startingTime = currentTime;\n          return true;\n        } else {\n          var diff = (currentTime - this._startingTime) / this._playingDuration;\n          if (diff >= 1) {\n            this._playingDuration = null;\n            this._startingTime = null;\n            this._from = this._to;\n            this._current = this._to;\n            this._entity.markDirty();\n            this._stopEvent();\n            var type = \"ended\";\n            if (this.events.isEnabled(type)) {\n              this.events.dispatch(type, {\n                type: type,\n                target: this\n              });\n            }\n            return false;\n          } else {\n            this._current = range(diff, this._from, this._to);\n            this._entity.markDirty();\n            var type = \"progress\";\n            if (this.events.isEnabled(type)) {\n              this.events.dispatch(type, {\n                type: type,\n                target: this,\n                progress: diff\n              });\n            }\n            return true;\n          }\n        }\n      } else {\n        return false;\n      }\n    }\n  });\n  Object.defineProperty(AnimationTime.prototype, \"_play\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._from = this._current;\n      if (this._playingDuration === null) {\n        this._entity._root._addAnimation(this);\n        var type = \"started\";\n        if (this.events.isEnabled(type)) {\n          this.events.dispatch(type, {\n            type: type,\n            target: this\n          });\n        }\n      } else {\n        this._startingTime = null;\n      }\n      this._playingDuration = Math.abs(this._to - this._from) * this._duration;\n    }\n  });\n  Object.defineProperty(AnimationTime.prototype, \"duration\", {\n    get: function () {\n      return this._duration;\n    },\n    set: function (value) {\n      if (this._duration !== value) {\n        this._duration = value;\n        if (value === 0) {\n          this.jumpTo(this._to);\n        } else if (this._current !== this._to) {\n          this._play();\n        }\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AnimationTime.prototype, \"current\", {\n    get: function () {\n      if (this.easing) {\n        return this.easing(this._current);\n      } else {\n        return this._current;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AnimationTime.prototype, \"stop\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this.jumpTo(this._current);\n    }\n  });\n  Object.defineProperty(AnimationTime.prototype, \"jumpTo\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      if (this._current !== value) {\n        this._entity.markDirty();\n      }\n      if (this._playingDuration !== null) {\n        this._stopEvent();\n      }\n      this._playingDuration = null;\n      this._startingTime = null;\n      this._current = value;\n      this._from = value;\n      this._to = value;\n    }\n  });\n  Object.defineProperty(AnimationTime.prototype, \"tweenTo\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      if (this._current === value || this._duration === 0) {\n        this.jumpTo(value);\n      } else {\n        if (this._to !== value) {\n          this._to = value;\n          this._play();\n        }\n      }\n    }\n  });\n  return AnimationTime;\n}();\nexport { AnimationTime };\n/*export class AnimationValue extends AnimationTime {\r\n    public _min: number;\r\n    public _max: number;\r\n\r\n    constructor(entity: Entity, duration: number, min: number, max: number) {\r\n        super(entity, duration);\r\n        this._min = min;\r\n        this._max = max;\r\n    }\r\n\r\n    public get min(): number {\r\n        return this._min;\r\n    }\r\n\r\n    public set min(value: number) {\r\n        if (this._min !== value) {\r\n            this._min = value;\r\n            this._entity.markDirty();\r\n        }\r\n    }\r\n\r\n    public get max(): number {\r\n        return this._max;\r\n    }\r\n\r\n    public set max(value: number) {\r\n        if (this._max !== value) {\r\n            this._max = value;\r\n            this._entity.markDirty();\r\n        }\r\n    }\r\n\r\n    public currentValue(): number {\r\n        return range(super.currentTime(), this._min, this._max);\r\n    }\r\n\r\n    public jumpToValue(value: number) {\r\n        super.jumpToTime(normalize(value, this._min, this._max));\r\n    }\r\n\r\n    public tweenToValue(value: number) {\r\n        super.tweenToTime(normalize(value, this._min, this._max));\r\n    }\r\n}\r\n*/","map":{"version":3,"mappings":"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","names":["Percent","Color","EventDispatcher","$object","waitForAnimations","animations","undefined","promises_1","each","_","animation","push","waitForStop","Promise","all","_a","normalize","value","min","max","Math","range","diff","from","to","defaultInterpolate","percentInterpolate","percent","colorInterpolate","interpolate","getInterpolate","entity","duration","Object","_entity","_duration","type","events","isEnabled","dispatch","target","currentTime","_playingDuration","_startingTime","_from","_to","_current","markDirty","_stopEvent","progress","_root","_addAnimation","abs","AnimationTime","jumpTo","_play","easing"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\core\\util\\Animation.ts"],"sourcesContent":["import type { Entity, Animation } from \"./Entity\";\nimport { Percent } from \"./Percent\";\nimport { Color } from \"./Color\";\nimport type { Easing } from \"./Ease\";\nimport { EventDispatcher, Events } from \"./EventDispatcher\";\nimport * as $object from \"./Object\";\n\nexport type Animations<T> = { [K in keyof T]?: Animation<T[K]> };\n\n/**\n * @ignore\n */\nexport async function waitForAnimations<T>(animations: Animations<T> | undefined): Promise<void> {\n\tif (animations !== undefined) {\n\t\tconst promises: Array<Promise<void>> = [];\n\n\t\t$object.each(animations, (_, animation) => {\n\t\t\tpromises.push(animation.waitForStop());\n\t\t});\n\n\t\tawait Promise.all(promises);\n\t}\n}\n\n\ninterface ITime {\n\treadonly tag: unique symbol;\n}\n\n/**\n * New type which allows for conversion from a number into a Time, but not from a Time to a number\n */\nexport type Time = number | ITime;\n\n\n/**\n * @ignore\n */\nexport function normalize(value: number, min: number, max: number): Time {\n\tif (min === max) {\n\t\treturn 0;\n\n\t} else {\n\t\treturn Math.min(Math.max((value - min) * (1 / (max - min)), 0), 1);\n\t}\n}\n\n/**\n * @ignore\n */\nexport function range(diff: Time, from: number, to: number): number {\n\treturn from + (diff as number * (to - from));\n}\n\n/**\n * @ignore\n */\nexport function defaultInterpolate<A, B>(diff: Time, from: A, to: B): A | B {\n\tif (diff >= 1) {\n\t\treturn to;\n\n\t} else {\n\t\treturn from;\n\t}\n}\n\n/**\n * @ignore\n */\nexport function percentInterpolate(diff: Time, from: Percent, to: Percent): Percent {\n\treturn new Percent(range(diff, from.percent, to.percent));\n}\n\n/**\n * @ignore\n */\nexport function colorInterpolate(diff: Time, from: Color, to: Color): Color {\n\treturn Color.interpolate(diff, from, to);\n}\n\n/**\n * @ignore\n */\nexport function getInterpolate(from: number, to: number): typeof range;\n\n/**\n * @ignore\n */\nexport function getInterpolate(from: Percent, to: Percent): typeof percentInterpolate;\n\n/**\n * @ignore\n */\nexport function getInterpolate(from: any, to: any): typeof defaultInterpolate;\n\n/**\n * @ignore\n */\nexport function getInterpolate(from: any, to: any): (diff: Time, from: any, to: any) => any {\n\tif (typeof from === \"number\" && typeof to === \"number\") {\n\t\treturn range;\n\t}\n\n\tif (from instanceof Percent && to instanceof Percent) {\n\t\treturn percentInterpolate;\n\t}\n\n\tif (from instanceof Color && to instanceof Color) {\n\t\treturn colorInterpolate;\n\t}\n\n\treturn defaultInterpolate;\n}\n\n\nexport interface IAnimation {\n\t// Returns true if the animation is still playing, or false if the animation isn't playing\n\t_runAnimation(_currentTime: number): boolean;\n}\n\n\n/**\n * @ignore\n */\nexport interface IEntityEvents {\n\tstarted: {};\n\tstopped: {};\n\t// TODO replace this with stopped\n\tended: {};\n\tprogress: { progress: number };\n}\n\n/**\n * @ignore\n */\nexport class AnimationTime implements IAnimation {\n\tprotected _entity: Entity;\n\tprotected _duration: number;\n\n\tprotected _playingDuration: number | null = null;\n\tprotected _startingTime: number | null = null;\n\tprotected _current: Time = 0;\n\tprotected _from: Time = 0;\n\tprotected _to: Time = 0;\n\n\tdeclare public _events: IEntityEvents;\n\tpublic events: EventDispatcher<Events<this, this[\"_events\"]>> = new EventDispatcher();\n\n\tpublic easing: Easing | undefined;\n\n\tconstructor(entity: Entity, duration: number) {\n\t\tthis._entity = entity;\n\t\tthis._duration = duration;\n\t}\n\n\tprivate _stopEvent() {\n\t\tconst type = \"stopped\";\n\t\tif (this.events.isEnabled(type)) {\n\t\t\tthis.events.dispatch(type, { type: type, target: this });\n\t\t}\n\t}\n\n\tpublic _runAnimation(currentTime: number): boolean {\n\t\tif (this._playingDuration !== null) {\n\t\t\tif (this._startingTime === null) {\n\t\t\t\tthis._startingTime = currentTime;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst diff = (currentTime - this._startingTime) / this._playingDuration;\n\n\t\t\t\tif (diff >= 1) {\n\t\t\t\t\tthis._playingDuration = null;\n\t\t\t\t\tthis._startingTime = null;\n\t\t\t\t\tthis._from = this._to;\n\t\t\t\t\tthis._current = this._to;\n\t\t\t\t\tthis._entity.markDirty();\n\t\t\t\t\tthis._stopEvent();\n\t\t\t\t\tconst type = \"ended\";\n\t\t\t\t\tif (this.events.isEnabled(type)) {\n\t\t\t\t\t\tthis.events.dispatch(type, { type: type, target: this });\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\n\t\t\t\t} else {\n\t\t\t\t\tthis._current = range(diff, this._from as number, this._to as number);\n\t\t\t\t\tthis._entity.markDirty();\n\n\t\t\t\t\tconst type = \"progress\";\n\t\t\t\t\tif (this.events.isEnabled(type)) {\n\t\t\t\t\t\tthis.events.dispatch(type, { type: type, target: this, progress: diff });\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate _play() {\n\t\tthis._from = this._current;\n\n\t\tif (this._playingDuration === null) {\n\t\t\tthis._entity._root._addAnimation(this);\n\n\t\t\tconst type = \"started\";\n\t\t\tif (this.events.isEnabled(type)) {\n\t\t\t\tthis.events.dispatch(type, { type: type, target: this });\n\t\t\t}\n\n\t\t} else {\n\t\t\tthis._startingTime = null;\n\t\t}\n\n\t\tthis._playingDuration = Math.abs((this._to as number) - (this._from as number)) * this._duration;\n\t}\n\n\tpublic get duration(): number {\n\t\treturn this._duration;\n\t}\n\n\tpublic set duration(value: number) {\n\t\tif (this._duration !== value) {\n\t\t\tthis._duration = value;\n\n\t\t\tif (value === 0) {\n\t\t\t\tthis.jumpTo(this._to);\n\n\t\t\t} else if (this._current !== this._to) {\n\t\t\t\tthis._play();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic get current(): Time {\n\t\tif (this.easing) {\n\t\t\treturn this.easing(this._current);\n\n\t\t} else {\n\t\t\treturn this._current;\n\t\t}\n\t}\n\n\tpublic stop() {\n\t\tthis.jumpTo(this._current);\n\t}\n\n\tpublic jumpTo(value: Time) {\n\t\tif (this._current !== value) {\n\t\t\tthis._entity.markDirty();\n\t\t}\n\n\t\tif (this._playingDuration !== null) {\n\t\t\tthis._stopEvent();\n\t\t}\n\n\t\tthis._playingDuration = null;\n\t\tthis._startingTime = null;\n\t\tthis._current = value;\n\t\tthis._from = value;\n\t\tthis._to = value;\n\t}\n\n\tpublic tweenTo(value: Time) {\n\t\tif (this._current === value || this._duration === 0) {\n\t\t\tthis.jumpTo(value);\n\n\t\t} else {\n\t\t\tif (this._to !== value) {\n\t\t\t\tthis._to = value;\n\t\t\t\tthis._play();\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/*export class AnimationValue extends AnimationTime {\n\tpublic _min: number;\n\tpublic _max: number;\n\n\tconstructor(entity: Entity, duration: number, min: number, max: number) {\n\t\tsuper(entity, duration);\n\t\tthis._min = min;\n\t\tthis._max = max;\n\t}\n\n\tpublic get min(): number {\n\t\treturn this._min;\n\t}\n\n\tpublic set min(value: number) {\n\t\tif (this._min !== value) {\n\t\t\tthis._min = value;\n\t\t\tthis._entity.markDirty();\n\t\t}\n\t}\n\n\tpublic get max(): number {\n\t\treturn this._max;\n\t}\n\n\tpublic set max(value: number) {\n\t\tif (this._max !== value) {\n\t\t\tthis._max = value;\n\t\t\tthis._entity.markDirty();\n\t\t}\n\t}\n\n\tpublic currentValue(): number {\n\t\treturn range(super.currentTime(), this._min, this._max);\n\t}\n\n\tpublic jumpToValue(value: number) {\n\t\tsuper.jumpToTime(normalize(value, this._min, this._max));\n\t}\n\n\tpublic tweenToValue(value: number) {\n\t\tsuper.tweenToTime(normalize(value, this._min, this._max));\n\t}\n}\n*/\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}