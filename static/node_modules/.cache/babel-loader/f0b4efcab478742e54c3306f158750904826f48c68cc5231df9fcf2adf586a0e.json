{"ast":null,"code":"/**\r\n * FlowDiagramLink module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Sprite } from \"../../core/Sprite\";\nimport { Container } from \"../../core/Container\";\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\nimport { registry } from \"../../core/Registry\";\nimport { Bullet } from \"../elements/Bullet\";\nimport { Color } from \"../../core/utils/Color\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { Polyline } from \"../../core/elements/Polyline\";\nimport { Line } from \"../../core/elements/Line\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Flow Diagram.\r\n *\r\n * @see {@link IFlowDiagramLinkEvents} for a list of available events\r\n * @see {@link IFlowDiagramLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar FlowDiagramLink = /** @class */function (_super) {\n  __extends(FlowDiagramLink, _super);\n  /**\r\n   * Constructor\r\n   */\n  function FlowDiagramLink() {\n    var _this = _super.call(this) || this;\n    _this.className = \"FlowDiagramLink\";\n    var interfaceColors = new InterfaceColorSet();\n    _this.maskBullets = false;\n    _this.colorMode = \"fromNode\";\n    _this.layout = \"none\";\n    _this.isMeasured = false;\n    _this.startAngle = 0;\n    _this.endAngle = 0;\n    _this.strokeOpacity = 0;\n    // this is very important, otherwise the container will be shifted\n    _this.verticalCenter = \"none\";\n    _this.horizontalCenter = \"none\";\n    _this.tooltipText = \"{fromName}â†’{toName}:{value.value}\";\n    _this.tooltipLocation = 0.5;\n    _this.link = _this.createChild(Sprite);\n    _this.link.shouldClone = false;\n    _this.link.setElement(_this.paper.add(\"path\"));\n    _this.link.isMeasured = false;\n    _this.fillOpacity = 0.2;\n    _this.fill = interfaceColors.getFor(\"alternativeBackground\");\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Positions bullets\r\n   * @ignore\r\n   */\n  FlowDiagramLink.prototype.positionBullets = function () {\n    var _this = this;\n    $iter.each(this.bullets.iterator(), function (bullet) {\n      bullet.parent = _this.bulletsContainer;\n      bullet.maxWidth = _this.maxWidth;\n      bullet.maxHeight = _this.maxHeight;\n      _this.positionBullet(bullet);\n    });\n  };\n  Object.defineProperty(FlowDiagramLink.prototype, \"bulletsContainer\", {\n    /**\r\n     * Bullets container\r\n     */\n    get: function () {\n      if (!this._bulletsContainer) {\n        var bulletsContainer = this.createChild(Container);\n        bulletsContainer.shouldClone = false;\n        bulletsContainer.layout = \"none\";\n        this._bulletsContainer = bulletsContainer;\n      }\n      return this._bulletsContainer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramLink.prototype, \"bulletsMask\", {\n    /**\r\n     * Bullets mask sprite\r\n     */\n    get: function () {\n      if (!this._bulletsMask) {\n        var bulletsMask = this.createChild(Sprite);\n        bulletsMask.shouldClone = false;\n        bulletsMask.setElement(this.paper.add(\"path\"));\n        bulletsMask.isMeasured = false;\n        this._bulletsMask = bulletsMask;\n      }\n      return this._bulletsMask;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Positions bullets at relative bullet.locationX position on the link.\r\n   * @ignore\r\n   */\n  FlowDiagramLink.prototype.positionBullet = function (bullet) {\n    var location = bullet.locationX;\n    if (!$type.isNumber(location)) {\n      location = bullet.locationY;\n    }\n    if (!$type.isNumber(location)) {\n      location = 0.5;\n    }\n    var point = this.middleLine.positionToPoint(location);\n    bullet.moveTo(point);\n    var rotationField = bullet.propertyFields.rotation;\n    var angle;\n    if (bullet.dataItem) {\n      var dataContext = bullet.dataItem.dataContext;\n      angle = dataContext[rotationField];\n    }\n    if (!$type.isNumber(angle)) {\n      angle = point.angle;\n    }\n    bullet.rotation = angle;\n  };\n  Object.defineProperty(FlowDiagramLink.prototype, \"startAngle\", {\n    /**\r\n     * @return Start angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startAngle\");\n    },\n    /**\r\n     * [startAngle description]\r\n     *\r\n     * @todo Description\r\n     * @param value  Start angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramLink.prototype, \"endAngle\", {\n    /**\r\n     * @return End angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endAngle\");\n    },\n    /**\r\n     * [endAngle description]\r\n     *\r\n     * @todo Description\r\n     * @param value  End angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramLink.prototype, \"colorMode\", {\n    /**\r\n     * Fill mode\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"colorMode\");\n    },\n    /**\r\n     * Should link be filled with a solid color, color of from node, color of toNode or gradient between node colors.\r\n     * Some of the links, like ChordLink does not support gradiens well.\r\n     *\r\n     * @param value  Fill mode\r\n     */\n    set: function (value) {\n      if (value == \"gradient\") {\n        var color = this.fill;\n        this.gradient.stops.clear();\n        if (color instanceof Color) {\n          this.gradient.addColor(color);\n          this.gradient.addColor(color);\n        }\n        this.fill = this.gradient;\n        this.stroke = this.gradient;\n      }\n      this.setPropertyValue(\"colorMode\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramLink.prototype, \"maskBullets\", {\n    /**\r\n     * @return mask bullets value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maskBullets\");\n    },\n    /**\r\n     * Should link bullets be masked or not\r\n     *\r\n     * @param value\r\n     * @default false\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"maskBullets\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramLink.prototype, \"tooltipLocation\", {\n    /**\r\n     * Tooltip location value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tooltipLocation\");\n    },\n    /**\r\n     * Relative location of a tooltip.\r\n     * @default 0.5\r\n     *\r\n     * @param value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tooltipLocation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Adds color steps in the link gradient.\r\n   *\r\n   * @param value  Fill option\r\n   */\n  FlowDiagramLink.prototype.setFill = function (value) {\n    _super.prototype.setFill.call(this, value);\n    var gradient = this._gradient;\n    if (gradient && value instanceof Color) {\n      gradient.stops.clear();\n      gradient.addColor(value);\n      gradient.addColor(value);\n    }\n  };\n  /**\r\n   * Updates bounding box based on element dimension settings.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  FlowDiagramLink.prototype.measureElement = function () {};\n  Object.defineProperty(FlowDiagramLink.prototype, \"bullets\", {\n    /**\r\n     * List of bullets\r\n     *\r\n     * @return [description]\r\n     */\n    get: function () {\n      var _this = this;\n      if (!this._bullets) {\n        this._bullets = new ListTemplate(new Bullet());\n        this._disposers.push(new ListDisposer(this._bullets));\n        this._disposers.push(this._bullets.template);\n        this._bullets.events.on(\"inserted\", function (event) {\n          event.newValue.events.on(\"propertychanged\", function (event) {\n            if (event.property == \"locationX\" || event.property == \"locationY\") {\n              _this.positionBullet(event.target);\n            }\n          }, undefined, false);\n        }, undefined, false);\n      }\n      return this._bullets;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies properties from another [[FlowDiagramLink]].\r\n   *\r\n   * @param source  Source link\r\n   */\n  FlowDiagramLink.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    this.bullets.copyFrom(source.bullets);\n    var middleLine = this.middleLine;\n    if (middleLine) {\n      if (middleLine instanceof Line && source.middleLine instanceof Line) {\n        middleLine.copyFrom(source.middleLine);\n      }\n      if (middleLine instanceof Polyline && source.middleLine instanceof Polyline) {\n        middleLine.copyFrom(source.middleLine);\n      }\n    }\n    this.link.copyFrom(source.link);\n  };\n  /**\r\n   * @ignore Exclude from docs\r\n   * @return Tooltip X (px)\r\n   */\n  FlowDiagramLink.prototype.getTooltipX = function () {\n    if (this.middleLine) {\n      return this.middleLine.positionToPoint(this.tooltipLocation).x;\n    }\n  };\n  /**\r\n   * @ignore Exclude from docs\r\n   * @return Tooltip Y (px)\r\n   */\n  FlowDiagramLink.prototype.getTooltipY = function () {\n    if (this.middleLine) {\n      return this.middleLine.positionToPoint(this.tooltipLocation).y;\n    }\n  };\n  Object.defineProperty(FlowDiagramLink.prototype, \"gradient\", {\n    /**\r\n     * A gradiend instance that is used to provided colored gradient fills for\r\n     * the Flow link.\r\n     */\n    get: function () {\n      if (!this._gradient) {\n        this._gradient = new LinearGradient();\n      }\n      return this._gradient;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return FlowDiagramLink;\n}(Container);\nexport { FlowDiagramLink };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"FlowDiagramLink\"] = FlowDiagramLink;","map":{"version":3,"mappings":"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","names":["Sprite","Container","LinearGradient","registry","Bullet","Color","ListTemplate","ListDisposer","Polyline","Line","InterfaceColorSet","$iter","$type","__extends","_super","_this","className","interfaceColors","maskBullets","colorMode","layout","isMeasured","startAngle","endAngle","strokeOpacity","verticalCenter","horizontalCenter","tooltipText","tooltipLocation","link","createChild","shouldClone","setElement","paper","add","fillOpacity","fill","getFor","applyTheme","FlowDiagramLink","each","bullets","iterator","bullet","parent","bulletsContainer","maxWidth","maxHeight","positionBullet","Object","_bulletsContainer","_bulletsMask","bulletsMask","location","locationX","isNumber","locationY","point","middleLine","positionToPoint","moveTo","rotationField","propertyFields","rotation","angle","dataItem","dataContext","getPropertyValue","value","setPropertyValue","color","gradient","stops","clear","addColor","stroke","setFill","_gradient","_bullets","_disposers","push","template","events","on","event","newValue","property","target","undefined","source","copyFrom","x","y","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\elements\\FlowDiagramLink.ts"],"sourcesContent":["/**\r\n * FlowDiagramLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { FlowDiagramDataItem } from \"../types/FlowDiagram\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { RadialGradient } from \"../../core/rendering/fills/RadialGradient\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Polyline } from \"../../core/elements/Polyline\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FlowDiagramLink]].\r\n */\r\nexport interface IFlowDiagramLinkProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * [tension description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartX?: number;\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartY?: number;\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendX?: number;\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendY?: number;\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tlinkWidth?: number;\r\n\r\n\t/**\r\n\t * [startAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * [endAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Should link be filled with a solid color, color of from node, color of toNode or gradient between node colors.\r\n\t */\r\n\tcolorMode?: \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\";\r\n\r\n\t/**\r\n\t * [controlPointDistance description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tcontrolPointDistance?: number;\r\n\r\n\t/**\r\n\t * [maskBullets description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * [tooltipLocation description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttooltipLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagramLink]].\r\n */\r\nexport interface IFlowDiagramLinkEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagramLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramLinkAdapters extends IContainerAdapters, IFlowDiagramLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Flow Diagram.\r\n *\r\n * @see {@link IFlowDiagramLinkEvents} for a list of available events\r\n * @see {@link IFlowDiagramLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagramLink extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * A gradiend instance that is used to provided colored gradient fills for\r\n\t * the Flow link.\r\n\t */\r\n\tprotected _gradient: LinearGradient;\r\n\r\n\r\n\t/**\r\n\t * List of bullets\r\n\t * @ignore\r\n\t */\r\n\tprotected _bullets: ListTemplate<Bullet>;\r\n\r\n\t/**\r\n\t * Link sprite\r\n\t */\r\n\tpublic link: Sprite;\r\n\r\n\t/**\r\n\t * Bullets mask spite\r\n     */\r\n\tprotected _bulletsMask: Sprite;\r\n\r\n\t/**\r\n\t * Bullets container\r\n     */\r\n\tprotected _bulletsContainer: Container;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n     */\r\n\tpublic middleLine: Line | Polyline;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramLink\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.maskBullets = false;\r\n\r\n\t\tthis.colorMode = \"fromNode\";\r\n\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startAngle = 0;\r\n\t\tthis.endAngle = 0;\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\r\n\t\t// this is very important, otherwise the container will be shifted\r\n\t\tthis.verticalCenter = \"none\";\r\n\t\tthis.horizontalCenter = \"none\";\r\n\r\n\t\tthis.tooltipText = \"{fromName}â†’{toName}:{value.value}\";\r\n\t\tthis.tooltipLocation = 0.5;\r\n\r\n\t\tthis.link = this.createChild(Sprite);\r\n\t\tthis.link.shouldClone = false;\r\n\t\tthis.link.setElement(this.paper.add(\"path\"));\r\n\t\tthis.link.isMeasured = false;\r\n\t\tthis.fillOpacity = 0.2;\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Positions bullets\r\n\t * @ignore\r\n\t */\r\n\tprotected positionBullets() {\r\n\t\t$iter.each(this.bullets.iterator(), (bullet) => {\r\n\t\t\tbullet.parent = this.bulletsContainer;\r\n\r\n\t\t\tbullet.maxWidth = this.maxWidth;\r\n\t\t\tbullet.maxHeight = this.maxHeight;\r\n\r\n\t\t\tthis.positionBullet(bullet);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Bullets container\r\n     */\r\n\tpublic get bulletsContainer() {\r\n\t\tif (!this._bulletsContainer) {\r\n\t\t\tlet bulletsContainer = this.createChild(Container);\r\n\t\t\tbulletsContainer.shouldClone = false;\r\n\t\t\tbulletsContainer.layout = \"none\";\r\n\t\t\tthis._bulletsContainer = bulletsContainer;\r\n\t\t}\r\n\t\treturn this._bulletsContainer;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Bullets mask sprite\r\n     */\r\n\tpublic get bulletsMask() {\r\n\t\tif (!this._bulletsMask) {\r\n\t\t\tlet bulletsMask = this.createChild(Sprite);\r\n\t\t\tbulletsMask.shouldClone = false;\r\n\t\t\tbulletsMask.setElement(this.paper.add(\"path\"));\r\n\t\t\tbulletsMask.isMeasured = false;\r\n\t\t\tthis._bulletsMask = bulletsMask;\r\n\t\t}\r\n\t\treturn this._bulletsMask;\r\n\t}\r\n\r\n\t/**\r\n\t * Positions bullets at relative bullet.locationX position on the link.\r\n\t * @ignore\r\n\t */\r\n\tprotected positionBullet(bullet: Bullet) {\r\n\r\n\t\tlet location = bullet.locationX;\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = bullet.locationY;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\t\tlet point = this.middleLine.positionToPoint(location);\r\n\r\n\t\tbullet.moveTo(point);\r\n\r\n\t\tlet rotationField = bullet.propertyFields.rotation;\r\n\t\tlet angle: number;\r\n\t\tif (bullet.dataItem) {\r\n\t\t\tlet dataContext: any = bullet.dataItem.dataContext;\r\n\t\t\tangle = dataContext[rotationField];\r\n\t\t}\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = point.angle;\r\n\t\t}\r\n\r\n\t\tbullet.rotation = angle;\r\n\t}\r\n\r\n\t/**\r\n\t * [startAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Should link be filled with a solid color, color of from node, color of toNode or gradient between node colors.\r\n\t * Some of the links, like ChordLink does not support gradiens well.\r\n\t *\r\n\t * @param value  Fill mode\r\n\t */\r\n\tpublic set colorMode(value: \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\") {\r\n\t\tif (value == \"gradient\") {\r\n\t\t\tlet color = this.fill;\r\n\r\n\t\t\tthis.gradient.stops.clear();\r\n\t\t\tif (color instanceof Color) {\r\n\t\t\t\tthis.gradient.addColor(color);\r\n\t\t\t\tthis.gradient.addColor(color);\r\n\t\t\t}\r\n\t\t\tthis.fill = this.gradient;\r\n\t\t\tthis.stroke = this.gradient;\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"colorMode\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Fill mode\r\n\t */\r\n\tpublic get colorMode(): \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\" {\r\n\t\treturn this.getPropertyValue(\"colorMode\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Should link bullets be masked or not\r\n\t *\r\n\t * @param value\r\n\t * @default false\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return mask bullets value\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location of a tooltip.\r\n\t * @default 0.5\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set tooltipLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"tooltipLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Tooltip location value\r\n\t */\r\n\tpublic get tooltipLocation(): number {\r\n\t\treturn this.getPropertyValue(\"tooltipLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Adds color steps in the link gradient.\r\n\t *\r\n\t * @param value  Fill option\r\n\t */\r\n\tprotected setFill(value: Color | Pattern | LinearGradient | RadialGradient) {\r\n\t\tsuper.setFill(value)\r\n\t\tlet gradient = this._gradient;\r\n\r\n\t\tif (gradient && value instanceof Color) {\r\n\t\t\tgradient.stops.clear();\r\n\t\t\tgradient.addColor(value);\r\n\t\t\tgradient.addColor(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates bounding box based on element dimension settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * List of bullets\r\n\t *\r\n\t * @return [description]\r\n\t */\r\n\tpublic get bullets(): ListTemplate<Bullet> {\r\n\t\tif (!this._bullets) {\r\n\t\t\tthis._bullets = new ListTemplate<Bullet>(new Bullet());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._bullets));\r\n\t\t\tthis._disposers.push(this._bullets.template);\r\n\t\t\tthis._bullets.events.on(\"inserted\", (event) => {\r\n\t\t\t\tevent.newValue.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\t\tif (event.property == \"locationX\" || event.property == \"locationY\") {\r\n\t\t\t\t\t\tthis.positionBullet(event.target);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, undefined, false)\r\n\t\t\t}, undefined, false)\r\n\t\t}\r\n\t\treturn this._bullets;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties from another [[FlowDiagramLink]].\r\n\t *\r\n\t * @param source  Source link\r\n\t */\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.bullets.copyFrom(source.bullets);\r\n\t\tlet middleLine = this.middleLine;\r\n\t\tif (middleLine) {\r\n\t\t\tif (middleLine instanceof Line && source.middleLine instanceof Line) {\r\n\t\t\t\tmiddleLine.copyFrom(source.middleLine);\r\n\t\t\t}\r\n\r\n\t\t\tif (middleLine instanceof Polyline && source.middleLine instanceof Polyline) {\r\n\t\t\t\tmiddleLine.copyFrom(source.middleLine);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.link.copyFrom(source.link);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Tooltip X (px)\r\n\t */\r\n\tpublic getTooltipX(): number {\r\n\t\tif (this.middleLine) {\r\n\t\t\treturn this.middleLine.positionToPoint(this.tooltipLocation).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Tooltip Y (px)\r\n\t */\r\n\tpublic getTooltipY(): number {\r\n\t\tif (this.middleLine) {\r\n\t\t\treturn this.middleLine.positionToPoint(this.tooltipLocation).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A gradiend instance that is used to provided colored gradient fills for\r\n\t * the Flow link.\r\n\t */\r\n\tpublic get gradient() {\r\n\t\tif (!this._gradient) {\r\n\t\t\tthis._gradient = new LinearGradient();\r\n\t\t}\r\n\t\treturn this._gradient;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagramLink\"] = FlowDiagramLink;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}