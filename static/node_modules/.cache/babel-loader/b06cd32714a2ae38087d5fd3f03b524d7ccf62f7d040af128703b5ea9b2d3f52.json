{"ast":null,"code":"/**\r\n * SankeyNode module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { FlowDiagramNode } from \"./FlowDiagramNode\";\nimport { LabelBullet } from \"./LabelBullet\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates a node in a Sankey Diagram.\r\n *\r\n * A Sankey node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[SankeyLink]] elements.\r\n *\r\n * @see {@link ISankeyNodeEvents} for a list of available events\r\n * @see {@link ISankeyNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar SankeyNode = /** @class */function (_super) {\n  __extends(SankeyNode, _super);\n  /**\r\n   * Constructor\r\n   */\n  function SankeyNode() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * [nextInCoord description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n    _this.nextInCoord = 0;\n    /**\r\n     * [nextOutCoord description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n    _this.nextOutCoord = 0;\n    _this.className = \"SankeyNode\";\n    _this.width = 10;\n    _this.height = 10;\n    var nameLabel = _this.createChild(LabelBullet);\n    nameLabel.shouldClone = false;\n    //@should we auto update these locations if position is changed?\n    nameLabel.locationX = 1;\n    nameLabel.locationY = 0.5;\n    nameLabel.label.text = \"{name}\";\n    //nameLabel.label.textElement.hideOversized = false;\n    nameLabel.width = 150;\n    nameLabel.height = 150;\n    nameLabel.label.horizontalCenter = \"left\";\n    nameLabel.label.padding(0, 5, 0, 5);\n    _this.nameLabel = nameLabel;\n    var valueLabel = _this.createChild(LabelBullet);\n    valueLabel.shouldClone = false;\n    valueLabel.label.hideOversized = false;\n    valueLabel.locationX = 0.5;\n    valueLabel.locationY = 0.5;\n    valueLabel.width = 150;\n    valueLabel.height = 150;\n    //valueLabel.label.text = \"{value}\";\n    valueLabel.label.horizontalCenter = \"middle\";\n    _this.valueLabel = valueLabel;\n    var hiddenState = _this.hiddenState;\n    hiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\n    hiddenState.properties.opacity = 0.5;\n    hiddenState.properties.visible = true;\n    _this.background.hiddenState.copyFrom(hiddenState);\n    return _this;\n  }\n  /**\r\n   * Invalidates all links, attached to this node.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  SankeyNode.prototype.invalidateLinks = function () {\n    var _this = this;\n    _super.prototype.invalidateLinks.call(this);\n    this.nextInCoord = 0;\n    this.nextOutCoord = 0;\n    var chart = this.chart;\n    if (chart) {\n      var orientation_1 = chart.orientation;\n      if (this._incomingSorted) {\n        $iter.each(this._incomingSorted, function (dataItem) {\n          var link = dataItem.link;\n          var value = dataItem.getWorkingValue(\"value\");\n          if ($type.isNumber(value)) {\n            link.parent = _this.chart.linksContainer;\n            var x = void 0;\n            var y = void 0;\n            var angle = void 0;\n            if (orientation_1 == \"horizontal\") {\n              x = _this.pixelX + _this.dx;\n              y = _this.nextInCoord + _this.pixelY + _this.dy;\n              angle = 0;\n            } else {\n              y = _this.pixelY + _this.dy;\n              x = _this.nextInCoord + _this.pixelX + _this.dx;\n              angle = 90;\n            }\n            link.endX = x;\n            link.endY = y;\n            link.startAngle = angle;\n            link.endAngle = angle;\n            link.gradient.rotation = angle;\n            link.linkWidth = value * chart.valueHeight;\n            if (!dataItem.fromNode) {\n              if (orientation_1 == \"horizontal\") {\n                link.maxWidth = 200;\n                link.startX = _this.pixelX + _this.dx - link.maxWidth;\n                link.startY = link.endY;\n              } else {\n                link.maxHeight = 200;\n                link.startX = link.endX;\n                link.startY = _this.pixelY + _this.dy - link.maxHeight;\n              }\n              // TODO is this needed ?\n              $utils.used(link.gradient);\n              link.fill = dataItem.toNode.color;\n              var stop_1 = link.gradient.stops.getIndex(0);\n              if (stop_1) {\n                if (link.colorMode == \"gradient\") {\n                  stop_1.color = _this.color;\n                }\n                stop_1.opacity = 0;\n                link.fill = link.gradient;\n                link.stroke = link.gradient;\n                link.gradient.validate();\n              }\n            }\n            //link.validate();\n            _this.nextInCoord += link.linkWidth;\n          }\n        });\n      }\n      if (this._outgoingSorted) {\n        $iter.each(this._outgoingSorted, function (dataItem) {\n          var link = dataItem.link;\n          link.parent = _this.chart.linksContainer;\n          var value = dataItem.getWorkingValue(\"value\");\n          if ($type.isNumber(value)) {\n            var x = void 0;\n            var y = void 0;\n            var angle = void 0;\n            if (orientation_1 == \"horizontal\") {\n              angle = 0;\n              x = _this.pixelX + _this.pixelWidth + _this.dx - 1;\n              y = _this.nextOutCoord + _this.pixelY + _this.dy;\n            } else {\n              angle = 90;\n              x = _this.nextOutCoord + _this.pixelX + _this.dx;\n              y = _this.pixelY + _this.pixelHeight + _this.dy - 1;\n            }\n            link.startX = x;\n            link.startY = y;\n            link.startAngle = angle;\n            link.endAngle = angle;\n            link.gradient.rotation = angle;\n            link.linkWidth = value * _this.chart.valueHeight;\n            if (!dataItem.toNode) {\n              if (orientation_1 == \"horizontal\") {\n                link.maxWidth = 200;\n                link.endX = _this.pixelX + link.maxWidth + _this.dx;\n                link.endY = link.startY;\n              } else {\n                link.maxHeight = 200;\n                link.endX = link.startX;\n                link.endY = _this.pixelY + link.maxHeight + _this.dy;\n              }\n              link.opacity = _this.opacity;\n              var stop_2 = link.gradient.stops.getIndex(1);\n              if (stop_2) {\n                if (link.colorMode == \"gradient\") {\n                  stop_2.color = _this.color;\n                }\n                stop_2.opacity = 0;\n                link.fill = link.gradient;\n                link.stroke = link.gradient;\n                link.gradient.validate();\n              }\n            }\n            //link.validate();\n            _this.nextOutCoord += link.linkWidth;\n          }\n        });\n      }\n    }\n    this.positionBullet(this.nameLabel);\n    this.positionBullet(this.valueLabel);\n  };\n  /**\r\n   * Positions the bullet so it is centered within the node element.\r\n   *\r\n   * @param bullet  Target bullet\r\n   */\n  SankeyNode.prototype.positionBullet = function (bullet) {\n    if (bullet) {\n      bullet.x = this.measuredWidth * bullet.locationX;\n      bullet.y = this.measuredHeight * bullet.locationY;\n    }\n  };\n  Object.defineProperty(SankeyNode.prototype, \"level\", {\n    /**\r\n     * @return Level\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"level\");\n    },\n    /**\r\n     * A level node is displayed at. (0 - ...)\r\n     *\r\n     * Levels are measured from left to right.\r\n     *\r\n     * The nodes in the left-most column will have `level = 0`.\r\n     *\r\n     * Nodes in second column - `level = 1`, etc.\r\n     *\r\n     * @param value  Level\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"level\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies properties and labels from another [[SankeyNode]].\r\n   *\r\n   * @param source  Source node\r\n   */\n  SankeyNode.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    this.nameLabel.copyFrom(source.nameLabel);\n    this.valueLabel.copyFrom(source.valueLabel);\n  };\n  return SankeyNode;\n}(FlowDiagramNode);\nexport { SankeyNode };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"SankeyNode\"] = SankeyNode;","map":{"version":3,"mappings":"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","names":["FlowDiagramNode","LabelBullet","registry","InterfaceColorSet","$iter","$type","$utils","__extends","_super","_this","className","width","height","nameLabel","createChild","shouldClone","locationX","locationY","label","text","horizontalCenter","padding","valueLabel","hideOversized","hiddenState","properties","fill","getFor","opacity","visible","background","copyFrom","SankeyNode","invalidateLinks","nextInCoord","nextOutCoord","chart","orientation_1","orientation","_incomingSorted","each","dataItem","link","value","getWorkingValue","isNumber","parent","linksContainer","x","y","angle","pixelX","dx","pixelY","dy","endX","endY","startAngle","endAngle","gradient","rotation","linkWidth","valueHeight","fromNode","maxWidth","startX","startY","maxHeight","used","toNode","color","stop_1","stops","getIndex","colorMode","stroke","validate","_outgoingSorted","pixelWidth","pixelHeight","stop_2","positionBullet","bullet","measuredWidth","measuredHeight","Object","getPropertyValue","setPropertyValue","source","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\elements\\SankeyNode.ts"],"sourcesContent":["/**\r\n * SankeyNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { SankeyDiagram, SankeyDiagramDataItem } from \"../types/SankeyDiagram\";\r\nimport { LabelBullet } from \"./LabelBullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SankeyNode]].\r\n */\r\nexport interface ISankeyNodeProperties extends IFlowDiagramNodeProperties {\r\n\r\n\t/**\r\n\t * A level node is at. (0 - ...)\r\n\t */\r\n\tlevel?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyNode]].\r\n */\r\nexport interface ISankeyNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyNodeAdapters extends IFlowDiagramNodeAdapters, ISankeyNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Sankey Diagram.\r\n *\r\n * A Sankey node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[SankeyLink]] elements.\r\n *\r\n * @see {@link ISankeyNodeEvents} for a list of available events\r\n * @see {@link ISankeyNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SankeyNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyNodeEvents;\r\n\r\n\r\n\t/**\r\n\t * [nextInCoord description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic nextInCoord: number = 0;\r\n\r\n\t/**\r\n\t * [nextOutCoord description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic nextOutCoord: number = 0;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: SankeyDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[SankeyDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * A label element which shows node's value.\r\n\t */\r\n\tpublic valueLabel: LabelBullet;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t */\r\n\tpublic nameLabel: LabelBullet;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyNode\";\r\n\r\n\t\tthis.width = 10;\r\n\t\tthis.height = 10;\r\n\r\n\t\tlet nameLabel = this.createChild(LabelBullet);\r\n\t\tnameLabel.shouldClone = false;\r\n\t\t//@should we auto update these locations if position is changed?\r\n\t\tnameLabel.locationX = 1;\r\n\t\tnameLabel.locationY = 0.5;\r\n\t\tnameLabel.label.text = \"{name}\";\r\n\r\n\t\t//nameLabel.label.textElement.hideOversized = false;\r\n\t\tnameLabel.width = 150;\r\n\t\tnameLabel.height = 150;\r\n\t\tnameLabel.label.horizontalCenter = \"left\";\r\n\t\tnameLabel.label.padding(0, 5, 0, 5);\r\n\t\tthis.nameLabel = nameLabel;\r\n\r\n\t\tlet valueLabel = this.createChild(LabelBullet);\r\n\t\tvalueLabel.shouldClone = false;\r\n\t\tvalueLabel.label.hideOversized = false;\r\n\t\tvalueLabel.locationX = 0.5;\r\n\t\tvalueLabel.locationY = 0.5;\r\n\t\tvalueLabel.width = 150;\r\n\t\tvalueLabel.height = 150;\r\n\t\t//valueLabel.label.text = \"{value}\";\r\n\t\tvalueLabel.label.horizontalCenter = \"middle\";\r\n\t\tthis.valueLabel = valueLabel;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.background.hiddenState.copyFrom(hiddenState);\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\t\tthis.nextInCoord = 0;\r\n\t\tthis.nextOutCoord = 0;\r\n\t\tlet chart = this.chart;\r\n\r\n\t\tif (chart) {\r\n\t\t\tlet orientation = chart.orientation;\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\r\n\t\t\t\t\t\tlet x: number;\r\n\t\t\t\t\t\tlet y: number;\r\n\t\t\t\t\t\tlet angle: number;\r\n\r\n\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\tx = this.pixelX + this.dx;\r\n\t\t\t\t\t\t\ty = this.nextInCoord + this.pixelY + this.dy;\r\n\t\t\t\t\t\t\tangle = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\ty = this.pixelY + this.dy;\r\n\t\t\t\t\t\t\tx = this.nextInCoord + this.pixelX + this.dx;\r\n\t\t\t\t\t\t\tangle = 90;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.endX = x;\r\n\t\t\t\t\t\tlink.endY = y;\r\n\t\t\t\t\t\tlink.startAngle = angle;\r\n\t\t\t\t\t\tlink.endAngle = angle;\r\n\t\t\t\t\t\tlink.gradient.rotation = angle;\r\n\r\n\t\t\t\t\t\tlink.linkWidth = value * chart.valueHeight;\r\n\r\n\t\t\t\t\t\tif (!dataItem.fromNode) {\r\n\r\n\t\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\t\tlink.maxWidth = 200;\r\n\t\t\t\t\t\t\t\tlink.startX = this.pixelX + this.dx - link.maxWidth;\r\n\t\t\t\t\t\t\t\tlink.startY = link.endY;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlink.maxHeight = 200;\r\n\t\t\t\t\t\t\t\tlink.startX = link.endX;\r\n\t\t\t\t\t\t\t\tlink.startY = this.pixelY + this.dy - link.maxHeight;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// TODO is this needed ?\r\n\t\t\t\t\t\t\t$utils.used(link.gradient);\r\n\r\n\t\t\t\t\t\t\tlink.fill = dataItem.toNode.color;\r\n\t\t\t\t\t\t\tlet stop = link.gradient.stops.getIndex(0);\r\n\t\t\t\t\t\t\tif (stop) {\r\n\t\t\t\t\t\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\t\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tstop.opacity = 0;\r\n\t\t\t\t\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.stroke = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//link.validate();\r\n\t\t\t\t\t\tthis.nextInCoord += link.linkWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\tlet x: number;\r\n\t\t\t\t\t\tlet y: number;\r\n\t\t\t\t\t\tlet angle: number;\r\n\r\n\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\tangle = 0;\r\n\t\t\t\t\t\t\tx = this.pixelX + this.pixelWidth + this.dx - 1;\r\n\t\t\t\t\t\t\ty = this.nextOutCoord + this.pixelY + this.dy;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tangle = 90;\r\n\t\t\t\t\t\t\tx = this.nextOutCoord + this.pixelX + this.dx;\r\n\t\t\t\t\t\t\ty = this.pixelY + this.pixelHeight + this.dy - 1;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.startX = x;\r\n\t\t\t\t\t\tlink.startY = y;\r\n\t\t\t\t\t\tlink.startAngle = angle;\r\n\t\t\t\t\t\tlink.endAngle = angle;\r\n\t\t\t\t\t\tlink.gradient.rotation = angle;\r\n\r\n\t\t\t\t\t\tlink.linkWidth = value * this.chart.valueHeight;\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\t\tlink.maxWidth = 200;\r\n\t\t\t\t\t\t\t\tlink.endX = this.pixelX + link.maxWidth + this.dx;\r\n\t\t\t\t\t\t\t\tlink.endY = link.startY;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlink.maxHeight = 200;\r\n\t\t\t\t\t\t\t\tlink.endX = link.startX;\r\n\t\t\t\t\t\t\t\tlink.endY = this.pixelY + link.maxHeight + this.dy;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tlink.opacity = this.opacity;\r\n\r\n\t\t\t\t\t\t\tlet stop = link.gradient.stops.getIndex(1);\r\n\t\t\t\t\t\t\tif (stop) {\r\n\t\t\t\t\t\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\t\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tstop.opacity = 0;\r\n\t\t\t\t\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.stroke = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//link.validate();\r\n\t\t\t\t\t\tthis.nextOutCoord += link.linkWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.positionBullet(this.nameLabel);\r\n\t\tthis.positionBullet(this.valueLabel);\r\n\t}\r\n\r\n\t/**\r\n\t * Positions the bullet so it is centered within the node element.\r\n\t *\r\n\t * @param bullet  Target bullet\r\n\t */\r\n\tprotected positionBullet(bullet: LabelBullet) {\r\n\t\tif (bullet) {\r\n\t\t\tbullet.x = this.measuredWidth * bullet.locationX;\r\n\t\t\tbullet.y = this.measuredHeight * bullet.locationY;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A level node is displayed at. (0 - ...)\r\n\t *\r\n\t * Levels are measured from left to right.\r\n\t *\r\n\t * The nodes in the left-most column will have `level = 0`.\r\n\t *\r\n\t * Nodes in second column - `level = 1`, etc.\r\n\t *\r\n\t * @param value  Level\r\n\t */\r\n\tpublic set level(value: number) {\r\n\t\tthis.setPropertyValue(\"level\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\treturn this.getPropertyValue(\"level\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[SankeyNode]].\r\n\t *\r\n\t * @param source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.nameLabel.copyFrom(source.nameLabel);\r\n\t\tthis.valueLabel.copyFrom(source.valueLabel);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyNode\"] = SankeyNode;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}