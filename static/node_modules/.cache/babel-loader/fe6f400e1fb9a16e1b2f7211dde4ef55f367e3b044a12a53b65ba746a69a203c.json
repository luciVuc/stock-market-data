{"ast":null,"code":"/**\r\n * Axis break module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../../core/Container\";\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\nimport { WavedLine } from \"../../core/elements/WavedLine\";\nimport { List } from \"../../core/utils/List\";\nimport { registry } from \"../../core/Registry\";\nimport { color } from \"../../core/utils/Color\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Base class to define \"breaks\" on axes.\r\n *\r\n * @see {@link IAxisBreakEvents} for a list of available events\r\n * @see {@link IAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar AxisBreak = /** @class */function (_super) {\n  __extends(AxisBreak, _super);\n  /**\r\n   * Constructor\r\n   */\n  function AxisBreak() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * Reference to parent Axis.\r\n     */\n    _this._axis = new MutableValueDisposer();\n    /**\r\n     * A list of axis data items which fall within this break.\r\n     */\n    _this.dataItems = new List();\n    _this.className = \"AxisBreak\";\n    // Set defaults\n    _this.breakSize = 0.01;\n    _this.marginLeft = -5;\n    _this.marginRight = -5;\n    _this.marginTop = -5;\n    _this.marginBottom = -5;\n    var interfaceColors = new InterfaceColorSet();\n    // Create elements\n    // (these won't be used actually, just for setting properties)\n    var fillShape = new WavedLine();\n    fillShape.fill = interfaceColors.getFor(\"background\");\n    fillShape.stroke = color();\n    fillShape.fillOpacity = 0.9;\n    fillShape.zIndex = 0;\n    _this._fillShape = fillShape;\n    var startLine = new WavedLine();\n    startLine.fill = color();\n    startLine.stroke = interfaceColors.getFor(\"grid\");\n    startLine.strokeOpacity = 0.3;\n    startLine.zIndex = 1;\n    _this._startLine = startLine;\n    var endLine = new WavedLine();\n    endLine.fill = color();\n    endLine.stroke = color(\"#000000\"); // interfaceColors.getFor(\"grid\");\n    endLine.strokeOpacity = 0.3;\n    endLine.zIndex = 2;\n    _this._endLine = endLine;\n    _this._disposers.push(_this._axis);\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  AxisBreak.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n    if (this._fillShape) {\n      this._fillShape.dispose();\n    }\n    if (this._startLine) {\n      this._startLine.dispose();\n    }\n    if (this._endLine) {\n      this._endLine.dispose();\n    }\n  };\n  Object.defineProperty(AxisBreak.prototype, \"startLine\", {\n    /**\r\n     * @return Element\r\n     */\n    get: function () {\n      return this._startLine;\n    },\n    /**\r\n     * An element used for the starting line of the break.\r\n     *\r\n     * @param sprite  Element\r\n     */\n    set: function (sprite) {\n      if (this._startLine) {\n        this._startLine.dispose();\n      }\n      this._startLine = sprite;\n      this.addBreakSprite(sprite);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"endLine\", {\n    /**\r\n     * @return Element\r\n     */\n    get: function () {\n      return this._endLine;\n    },\n    /**\r\n     * An element used for the end line of the break.\r\n     *\r\n     * @param sprite Element\r\n     */\n    set: function (sprite) {\n      if (this._endLine) {\n        this._endLine.dispose();\n      }\n      this._endLine = sprite;\n      this.addBreakSprite(sprite);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"fillShape\", {\n    /**\r\n     * @return Element\r\n     */\n    get: function () {\n      return this._fillShape;\n    },\n    /**\r\n     * An element used for fill of the break.\r\n     *\r\n     * @param sprite Element\r\n     */\n    set: function (sprite) {\n      if (this._fillShape) {\n        this._fillShape.dispose();\n      }\n      this._fillShape = sprite;\n      this.addBreakSprite(sprite);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Adds a break element (e.g. lines, fill) to the break, which is\r\n   * [[Container]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param sprite Element to add\r\n   */\n  AxisBreak.prototype.addBreakSprite = function (sprite) {\n    sprite.parent = this;\n    sprite.isMeasured = false;\n    this._disposers.push(sprite);\n  };\n  Object.defineProperty(AxisBreak.prototype, \"axis\", {\n    /**\r\n     * @return Axis\r\n     */\n    get: function () {\n      return this._axis.get();\n    },\n    /**\r\n     * An Axis this Break is associated with.\r\n     *\r\n     * @param axis  Axis\r\n     */\n    set: function (axis) {\n      if (this._axis.get() !== axis) {\n        this._axis.set(axis, axis.renderer.gridContainer.events.on(\"transformed\", this.invalidate, this, false));\n        axis.renderer.createBreakSprites(this);\n        // this can't go to copyFrom, as axis is set later\n        var breakTemplate = axis.axisBreaks.template;\n        this.startLine.copyFrom(breakTemplate.startLine);\n        this.endLine.copyFrom(breakTemplate.endLine);\n        this.fillShape.copyFrom(breakTemplate.fillShape);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"breakSize\", {\n    /**\r\n     * @return Relative axis break\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"breakSize\");\n    },\n    /**\r\n     * A size of the break relative to the actual size of the scope break spans.\r\n     *\r\n     * For example, if `breakSize = 0.1` and unbroken scope of values it spans\r\n     * would be 100 pixels, the break would be 10 pixels wide.\r\n     *\r\n     * 0 means the break will completely collapse and hide the values.\r\n     * 1 means break would be not collapse at all, which would make it\r\n     * effectively useless.\r\n     *\r\n     * @default 0.01\r\n     * @param value  Relative axis break\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"breakSize\", value)) {\n        if (this.axis) {\n          this.axis.invalidate();\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"startPoint\", {\n    /**\r\n     * Returns pixel coordinates of axis break's start.\r\n     *\r\n     * @return Start point\r\n     */\n    get: function () {\n      var renderer = this.axis.renderer;\n      if (renderer) {\n        return renderer.positionToPoint(this.startPosition);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"endPoint\", {\n    /**\r\n     * Returns pixel coordinates of axis break's end.\r\n     *\r\n     * @return End point\r\n     */\n    get: function () {\n      var renderer = this.axis.renderer;\n      if (renderer) {\n        return renderer.positionToPoint(this.endPosition);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"startPosition\", {\n    /**\r\n     * Returns a relative position at which axis break starts.\r\n     *\r\n     * This is a calculated position, meaning it shows relative position of the\r\n     * break after break is applied.\r\n     *\r\n     * @return Start position\r\n     */\n    get: function () {\n      return;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"endPosition\", {\n    /**\r\n     * Returns a relative position at which axis break ends.\r\n     *\r\n     * This is a calculated position, meaning it shows relative position of the\r\n     * break after break is applied.\r\n     *\r\n     * @return End position\r\n     */\n    get: function () {\n      return;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Draws the axis break.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  AxisBreak.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    if (this.axis) {\n      var renderer = this.axis.renderer;\n      renderer.updateBreakElement(this);\n    }\n  };\n  Object.defineProperty(AxisBreak.prototype, \"startValue\", {\n    /**\r\n     * @return Starting value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startValue\");\n    },\n    /**\r\n     * A starting value for the break.\r\n     *\r\n     * @param value  Starting value\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"startValue\", value)) {\n        if (this.axis) {\n          this.axis.invalidate();\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"endValue\", {\n    /**\r\n     * @return End value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endValue\");\n    },\n    /**\r\n     * An end value for the break.\r\n     *\r\n     * @param value  End value\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"endValue\", value)) {\n        if (this.axis) {\n          this.axis.invalidate();\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return AxisBreak;\n}(Container);\nexport { AxisBreak };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"AxisBreak\"] = AxisBreak;","map":{"version":3,"mappings":"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","names":["Container","MutableValueDisposer","WavedLine","List","registry","color","InterfaceColorSet","__extends","_super","_this","className","breakSize","marginLeft","marginRight","marginTop","marginBottom","interfaceColors","fillShape","fill","getFor","stroke","fillOpacity","zIndex","_fillShape","startLine","strokeOpacity","_startLine","endLine","_endLine","_disposers","push","_axis","applyTheme","AxisBreak","dispose","Object","sprite","addBreakSprite","parent","isMeasured","get","axis","set","renderer","gridContainer","events","on","invalidate","createBreakSprites","breakTemplate","axisBreaks","template","copyFrom","getPropertyValue","value","setPropertyValue","invalidateSeries","positionToPoint","startPosition","endPosition","draw","updateBreakElement","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\axes\\AxisBreak.ts"],"sourcesContent":["/**\r\n * Axis break module\r\n */\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Axis, AxisDataItem } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { IWavedShape } from \"../../core/defs/IWavedShape\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisBreak]].\r\n */\r\nexport interface IAxisBreakProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * A size of the break relative to the actual size of the scope break spans.\r\n\t *\r\n\t * For example, if `breakSize = 0.1` and unbroken scope of values it spans\r\n\t * would be 100 pixels, the break would be 10 pixels wide.\r\n\t *\r\n\t * 0 means the break will completely collapse and hide the values.\r\n\t * 1 means break would be not collapse at all, which would make it\r\n\t * effectively useless.\r\n\t *\r\n\t * @default 0.01\r\n\t */\r\n\tbreakSize?: number;\r\n\r\n\t/**\r\n\t * Starting value.\r\n\t */\r\n\tstartValue?: number;\r\n\r\n\t/**\r\n\t * End value.\r\n\t */\r\n\tendValue?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisBreak]].\r\n */\r\nexport interface IAxisBreakEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines [[AxisBreak]] adapters.\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisBreakAdapters extends IContainerAdapters, IAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" on axes.\r\n *\r\n * @see {@link IAxisBreakEvents} for a list of available events\r\n * @see {@link IAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class AxisBreak extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t */\r\n\tpublic _axisType: Axis;\r\n\r\n\t/**\r\n\t * Reference to parent Axis.\r\n\t */\r\n\tprotected _axis = new MutableValueDisposer<this[\"_axisType\"]>();\r\n\r\n\t/**\r\n\t * A reference to starting line element.\r\n\t */\r\n\tprotected _startLine: IWavedShape;\r\n\r\n\t/**\r\n\t * A reference to ending line element.\r\n\t */\r\n\tprotected _endLine: IWavedShape;\r\n\r\n\t/**\r\n\t * A reference to fill shape.\r\n\t */\r\n\tprotected _fillShape: IWavedShape;\r\n\r\n\t/**\r\n\t * A list of axis data items which fall within this break.\r\n\t */\r\n\tpublic dataItems: List<AxisDataItem> = new List<AxisDataItem>();\r\n\r\n\t/**\r\n\t * Adjusted start value.\r\n\t *\r\n\t * Start and end values need to be adjusted so that they do not overlap with\r\n\t * adjacent breaks.\r\n\t */\r\n\tpublic adjustedStartValue: number;\r\n\r\n\t/**\r\n\t * Adjusted end value.\r\n\t *\r\n\t * Start and end values need to be adjusted so that they do not overlap with\r\n\t * adjacent breaks.\r\n\t */\r\n\tpublic adjustedEndValue: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisBreak\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.breakSize = 0.01;\r\n\t\tthis.marginLeft = -5;\r\n\t\tthis.marginRight = -5;\r\n\t\tthis.marginTop = -5;\r\n\t\tthis.marginBottom = -5;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create elements\r\n\t\t// (these won't be used actually, just for setting properties)\r\n\t\tlet fillShape = new WavedLine();\r\n\t\tfillShape.fill = interfaceColors.getFor(\"background\");\r\n\t\tfillShape.stroke = color();\r\n\t\tfillShape.fillOpacity = 0.9;\r\n\t\tfillShape.zIndex = 0;\r\n\t\tthis._fillShape = fillShape;\r\n\r\n\t\tlet startLine = new WavedLine();\r\n\t\tstartLine.fill = color();\r\n\t\tstartLine.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tstartLine.strokeOpacity = 0.3;\r\n\t\tstartLine.zIndex = 1;\r\n\t\tthis._startLine = startLine;\r\n\r\n\t\tlet endLine = new WavedLine();\r\n\t\tendLine.fill = color();\r\n\t\tendLine.stroke = color(\"#000000\");// interfaceColors.getFor(\"grid\");\r\n\t\tendLine.strokeOpacity = 0.3;\r\n\t\tendLine.zIndex = 2;\r\n\t\tthis._endLine = endLine;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\r\n\t\tif (this._fillShape) {\r\n\t\t\tthis._fillShape.dispose();\r\n\t\t}\r\n\r\n\t\tif (this._startLine) {\r\n\t\t\tthis._startLine.dispose();\r\n\t\t}\r\n\r\n\t\tif (this._endLine) {\r\n\t\t\tthis._endLine.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * An element used for the starting line of the break.\r\n\t *\r\n\t * @param sprite  Element\r\n\t */\r\n\tpublic set startLine(sprite: IWavedShape) {\r\n\t\tif (this._startLine) {\r\n\t\t\tthis._startLine.dispose();\r\n\t\t}\r\n\t\tthis._startLine = sprite;\r\n\t\tthis.addBreakSprite(sprite);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Element\r\n\t */\r\n\tpublic get startLine(): IWavedShape {\r\n\t\treturn this._startLine;\r\n\t}\r\n\r\n\t/**\r\n\t * An element used for the end line of the break.\r\n\t *\r\n\t * @param sprite Element\r\n\t */\r\n\tpublic set endLine(sprite: IWavedShape) {\r\n\t\tif (this._endLine) {\r\n\t\t\tthis._endLine.dispose();\r\n\t\t}\r\n\t\tthis._endLine = sprite;\r\n\t\tthis.addBreakSprite(sprite);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Element\r\n\t */\r\n\tpublic get endLine(): IWavedShape {\r\n\t\treturn this._endLine;\r\n\t}\r\n\r\n\t/**\r\n\t * An element used for fill of the break.\r\n\t *\r\n\t * @param sprite Element\r\n\t */\r\n\tpublic set fillShape(sprite: IWavedShape) {\r\n\t\tif (this._fillShape) {\r\n\t\t\tthis._fillShape.dispose();\r\n\t\t}\r\n\r\n\t\tthis._fillShape = sprite;\r\n\t\tthis.addBreakSprite(sprite);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Element\r\n\t */\r\n\tpublic get fillShape(): IWavedShape {\r\n\t\treturn this._fillShape;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a break element (e.g. lines, fill) to the break, which is\r\n\t * [[Container]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param sprite Element to add\r\n\t */\r\n\tpublic addBreakSprite(sprite: IWavedShape) {\r\n\t\tsprite.parent = this;\r\n\t\tsprite.isMeasured = false;\r\n\t\tthis._disposers.push(sprite);\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis this Break is associated with.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set axis(axis: this[\"_axisType\"]) {\r\n\t\tif (this._axis.get() !== axis) {\r\n\t\t\tthis._axis.set(axis, axis.renderer.gridContainer.events.on(\"transformed\", this.invalidate, this, false));\r\n\t\t\taxis.renderer.createBreakSprites(this);\r\n\r\n\t\t\t// this can't go to copyFrom, as axis is set later\r\n\t\t\tlet breakTemplate: AxisBreak = axis.axisBreaks.template;\r\n\r\n\t\t\tthis.startLine.copyFrom(breakTemplate.startLine);\r\n\t\t\tthis.endLine.copyFrom(breakTemplate.endLine);\r\n\t\t\tthis.fillShape.copyFrom(breakTemplate.fillShape);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get axis(): this[\"_axisType\"] {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A size of the break relative to the actual size of the scope break spans.\r\n\t *\r\n\t * For example, if `breakSize = 0.1` and unbroken scope of values it spans\r\n\t * would be 100 pixels, the break would be 10 pixels wide.\r\n\t *\r\n\t * 0 means the break will completely collapse and hide the values.\r\n\t * 1 means break would be not collapse at all, which would make it\r\n\t * effectively useless.\r\n\t *\r\n\t * @default 0.01\r\n\t * @param value  Relative axis break\r\n\t */\r\n\tpublic set breakSize(value: number) {\r\n\t\tif (this.setPropertyValue(\"breakSize\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Relative axis break\r\n\t */\r\n\tpublic get breakSize(): number {\r\n\t\treturn this.getPropertyValue(\"breakSize\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns pixel coordinates of axis break's start.\r\n\t *\r\n\t * @return Start point\r\n\t */\r\n\tpublic get startPoint(): IPoint {\r\n\t\tlet renderer: AxisRenderer = this.axis.renderer;\r\n\t\tif (renderer) {\r\n\t\t\treturn renderer.positionToPoint(this.startPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns pixel coordinates of axis break's end.\r\n\t *\r\n\t * @return End point\r\n\t */\r\n\tpublic get endPoint(): IPoint {\r\n\t\tlet renderer: AxisRenderer = this.axis.renderer;\r\n\t\tif (renderer) {\r\n\t\t\treturn renderer.positionToPoint(this.endPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a relative position at which axis break starts.\r\n\t *\r\n\t * This is a calculated position, meaning it shows relative position of the\r\n\t * break after break is applied.\r\n\t *\r\n\t * @return Start position\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a relative position at which axis break ends.\r\n\t *\r\n\t * This is a calculated position, meaning it shows relative position of the\r\n\t * break after break is applied.\r\n\t *\r\n\t * @return End position\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRenderer = this.axis.renderer;\r\n\t\t\trenderer.updateBreakElement(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A starting value for the break.\r\n\t *\r\n\t * @param value  Starting value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Starting value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\treturn this.getPropertyValue(\"startValue\");\r\n\t}\r\n\r\n\t/**\r\n\t * An end value for the break.\r\n\t *\r\n\t * @param value  End value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\treturn this.getPropertyValue(\"endValue\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisBreak\"] = AxisBreak;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}