{"ast":null,"code":"/**\r\n * Ellipse module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Circle } from \"./Circle\";\nimport { registry } from \"../Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Draws an ellipse\r\n * @see {@link IEllipseEvents} for a list of available events\r\n * @see {@link IEllipseAdapters} for a list of available Adapters\r\n */\nvar Ellipse = /** @class */function (_super) {\n  __extends(Ellipse, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Ellipse() {\n    var _this = _super.call(this) || this;\n    _this.className = \"Ellipse\";\n    _this.element = _this.paper.add(\"ellipse\");\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Draws the ellipsis.\r\n   */\n  Ellipse.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    this.element.attr({\n      \"rx\": this.radius\n    });\n    this.element.attr({\n      \"ry\": this.radiusY\n    });\n  };\n  Object.defineProperty(Ellipse.prototype, \"radiusY\", {\n    /**\r\n     * @return Vertical radius\r\n     */\n    get: function () {\n      return this.innerHeight / 2;\n    },\n    /**\r\n     * Vertical radius.\r\n     *\r\n     * It's a relative size to the `radius`.\r\n     *\r\n     * E.g. 0.8 will mean the height of the ellipsis will be 80% of it's\r\n     * horizontal radius.\r\n     *\r\n     * @param value  Vertical radius\r\n     */\n    set: function (value) {\n      this.height = value * 2;\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Ellipse.prototype, \"radius\", {\n    /**\r\n     * @return Horizontal radius\r\n     */\n    get: function () {\n      return this.innerWidth / 2;\n    },\n    /**\r\n     * Horizontal radius.\r\n     *\r\n     * @param value  Horizontal radius\r\n     */\n    set: function (value) {\n      this.width = value * 2;\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Ellipse;\n}(Circle);\nexport { Ellipse };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Ellipse\"] = Ellipse;","map":{"version":3,"mappings":"AAAA;;;;AAIA;;;;;;AAMA,SAASA,MAAM,QAA2D,UAAU;AACpF,SAASC,QAAQ,QAAQ,aAAa;AAwCtC;;;;;;AAOA;;;;;AAKA;EAA6BC;EAiB5B;;;EAGA;IAAA,YACCC,iBAAO;IACPC,KAAI,CAACC,SAAS,GAAG,SAAS;IAE1BD,KAAI,CAACE,OAAO,GAAGF,KAAI,CAACG,KAAK,CAACC,GAAG,CAAC,SAAS,CAAC;IAExCJ,KAAI,CAACK,UAAU,EAAE;;EAClB;EAEA;;;EAGUC,sBAAI,GAAd;IACCP,iBAAMQ,IAAI,WAAE;IACZ,IAAI,CAACL,OAAO,CAACM,IAAI,CAAC;MAAE,IAAI,EAAE,IAAI,CAACC;IAAM,CAAE,CAAC;IACxC,IAAI,CAACP,OAAO,CAACM,IAAI,CAAC;MAAE,IAAI,EAAE,IAAI,CAACE;IAAO,CAAE,CAAC;EAC1C,CAAC;EAYDC,sBAAWL,4BAAO;IAKlB;;;SAGA;MACC,OAAO,IAAI,CAACM,WAAW,GAAG,CAAC;IAC5B,CAAC;IApBD;;;;;;;;;;SAUA,UAAmBC,KAAa;MAC/B,IAAI,CAACC,MAAM,GAAGD,KAAK,GAAG,CAAC;MACvB,IAAI,CAACE,UAAU,EAAE;IAClB,CAAC;;;;EAcDJ,sBAAWL,2BAAM;IAKjB;;;SAGA;MACC,OAAO,IAAI,CAACU,UAAU,GAAG,CAAC;IAC3B,CAAC;IAfD;;;;;SAKA,UAAkBH,KAAa;MAC9B,IAAI,CAACI,KAAK,GAAGJ,KAAK,GAAG,CAAC;MACtB,IAAI,CAACE,UAAU,EAAE;IAClB,CAAC;;;;EASF,cAAC;AAAD,CAAC,CA7E4BnB,MAAM;;AA+EnC;;;;;;AAMAC,QAAQ,CAACqB,iBAAiB,CAAC,SAAS,CAAC,GAAGZ,OAAO","names":["Circle","registry","__extends","_super","_this","className","element","paper","add","applyTheme","Ellipse","draw","attr","radius","radiusY","Object","innerHeight","value","height","invalidate","innerWidth","width","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\core\\elements\\Ellipse.ts"],"sourcesContent":["/**\r\n * Ellipse module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Circle, ICircleProperties, ICircleAdapters, ICircleEvents } from \"./Circle\";\r\nimport { registry } from \"../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Ellipse]].\r\n */\r\nexport interface IEllipseProperties extends ICircleProperties {\r\n\r\n\t/**\r\n\t * Vertical radius.\r\n\t *\r\n\t * It's a relative size to the `radius`.\r\n\t *\r\n\t * E.g. 0.8 will mean the height of the ellipsis will be 80% of it's\r\n\t * horizontal radius.\r\n\t */\r\n\tradiusY?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Ellipse]].\r\n */\r\nexport interface IEllipseEvents extends ICircleEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IEllipseAdapters extends ICircleAdapters, IEllipseProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an ellipse\r\n * @see {@link IEllipseEvents} for a list of available events\r\n * @see {@link IEllipseAdapters} for a list of available Adapters\r\n */\r\nexport class Ellipse extends Circle {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IEllipseProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IEllipseAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IEllipseEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Ellipse\";\r\n\r\n\t\tthis.element = this.paper.add(\"ellipse\");\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the ellipsis.\r\n\t */\r\n\tprotected draw() {\r\n\t\tsuper.draw();\r\n\t\tthis.element.attr({ \"rx\": this.radius });\r\n\t\tthis.element.attr({ \"ry\": this.radiusY });\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical radius.\r\n\t *\r\n\t * It's a relative size to the `radius`.\r\n\t *\r\n\t * E.g. 0.8 will mean the height of the ellipsis will be 80% of it's\r\n\t * horizontal radius.\r\n\t *\r\n\t * @param value  Vertical radius\r\n\t */\r\n\tpublic set radiusY(value: number) {\r\n\t\tthis.height = value * 2;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical radius\r\n\t */\r\n\tpublic get radiusY(): number {\r\n\t\treturn this.innerHeight / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal radius.\r\n\t *\r\n\t * @param value  Horizontal radius\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.width = value * 2;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal radius\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.innerWidth / 2;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Ellipse\"] = Ellipse;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}