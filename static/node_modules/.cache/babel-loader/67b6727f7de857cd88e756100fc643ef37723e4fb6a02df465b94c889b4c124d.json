{"ast":null,"code":"/**\r\n * Cone module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../../Container\";\nimport { Sprite, visualProperties } from \"../../Sprite\";\nimport { Ellipse } from \"../../elements/Ellipse\";\nimport { LinearGradientModifier } from \"../../rendering/fills/LinearGradientModifier\";\nimport { percent } from \"../../utils/Percent\";\nimport * as $object from \"../../utils/Object\";\nimport * as $path from \"../../rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Builds a round cone/cylinder.\r\n *\r\n * @see {@link IConeEvents} for a list of available events\r\n * @see {@link IConeAdapters} for a list of available Adapters\r\n */\nvar Cone = /** @class */function (_super) {\n  __extends(Cone, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Cone() {\n    var _this = _super.call(this) || this;\n    _this.className = \"Cone\";\n    _this.angle = 30;\n    _this.radius = percent(100);\n    _this.topRadius = percent(100);\n    _this.top = _this.createChild(Ellipse);\n    _this.top.shouldClone = false;\n    _this.bottom = _this.createChild(Ellipse);\n    _this.bottom.shouldClone = false;\n    _this.body = _this.createChild(Sprite);\n    _this.body.shouldClone = false;\n    _this.body.setElement(_this.paper.add(\"path\"));\n    _this.layout = \"none\";\n    _this.bodyFillModifier = new LinearGradientModifier();\n    _this.bodyFillModifier.lightnesses = [0, -0.25, 0];\n    _this.body.fillModifier = _this.bodyFillModifier;\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Cone.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    $object.copyProperties(this, this.top, visualProperties);\n    $object.copyProperties(this, this.bottom, visualProperties);\n    $object.copyProperties(this, this.body, visualProperties);\n    var w = this.innerWidth;\n    var h = this.innerHeight;\n    var bottom = this.bottom;\n    var top = this.top;\n    var angle = this.angle;\n    var radiusBase;\n    var dx;\n    var dy;\n    if (this.orientation == \"horizontal\") {\n      radiusBase = h / 2;\n      bottom.y = h / 2;\n      top.y = h / 2;\n      top.x = w;\n      dx = (90 - angle) / 90;\n      dy = 0;\n      this.bodyFillModifier.gradient.rotation = 90;\n    } else {\n      dx = 0;\n      dy = (90 - angle) / 90;\n      radiusBase = w / 2;\n      bottom.y = h;\n      bottom.x = w / 2;\n      top.x = w / 2;\n      this.bodyFillModifier.gradient.rotation = 0;\n    }\n    var radius = this.radius.value * radiusBase;\n    var topRadius = this.topRadius.value * radiusBase;\n    bottom.radius = radius - radius * dx;\n    bottom.radiusY = radius - radius * dy;\n    top.radius = topRadius - topRadius * dx;\n    top.radiusY = topRadius - topRadius * dy;\n    var path;\n    if (this.orientation == \"horizontal\") {\n      path = $path.moveTo({\n        x: 0,\n        y: h / 2 - bottom.radiusY\n      }) + $path.arcTo(-90, -180, bottom.radius, bottom.radiusY) + $path.lineTo({\n        x: w,\n        y: h / 2 + top.radiusY\n      }) + $path.arcTo(90, 180, top.radius, top.radiusY) + $path.closePath();\n    } else {\n      path = $path.moveTo({\n        x: w / 2 - top.radius,\n        y: 0\n      }) + $path.arcTo(180, -180, top.radius, top.radiusY) + $path.lineTo({\n        x: w / 2 + bottom.radius,\n        y: h\n      }) + $path.arcTo(0, 180, bottom.radius, bottom.radiusY) + $path.closePath();\n    }\n    this.body.path = path;\n  };\n  Object.defineProperty(Cone.prototype, \"angle\", {\n    /**\r\n     * @return Angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"angle\");\n    },\n    /**\r\n     * Angle of the point of view to the 3D element. (0-360)\r\n     *\r\n     * @default 30\r\n     * @param value  Angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"angle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Cone.prototype, \"radius\", {\n    /**\r\n     * @return Bottom radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n    /**\r\n     * A relative radius of the cone's bottom (base).\r\n     *\r\n     * It is relevant to the inner width or height of the element.\r\n     *\r\n     * @default Percent(100)\r\n     * @param value  Bottom radius\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"radius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Cone.prototype, \"topRadius\", {\n    /**\r\n     * @return Top radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"topRadius\");\n    },\n    /**\r\n     * A relative radius of the cone's top (tip).\r\n     *\r\n     * It is relevant to the inner width or height of the element.\r\n     *\r\n     * @default Percent(0)\r\n     * @param value  Top radius\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"topRadius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Cone.prototype, \"orientation\", {\n    /**\r\n     * Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"orientation\");\n    },\n    /**\r\n     * Orientation of the cone\r\n     *\r\n     * @default \"vertical\"\r\n     * @param value  Orientation\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"orientation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Cone;\n}(Container);\nexport { Cone };","map":{"version":3,"mappings":"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","names":["Container","Sprite","visualProperties","Ellipse","LinearGradientModifier","percent","$object","$path","__extends","_super","_this","className","angle","radius","topRadius","top","createChild","shouldClone","bottom","body","setElement","paper","add","layout","bodyFillModifier","lightnesses","fillModifier","applyTheme","Cone","draw","copyProperties","w","innerWidth","h","innerHeight","radiusBase","dx","dy","orientation","y","x","gradient","rotation","value","radiusY","path","moveTo","arcTo","lineTo","closePath","Object","getPropertyValue","setPropertyValue"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\core\\elements\\3d\\Cone.ts"],"sourcesContent":["/**\r\n * Cone module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../Container\";\r\nimport { Sprite, visualProperties } from \"../../Sprite\";\r\nimport { Ellipse } from \"../../elements/Ellipse\";\r\nimport { LinearGradientModifier } from \"../../rendering/fills/LinearGradientModifier\";\r\nimport { percent, Percent } from \"../../utils/Percent\";\r\nimport * as $object from \"../../utils/Object\";\r\nimport * as $path from \"../../rendering/Path\";\r\nimport { Orientation } from \"../../defs/Orientation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cone]].\r\n */\r\nexport interface IConeProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Angle of the point of view to the 3D element. (0-360)\r\n\t *\r\n\t * @default 30\r\n\t */\r\n\tangle?: number;\r\n\r\n\t/**\r\n\t * A relative radius of the cone's bottom (base).\r\n\t *\r\n\t * It is relevant to the inner width or height of the element.\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tradius?: Percent;\r\n\r\n\t/**\r\n\t * A relative radius of the cone's top (tip).\r\n\t *\r\n\t * It is relevant to the inner width or height of the element.\r\n\t *\r\n\t * @default Percent(0)\r\n\t */\r\n\ttopRadius?: Percent;\r\n\r\n\t/**\r\n\t * Orientation of the cone\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Cone]].\r\n */\r\nexport interface IConeEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Cone]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeAdapters extends IContainerAdapters, IConeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Builds a round cone/cylinder.\r\n *\r\n * @see {@link IConeEvents} for a list of available events\r\n * @see {@link IConeAdapters} for a list of available Adapters\r\n */\r\nexport class Cone extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IConeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IConeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IConeEvents;\r\n\r\n\t/**\r\n\t * Bottom ellement.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic bottom: Ellipse;\r\n\r\n\t/**\r\n\t * Top element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic top: Ellipse;\r\n\r\n\t/**\r\n\t * Body element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic body: Sprite;\r\n\r\n\t/**\r\n\t * Gradient for the fill of the body.\r\n\t */\r\n\tpublic bodyFillModifier: LinearGradientModifier;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Cone\";\r\n\r\n\t\tthis.angle = 30;\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.topRadius = percent(100);\r\n\r\n\t\tthis.top = this.createChild(Ellipse);\r\n\t\tthis.top.shouldClone = false;\r\n\r\n\t\tthis.bottom = this.createChild(Ellipse);\r\n\t\tthis.bottom.shouldClone = false;\r\n\r\n\t\tthis.body = this.createChild(Sprite);\r\n\t\tthis.body.shouldClone = false;\r\n\r\n\t\tthis.body.setElement(this.paper.add(\"path\"));\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.bodyFillModifier = new LinearGradientModifier();\r\n\t\tthis.bodyFillModifier.lightnesses = [0, -0.25, 0];\r\n\t\tthis.body.fillModifier = this.bodyFillModifier;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\t$object.copyProperties(this, this.top, visualProperties);\r\n\t\t$object.copyProperties(this, this.bottom, visualProperties);\r\n\t\t$object.copyProperties(this, this.body, visualProperties);\r\n\r\n\t\tlet w: number = this.innerWidth;\r\n\t\tlet h: number = this.innerHeight;\r\n\r\n\t\tlet bottom: Ellipse = this.bottom;\r\n\t\tlet top: Ellipse = this.top;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tlet radiusBase: number;\r\n\t\tlet dx: number;\r\n\t\tlet dy: number;\r\n\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tradiusBase = h / 2;\r\n\t\t\tbottom.y = h / 2;\r\n\t\t\ttop.y = h / 2;\r\n\t\t\ttop.x = w;\r\n\t\t\tdx = (90 - angle) / 90;\r\n\t\t\tdy = 0;\r\n\t\t\tthis.bodyFillModifier.gradient.rotation = 90;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdx = 0;\r\n\t\t\tdy = (90 - angle) / 90;\r\n\r\n\t\t\tradiusBase = w / 2;\r\n\t\t\tbottom.y = h;\r\n\t\t\tbottom.x = w / 2;\r\n\t\t\ttop.x = w / 2;\r\n\t\t\tthis.bodyFillModifier.gradient.rotation = 0;\r\n\t\t}\r\n\r\n\t\tlet radius: number = this.radius.value * radiusBase;\r\n\t\tlet topRadius: number = this.topRadius.value * radiusBase;\r\n\r\n\t\tbottom.radius = radius - radius * dx;\r\n\t\tbottom.radiusY = radius - radius * dy;\r\n\r\n\t\ttop.radius = topRadius - topRadius * dx;\r\n\t\ttop.radiusY = topRadius - topRadius * dy;\r\n\r\n\t\tlet path: string;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tpath = $path.moveTo({ x: 0, y: h / 2 - bottom.radiusY }) + $path.arcTo(-90, -180, bottom.radius, bottom.radiusY) + $path.lineTo({ x: w, y: h / 2 + top.radiusY }) + $path.arcTo(90, 180, top.radius, top.radiusY) + $path.closePath();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.moveTo({ x: w / 2 - top.radius, y: 0 }) + $path.arcTo(180, -180, top.radius, top.radiusY) + $path.lineTo({ x: w / 2 + bottom.radius, y: h }) + $path.arcTo(0, 180, bottom.radius, bottom.radiusY) + $path.closePath();\r\n\t\t}\r\n\r\n\t\tthis.body.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the point of view to the 3D element. (0-360)\r\n\t *\r\n\t * @default 30\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative radius of the cone's bottom (base).\r\n\t *\r\n\t * It is relevant to the inner width or height of the element.\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @param value  Bottom radius\r\n\t */\r\n\tpublic set radius(value: Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Bottom radius\r\n\t */\r\n\tpublic get radius(): Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative radius of the cone's top (tip).\r\n\t *\r\n\t * It is relevant to the inner width or height of the element.\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Top radius\r\n\t */\r\n\tpublic set topRadius(value: Percent) {\r\n\t\tthis.setPropertyValue(\"topRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Top radius\r\n\t */\r\n\tpublic get topRadius(): Percent {\r\n\t\treturn this.getPropertyValue(\"topRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the cone\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}