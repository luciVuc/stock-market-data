{"ast":null,"code":"/**\r\n * This is the main class that encapsulates every object on the chart.\r\n *\r\n * If it's an element that is to be displayed on the screen at some point, its\r\n * class must extend [[Sprite]] class.\r\n */\nimport { __extends, __values } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { SpriteState } from \"./SpriteState\";\nimport { SpriteEventDispatcher } from \"./SpriteEvents\";\nexport { SpriteEventDispatcher };\nimport { BaseObjectEvents } from \"./Base\";\nimport { Adapter, globalAdapter } from \"./utils/Adapter\";\nimport { Dictionary, DictionaryTemplate, DictionaryDisposer } from \"./utils/Dictionary\";\nimport { ListDisposer, List } from \"./utils/List\";\nimport { MultiDisposer, Disposer, MutableValueDisposer } from \"./utils/Disposer\";\nimport { Animation, AnimationDisposer } from \"./utils/Animation\";\nimport { getGhostPaper } from \"./rendering/Paper\";\nimport { Container } from \"./Container\";\nimport { Pattern } from \"./rendering/fills/Pattern\";\nimport { LinearGradient } from \"./rendering/fills/LinearGradient\";\nimport { RadialGradient } from \"./rendering/fills/RadialGradient\";\nimport { Color, color, toColor } from \"./utils/Color\";\nimport { getInteraction } from \"./interaction/Interaction\";\nimport { MouseCursorStyle } from \"./interaction/Mouse\";\nimport { options } from \"./Options\";\nimport { registry } from \"./Registry\";\nimport { NumberFormatter } from \"./formatters/NumberFormatter\";\nimport { DateFormatter } from \"./formatters/DateFormatter\";\nimport { DurationFormatter } from \"./formatters/DurationFormatter\";\nimport { getTextFormatter } from \"./formatters/TextFormatter\";\nimport { Language } from \"./utils/Language\";\nimport { Export } from \"./export/Export\";\nimport * as $utils from \"./utils/Utils\";\nimport * as $math from \"./utils/Math\";\nimport * as $strings from \"./utils/Strings\";\nimport * as $array from \"./utils/Array\";\nimport * as $object from \"./utils/Object\";\nimport * as $type from \"./utils/Type\";\nimport * as $iter from \"./utils/Iterator\";\nimport { system } from \"./System\";\nimport { Percent, percent } from \"./utils/Percent\";\n/**\r\n * Defines list ofvisual properties\r\n */\nexport var visualProperties = [\"fill\", \"fillOpacity\", \"stroke\", \"strokeOpacity\", \"strokeWidth\", \"strokeDasharray\", \"strokeDashoffset\", \"strokeLinecap\", \"strokeLinejoin\"]; // do not add opacity here, as it is used for showing/hiding\n;\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Sprite represents any displayable element.\r\n *\r\n * This is the main class that encapsulates every object on the chart.\r\n *\r\n * If it's an element that is to be displayed on the screen at some point, its\r\n * class must extend [[Sprite]] class.\r\n *\r\n * [[Sprite]] class represents the a hierarchical structure. Every object that\r\n * extends [[Sprite]] can have children, that would inherit their properties,\r\n * such as language, formatters, etc.\r\n *\r\n * @see {@link SpriteState}\r\n * @see {@link ISpriteEvents} for a list of available events\r\n * @see {@link ISpriteAdapters} for a list of available Adapters\r\n *\r\n * @todo Review child elements that need to go into `_disposers`\r\n * @important\r\n */\nvar Sprite = /** @class */function (_super) {\n  __extends(Sprite, _super);\n  /**\r\n   * Constructor:\r\n   * * Creates initial node\r\n   * * Sets default properties\r\n   * * Creates required default states\r\n   * * Inits accessibility\r\n   */\n  function Sprite() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * Holds values for Sprite's properties.\r\n     */\n    _this.properties = {};\n    /**\r\n     * @ignore\r\n     */\n    _this._eventDispatcher = new SpriteEventDispatcher(_this);\n    /**\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n    _this._bindings = {};\n    /**\r\n     * Holds indicator if this Sprite is a \"template\" to be used for creating\r\n     * other Sprites from and should not be treated as full-fledged element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._isTemplate = false;\n    _this._isPath = false;\n    /**\r\n     * Holds indicator whether this sprite was already initialized.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._inited = false;\n    /**\r\n     * Holds indicator whether this sprite was already initialized and ready.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._ready = false;\n    /**\r\n     * If `sprite.hide()` is called and we have \"hidden\" state and\r\n     * `transitionDuration > 0`, we set `isHiding` flag to `true` in order to\r\n     * avoid restarting animations in case `hide()` method is called multiple\r\n     * times.\r\n     */\n    _this.isHiding = false;\n    /**\r\n     * If `sprite.hide()` is called, we set isHidden to true when sprite is hidden.\r\n     * This was added becaus hidden state might have visibility set to true and so\r\n     * there would not be possible to find out if a sprite is technically hidden or not.\r\n     */\n    _this._isHidden = false;\n    /**\r\n     * This property indicates if Sprite is currently being revealed from hidden\r\n     * state. This is used to prevent multiple calls to `sprite.show()` to\r\n     * restart reveal animation. (if enabled)\r\n     */\n    _this.isShowing = false;\n    /**\r\n     * Indicates if this element is a standalone instance. A \"standalone\r\n     * instance\" means this is a autonomous object which maintains its own\r\n     * set of controls like Preloader, Export, etc.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this.isStandaloneInstance = false;\n    /**\r\n     * Indicates if togglable Sprite is currently active (toggled on).\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._isActive = false;\n    /**\r\n     * A Sprite element to use as a mask for this Sprite.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._mask = new MutableValueDisposer();\n    /**\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n    _this._positionPrecision = 3;\n    /**\r\n     * An instance of [[Language]].\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._language = new MutableValueDisposer();\n    /**\r\n     * Holds [[Export]] object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._exporting = new MutableValueDisposer();\n    /**\r\n     * Should this Sprite be included when exporting?\r\n     */\n    _this._exportable = true;\n    /**\r\n     * Defines bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._bbox = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    /**\r\n     * Indicates if this element is invalid and should be re-validated (redrawn).\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this.invalid = false;\n    /**\r\n     * Indicates if this elements position is invalid and should be repositioned\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this.positionInvalid = false;\n    /**\r\n     * A collection of key/value pairs that can be used to bind specific Sprite\r\n     * properties to [[DataItem]].\r\n     *\r\n     * For example: `fill` property can be bound to `myCustomColor` field in\r\n     * DataItem. The Sprite will automatically get the value for `fill` from its\r\n     * DataItem.\r\n     *\r\n     * Can be set for each [[SpriteState]] individually to override default\r\n     * bindings.\r\n     *\r\n     * @see {@link SpriteState}\r\n     */\n    _this.propertyFields = {};\n    /**\r\n     * Specifies if property changes on this object should be propagated to the\r\n     * objects cloned from this object.\r\n     *\r\n     * This setting affects property changes *after* cloning, since at the moment\r\n     * of cloning all of properties from source object are copied to the clone\r\n     * anyway.\r\n     *\r\n     * @default false\r\n     */\n    _this.applyOnClones = false;\n    // unrotated unscaled\n    _this._measuredWidthSelf = 0;\n    _this._measuredHeightSelf = 0;\n    // read only, sprite extreme coordinates\n    /**\r\n     * @ignore\r\n     */\n    _this.maxLeft = 0;\n    /**\r\n     * @ignore\r\n     */\n    _this.maxRight = 0;\n    /**\r\n     * @ignore\r\n     */\n    _this.maxTop = 0;\n    /**\r\n     * @ignore\r\n     */\n    _this.maxBottom = 0;\n    // not rotated and not scaled\n    /**\r\n     * @ignore\r\n     */\n    _this.maxLeftSelf = 0;\n    /**\r\n     * @ignore\r\n     */\n    _this.maxRightSelf = 0;\n    /**\r\n     * @ignore\r\n     */\n    _this.maxTopSelf = 0;\n    /**\r\n     * @ignore\r\n     */\n    _this.maxBottomSelf = 0;\n    _this._isDragged = false;\n    _this._isResized = false;\n    /**\r\n     * @deprecated Moved to [[SpriteProperties]]\r\n     */\n    _this._disabled = false;\n    _this._internalDisabled = false;\n    _this._updateDisabled = false;\n    _this._internalDefaultsApplied = false;\n    /**\r\n     * Time in milliseconds after which rollout event happens when user rolls-out of the sprite. This helps to avoid flickering in some cases.\r\n     */\n    _this.rollOutDelay = 0;\n    /**\r\n     * This flag is set to `true` for the initial sprite you create and place\r\n     * to the div so that we could clear all additional\r\n     * sprites/containers when this sprite is disposed.\r\n     *\r\n     * @ignore\r\n     */\n    _this.isBaseSprite = false;\n    /**\r\n     * Indicates whether this sprite should be cloned when cloning its parent\r\n     * container. We set this to `false` in those cases when a sprite is created\r\n     * by the class, so that when cloning a duplicate sprite would not appear.\r\n     */\n    _this.shouldClone = true;\n    /**\r\n     * A read-only flag which indicates if a sprite has completed its initial\r\n     * animation (if `showOnInit = true`).\r\n     *\r\n     * In case `showOnInit = false`, `appeared` is set to `true` on init.\r\n     *\r\n     * @readonly\r\n     */\n    _this.appeared = false;\n    /**\r\n     * [ex description]\r\n     *\r\n     * @todo Description\r\n     * @ignore\r\n     */\n    _this.ex = 0;\n    /**\r\n     * [ey description]\r\n     *\r\n     * @todo Description\r\n     * @ignore\r\n     */\n    _this.ey = 0;\n    /**\r\n     * Indicates if the sprite can be moved around when resizing it with two fingers (will only work if draggable = false)\r\n     * @ignore\r\n     */\n    _this.dragWhileResize = false;\n    /**\r\n     *  @ignore\r\n     */\n    _this.measureFailed = false;\n    /**\r\n     * If this flag is set to true, calling show() will not reveal the sprite.\r\n     *\r\n     * @ignore\r\n     */\n    _this.preventShow = false;\n    /**\r\n     * When cloning a sprite, if the template has it's own tooltip assigned, this tooltip is also cloned by default.\r\n     * This is not good for cpu and sometimes you might only need one single tooltip for all clones. Set this to false in order not to clone tooltip.\r\n     */\n    _this.cloneTooltip = true;\n    _this.className = \"Sprite\";\n    _this._disposers.push(_this._eventDispatcher);\n    // Generate a unique ID\n    $utils.used(_this.uid);\n    // Create SVG group to hold everything in\n    _this.group = _this.paper.addGroup(\"g\");\n    // Set defaults\n    // it is better to set defauls like this in order to save invaliation calls and events\n    _this.setPropertyValue(\"scale\", 1);\n    _this.setPropertyValue(\"rotation\", 0);\n    _this.setPropertyValue(\"align\", \"none\");\n    _this.setPropertyValue(\"valign\", \"none\");\n    _this.setPropertyValue(\"pixelPerfect\", false);\n    _this.setPropertyValue(\"visible\", true);\n    _this.setPropertyValue(\"tooltipPosition\", \"fixed\");\n    _this.setPropertyValue(\"verticalCenter\", \"none\");\n    _this.setPropertyValue(\"horizontalCenter\", \"none\");\n    _this.setPropertyValue(\"tooltipX\", percent(50));\n    _this.setPropertyValue(\"tooltipX\", percent(50));\n    _this.setPropertyValue(\"marginTop\", 0);\n    _this.setPropertyValue(\"marginBottom\", 0);\n    _this.setPropertyValue(\"marginLeft\", 0);\n    _this.setPropertyValue(\"marginRight\", 0);\n    _this.setPropertyValue(\"dx\", 0);\n    _this.setPropertyValue(\"dy\", 0);\n    _this.setPropertyValue(\"paddingTop\", 0);\n    _this.setPropertyValue(\"paddingBottom\", 0);\n    _this.setPropertyValue(\"paddingRight\", 0);\n    _this.setPropertyValue(\"paddingLeft\", 0);\n    _this.setPropertyValue(\"togglable\", false);\n    _this.setPropertyValue(\"hidden\", false);\n    _this.setPropertyValue(\"urlTarget\", \"_self\");\n    _this.setPropertyValue(\"alwaysShowTooltip\", false);\n    _this.setPropertyValue(\"showTooltipOn\", \"hover\");\n    _this._prevMeasuredWidth = 0;\n    _this._prevMeasuredHeight = 0;\n    _this._measuredWidth = 0;\n    _this._measuredHeight = 0;\n    _this._isMeasured = true;\n    // Invalidate the Sprite so that renderer knows it needs to be drawn\n    _this.invalidate();\n    //this.states.create(\"default\").properties.opacity = 1;\n    // Apply the theme\n    _this.applyTheme();\n    //this._disposers.push(this._clickable);\n    // Decorate adapter with events so that we can apply its settings whenever\n    // it is modified\n    // @todo Think what to do here. We can't just apply the adapter value to\n    // property since not all of those are for properties. Commented out for\n    // now.\n    /*this.adapter.events.on(\"inserted\", (ev: any) => {\r\n        (<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];\r\n    });\r\n    this.adapter.events.on(\"removed\", (ev: any) => {\r\n        (<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];\r\n    });*/\n    // Add disposable dependencies to `_disposers` so they are automatically\n    // disposed of when this object is disposed\n    _this._disposers.push(_this.events);\n    _this._disposers.push(_this.group);\n    _this._disposers.push(_this._mask);\n    _this._disposers.push(_this._language);\n    _this._disposers.push(_this._exporting);\n    //this._disposers.push(this._parent);\n    //this._disposers.push(this._modal);\n    _this._disposers.push(new Disposer(function () {\n      $object.each(_this._bindings, function (key, value) {\n        value.dispose();\n      });\n    }));\n    _this.setPropertyValue(\"interactionsEnabled\", true);\n    return _this;\n  }\n  Object.defineProperty(Sprite.prototype, \"events\", {\n    /**\r\n     * Event dispatcher.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/event-listeners/} for more info about Events\r\n     */\n    get: function () {\n      return this._eventDispatcher;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"adapter\", {\n    /**\r\n     * Holds Adapter.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/adapters/} for more info about Adapters\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        this._adapterO = new Adapter(this);\n      }\n      return this._adapterO;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * ==========================================================================\r\n   * ELEMENT VALIDATION, INIT, AND DRAWING STUFF\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n  /**\r\n   * Applies properties from all assigned themes.\r\n   *\r\n   * We do this here so that we can apply class names as well.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.applyTheme = function () {\n    _super.prototype.applyTheme.call(this);\n    if (options.autoSetClassName) {\n      this.setClassName();\n    }\n  };\n  /**\r\n   * Returns theme(s) used by this object either set explicitly on this\r\n   * element, inherited from parent, or inherited from [[System]].\r\n   *\r\n   * @return An array of theme references\r\n   */\n  Sprite.prototype.getCurrentThemes = function () {\n    var themes = this._themes;\n    if (themes) {\n      return themes;\n    } else {\n      var parent_1 = this._parent;\n      if (parent_1) {\n        return parent_1.getCurrentThemes();\n      } else {\n        return registry.themes;\n      }\n    }\n  };\n  /**\r\n   * Called just before element's validation, this function allows setting\r\n   * defaults.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.applyInternalDefaults = function () {\n    // Nothing here, but extending classes might override this function\n    // so that they can set their defaults\n    this._internalDefaultsApplied = true;\n  };\n  /**\r\n   * Invalidates element.\r\n   *\r\n   * Object will be redrawn during the next update cycle.\r\n   *\r\n   * Please note that in most cases elements will auto-invalidate when needed. If\r\n   * everything works, DO NOT use this method. Use it only if some changes do\r\n   * not take otherwise.\r\n   */\n  Sprite.prototype.invalidate = function () {\n    if (this.disabled || this._isTemplate || this.__disabled) {\n      return;\n    }\n    // We no longer reset this on each invalidate, so that they are applied\n    // only once, and do not overwrite user-defined settings\n    //this._internalDefaultsApplied = false;\n    if (!this.invalid) {\n      this.invalid = true;\n      registry.addToInvalidSprites(this);\n      system.requestFrame();\n    }\n  };\n  /**\r\n   * Validates element:\r\n   * * Triggers events\r\n   * * Redraws the element\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.validate = function () {\n    this.dispatchImmediately(\"beforevalidated\");\n    // prevents from drawing if topparent is 0x0\n    /*\r\n    let topParent = this.topParent;\r\n      if (topParent) {\r\n        if (!topParent.maxWidth || !topParent.maxHeight) {\r\n            this._disposers.push(topParent.events.once(\"maxsizechanged\", this.invalidate, this));\r\n        }\r\n    }*/\n    // Set internal defaults\n    if (!this._internalDefaultsApplied) {\n      this.applyInternalDefaults();\n    }\n    this.beforeDraw();\n    this.draw();\n    this.invalid = false;\n    registry.removeFromInvalidSprites(this);\n    this.afterDraw();\n  };\n  /**\r\n   * Invalidates element's position.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.invalidatePosition = function () {\n    if (this.disabled || this._isTemplate) {\n      return;\n    }\n    if (!this.positionInvalid) {\n      this.positionInvalid = true;\n      registry.addToInvalidPositions(this);\n      system.requestFrame();\n    }\n  };\n  /**\r\n   * Transforms the element.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.validatePosition = function () {\n    var pixelX = this.pixelX;\n    var pixelY = this.pixelY;\n    var dx = this.dx;\n    var dy = this.dy;\n    var x = pixelX + dx;\n    var y = pixelY + dy;\n    if (this._updateDisabled) {\n      if (this._internalDisabled) {\n        this.group.attr({\n          \"display\": \"none\"\n        });\n      } else {\n        if (!this.disabled) {\n          this.removeSVGAttribute(\"display\");\n        }\n      }\n      this._updateDisabled = false;\n    }\n    var sizeChanged = this.measure();\n    //if (!this.invalid) {\n    var prevGroupTransform = this.group.transformString;\n    this.group.moveTo({\n      x: x,\n      y: y\n    });\n    this.group.rotation = this.rotation;\n    if (this.nonScaling) {\n      this.group.scale = this.scale / this.globalScale;\n    } else {\n      this.group.scale = this.scale;\n    }\n    if (prevGroupTransform != this.group.transformString || sizeChanged) {\n      // not yet sure, this is to avoid many transforms=>container layout invalidation on initial buid\n      if (prevGroupTransform == null) {\n        this.dispatch(\"transformed\");\n      } else {\n        this.dispatchImmediately(\"transformed\");\n      }\n      // TODO clear existing positionchanged dispatches ?\n      this.dispatch(\"positionchanged\");\n      if (this.showTooltipOn == \"hit\" || this.showTooltipOn == \"always\") {\n        this.updateTooltipPosition();\n      }\n    }\n    //}\n    // it might happen that x and y changed again, so we only remove if they didn't\n    if (pixelX + dx == x && pixelY + dy == y) {\n      registry.removeFromInvalidPositions(this);\n      this.positionInvalid = false;\n    }\n    var maskRectangle = this._maskRectangle;\n    // todo: verify this\n    if (maskRectangle) {\n      this._clipElement.moveTo({\n        x: maskRectangle.x - pixelX,\n        y: maskRectangle.y - pixelY\n      });\n    }\n  };\n  /**\r\n   * A placeholder method that is called **before** element begins to be drawn.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.beforeDraw = function () {};\n  /**\r\n   * A placeholder method that draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.draw = function () {};\n  /**\r\n   * A placeholder method that is called **after** element finishes drawing\r\n   * itself.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.afterDraw = function () {\n    var e_1, _a;\n    if (this.isMeasured || this.horizontalCenter !== \"none\" || this.verticalCenter !== \"none\") {\n      this.measureElement();\n    }\n    //this.applyMask();\n    if (!this._inited) {\n      if (this._adapterO) {\n        try {\n          // used to be applySVGAttrbutes here, this is more efficient\n          for (var _b = __values(this._adapterO.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var key = _c.value;\n            switch (key) {\n              case \"mask\":\n              case \"fill\":\n              case \"opacity\":\n              case \"fillOpacity\":\n              case \"stroke\":\n              case \"strokeOpacity\":\n              case \"strokeWidth\":\n              case \"shapeRendering\":\n              case \"strokeDasharray\":\n              case \"strokeDashoffset\":\n              case \"strokeLinecap\":\n              case \"strokeLinejoin\":\n              case \"textDecoration\":\n              case \"fontSize\":\n              case \"fontFamily\":\n              case \"fontWeight\":\n                //case \"focusable\":\n                //case \"tabindex\":\n                //case \"role\":\n                this[key] = this[key];\n                break;\n            }\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n      }\n      this.applyFilters();\n      this.visible = this.visible;\n      this.interactionsEnabled = this.getPropertyValue(\"interactionsEnabled\"); // can't use .interactionsEnabled as it get's parent's\n      this._inited = true;\n      if (!this.showOnInit) {\n        this.appeared = true;\n      }\n      if (this.hidden) {\n        this.hide(0);\n      }\n      this.applyMask();\n      this.dispatch(\"validated\");\n      this.dispatch(\"inited\");\n      this.dispatchReady();\n    } else {\n      this.dispatch(\"validated\");\n    }\n    if (this.showTooltipOn == \"always\") {\n      if (this.visible && !this.disabled && !this.__disabled) {\n        this.showTooltip();\n      } else {\n        this.hideTooltip(0);\n      }\n    }\n  };\n  /**\r\n   * Dispatches `\"ready\"` event. Sprite dispatches it right after `\"inited\"` event.\r\n   *\r\n   * @ignore\r\n   */\n  Sprite.prototype.dispatchReady = function () {\n    if (!this.isReady()) {\n      this._ready = true;\n      this.dispatch(\"ready\");\n    }\n  };\n  /**\r\n   * Triggers a re-initialization of this element.\r\n   *\r\n   * Will result in complete redrawing of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.reinit = function () {\n    this._inited = false;\n    this.setState(this.defaultState);\n    this.invalidate();\n  };\n  /**\r\n   * Handles the situation where parent element is resized.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.handleGlobalScale = function () {\n    this.dispatch(\"globalscalechanged\");\n    if (this.nonScalingStroke) {\n      this.strokeWidth = this.strokeWidth;\n    }\n    if (this.nonScaling) {\n      this.validatePosition();\n    }\n    this.updateFilterScale();\n  };\n  /**\r\n   * Updates filter properties which might depend on scale\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.updateFilterScale = function () {\n    var _this = this;\n    $iter.each(this.filters.iterator(), function (filter) {\n      filter.scale = _this.globalScale;\n    });\n  };\n  /**\r\n   * Removes itself from system's invalid lists.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.removeFromInvalids = function () {\n    registry.removeFromInvalidSprites(this);\n    registry.removeFromInvalidPositions(this);\n  };\n  /**\r\n   * Copies all parameters from another [[Sprite]].\r\n   *\r\n   * @param source Source Sprite\r\n   */\n  Sprite.prototype.copyFrom = function (source) {\n    var _this = this;\n    _super.prototype.copyFrom.call(this, source);\n    this.isMeasured = source.isMeasured;\n    this.states.copyFrom(source.states);\n    if (source.filters.length > 0) {\n      source.filters.each(function (filter) {\n        _this.filters.push(filter.clone());\n      });\n    }\n    if (source._adapterO) {\n      this.adapter.copyFrom(source._adapterO);\n    }\n    //helps to avoid calling getter which creates instance\n    if (source[\"_interaction\"]) {\n      this.interactions.copyFrom(source.interactions);\n    }\n    if (source[\"_plugins\"]) {\n      this.plugins.copyFrom(source.plugins);\n    }\n    this.configField = source.configField;\n    this.applyOnClones = source.applyOnClones;\n    // this.numberFormatter = source.numberFormatter; // todo: this creates loose number formatter and copies it to all clones. somehow we need to know if source had numberFormatter explicitly created and not just because a getter was called.\n    //this.mask = source.mask; need to think about this, generally this causes a lot of problems\n    this.disabled = source.disabled;\n    this.virtualParent = source.virtualParent;\n    this.exportable = source.exportable;\n    //@todo: create tooltip if it's on source but not on this?\n    //const tooltip = this._tooltip;\n    //if (tooltip) {\n    //\ttooltip.copyFrom(source.tooltip);\n    //}\n    if (source._tooltip) {\n      if (this._tooltip) {\n        this._tooltip.copyFrom(source.tooltip);\n      } else {\n        if (source.cloneTooltip) {\n          this.tooltip = source.tooltip.clone();\n        } else {\n          this._tooltip = source.tooltip;\n        }\n      }\n    }\n    //if ((<any>source)[\"_tooltip\"] && !this._tooltip) {\n    //\tthis._tooltip = (<any>source)[\"_tooltip\"];\n    //}\n    this._showSystemTooltip = source.showSystemTooltip;\n    $utils.copyProperties(source.propertyFields, this.propertyFields);\n    $utils.copyProperties(source.properties, this);\n    if (source.fillModifier) {\n      this.fillModifier = source.fillModifier.clone();\n    }\n    if (source.strokeModifier) {\n      this.strokeModifier = source.strokeModifier.clone();\n    }\n    if (source.focusFilter) {\n      this.focusFilter = source.focusFilter.clone();\n    }\n  };\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n  Sprite.prototype.dispose = function () {\n    if (!this.isDisposed()) {\n      if (this.showTooltipOn == \"always\" && this.tooltip) {\n        this.tooltip.hide();\n      }\n      this.dispatchImmediately(\"beforedisposed\");\n      if (this.isBaseSprite) {\n        if (this.htmlContainer) {\n          while (this.htmlContainer.childNodes.length > 0) {\n            this.htmlContainer.removeChild(this.htmlContainer.firstChild);\n          }\n        }\n        this.isBaseSprite = false;\n      }\n      _super.prototype.dispose.call(this);\n      // Clear adapters\n      if (this._adapterO) {\n        this._adapterO.clear();\n      }\n      if (this.applyOnClones) {\n        if (this._clones) {\n          for (var i = this._clones.length - 1; i >= 0; i--) {\n            var clone = this._clones.getIndex(i);\n            clone.dispose();\n          }\n        }\n      }\n      if (this._svgContainer) {\n        this._svgContainer.dispose();\n      }\n      if (this._interactionDisposer) {\n        this._interactionDisposer.dispose();\n        this._interactionDisposer = undefined;\n      }\n      if (this._urlDisposer) {\n        this._urlDisposer.dispose();\n      }\n      this.removeFromInvalids();\n      if (this.element) {\n        this.element.dispose();\n      }\n      if (this.group) {\n        this.group.dispose();\n      }\n      if (this._numberFormatter) {\n        this._numberFormatter.dispose();\n      }\n      if (this._focusFilter) {\n        this._focusFilter.dispose();\n      }\n      var stroke = this.stroke;\n      if (stroke && !(stroke instanceof Color) && stroke.dispose) {\n        if (this.clonedFrom && this.clonedFrom.stroke == stroke) {\n          // do nothing\n        } else {\n          stroke.dispose();\n        }\n      }\n      // TODO a bit hacky\n      var fill = this.fill;\n      if (fill && !(fill instanceof Color) && fill.dispose) {\n        if (this.clonedFrom && this.clonedFrom.fill == fill) {\n          // do nothing\n        } else {\n          fill.dispose();\n        }\n      }\n      // remove from map\n      if ($type.hasValue(this.id)) {\n        this.map.removeKey(this.id);\n      }\n      this.parent = undefined;\n      if (this._filters) {\n        while (this._filters.length > 0) {\n          var filter = this._filters.getIndex(0);\n          filter.dispose();\n          this._filters.removeValue(filter);\n        }\n      }\n      this._alwaysShowDisposers = undefined;\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"isTemplate\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Is template?\r\n     */\n    get: function () {\n      return this._isTemplate;\n    },\n    /**\r\n     * Indicates if this element is a \"template\".\r\n     *\r\n     * Template Sprites act only as a holders for config for other \"real\"\r\n     * elements to be cloned from.\r\n     *\r\n     * Templates are treated differently, as they are not validated, redrawn, or\r\n     * otherwise are processed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Is template?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (this._isTemplate != value) {\n        this._isTemplate = value;\n        if (this instanceof Container) {\n          $iter.each(this.children.iterator(), function (child) {\n            child.isTemplate = value;\n          });\n        }\n        if (value) {\n          this.parent = this._parent;\n          this.removeFromInvalids();\n        } else {\n          this.invalidate();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"showSystemTooltip\", {\n    /**\r\n     * @return Show system tooltip?\r\n     */\n    get: function () {\n      if (!$type.hasValue(this._showSystemTooltip)) {\n        if (this.virtualParent) {\n          return this.virtualParent.showSystemTooltip;\n        } else if (this._parent) {\n          return this._parent.showSystemTooltip;\n        } else {\n          return false;\n        }\n      }\n      return this._showSystemTooltip;\n    },\n    /**\r\n     * Indicates whether the element should attempt to construct itself in a way\r\n     * so that system tooltip is shown if its `readerTitle` is set.\r\n     *\r\n     * @param value Show system tooltip?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (this._showSystemTooltip != value) {\n        this._showSystemTooltip = value;\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"topParent\", {\n    /**\r\n     * ==========================================================================\r\n     * HIERARCHY AND STRUCTURE RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Sprites's top-level [[Container]].\r\n     *\r\n     * Please note that in most cases it won't be the chart element.\r\n     *\r\n     * To access base chart element, use `baseSprite` instead.\r\n     *\r\n     * @return Top-level ascendant\r\n     */\n    get: function () {\n      if (this._topParent) {\n        return this._topParent;\n      } else {\n        if (this._parent) {\n          return this._parent.topParent;\n        }\n      }\n    },\n    /**\r\n     * @ignore\r\n     * @param value {Container} top parent of a sprite\r\n     */\n    set: function (value) {\n      this._topParent = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"parent\", {\n    /**\r\n     * @return Parent container\r\n     */\n    get: function () {\n      return this._parent;\n    },\n    /**\r\n     * Elements' parent [[Container]].\r\n     *\r\n     * @param parent  Parent container\r\n     */\n    set: function (parent) {\n      if (this._isTemplate) {\n        return;\n      }\n      // TODO is this needed ?\n      $utils.used(this.paper);\n      var oldParent = this._parent;\n      if (oldParent != parent) {\n        if (oldParent) {\n          oldParent.children.removeValue(this);\n        }\n        this._parent = parent;\n        if (parent) {\n          this.topParent = parent.topParent;\n          if (parent.isTemplate) {\n            this.isTemplate = true;\n          }\n          this.baseId = parent.baseId;\n          parent.children.push(this);\n          // insert handler at Container invalidates +  invalidatesLayout + adds to group\n          if (this._tooltip && !this._tooltipContainer) {\n            this._tooltip.parent = parent.tooltipContainer;\n          }\n          if (!this._dataItem) {\n            this.dataItem = parent.dataItem;\n          }\n          this.handleAlwaysShowTooltip();\n          if (this.dataItem) {\n            // No need to apply accessibility if there's no data item\n            // The whole reason of applying it here is to populate data\n            // placesholders, and if tehre's no data item, it won't work anyway\n            this.applyAccessibility();\n          }\n          this.dispatchImmediately(\"parentset\");\n        } else {\n          this.topParent = undefined;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n  Sprite.prototype.handleAlwaysShow = function () {\n    this.showTooltip();\n  };\n  /**\r\n   * @ignore\r\n   */\n  Sprite.prototype.handleAlwaysShowTooltip = function () {\n    var sprite = this;\n    var oldDisposers = this._alwaysShowDisposers;\n    if (oldDisposers) {\n      $array.each(oldDisposers, function (oldDisposer) {\n        oldDisposer.dispose();\n      });\n    }\n    this._alwaysShowDisposers = [];\n    if (this.showTooltipOn == \"always\") {\n      while (sprite != undefined) {\n        var disposer = sprite.events.on(\"visibilitychanged\", this.handleAlwaysShow, this, false);\n        this.addDisposer(disposer);\n        this._alwaysShowDisposers.push(disposer);\n        sprite = sprite.parent;\n      }\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"virtualParent\", {\n    /**\r\n     * @return Virtual parent\r\n     */\n    get: function () {\n      return this._virtualParent;\n    },\n    /**\r\n     * Element's \"virtual\" parent.\r\n     *\r\n     * This is required in ordere to maintain proper inheritance (like\r\n     * formatters).\r\n     *\r\n     * Sometimes an element is a \"logical\" parent, even though it's not a direct\r\n     * ascendant.\r\n     *\r\n     * Example: a bullet is not a child of the axis, but it would make sense\r\n     * for it to inherit series' formatters.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Virtual parent\r\n     */\n    set: function (value) {\n      this._virtualParent = value;\n      if (this.dataItem) {\n        // No need to apply accessibility if there's no data item\n        // The whole reason of applying it here is to populate data\n        // placesholders, and if tehre's no data item, it won't work anyway\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Moves `<defs>` to correct place in DOM.\r\n   *\r\n   * Some elements are initially created in \"ghost\" container. When moving\r\n   * those into proper place in DOM, their respective `<defs>` need to be moved\r\n   * as well.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.appendDefs = function () {\n    if (this.filterElement) {\n      this.paper.appendDef(this.filterElement);\n    }\n    var fill = this.fill;\n    if (fill && fill.element) {\n      this.paper.appendDef(fill.element);\n    }\n    var stroke = this.stroke;\n    if (stroke && stroke.element) {\n      this.paper.appendDef(stroke.element);\n    }\n    if (this.fillModifier && this.fill instanceof Color) {\n      var fill_1 = this.fillModifier.modify(this.fill);\n      if (fill_1 && fill_1.element) {\n        this.paper.appendDef(fill_1.element);\n      }\n    }\n    if (this.strokeModifier && this.stroke instanceof Color) {\n      var stroke_1 = this.strokeModifier.modify(this.stroke);\n      if (stroke_1 && stroke_1.element) {\n        this.paper.appendDef(stroke_1.element);\n      }\n    }\n    if (this._clipPath) {\n      this.paper.appendDef(this._clipPath);\n    }\n    if (this._exportable === false) {\n      this.exportable = false;\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"map\", {\n    /**\r\n     * Returns a [[Dictionary]] which maps object ids with their respective\r\n     * objects.\r\n     *\r\n     * Can be used to retrieve any object by id, e.g.:\r\n     *\r\n     * ```TypeScript\r\n     * console.log(mySprite.map.getKey(\"myid\"));\r\n     * ```\r\n     * ```JavaScript\r\n     * console.log(mySprite.map.getKey(\"myid\"));\r\n     * ```\r\n     *\r\n     * @return Map collection\r\n     */\n    get: function () {\n      var top = this.topParent;\n      if (top) {\n        return top.map;\n      } else if (!this._map) {\n        this._map = new Dictionary();\n      }\n      return this._map;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"delayedMap\", {\n    /**\r\n     * @ignore\r\n     * @return Map collection\r\n     */\n    get: function () {\n      var top = this.topParent;\n      if (top) {\n        return top.delayedMap;\n      } else if (!this._delayedMap) {\n        this._delayedMap = new Dictionary();\n      }\n      return this._delayedMap;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"id\", {\n    /**\r\n     * @return ID\r\n     */\n    get: function () {\n      return this._id;\n    },\n    /**\r\n     * Element's user-defined ID.\r\n     *\r\n     * Will throw an Error if there already is an object with the same ID.\r\n     *\r\n     * Please note that above check will be performed withing the scope of the\r\n     * current chart instance. It will not do checks across other chart instances\r\n     * or in globally in DOM.\r\n     *\r\n     * Make sure the IDs are unique.\r\n     *\r\n     * @param value ID\r\n     */\n    set: function (value) {\n      if (this._id != value) {\n        this._id = value;\n        if (this.map.hasKey(value)) {\n          throw Error(\"Duplicate id (\" + value + \") used on multiple objects.\");\n        } else {\n          this.map.setKey(value, this);\n        }\n        if (options.autoSetClassName) {\n          this.setClassName();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"dom\", {\n    /**\r\n     * ==========================================================================\r\n     * ELEMENT AND DOM TREE MANIPULATION AND MEASURING\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Returns DOM element reference associated with this element.\r\n     *\r\n     * @readonly\r\n     * @return DOM element\r\n     */\n    get: function () {\n      return this.group.node;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"paper\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Paper\r\n     */\n    get: function () {\n      if (this._paper) {\n        return this._paper;\n      } else {\n        var parent_2 = this._parent;\n        if (parent_2) {\n          return parent_2.paper;\n        }\n      }\n      return getGhostPaper();\n    },\n    /**\r\n     * A [[Paper]] instance to place elements on.\r\n     *\r\n     * If there's no Paper set for this element, it goes up the ascendant tree\r\n     * until it finds one.\r\n     *\r\n     * This method is used by important `addChild()` method, so it's essential\r\n     * to have a [[Paper]] instance.\r\n     *\r\n     * If this element has a separate `htmlContainer` set, it will have a\r\n     * [[Paper]] instance itself.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param paper  Paper\r\n     */\n    set: function (paper) {\n      this.setPaper(paper);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets [[Paper]] instance to use to draw elements.\r\n   * @ignore\r\n   * @param paper Paper\r\n   * @return true if paper was changed, false, if it's the same\r\n   */\n  Sprite.prototype.setPaper = function (paper) {\n    var oldPaper = this._paper;\n    if (oldPaper != paper) {\n      this._paper = paper;\n      this.appendDefs();\n      return true;\n    }\n    return false;\n  };\n  Object.defineProperty(Sprite.prototype, \"htmlContainer\", {\n    /**\r\n     * @return HTML element\r\n     */\n    get: function () {\n      if (this._htmlContainer) {\n        return this._htmlContainer;\n      } else {\n        var parent_3 = this._parent;\n        if (parent_3) {\n          return parent_3.htmlContainer;\n        }\n      }\n    },\n    /**\r\n     * An HTML element to be used when placing wrapper element (`<div>`)\r\n     * for the whole chart.\r\n     *\r\n     * This is the same for **all** elements within the same chart.\r\n     *\r\n     * @param htmlContainer HTML element\r\n     */\n    set: function (htmlContainer) {\n      this._htmlContainer = htmlContainer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"titleElement\", {\n    /**\r\n     * Creates (if not yet created) and returns element's `<title>` element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Title element\r\n     */\n    get: function () {\n      if (!this._titleElement) {\n        this._titleElement = this.paper.add(\"title\");\n        this.group.add(this._titleElement);\n      }\n      return this._titleElement;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"descriptionElement\", {\n    /**\r\n     * Creates (if not yet created) and returns element's `<desc>` element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Desc element\r\n     */\n    get: function () {\n      if (!this._descriptionElement) {\n        this._descriptionElement = this.paper.add(\"desc\");\n        this.group.add(this._descriptionElement);\n      }\n      return this._descriptionElement;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"filters\", {\n    /**\r\n     * Returns list of SVG filters (effects) applied to element. If the filter\r\n     * list is not yet initilized, creates and returns an empty one.\r\n     * Note, not all filters combine well with one another. We recommend using one filter per sprite.\r\n     *\r\n     * @return List of filters\r\n     */\n    get: function () {\n      if (!this._filters) {\n        this._filters = new List();\n        // TODO only add certain events ?\n        this._disposers.push(this._filters.events.onAll(this.applyFilters, this));\n        this._disposers.push(new ListDisposer(this._filters));\n      }\n      return this._filters;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets required SVG attributes. Must be called every time an element is\r\n   * redrawn so that attributes are (re)applied.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.setSVGAttributes = function () {\n    this.fill = this.fill;\n    this.opacity = this.opacity;\n    this.fillOpacity = this.fillOpacity;\n    this.stroke = this.stroke;\n    this.strokeOpacity = this.strokeOpacity;\n    this.shapeRendering = this.shapeRendering;\n    this.strokeDasharray = this.strokeDasharray;\n    this.strokeDashoffset = this.strokeDashoffset;\n    this.strokeLinecap = this.strokeLinecap;\n    this.strokeLinejoin = this.strokeLinejoin;\n    this.focusable = this.focusable;\n    this.tabindex = this.tabindex;\n    this.role = this.role;\n  };\n  /**\r\n   * Sets an attribute directly on an SVG element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param attribute Attribute object\r\n   */\n  Sprite.prototype.setSVGAttribute = function (attribute) {\n    this.group.attr(attribute);\n  };\n  /**\r\n   * Removes an attribute directly from SVG element.\r\n   *\r\n   * @param attribute Attribute key to remove\r\n   */\n  Sprite.prototype.removeSVGAttribute = function (attribute) {\n    this.group.removeAttr(attribute);\n  };\n  /**\r\n   * Sets `class` attribute of the elements SVG node.\r\n   *\r\n   * Uses `am4core.options.classNamePrefix`.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.setClassName = function () {\n    var className = this.className;\n    var classNamePrefix = options.classNamePrefix;\n    if (this.element) {\n      this.element.addClass(classNamePrefix + className);\n    }\n    this.group.addClass(classNamePrefix + className + \"-group\");\n    if ($type.hasValue(this.id)) {\n      this.group.addClass(classNamePrefix + this.id);\n    }\n    if (this.userClassName) {\n      this.group.addClass(this.userClassName);\n    }\n  };\n  /**\r\n   * Adds an `id` attribute the the element and returns the id.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Element's ID\r\n   */\n  Sprite.prototype.uidAttr = function () {\n    this.setSVGAttribute({\n      \"id\": this.uid\n    });\n    return this.uid;\n  };\n  /**\r\n   * [updateClipPath description]\r\n   *\r\n   * @todo Description\r\n   */\n  Sprite.prototype.updateClipPath = function () {\n    var element = this._clipElement;\n    if (element) {\n      element.moveTo({\n        x: this.mask.pixelX,\n        y: this.mask.pixelY\n      });\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  Sprite.prototype.createClipPath = function () {\n    if (!this._clipPath) {\n      this._clipPath = this.paper.addGroup(\"clipPath\");\n      this.paper.appendDef(this._clipPath);\n      this._disposers.push(this._clipPath);\n      var id = registry.getUniqueId();\n      this._clipPath.attr({\n        \"id\": id\n      });\n      this.group.attr({\n        \"clip-path\": \"url(\\\"\" + $utils.getBaseURI() + id + \"\\\")\"\n      });\n    }\n  };\n  /**\r\n   * Applies the mask Sprite.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.applyMask = function () {\n    var mask = this.mask;\n    if (this._clipPath && mask) {\n      // Container\n      if (mask instanceof Container) {\n        this._clipElement.attr({\n          \"width\": $math.max(0, mask.pixelWidth),\n          \"height\": $math.max(0, mask.pixelHeight)\n        });\n        var point = $utils.spritePointToSprite({\n          x: mask.pixelX,\n          y: mask.pixelY\n        }, mask.parent, this);\n        this._clipPath.x = point.x;\n        this._clipPath.y = point.y;\n      }\n      // Sprite\n      else {\n        if (mask.element && mask.element != this._clipElement) {\n          this._clipElement = mask.element;\n          this._clipPath.add(this._clipElement);\n        }\n        this._clipPath.scale = mask.scale;\n        this._clipPath.x = mask.pixelX;\n        this._clipPath.y = mask.pixelY;\n        this._clipPath.rotation = mask.rotation;\n      }\n    }\n  };\n  /**\r\n   * Applies filters to the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.applyFilters = function () {\n    var _this = this;\n    // we create a separate filter for each sprite as otherwise it would be impossible to animate filter.\n    // svg doesn't support multiple filters applied to one element, so we put all the primitives to one filterElement of a sprite.\n    if (this._filters && this._filters.length > 0) {\n      var width_1 = 100;\n      var height_1 = 100;\n      if (!this.filterElement) {\n        this.filterElement = this.paper.addGroup(\"filter\");\n        this._disposers.push(this.filterElement);\n      } else {\n        this.filterElement.removeChildNodes();\n      }\n      this.paper.appendDef(this.filterElement);\n      var id = \"filter-\" + this.uid;\n      this.filterElement.attr({\n        \"id\": id\n      });\n      $iter.each(this.filters.iterator(), function (filter) {\n        filter.sprite = _this;\n        filter.paper = _this.paper;\n        _this.filterElement.attr({\n          filterUnits: filter.filterUnits\n        });\n        filter.appendPrimitives(_this.filterElement);\n        if (filter.width > width_1) {\n          width_1 = filter.width;\n        }\n        if (filter.height > height_1) {\n          height_1 = filter.height;\n        }\n        filter.scale = _this.globalScale;\n      });\n      var w = width_1 + \"%\";\n      var h = height_1 + \"%\";\n      /* temporarily removed as it is breaking tooltips on Safari @todo come back to this\r\n      if (this._measuredHeight <= 1) {\r\n          h = height + \"\";\r\n      }\r\n        if (this._measuredWidth <= 1) {\r\n          h = width + \"\";\r\n      }*/\n      this.filterElement.attr({\n        \"width\": w,\n        \"height\": h,\n        \"x\": -(width_1 - 100) / 2 + \"%\",\n        \"y\": -(height_1 - 100) / 2 + \"%\"\n      });\n      this.group.attr({\n        \"filter\": \"url(\\\"\" + $utils.getBaseURI() + id + \"\\\")\"\n      });\n    } else if (this.filterElement) {\n      this.group.removeAttr(\"filter\");\n      this.filterElement.removeChildNodes();\n    }\n  };\n  /**\r\n   * [removeClipPath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n  Sprite.prototype.removeClipPath = function () {\n    if (this._clipPath) {\n      //this._clipPath.dispose();\n      this.removeDispose(this._clipPath);\n      this._clipPath = undefined;\n    }\n  };\n  /**\r\n   * [setElement description]\r\n   *\r\n   * @ignore\r\n   * @todo Description\r\n   * @param element [description]\r\n   */\n  Sprite.prototype.setElement = function (element) {\n    this.element = element;\n    this.setSVGAttributes();\n    this.applyAccessibility();\n  };\n  Object.defineProperty(Sprite.prototype, \"element\", {\n    /**\r\n     * @return Element\r\n     */\n    get: function () {\n      return this._element;\n    },\n    /**\r\n     * The main element for this Sprite, usually an SVG `<g>`.\r\n     *\r\n     * All other sub-elements are created in it.\r\n     *\r\n     * @param element  Element\r\n     */\n    set: function (element) {\n      // Destroy previous element if there was one before\n      this.removeElement();\n      // Set new element\n      this._element = element;\n      // Add element to group\n      // Since we are adding Element to group, which is already in the\n      // `.disposers` it will be removed automatically when Sprite is disposed\n      // of\n      this.group.add(element);\n      if (element.node instanceof SVGPathElement) {\n        this._isPath = true;\n      }\n      // This is needed if someone is setting element not in draw method but\n      // from outside\n      if (!this.invalid) {\n        this.validate();\n      }\n      if (options.autoSetClassName) {\n        this.setClassName();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"svgContainer\", {\n    /**\r\n     * HTML container (`<div>`) which is used to place chart's `<svg>` element\r\n     * in.\r\n     *\r\n     * @return Container for chart elements\r\n     */\n    get: function () {\n      if (this._svgContainer) {\n        return this._svgContainer;\n      } else if (this._parent) {\n        return this._parent.svgContainer;\n      }\n    },\n    /**\r\n     * Sets HTML container to add SVG and other chart elements to.\r\n     *\r\n     * @param svgContainer Container for chart elements\r\n     */\n    set: function (svgContainer) {\n      this._svgContainer = svgContainer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Measures main element.\r\n   *\r\n   * Saves measurements into private `_bbox` property.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.measureElement = function () {\n    if (this.element) {\n      if (this.definedBBox) {\n        this._bbox = this.definedBBox;\n      } else {\n        var svgBBox = this.element.getBBox();\n        this._bbox = {\n          x: svgBBox.x,\n          y: svgBBox.y,\n          width: svgBBox.width,\n          height: svgBBox.height\n        };\n      }\n    }\n  };\n  /**\r\n   * Positions element according its center settings.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.updateCenter = function () {\n    if (this.element) {\n      var prevElementTransform = this.element.transformString;\n      var bbox = this.bbox;\n      var ex = 0;\n      var ey = 0;\n      var elementX = bbox.x;\n      var elementY = bbox.y;\n      var elementWidth = bbox.width;\n      var elementHeigth = bbox.height;\n      var pixelPaddingLeft = this.pixelPaddingLeft;\n      var pixelPaddingRight = this.pixelPaddingRight;\n      var pixelPaddingTop = this.pixelPaddingTop;\n      var pixelPaddingBottom = this.pixelPaddingBottom;\n      // add padding to the measured size\n      var measuredWidth = $math.max(elementWidth + pixelPaddingLeft + pixelPaddingRight, this.pixelWidth);\n      var measuredHeight = $math.max(elementHeigth + pixelPaddingTop + pixelPaddingBottom, this.pixelHeight);\n      // extremes\n      var left = bbox.x;\n      var right = bbox.x + measuredWidth;\n      var top_1 = bbox.y;\n      var bottom = bbox.y + measuredHeight;\n      var horizontalCenter = this.horizontalCenter;\n      var verticalCenter = this.verticalCenter;\n      switch (horizontalCenter) {\n        case \"none\":\n          ex = elementX + pixelPaddingLeft;\n          break;\n        case \"left\":\n          ex = pixelPaddingLeft;\n          break;\n        case \"middle\":\n          ex = pixelPaddingLeft - (elementWidth + pixelPaddingRight + pixelPaddingLeft) / 2;\n          break;\n        case \"right\":\n          ex = -pixelPaddingRight - elementWidth;\n          break;\n      }\n      switch (verticalCenter) {\n        case \"none\":\n          ey = elementY + pixelPaddingTop;\n          break;\n        case \"top\":\n          ey = pixelPaddingTop;\n          break;\n        case \"middle\":\n          ey = pixelPaddingTop - (elementHeigth + pixelPaddingBottom + pixelPaddingTop) / 2;\n          break;\n        case \"bottom\":\n          ey = -pixelPaddingBottom - elementHeigth;\n          break;\n      }\n      this._measuredHeight = measuredHeight;\n      this._measuredWidth = measuredWidth;\n      var x = $math.round(ex - elementX, this._positionPrecision, true);\n      var y = $math.round(ey - elementY, this._positionPrecision, true);\n      this.ex = x - pixelPaddingLeft;\n      this.ey = y - pixelPaddingTop;\n      this.maxLeft = left + x - pixelPaddingLeft;\n      this.maxRight = right + x - pixelPaddingLeft;\n      this.maxTop = top_1 + y - pixelPaddingTop;\n      this.maxBottom = bottom + y - pixelPaddingTop;\n      if (this.pixelPerfect && options.pixelPerfectPrecision == 0) {\n        x -= 0.5;\n        y -= 0.5;\n      }\n      this.element.moveTo({\n        x: x,\n        y: y\n      });\n      if (prevElementTransform != this.element.transformString) {\n        this.dispatchImmediately(\"transformed\");\n      }\n    }\n  };\n  /**\r\n   * Measures the whole element.\r\n   *\r\n   * Returns `true` if the size has changed from the last measurement.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Did the size changed from the last measurement?\r\n   */\n  Sprite.prototype.measure = function () {\n    this.updateCenter();\n    var measuredWidth = this._measuredWidth;\n    var measuredHeight = this._measuredHeight;\n    // extremes\n    var left = this.maxLeft;\n    var right = this.maxRight;\n    var top = this.maxTop;\n    var bottom = this.maxBottom;\n    // non-parent wise size\n    this._measuredWidthSelf = measuredWidth;\n    this._measuredHeightSelf = measuredHeight;\n    var positionPrecision = this._positionPrecision;\n    this.maxLeftSelf = this.maxLeft;\n    this.maxRightSelf = this.maxRight;\n    this.maxTopSelf = this.maxTop;\n    this.maxBottomSelf = this.maxBottom;\n    // if a sprite is rotated or scaled, calculate measured size after transformations\n    if (this.rotation !== 0 || this.scale !== 1 || this.nonScaling) {\n      // not good to handleGlobalScale here.\n      if (this.nonScalingStroke) {\n        this.strokeWidth = this.strokeWidth;\n      }\n      var svg = this.paper.svg;\n      var matrix = svg.createSVGMatrix();\n      var rotation = this.rotation;\n      var scale = this.scale;\n      if (this.nonScaling) {\n        scale = this.scale / this.globalScale;\n      }\n      matrix.a = $math.cos(rotation) * scale;\n      matrix.c = -$math.sin(rotation) * scale;\n      matrix.e = 0;\n      matrix.b = $math.sin(rotation) * scale;\n      matrix.d = $math.cos(rotation) * scale;\n      matrix.f = 0;\n      var p1 = svg.createSVGPoint();\n      p1.x = left;\n      p1.y = top;\n      var p2 = svg.createSVGPoint();\n      p2.x = right;\n      p2.y = top;\n      var p3 = svg.createSVGPoint();\n      p3.x = right;\n      p3.y = bottom;\n      var p4 = svg.createSVGPoint();\n      p4.x = left;\n      p4.y = bottom;\n      var pt1 = p1.matrixTransform(matrix);\n      var pt2 = p2.matrixTransform(matrix);\n      var pt3 = p3.matrixTransform(matrix);\n      var pt4 = p4.matrixTransform(matrix);\n      left = Math.min(pt1.x, pt2.x, pt3.x, pt4.x);\n      right = Math.max(pt1.x, pt2.x, pt3.x, pt4.x);\n      top = Math.min(pt1.y, pt2.y, pt3.y, pt4.y);\n      bottom = Math.max(pt1.y, pt2.y, pt3.y, pt4.y);\n      measuredWidth = right - left;\n      measuredHeight = bottom - top;\n      this.maxLeft = $math.round(left, positionPrecision, true);\n      this.maxRight = $math.round(right, positionPrecision, true);\n      this.maxTop = $math.round(top, positionPrecision, true);\n      this.maxBottom = $math.round(bottom, positionPrecision, true);\n    }\n    this._measuredWidth = $math.round(measuredWidth, positionPrecision, true);\n    this._measuredHeight = $math.round(measuredHeight, positionPrecision, true);\n    // dispatch event\n    if (this._measuredWidth != this._prevMeasuredWidth || this._measuredHeight != this._prevMeasuredHeight) {\n      this._prevMeasuredHeight = this._measuredHeight;\n      this._prevMeasuredWidth = this._measuredWidth;\n      // TODO clear existing sizechanged dispatches ?\n      this.dispatch(\"sizechanged\");\n      if ((this.isHover || this.showTooltipOn == \"hit\" || this.showTooltipOn == \"always\") && this.tooltip && this.tooltip.visible && ($type.hasValue(this.tooltipText) || $type.hasValue(this.tooltipHTML))) {\n        this.updateTooltipPosition();\n      }\n      return true;\n    }\n    return false;\n  };\n  /**\r\n   * Insert this element before sibling element.\r\n   *\r\n   * @param sprite  Target element\r\n   * @return This element\r\n   */\n  Sprite.prototype.insertBefore = function (sprite) {\n    var parent = this._parent;\n    if (parent) {\n      var index = parent.children.indexOf(sprite);\n      if (index !== -1) {\n        parent.children.moveValue(this, index);\n        parent.sortChildren();\n      }\n    }\n    return this;\n  };\n  /**\r\n   * Insert this element after sibling element.\r\n   *\r\n   * @param sprite  Target element\r\n   * @return This element\r\n   */\n  Sprite.prototype.insertAfter = function (sprite) {\n    var parent = this._parent;\n    if (parent) {\n      var index = parent.children.indexOf(sprite);\n      if (index !== -1) {\n        parent.children.moveValue(this, index + 1);\n        parent.sortChildren();\n      }\n    }\n    return this;\n  };\n  /**\r\n   * Removes the main SVG element.\r\n   *\r\n   * This does not destroy the whole Sprite element. To do that use\r\n   * `dispose()` instead.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.removeElement = function () {\n    // remove visual element\n    if (this._element) {\n      this.removeDispose(this._element);\n      this._element = undefined;\n    }\n  };\n  /**\r\n   * Returns relative (percent) value of the X coordindate within this element.\r\n   *\r\n   * A relative value is a hundredth of a percent. So 100% would result in a 1\r\n   * as relative value.\r\n   *\r\n   * @param value  Absolute or relative X coordinate\r\n   * @return Relative value\r\n   */\n  Sprite.prototype.getRelativeX = function (value) {\n    if (value instanceof Percent) {\n      return value.value;\n    } else if (this._parent) {\n      return value / this._parent.innerWidth;\n    }\n    return 0;\n  };\n  /**\r\n   * Returns relative (percent) value of the Y coordindate within this element.\r\n   *\r\n   * A relative value is a hundredth of a percent. So 100% would result in a 1\r\n   * as relative value.\r\n   *\r\n   * @param value  Absolute or relative Y coordinate\r\n   * @return Relative value\r\n   */\n  Sprite.prototype.getRelativeY = function (value) {\n    if (value instanceof Percent) {\n      return value.value;\n    } else if (this._parent) {\n      return value / this._parent.innerHeight;\n    }\n    return 0;\n  };\n  /**\r\n   * Returns an X coordinate in pixel within the element.\r\n   *\r\n   * If number is passed in as parameter, the same number will be returned\r\n   * back.\r\n   *\r\n   * If [[Percent]] is passed in, it will be recalculated to pixels.\r\n   *\r\n   * @param value  Absolute or relative X coordinate\r\n   * @return X coordinate in pixels\r\n   */\n  Sprite.prototype.getPixelX = function (value) {\n    // we don't use $utils.valueToRelative as this would mean that we should access parent.innerWidth\n    // all the time and this would result chain of the same actions and will slow down the system a lot\n    var pixel = 0;\n    if ($type.isNumber(value)) {\n      pixel = value;\n    } else if (value instanceof Percent) {\n      var relative = value.value;\n      if (this._parent) {\n        pixel = $math.round(this._parent.innerWidth * relative, this._positionPrecision, true);\n      }\n    }\n    return pixel;\n  };\n  /**\r\n   * Returns an Y coordinate in pixel within the element.\r\n   *\r\n   * If number is passed in as parameter, the same number will be returned\r\n   * back.\r\n   *\r\n   * If [[Percent]] is passed in, it will be recalculated to pixels.\r\n   *\r\n   * @param value  Absolute or relative Y coordinate\r\n   * @return Y coordinate in pixels\r\n   */\n  Sprite.prototype.getPixelY = function (value) {\n    // we don't use $utils.valueToRelative as this would mean that we should access parent.innerWidth\n    // all the time and this would result chain of the same actions and will slow down the system a lot\n    var pixel = 0;\n    if ($type.isNumber(value)) {\n      pixel = value;\n    } else if (value instanceof Percent) {\n      var relative = value.value;\n      if (this._parent) {\n        pixel = $math.round(this._parent.innerHeight * relative, this._positionPrecision, true);\n      }\n    }\n    return pixel;\n  };\n  /**\r\n   * Moves the element to a specified coordinates.\r\n   *\r\n   * Using this method is preferred method of moving element, as it saves some\r\n   * CPU processing power over setting `x` and `y` properties separately.\r\n   *\r\n   * The method respects element's center settings. The element will be\r\n   * positioned so that `point` coordinates come in whatever \"center\" of the\r\n   * element is, as set in `horizontalCenter` and `verticalCenter`.\r\n   *\r\n   * Besides moving the element, you can also at the same time scale and\r\n   * rotate the element.\r\n   *\r\n   * @param point     New coordinates\r\n   * @param rotation  New rotation\r\n   * @param scale     New Scale\r\n   */\n  Sprite.prototype.moveTo = function (point, rotation, scale, isDragged) {\n    if (this.isDragged && !isDragged) {\n      return;\n    }\n    if (point) {\n      if ($type.isNumber(point.x)) {\n        this.setPropertyValue(\"x\", $math.round(point.x, this._positionPrecision, true));\n      }\n      if ($type.isNumber(point.y)) {\n        this.setPropertyValue(\"y\", $math.round(point.y, this._positionPrecision, true));\n      }\n    }\n    if ($type.isNumber(rotation)) {\n      this.rotation = rotation;\n    }\n    if ($type.isNumber(scale)) {\n      this.scale = scale;\n    }\n    // must leave this\n    this.invalidatePosition();\n  };\n  Object.defineProperty(Sprite.prototype, \"mask\", {\n    /**\r\n     * Returns [[Sprite]] element currently used as mask for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return A [[Sprite]] to use as mask\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        return this._mask.get();\n      } else {\n        return this._adapterO.apply(\"mask\", this._mask.get());\n      }\n    },\n    /**\r\n     * Sets another [[Sprite]] element as this elements mask.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param mask A [[Sprite]] to use as mask\r\n     */\n    set: function (mask) {\n      var _this = this;\n      if (this._mask.get() !== mask) {\n        // this is good\n        if (mask) {\n          this.createClipPath();\n          if (!(mask instanceof Container)) {\n            mask.isMeasured = false;\n            if (mask.element) {\n              this._clipElement = mask.element;\n            }\n          } else {\n            this._clipElement = this.paper.add(\"rect\");\n          }\n          if (this._clipElement) {\n            this._clipPath.add(this._clipElement);\n          }\n          this._mask.set(mask, new MultiDisposer([\n          //mask.addEventListener(SpriteEvent.TRANSFORMED, this.applyMask, false, this);\n          mask.events.on(\"maxsizechanged\", function () {\n            if (_this.inited) {\n              _this.applyMask();\n            }\n          }, undefined, false), mask.events.on(\"validated\", this.applyMask, this, false), mask.events.on(\"positionchanged\", this.applyMask, this, false)]));\n          this.applyMask();\n        } else {\n          this._mask.reset();\n          this.group.removeAttr(\"clip-path\");\n          this.removeClipPath();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"maskRectangle\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Mask Rectangle\r\n     */\n    get: function () {\n      return this._maskRectangle;\n    },\n    // you can set IRectangle as a mask instead o a sprite. Note, the changes of the object won't be monitored\n    /**\r\n     * Instead of creating a [[Sprite]] for mask, you can just use a\r\n     * [[Rectangle]] by setting this accessor.\r\n     *\r\n     * Please note that the element will not monitor any changes to the mask\r\n     * rectangle.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param rect Mask Rectangle\r\n     */\n    set: function (rect) {\n      if (rect) {\n        this.createClipPath();\n        if (!this._clipElement) {\n          this._clipElement = this.paper.add(\"rect\");\n          this._clipPath.add(this._clipElement);\n        }\n        this._clipElement.attr({\n          \"width\": rect.width,\n          \"height\": rect.height\n        });\n      } else {\n        this.removeClipPath();\n        this._clipElement = undefined;\n      }\n      this._maskRectangle = rect;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isMeasured\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Was element already measured?\r\n     */\n    get: function () {\n      return this._isMeasured;\n    },\n    /**\r\n     * Indicates if this element was already measured.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Was element already measured?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (!value) {\n        this._measuredWidth = 0;\n        this._measuredHeight = 0;\n        //this._pixelHeight = 0;\n        //this._pixelWidth = 0;\n      }\n\n      if (this._isMeasured != value) {\n        this._isMeasured = value;\n        this.invalidatePosition();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Checks if the this element has any of its parts overlapping with another\r\n   * element.\r\n   *\r\n   * @todo Description (review)\r\n   * @param sprite  Second element to test again\r\n   * @return Overlapping?\r\n   */\n  Sprite.prototype.hitTest = function (sprite) {\n    // validate, otherwise we will not know measuredWidth and measuredHeight\n    if (this.invalid) {\n      this.validate();\n    }\n    if (sprite.invalid) {\n      sprite.validate();\n    }\n    var ax1 = this.pixelX + this.maxLeft;\n    var ay1 = this.pixelY + this.maxTop;\n    var ax2 = ax1 + this.maxRight;\n    var ay2 = ay1 + this.maxBottom;\n    var bx1 = sprite.pixelX + sprite.maxLeft;\n    var by1 = sprite.pixelY + sprite.maxTop;\n    var bx2 = bx1 + sprite.maxRight;\n    var by2 = by1 + sprite.maxBottom;\n    return !(bx1 > ax2 || bx2 < ax1 || by1 > ay2 || by2 < ay1);\n  };\n  Object.defineProperty(Sprite.prototype, \"inited\", {\n    /**\r\n     * ==========================================================================\r\n     * STATE-RELATED\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Returns `true` if Sprite has already finished initializing.\r\n     *\r\n     * @return Initialized?\r\n     */\n    get: function () {\n      return this._inited;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns `true` if Sprite has already finished initializing and is ready.\r\n   *\r\n   * If this object is a [[Container]] it will wait for all of its children\r\n   * are ready before becoming ready itself and firing a `\"ready\"` event.\r\n   *\r\n   * @return is ready?\r\n   */\n  Sprite.prototype.isReady = function () {\n    return this._ready;\n  };\n  Object.defineProperty(Sprite.prototype, \"states\", {\n    /**\r\n     * Returns a collection of element's available [[SpriteState]] entries.\r\n     *\r\n     * @see {@link SpriteState}\r\n     * @return States\r\n     */\n    get: function () {\n      if (!this._states) {\n        var state = new SpriteState();\n        // works\n        this._states = new DictionaryTemplate(state);\n        // TODO what about removeKey ?\n        this._disposers.push(this._states.events.on(\"insertKey\", this.processState, this, false));\n        this._disposers.push(this._states.events.on(\"setKey\", this.processState, this, false));\n        this._disposers.push(new DictionaryDisposer(this._states));\n        this._disposers.push(state);\n      }\n      return this._states;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"hiddenState\", {\n    /**\r\n     * Returns a [[SpriteState]] object for \"hidden\" state.\r\n     *\r\n     * This is a shortcut to `this.states.getKey(\"hidden\")`.\r\n     *\r\n     * @return Hidden state\r\n     */\n    get: function () {\n      if (!this.states.getKey(\"hidden\")) {\n        var hiddenState = this.states.create(\"hidden\");\n        hiddenState.properties.opacity = 0;\n        hiddenState.properties.visible = false;\n      }\n      return this.states.getKey(\"hidden\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"defaultState\", {\n    /**\r\n     * Returns a [[SpriteState]] object for \"default\" state.\r\n     *\r\n     * This is a shortcut to `this.states.getKey(\"default\")`.\r\n     *\r\n     * @return Hidden state\r\n     */\n    get: function () {\n      if (!this.states.getKey(\"default\")) {\n        var defaultState = this.states.create(\"default\");\n        defaultState.properties.opacity = 1;\n      }\n      return this.states.getKey(\"default\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Checks if some key states are defined and updates Sprite properties\r\n   * accordingly.\r\n   *\r\n   * For example if there's a state \"down\" defined for Sprite, we automatically\r\n   * make it \"clickable\".\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event An event which caused state list update\r\n   */\n  Sprite.prototype.processState = function (event) {\n    var state = event.newValue;\n    state.sprite = this;\n    state.name = event.key;\n    if (this.states.hasKey(\"hover\") || this.showTooltipOn == \"hover\" && ($type.hasValue(this.tooltipHTML) || $type.hasValue(this.tooltipText))) {\n      this.hoverable = true;\n    }\n    if (this.states.hasKey(\"down\") || this.showTooltipOn == \"hover\" && ($type.hasValue(this.tooltipHTML) || $type.hasValue(this.tooltipText))) {\n      this.clickable = true;\n    }\n    if (this.states.hasKey(\"focus\")) {\n      this.focusable = true;\n    }\n    // Propagate the new state to clones\n    if (this.applyOnClones) {\n      var clones = this.clones.values;\n      var length_1 = clones.length;\n      for (var i = 0; i < length_1; ++i) {\n        var clone = clones[i];\n        if (!clone.isDisposed()) {\n          clone.states.setKey(state.name, state);\n        }\n      }\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"animations\", {\n    /**\r\n     * Returns a list elements's animations currently being played.\r\n     *\r\n     * If the list has not been initialized it is created.\r\n     *\r\n     * @return List of animations\r\n     */\n    get: function () {\n      if (!this._animations) {\n        this._animations = [];\n        this._disposers.push(new AnimationDisposer(this._animations));\n      }\n      return this._animations;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts element's local coordinates to the coordinates within the main\r\n   * chart container.\r\n   *\r\n   * @param point  Local point\r\n   * @return Global point\r\n   */\n  Sprite.prototype.getSvgPoint = function (point) {\n    try {\n      // Calculate SVG point\n      var bbox = this.htmlContainer.getBoundingClientRect();\n      return {\n        \"x\": point.x - bbox.left,\n        \"y\": point.y - bbox.top\n      };\n    } catch (e) {\n      return point;\n    }\n  };\n  /**\r\n   * Creates and starts an [[Animation]] with given `animationOptions`.\r\n   *\r\n   * @see {@link Animation} for additional information about available options\r\n   * @param animationOptions  Animation options\r\n   * @param duration          Duration in milliseconds\r\n   * @param easing            Easing function\r\n   * @return Animation instance\r\n   */\n  Sprite.prototype.animate = function (animationOptions, duration, easing) {\n    return new Animation(this, animationOptions, duration, easing).start();\n  };\n  /**\r\n   * Applies a [[SpriteState]] on this element.\r\n   *\r\n   * The first parameter can either be a name state or a [[SpriteState]]\r\n   * instance.\r\n   *\r\n   * When run, this method will apply SVG properties defined in a\r\n   * [[SpriteState]], but only those that are relevant to this particular\r\n   * element, i.e. are in the `properties` array.\r\n   *\r\n   * @see {@link SpriteState}\r\n   * @param value               A state - name key or instance\r\n   * @param transitionDuration  Duration of the transition between current and new state\r\n   * @param easing              An easing function\r\n   */\n  Sprite.prototype.setState = function (value, transitionDuration, easing) {\n    var state;\n    if (value instanceof SpriteState) {\n      this.states.setKey(value.name, value);\n      state = value;\n    } else {\n      state = this.states.getKey(value);\n      if (!state) {\n        return;\n      }\n    }\n    // stop previous transition\n    // not good - foe expample, we are animating to some \"active\" state and in them middle \"hover\" state happens. then \"active\" stat won't be applied\n    //if (this._transition) {\n    //this._transition.stop();\n    //}\n    if (state.name == \"hover\") {\n      if (this.isHidden) {\n        return;\n      }\n      this.isHover = true;\n    }\n    if (state.name == \"hidden\") {\n      this.isHiding = true;\n    } else {\n      if (!this.visible) {\n        this.setVisibility(state.properties.visible || this.defaultState.properties.visible);\n      }\n    }\n    if (state.name == \"active\") {\n      this.isActive = true;\n    }\n    // we do not set isActive = false here if it's not active, but container does that if setStateOnChildren = true\n    if (!$type.isNumber(transitionDuration)) {\n      transitionDuration = state.transitionDuration;\n    }\n    if (!$type.hasValue(easing)) {\n      easing = state.transitionEasing;\n    }\n    return this.transitTo(state, transitionDuration, easing);\n  };\n  /**\r\n   * Applies proper state based on the condition of the element. A condition is\r\n   * deducted in this order:\r\n   * * \"hover\" if Sprite has currently any pointers over it\r\n   * * \"down\" if Sprite has any pointers (touch or mouse) currently pressed over it\r\n   * * \"focus\" if Sprite has currently got focus (accessibility)\r\n   * * \"hidden\" if Sprite is currently hidden\r\n   *\r\n   * Returns an [[Animation]] object, which is handling gradual transition from\r\n   * current values of properties, to the new target state(s).\r\n   *\r\n   * @param duration  Duration for the animation (ms)\r\n   * @return [[Animation]] object which is handling the transition\r\n   */\n  Sprite.prototype.applyCurrentState = function (duration) {\n    //if (!this.isHidden) { // this was done for hover state not to take effect if \"hidden\" is actually visible, need to think about it.\n    var animation = this.setState(this.defaultState, duration);\n    if (this.isHover) {\n      animation = this.setState(\"hover\", duration);\n    }\n    if (this.isDown && this.interactions.downPointers.length) {\n      animation = this.setState(\"down\", duration);\n    }\n    this.isFocused = this.isFocused;\n    if (this.isActive) {\n      animation = this.setState(\"active\", duration);\n      if (this.isHover && this.states.hasKey(\"hoverActive\")) {\n        animation = this.setState(\"hoverActive\", duration);\n      }\n    }\n    return animation;\n    //}\n  };\n  /**\r\n   * Starts an [[Animation]] of the properties to specific values as they are\r\n   * set in `state`.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param state     Target State\r\n   * @param duration  Duration in milliseconds\r\n   * @param easing    Easing function\r\n   * @return Transition Animation\r\n   */\n  Sprite.prototype.transitTo = function (state, duration, easing) {\n    var _this = this;\n    // Init\n    var options = [],\n      propValues = state.allValues,\n      transition;\n    // todo: do this for numeric/color properties only?\n    // @todo use state.getPropertyValue instead\n    $object.each(propValues, function (propertyName, finalValue) {\n      var currentValue = _this[propertyName];\n      // save current value to default state. this solves a big problem where values must be set both on sprite and default state\n      if (finalValue != currentValue && _this.defaultState.properties[propertyName] == undefined) {\n        _this.defaultState.properties[propertyName] = currentValue;\n      }\n      //if (finalValue != currentValue && $type.hasValue(finalValue)) {\n      if (finalValue != \"__unset\") {\n        var option = {\n          from: currentValue,\n          to: finalValue,\n          property: propertyName\n        };\n        options.push(option);\n      }\n    });\n    if (options.length > 0) {\n      transition = this.animate(options, duration, easing);\n      if (transition && !transition.isFinished()) {\n        // TODO should this use events.once ?\n        // TODO push onto _disposers array ?\n        this._disposers.push(transition.events.on(\"animationended\", function () {\n          _this.dispatchImmediately(\"transitionended\");\n        }));\n      } else {\n        this.dispatchImmediately(\"transitionended\");\n      }\n    }\n    // apply filters if set\n    if (state.filters.length > 0) {\n      var newFilters_1 = [];\n      // check for the same filters\n      $iter.each(state.filters.iterator(), function (stateFilter) {\n        var newFilter = stateFilter.clone();\n        newFilters_1.push(newFilter);\n        var animationOptions = [];\n        $iter.each(_this.filters.iterator(), function (currentFilter) {\n          // if we have the same filters\n          if (currentFilter.className == newFilter.className) {\n            if (!$iter.contains(_this.defaultState.filters.iterator(), function (x) {\n              return x.className === newFilter.className;\n            })) {\n              _this.defaultState.filters.push(currentFilter);\n            }\n            $object.each(newFilter.properties, function (propertyName, newValue) {\n              var currentValue = currentFilter.properties[propertyName];\n              // if values are not the same, push to animation options array\n              if (currentValue != newValue) {\n                animationOptions.push({\n                  property: propertyName,\n                  from: currentValue,\n                  to: newValue\n                });\n              }\n            });\n          }\n        });\n        // animate to new value\n        newFilter.animate(animationOptions, duration, easing);\n      });\n      this.filters.clear();\n      this.filters.pushAll(newFilters_1);\n    }\n    return transition;\n  };\n  /**\r\n   * Returns `true` if Sprite is currently transiting from one state/value to\r\n   * another.\r\n   *\r\n   * @return Is in transition?\r\n   */\n  Sprite.prototype.isInTransition = function () {\n    return this.animations.length > 0;\n  };\n  Object.defineProperty(Sprite.prototype, \"isHover\", {\n    /**\r\n     * @return Is hovered?\r\n     */\n    get: function () {\n      if (this.isInteractive()) {\n        return this.interactions.isHover;\n      }\n      return false;\n    },\n    /**\r\n     * Indicates if this element has a mouse pointer currently hovering\r\n     * over it, or if it has any touch pointers pressed on it.\r\n     *\r\n     * You can force element to be \"hovered\" manually, by setting this property\r\n     * to `true`.\r\n     *\r\n     * @param value Is hovered?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (value !== this.isHover) {\n        if (this.isInteractive()) {\n          this.interactions.isHover = value;\n          if (value) {\n            this.handleOver();\n          } else {\n            this.interactions.isRealHover = false;\n            this.handleOut();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isDragged\", {\n    /**\r\n     * Returns indicator if this element is being dragged at the moment.\r\n     *\r\n     * @return Is dragged?\r\n     */\n    get: function () {\n      return this._isDragged;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isResized\", {\n    /**\r\n     * Returns indicator if this element is being resized at the moment.\r\n     *\r\n     * @return Is resized?\r\n     */\n    get: function () {\n      return this._isResized;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isDown\", {\n    /**\r\n     * @return Is down?\r\n     */\n    get: function () {\n      if (this.isInteractive()) {\n        return this.interactions.isDown;\n      }\n      return false;\n    },\n    /**\r\n     * Indicates if this element has any pointers (mouse or touch) pressing down\r\n     * on it.\r\n     *\r\n     * @param value Is down?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (this.isInteractive() && this.isDown != value) {\n        this.interactions.isDown = value;\n        if (value) {\n          this.handleDown();\n        } else {\n          this.handleUp();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isFocused\", {\n    /**\r\n     * @return Is focused?\r\n     */\n    get: function () {\n      if (this.isInteractive()) {\n        return this.interactions.isFocused;\n      }\n      return false;\n    },\n    /**\r\n     * Indicates if this element is focused (possibly by tab navigation).\r\n     *\r\n     * @param value Is focused?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (this.focusable && this.isFocused != value) {\n        if (this.isInteractive()) {\n          this.interactions.isFocused = value;\n          if (value === true) {\n            this.handleFocus();\n          } else {\n            this.handleBlur();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isActive\", {\n    /**\r\n     * @return Is active?\r\n     */\n    get: function () {\n      return this._isActive;\n    },\n    /**\r\n     * Indicates if this element is currently active (toggled on) or not\r\n     * (toggled off).\r\n     *\r\n     * @param value Is active?\r\n     */\n    set: function (value) {\n      this.setActive(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Sprite.prototype.setActive = function (value) {\n    value = $type.toBoolean(value);\n    if (this._isActive !== value) {\n      this._isActive = value;\n      if (value && this.states.hasKey(\"active\")) {\n        this.setState(\"active\");\n        if (this.isHover && this.states.hasKey(\"hoverActive\")) {\n          this.setState(\"hoverActive\");\n        }\n      } else {\n        this.applyCurrentState();\n      }\n      this.dispatchImmediately(\"toggled\");\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"disabled\", {\n    /**\r\n     * @return Disabled?\r\n     */\n    get: function () {\n      //if(this._internalDisabled){\n      //\treturn true;\n      //}\n      var current = this.getPropertyValue(\"disabled\");\n      if ($type.hasValue(current)) {\n        return current;\n      } else {\n        if (this.virtualParent) {\n          return this.virtualParent.disabled;\n        }\n        if (this._parent) {\n          return this._parent.disabled;\n        }\n      }\n      return false;\n    },\n    /**\r\n     * Controls if element is disabled.\r\n     *\r\n     * A disabled element is hidden, and is removed from any processing, layout\r\n     * calculations, and generally treated as if it does not exist.\r\n     *\r\n     * The element itself is not destroyed, though. Setting this back to `false`,\r\n     * will \"resurrect\" the element.\r\n     *\r\n     * @param value  Disabled?\r\n     */\n    set: function (value) {\n      this.setDisabled(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Sprite.prototype.setDisabled = function (value) {\n    value = $type.toBoolean(value);\n    var current = this.getPropertyValue(\"disabled\");\n    if (current != value) {\n      this.setPropertyValue(\"disabled\", value, true);\n      if (value) {\n        this.parent = this._parent;\n        this.removeFromInvalids();\n        this.group.attr({\n          \"display\": \"none\"\n        });\n        this.dispatch(\"disabled\");\n      } else {\n        if (this._parent) {\n          var group = this._parent.element;\n          if (!group.hasChild(this.group)) {\n            group.add(this.group);\n          }\n        }\n        if (this instanceof Container) {\n          this.deepInvalidate();\n          if (this._background) {\n            this._background.invalidate();\n          }\n        } else {\n          this.invalidate();\n        }\n        if (!this.__disabled) {\n          this.removeSVGAttribute(\"display\");\n        }\n        this.dispatch(\"enabled\");\n      }\n      this.dispatch(\"transformed\");\n      system.requestFrame();\n      return true;\n    }\n    return false;\n  };\n  Object.defineProperty(Sprite.prototype, \"__disabled\", {\n    /**\r\n     * @ignore\r\n     * @return Disabled?\r\n     */\n    get: function () {\n      return this._internalDisabled;\n    },\n    /**\r\n     * Internal disable method.\r\n     *\r\n     * Do not use it for disabling elements. Use `disabled` accessor instead.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Disabled?\r\n     */\n    set: function (value) {\n      if (this._internalDisabled != value) {\n        this._internalDisabled = value;\n        this._updateDisabled = true;\n        this.invalidatePosition(); // better use this instead of invalidate()\n        if (!value) {\n          this.invalidate();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"numberFormatter\", {\n    /**\r\n     * @return A [[NumberFormatter]] instance to be used\r\n     */\n    get: function () {\n      if (this._numberFormatter) {\n        return this._numberFormatter;\n      } else if (this.virtualParent) {\n        return this.virtualParent.numberFormatter;\n      } else if (this._parent) {\n        return this._parent.numberFormatter;\n      }\n      this._numberFormatter = new NumberFormatter();\n      this._numberFormatter.language = this.language;\n      return this.numberFormatter;\n    },\n    /**\r\n     * ==========================================================================\r\n     * FORMATTERS AND OTHER EXTERNAL HELPERS\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * A [[NumberFormatter]] instance.\r\n     *\r\n     * This is used to format numbers.\r\n     *\r\n     * ```TypeScript\r\n     * chart.numberFormatter.numberFormat = \"#,###.#####\";\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.numberFormatter.numberFormat = \"#,###.#####\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"numberFormatter\": {\r\n     *     \"numberFormat\": \"#,###.#####\"\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * You can set a separate instance of formatter for each\r\n     * individual element. However that would be unnecessary overhead as\r\n     * all elements would automatically inherit formatter from their parents,\r\n     * all the way up to the chart itself.\r\n     *\r\n     *\r\n     * @see {@link NumberFormatter} for more info on formatting numbers\r\n     * @param value  An instance of NumberFormatter\r\n     */\n    set: function (value) {\n      this._numberFormatter = value;\n      this._numberFormatter.language = this.language;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"dateFormatter\", {\n    /**\r\n     * @return An instance of DateFormatter\r\n     */\n    get: function () {\n      if (this._dateFormatter) {\n        return this._dateFormatter;\n      } else if (this.virtualParent) {\n        return this.virtualParent.dateFormatter;\n      } else if (this._parent) {\n        return this._parent.dateFormatter;\n      }\n      this._dateFormatter = new DateFormatter();\n      this._dateFormatter.language = this.language;\n      return this.dateFormatter;\n    },\n    /**\r\n     * A [[DateFormatter]] instance.\r\n     *\r\n     * This is used to format dates, e.g. on a date axes, balloons, etc.\r\n     *\r\n     * ```TypeScript\r\n     * chart.dateFormatter.dateFormat = \"yyyy-MM-dd\";\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.dateFormatter.dateFormat = \"yyyy-MM-dd\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"dateFormatter\": {\r\n     *     \"dateFormat\": \"yyyy-MM-dd\"\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * You can set a separate instance of formatter for each\r\n     * individual element. However that would be unnecessary overhead as\r\n     * all elements would automatically inherit formatter from their parents,\r\n     * all the way up to the chart itself.\r\n     *\r\n     * @see {@link DateFormatter} for more info on dates formatting\r\n     * @param value  An instance of DateFormatter\r\n     */\n    set: function (value) {\n      this._dateFormatter = value;\n      this._dateFormatter.language = this.language;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"durationFormatter\", {\n    /**\r\n     * @return An instance of DurationFormatter\r\n     */\n    get: function () {\n      if (this._durationFormatter) {\n        return this._durationFormatter;\n      } else if (this.virtualParent) {\n        return this.virtualParent.durationFormatter;\n      } else if (this._parent) {\n        return this._parent.durationFormatter;\n      }\n      this._durationFormatter = new DurationFormatter();\n      this._durationFormatter.language = this.language;\n      return this.durationFormatter;\n    },\n    /**\r\n     * A [[DurationFormatter]] instance.\r\n     *\r\n     * This is used to format numbers as durations, e.g. on a value axes.\r\n     *\r\n     * You can set a separate instance of formatter for each\r\n     * individual element. However that would be unnecessary overhead as\r\n     * all elements would automatically inherit formatter from their parents,\r\n     * all the way up to the chart itself.\r\n     *\r\n     * @see {@link DurationFormatter} for more info on durations\r\n     * @param value  An instance of DurationFormatter\r\n     */\n    set: function (value) {\n      this._durationFormatter = value;\n      this._durationFormatter.language = this.language;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"language\", {\n    /**\r\n     * @return An instance of Language\r\n     */\n    get: function () {\n      var language = this._language.get();\n      if (language) {\n        return language;\n      } else if (this.virtualParent) {\n        return this.virtualParent.language;\n      } else if (this._parent) {\n        return this._parent.language;\n      }\n      language = new Language();\n      this.language = language;\n      return language;\n    },\n    /**\r\n     * A [[Language]] instance to use for translations.\r\n     *\r\n     * Normally it is enough to set language for the top-most element - chart.\r\n     *\r\n     * All other element child elements will automatically re-use that language\r\n     * object.\r\n     *\r\n     * @param value  An instance of Language\r\n     */\n    set: function (value) {\n      var _this = this;\n      if (this._language.get() !== value) {\n        this._language.set(value, value.events.on(\"localechanged\", function (ev) {\n          if (_this._numberFormatter) {\n            _this._numberFormatter.language = _this.language;\n          }\n          if (_this._dateFormatter) {\n            _this._dateFormatter.language = _this.language;\n          }\n          if (_this._durationFormatter) {\n            _this._durationFormatter.language = _this.language;\n          }\n          if (_this._exporting.get()) {\n            var exporting = _this._exporting.get();\n            exporting.numberFormatter.language = _this.language;\n            exporting.dateFormatter.language = _this.language;\n            exporting.durationFormatter.language = _this.language;\n            exporting.language = _this.language;\n          }\n          if (_this instanceof Container) {\n            _this.deepInvalidate();\n          }\n        }));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * ==========================================================================\r\n   * DATA-RELATED STUFF\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n  /**\r\n   * Parses the string for meta tags `{tag}` and replaces them with a real\r\n   * value. Supports straight up tags referring to the field in data, i.e.\r\n   * `{value}` or tags with additional formatting info. E.g.:\r\n   *\r\n   * ```Text\r\n   * {myfield.formatDate(\"yyyy-MM-dd\")}\r\n   * {myfield.formatDate()}\r\n   * {myfield.formatNumber(\"#,####.00\")}\r\n   * {myfield.formatNumber()}\r\n   * {myField.formatDuration(\"mm:ss\")}\r\n   * ```\r\n   *\r\n   * Etc.\r\n   *\r\n   * This method Will automatically detect and use proper formatter for the\r\n   * value.\r\n   *\r\n   * The source value will be looked up in various places: (in order)\r\n   * * Sprite's own `dataItem`\r\n   * * Sprite's properties\r\n   * * Parent's `dataItem`\r\n   * * Parent's properties\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param string            A string to format\r\n   * @param dataItem          DataItem\r\n   * @return Formatted string\r\n   */\n  Sprite.prototype.populateString = function (string, dataItem) {\n    if ($type.hasValue(string)) {\n      string = $type.castString(string);\n      string = getTextFormatter().escape(string);\n      var tags = string.match(/\\{([^}]+)\\}/g);\n      var i = void 0;\n      if (tags) {\n        for (i = 0; i < tags.length; i++) {\n          var tag = tags[i].replace(/\\{([^}]+)\\}/, \"$1\");\n          var value = this.getTagValue(tag, \"\", dataItem);\n          if (!$type.hasValue(value)) {\n            value = \"\";\n          }\n          string = string.split(tags[i]).join(value);\n        }\n      }\n      string = getTextFormatter().unescape(string);\n    } else {\n      string = \"\";\n    }\n    if (!this._adapterO) {\n      return string;\n    } else {\n      return this._adapterO.apply(\"populateString\", string);\n    }\n  };\n  /**\r\n   * Gets the value from data item and formats it according to specified format.\r\n   *\r\n   * If `format` is specified, it will use its contents to choose formatter for\r\n   * the value. Otherwise it will select formatter accordingly to actual value\r\n   * type.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Ability to force certain formatter on known numeric and date values\r\n   * @see {@link NumberFormatter}\r\n   * @see {@link DateFormatter}\r\n   * @see {@link DurationFormatter}\r\n   * @param tagName           Tag name to replace\r\n   * @param format            Format to use\r\n   * @param dataItem          DataItem\r\n   * @return Formatted value\r\n   */\n  Sprite.prototype.getTagValue = function (tagName, format, dataItem) {\n    var value;\n    if (!$type.hasValue(dataItem)) {\n      dataItem = this.dataItem;\n    }\n    // Parse parts\n    var parts = [];\n    var reg = /([^.]+)\\(([^)]*)\\)|([^.]+)/g;\n    ;\n    var matches;\n    while (true) {\n      matches = reg.exec(tagName);\n      if (matches === null) {\n        break;\n      }\n      if (matches[3]) {\n        // Simple property\n        parts.push({\n          prop: matches[3]\n        });\n      } else {\n        // Method\n        // Parse parameters\n        var params = [];\n        if ($utils.trim(matches[2]) != \"\") {\n          var reg2 = /'([^']*)'|\"([^\"]*)\"|([0-9\\-]+)/g;\n          var matches2 = void 0;\n          while (true) {\n            matches2 = reg2.exec(matches[2]);\n            if (matches2 === null) {\n              break;\n            }\n            params.push(matches2[1] || matches2[2] || matches2[3]);\n          }\n        }\n        parts.push({\n          method: matches[1],\n          params: params\n        });\n      }\n    }\n    // Check if we can retrieve the value from data item\n    if (dataItem) {\n      // Check values\n      value = this.getTagValueFromObject(parts, dataItem.values);\n      // Check properties\n      if (!$type.hasValue(value) || $type.isObject(value)) {\n        // isObject helps to solve problem with date axis, as for example dateX will get dateX from values object and won't get to the dateX date.\n        value = this.getTagValueFromObject(parts, dataItem);\n      }\n      // Check data context\n      var dataContext = dataItem.dataContext;\n      if (!$type.hasValue(value) && dataContext) {\n        value = this.getTagValueFromObject(parts, dataItem.dataContext);\n        // Maybe it's a literal dot-separated name of the key in dataContext?\n        if (!$type.hasValue(value)) {\n          value = this.getTagValueFromObject([{\n            prop: tagName\n          }], dataContext);\n        }\n        // scond data context level sometimes exist (tree map)\n        if (!$type.hasValue(value) && dataContext.dataContext) {\n          value = this.getTagValueFromObject(parts, dataContext.dataContext);\n        }\n      }\n      // Check component's data item\n      if (!$type.hasValue(value) && dataItem.component && dataItem.component.dataItem !== dataItem) {\n        value = dataItem.component.getTagValue(tagName, format);\n      }\n    }\n    // Check sprite's properties\n    if (!$type.hasValue(value)) {\n      value = this.getTagValueFromObject(parts, this.populateStringFrom || this);\n    }\n    // Finally, check the parent\n    if (!$type.hasValue(value) && this._parent) {\n      value = this._parent.getTagValue(tagName, format);\n    }\n    return value;\n  };\n  /**\r\n   * Tries to retrieve values from properties of any object, then applies\r\n   * proper formatting to it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (improve)\r\n   * @param parts   Properties ant methods to access\r\n   * @param object  Source object\r\n   * @param format  A specific format to apply\r\n   * @return Formatted value\r\n   */\n  Sprite.prototype.getTagValueFromObject = function (parts, object, format) {\n    var current = object;\n    var formatApplied = false;\n    for (var i = 0, len = parts.length; i < len; i++) {\n      var part = parts[i];\n      if (part.prop) {\n        // Regular property\n        current = current[part.prop];\n        if (!$type.hasValue(current)) {\n          // Not set, return undefined\n          return;\n        }\n      } else {\n        // Method\n        switch (part.method) {\n          case \"formatNumber\":\n            var numberValue = $utils.anyToNumber(current);\n            if ($type.hasValue(numberValue)) {\n              current = this.numberFormatter.format(numberValue, format || part.params[0] || undefined);\n              formatApplied = true;\n            }\n            break;\n          case \"formatDate\":\n            var dateValue = void 0;\n            if ($type.isString(current)) {\n              dateValue = this.dateFormatter.parse(current);\n            } else {\n              dateValue = $utils.anyToDate(current);\n            }\n            if (!$type.isDate(dateValue) || $type.isNaN(dateValue.getTime())) {\n              // Was not able to get date out of value, quitting and letting\n              // calling method try another value\n              return;\n            }\n            if ($type.hasValue(dateValue)) {\n              current = this.dateFormatter.format(dateValue, format || part.params[0] || undefined);\n              formatApplied = true;\n            }\n            break;\n          case \"formatDuration\":\n            var durationValue = $utils.anyToNumber(current);\n            if ($type.hasValue(durationValue)) {\n              current = this.durationFormatter.format(durationValue, format || part.params[0] || undefined, part.params[1] || undefined);\n              formatApplied = true;\n            }\n            break;\n          case \"urlEncode\":\n          case \"encodeURIComponent\":\n            current = encodeURIComponent(current);\n            break;\n          default:\n            if (current[part.method]) {\n              current[part.method].apply(this, part.params);\n            }\n            break;\n        }\n      }\n    }\n    // Apply default format if it wasn't applied explicitly\n    if (!formatApplied) {\n      var formatParts = [{\n        method: \"\",\n        params: format\n      }];\n      if (!$type.hasValue(format)) {\n        // Format is not set\n        // Determine from the type of the value\n        if ($type.isNumber(current)) {\n          formatParts[0].method = \"formatNumber\";\n          formatParts[0].params = \"\";\n        } else if ($type.isDate(current)) {\n          formatParts[0].method = \"formatDate\";\n          formatParts[0].params = \"\";\n        }\n      } else {\n        // Format set\n        // Try to determine formatter based on the format\n        var formatterType = $utils.getFormat(format);\n        // format\n        if (formatterType === $strings.NUMBER) {\n          formatParts[0].method = \"formatNumber\";\n        } else if (formatterType === $strings.DATE) {\n          formatParts[0].method = \"formatDate\";\n        } else if (formatterType === $strings.DURATION) {\n          formatParts[0].method = \"formatDuration\";\n        }\n      }\n      // Apply format\n      if (formatParts[0].method) {\n        current = this.getTagValueFromObject(formatParts, current);\n      }\n    }\n    return current;\n  };\n  Object.defineProperty(Sprite.prototype, \"dataItem\", {\n    /**\r\n     * @return [[DataItem]]\r\n     */\n    get: function () {\n      if (!this._dataItem) {\n        if (this.virtualParent) {\n          return this.virtualParent.dataItem;\n        }\n        if (this._parent) {\n          return this._parent.dataItem;\n        }\n      }\n      return this._dataItem;\n    },\n    /**\r\n     * A [[DataItem]] to use as element's data source.\r\n     *\r\n     * @todo Review type\r\n     * @param dataItem  DataItem\r\n     */\n    set: function (dataItem) {\n      //an not use this[\"_dataItem\"] here, as we return parent data item if this sprite doesn't have one.\n      // @todo:think about it\n      this.setDataItem(dataItem);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets currently used [[DataItem]].\r\n   *\r\n   * If the element has also `configField` set, it will also look for any\r\n   * config in DataItem's data context to apply to this element.\r\n   *\r\n   * @param dataItem DataItem\r\n   */\n  Sprite.prototype.setDataItem = function (dataItem) {\n    var _this = this;\n    if (this._dataItem != dataItem) {\n      this._dataItem = dataItem;\n      if (dataItem) {\n        if (this.configField) {\n          var dataContext_1 = dataItem.dataContext;\n          if (dataContext_1) {\n            this.config = dataContext_1[this.configField];\n            if (!this.config && dataContext_1.dataContext) {\n              this.config = dataContext_1.dataContext[this.configField];\n            }\n          }\n        }\n        var dataContext_2 = dataItem.dataContext;\n        if (dataContext_2) {\n          var dataContext2_1 = dataContext_2.dataContext;\n          $object.each(this.propertyFields, function (propertyName, fieldValue) {\n            if ($type.hasValue(dataContext_2[fieldValue])) {\n              var anyThis = _this;\n              anyThis[propertyName] = dataContext_2[fieldValue];\n            } else {\n              if (dataContext2_1) {\n                var value = dataContext2_1[fieldValue];\n                if ($type.hasValue(value)) {\n                  var anyThis = _this;\n                  anyThis[propertyName] = value;\n                }\n              }\n            }\n          });\n        }\n      }\n      this.invalidate();\n    }\n  };\n  /**\r\n   * ==========================================================================\r\n   * PROPERTY UTILITIES\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n  /**\r\n   * Returns element's property value.\r\n   *\r\n   * Will check if there are any bindings with [[DataItem]].\r\n   *\r\n   * Will also apply any adapters bound to `propertyName`.\r\n   *\r\n   * @param propertyName  Property name\r\n   * @return Property value\r\n   */\n  Sprite.prototype.getPropertyValue = function (propertyName) {\n    var propValue = this.properties[propertyName];\n    // Apply adapter\n    if (!this._isTemplate) {\n      if (this._adapterO) {\n        propValue = this._adapterO.apply(propertyName, propValue);\n      }\n      propValue = globalAdapter.applyAll(this, propertyName, propValue);\n    }\n    return propValue;\n  };\n  Sprite.prototype.setColorProperty = function (property, value, invalidate) {\n    var currentValue = this.properties[property];\n    if (value instanceof Color && currentValue instanceof Color && value.toString() == currentValue.toString()) {\n      return false;\n    } else {\n      return this.setPropertyValue(property, value, invalidate);\n    }\n  };\n  Sprite.prototype.setPercentProperty = function (property, value, invalidate, transform, precision, floor) {\n    value = $type.toNumberOrPercent(value);\n    if ($type.isNumber(value)) {\n      if ($type.isNumber(precision)) {\n        value = $math.round(value, precision, floor);\n      }\n      return this.setPropertyValue(property, value, invalidate, transform);\n    } else {\n      var currentValue = this.properties[property];\n      if (value instanceof Percent && currentValue instanceof Percent && value.value == currentValue.value) {\n        return false;\n      } else {\n        return this.setPropertyValue(property, value, invalidate, transform);\n      }\n    }\n  };\n  /**\r\n   * Sets elements's property value. Will also propagate the same property value\r\n   * on all element's clones.\r\n   *\r\n   * @param property    Property\r\n   * @param value       Value\r\n   * @param invalidate  Should the sprite be invalidated, cause it's re-rendering\r\n   * @param transform   Re-apply positioning of the element\r\n   * @return Did the value change? It will return `true` if the new value and the old value of the property are not the same\r\n   * @todo Review propagation to clones. Right now we simply check if clone is disposed before setting the same property on it. It's better to remove from clone list altogether.\r\n   */\n  Sprite.prototype.setPropertyValue = function (property, value, invalidate, transform) {\n    if (this.properties[property] !== value && !this.isDisposed()) {\n      this.properties[property] = value;\n      if (this.events.isEnabled(\"propertychanged\")) {\n        var event_1 = {\n          type: \"propertychanged\",\n          target: this,\n          property: property\n        };\n        this.events.dispatchImmediately(\"propertychanged\", event_1);\n      }\n      if (invalidate) {\n        this.invalidate();\n      }\n      if (transform) {\n        this.invalidatePosition();\n      }\n      if (this.applyOnClones) {\n        var clones = this.clones.values;\n        var length_2 = clones.length;\n        for (var i = 0; i < length_2; ++i) {\n          var clone = clones[i];\n          if (!clone.isDisposed()) {\n            //(<Sprite>clone).setPropertyValue(<any>property, value, invalidate, transform);\n            clone[property] = value;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  };\n  Sprite.prototype.bind = function (property, source, bindToProperty, modifier) {\n    var _this = this;\n    if (bindToProperty === void 0) {\n      bindToProperty = property;\n    }\n    if ($type.hasValue(this._bindings[property])) {\n      this._bindings[property].dispose();\n    }\n    // set current value\n    this[property] = source[bindToProperty];\n    //source.addEventListener(AMEvent.PROPERTY_CHANGED, this.handleBindings, false, this);\n    this._bindings[property] = source.events.on(\"propertychanged\", function (event) {\n      if (event.property === bindToProperty) {\n        var value = source[bindToProperty];\n        if (modifier) {\n          value = modifier(value);\n        }\n        // TODO clonesById\n        _this[property] = value;\n      }\n    });\n  };\n  /**\r\n   * Sets up and obeserver function to monitor changes in particular property\r\n   * or properties.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param property  Element's property name\r\n   * @param listener  Handler function\r\n   * @param context   Context for handler function\r\n   * @returns Event Disposer\r\n   */\n  Sprite.prototype.observe = function (property, listener, context, shouldClone) {\n    var _this = this;\n    return new MultiDisposer($array.map($array.toArray(property), function (prop) {\n      return _this.events.on(\"propertychanged\", function (e) {\n        if (e.property === prop) {\n          listener.call(context, e);\n        }\n      }, context, shouldClone);\n    }));\n  };\n  /**\r\n   * ==========================================================================\r\n   * ACCESSIBILITY-RELATED PROPERTIES\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n  /**\r\n   * Applies accessibility to the SVG element.\r\n   *\r\n   * Adds `<title>` and `<description>` elements as well as `aria-labelledby`\r\n   * and `role` properties.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.applyAccessibility = function () {\n    // Check if we need to add label and description\n    var title = this.readerTitle,\n      description = this.readerDescription,\n      role = this.role,\n      hidden = this.readerHidden,\n      checked = this.readerChecked,\n      controls = this.readerControls,\n      live = this.readerLive,\n      orientation = this.readerOrientation,\n      valueNow = this.readerValueNow,\n      valueText = this.readerValueText;\n    // Init label/describe ids\n    var labelledByIds = [];\n    var describedByIds = [];\n    var labelledBy = this.readerLabelledBy;\n    if (labelledBy) {\n      labelledByIds.push(labelledBy);\n    }\n    var describedBy = this.readerDescribedBy;\n    if (describedBy) {\n      describedByIds.push(describedBy);\n    }\n    // Add arial-label attribute if present\n    // If not readerTitle and labelledBy is set we will use <title> element\n    // instead of aria-label\n    // TODO: should we check agains this.showSystemTooltip?\n    if (title) {\n      if (labelledByIds.length || this.showSystemTooltip) {\n        var titleElement = this.titleElement;\n        var titleId = this.uid + \"-title\";\n        if (titleElement.node.textContent != title) {\n          titleElement.node.textContent = title;\n          titleElement.attr({\n            id: titleId\n          });\n        }\n        labelledByIds.push(titleId);\n      } else {\n        if (this._titleElement) {\n          this.group.removeElement(this._titleElement);\n          this._titleElement = undefined;\n        }\n        this.setSVGAttribute({\n          \"aria-label\": title\n        });\n      }\n    } else {\n      this.removeSVGAttribute(\"aria-label\");\n      if (this._titleElement) {\n        this.group.removeElement(this._titleElement);\n        this._titleElement = undefined;\n      }\n    }\n    // Add description\n    if (description) {\n      var descriptionElement = this.descriptionElement;\n      var descriptionId = this.uid + \"-description\";\n      if (descriptionElement.node.textContent != description) {\n        descriptionElement.node.textContent = description;\n        descriptionElement.attr({\n          id: descriptionId\n        });\n      }\n      describedByIds.push(descriptionId);\n    } else if (this._descriptionElement) {\n      this.group.removeElement(this._descriptionElement);\n      this._descriptionElement = undefined;\n    }\n    // Add label and described properties\n    if (labelledByIds.length) {\n      this.setSVGAttribute({\n        \"aria-labelledby\": labelledByIds.join(\" \")\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-labelledby\");\n    }\n    if (describedByIds.length) {\n      this.setSVGAttribute({\n        \"aria-describedby\": describedByIds.join(\" \")\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-describedby\");\n    }\n    // Apply role\n    if (role) {\n      this.setSVGAttribute({\n        \"role\": role\n      });\n    } else {\n      this.removeSVGAttribute(\"role\");\n    }\n    // Apply aria-hidden\n    if (hidden) {\n      this.setSVGAttribute({\n        \"aria-hidden\": \"true\"\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-hidden\");\n    }\n    // Apply aria-checked\n    if (checked) {\n      this.setSVGAttribute({\n        \"aria-checked\": \"true\"\n      });\n    } else if (checked === false) {\n      this.setSVGAttribute({\n        \"aria-checked\": \"false\"\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-checked\");\n    }\n    // Apply aria-controls\n    if (controls) {\n      this.setSVGAttribute({\n        \"aria-controls\": controls\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-controls\");\n    }\n    // Apply aria-live\n    if (live) {\n      this.setSVGAttribute({\n        \"aria-live\": live\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-live\");\n    }\n    // Apply aria-orientation\n    if (orientation) {\n      this.setSVGAttribute({\n        \"aria-orientation\": orientation\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-orientation\");\n    }\n    // Apply aria-valuenow\n    if (valueNow) {\n      this.setSVGAttribute({\n        \"aria-valuenow\": valueNow\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-valuenow\");\n    }\n    // Apply aria-valuetext\n    if (valueText) {\n      this.setSVGAttribute({\n        \"aria-valuetext\": valueText\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-valuetext\");\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"readerTitle\", {\n    /**\r\n     * @return Title\r\n     */\n    get: function () {\n      var title = this.getPropertyValue(\"readerTitle\");\n      if ($type.hasValue(title) && this.dataItem) {\n        return this.populateString(title);\n      }\n      return title;\n    },\n    /**\r\n     * Screen reader title of the element.\r\n     *\r\n     * @param value Title\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"readerTitle\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerDescription\", {\n    /**\r\n     * @return Description\r\n     */\n    get: function () {\n      var description = this.getPropertyValue(\"readerDescription\");\n      if ($type.hasValue(description) && this.dataItem) {\n        return this.populateString(description);\n      }\n      return this.getPropertyValue(\"readerDescription\");\n    },\n    /**\r\n     * Screen reader description of the element.\r\n     *\r\n     * @param value Description\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"readerDescription\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"role\", {\n    /**\r\n     * @return Role\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"role\");\n    },\n    /**\r\n     * A WAI-ARIA role for the element.\r\n     *\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#role_definitions} for more information on WAI-ARIA roles\r\n     * @param value  Role\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"role\", value)) {\n        this.applyAccessibility();\n        if (value == \"slider\") {\n          this.setSVGAttribute({\n            \"aria-valuemin\": \"0\"\n          });\n          this.setSVGAttribute({\n            \"aria-valuemax\": \"100\"\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerHidden\", {\n    /**\r\n     * @return Hidden?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerHidden\");\n    },\n    /**\r\n     * Controls if element should be hidden from screen readers.\r\n     *\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-hidden} for more information\r\n     * @param value  Hidden?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"readerHidden\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerChecked\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Checked?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerChecked\");\n    },\n    /**\r\n     * Controls if element is currently marked as \"checked\".\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-checked} for more information\r\n     * @param value Checked?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"readerChecked\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerControls\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Setting value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerControls\");\n    },\n    /**\r\n     * A `uid` of an element this element controls.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-controls} for more information\r\n     * @param value Setting value\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"readerControls\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerLive\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Setting value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerLive\");\n    },\n    /**\r\n     * Controls accessibility setting \"aria-live\" for the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions} for more information\r\n     * @param value Setting value\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"readerLive\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerLabelledBy\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Target element\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerLabelledBy\");\n    },\n    /**\r\n     * A `uid` of an element that describes this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby} for more information\r\n     * @param value Target element\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"readerLabelledBy\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerDescribedBy\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Target element\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerDescribedBy\");\n    },\n    /**\r\n     * A `uid` of an element that describes this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-describedby} for more information\r\n     * @param value Target element\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"readerDescribedBy\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerOrientation\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerOrientation\");\n    },\n    /**\r\n     * Orientation of the element.\r\n     *\r\n     * @since 4.7.16\r\n     * @param value Orientation\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"readerOrientation\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerValueNow\", {\n    /**\r\n     * @return Current value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerValueNow\");\n    },\n    /**\r\n     * Current value of the element.\r\n     *\r\n     * @since 4.7.16\r\n     * @param value Current value\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"readerValueNow\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerValueText\", {\n    /**\r\n     * @return Current value (text)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerValueText\");\n    },\n    /**\r\n     * Text representation of the current value of the element.\r\n     *\r\n     * @since 4.7.16\r\n     * @param value Current value (text)\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"readerValueText\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"keyboardOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * USER INTERACTIONS\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Returns elements keyboard options.\r\n     *\r\n     * @return Keyboard options\r\n     */\n    get: function () {\n      if (!this.interactions.keyboardOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.keyboardOptions;\n        }\n        if (this._parent) {\n          return this._parent.keyboardOptions;\n        }\n      }\n      return this.interactions.keyboardOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"mouseOptions\", {\n    /**\r\n     * Mouse options.\r\n     *\r\n     * Enables controlling options related to the mouse, for example sensitivity\r\n     * of its mouse wheel.\r\n     *\r\n     * E.g. the below will reduce chart's wheel-zoom speed to half its default\r\n     * speed:\r\n     *\r\n     * ```TypeScript\r\n     * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"plotContainer\": {\r\n     *     \"mouseOptions\": {\r\n     *       \"sensitivity\": 0.5\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @return Mouse options\r\n     */\n    get: function () {\n      if (!this.interactions.mouseOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.mouseOptions;\n        }\n        if (this._parent) {\n          return this._parent.mouseOptions;\n        }\n      }\n      return this.interactions.mouseOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"interactions\", {\n    /**\r\n     * Returns (creates if necessary) an [[InteractionObject]] associated with\r\n     * this element.\r\n     *\r\n     * [[InteractionObject]] is used to attach all kinds of user-interactions to\r\n     * the element, e.g. click/touch, dragging, hovering, and similar events.\r\n     *\r\n     * @return Interaction object\r\n     */\n    get: function () {\n      if (!this._interaction) {\n        var interaction = getInteraction().getInteraction(this.dom);\n        this._interaction = interaction;\n        this._interaction.clickable = this.clickable;\n        this._interaction.hoverable = this.hoverable;\n        this._interaction.trackable = this.trackable;\n        this._interaction.draggable = this.draggable;\n        this._interaction.swipeable = this.swipeable;\n        this._interaction.resizable = this.resizable;\n        this._interaction.wheelable = this.wheelable;\n        this._interaction.contextMenuDisabled = this.contextMenuDisabled;\n        this._interaction.inert = this.inert;\n        this._interaction.sprite = this;\n        this._disposers.push(this._interaction);\n      }\n      return this._interaction;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns true if interactions object was created. Mostly used just to avoid creating interactions object if not needed.\r\n   * @return Is Sprite interactive?\r\n   */\n  Sprite.prototype.isInteractive = function () {\n    if (this._interaction) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"focusable\", {\n    /**\r\n     * @return Can element be focused?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"focusable\");\n    },\n    /**\r\n     * ==========================================================================\r\n     * ELEMENT FOCUS-RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Controls if the element can gain focus.\r\n     *\r\n     * Focusable element will be selectable via TAB key.\r\n     *\r\n     * Please note, clicking it with a mouse or touching will not add focus to\r\n     * it.\r\n     *\r\n     * Focused element will show a system-specific highlight, which might ruin\r\n     * the overal look. This is why we don't focus element on click/touch.\r\n     *\r\n     * A default setting varies for different elements. By default all elements\r\n     * are not focusable, except certain items like buttons, legend items, etc.\r\n     *\r\n     * @default undefined (auto)\r\n     * @param value  Can element be focused?\r\n     */\n    set: function (value) {\n      var _this = this;\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"focusable\", value)) {\n        if (!value && !this.isInteractive()) {} else {\n          this.interactions.focusable = value;\n          if (value) {\n            this.setSVGAttribute({\n              \"focusable\": value\n            });\n            if (!$type.hasValue(this._tabindex)) {\n              this.tabindex = 0;\n            }\n          } else {\n            this.removeSVGAttribute(\"focusable\");\n            this.tabindex = undefined;\n          }\n          // Set focus events that would apply \"focus\" state\n          // setEventDisposer will also remove listeners if value == false\n          this.interactions.setEventDisposer(\"sprite-focusable\", value, function () {\n            return new MultiDisposer([_this.events.on(\"blur\", _this.handleBlur, _this, false), _this.events.on(\"focus\", _this.handleFocus, _this, false)]);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Applies filters (if set) when element gains focus.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Original event\r\n   */\n  Sprite.prototype.handleFocus = function (ev) {\n    if (this.focusable) {\n      if (this.topParent) {\n        this.topParent.hasFocused = true;\n        this.topParent.focusedElement = this;\n      }\n      if (this.focusFilter) {\n        // Any `filters` manipulation will trigger `applyFilters()` so we don't\n        // need to call it here\n        this.filters.push(this.focusFilter);\n      }\n      if (this.hoverOnFocus) {\n        // Trigger a hover event as well\n        this.isHover = true;\n        this.handleOver();\n      }\n    }\n  };\n  /**\r\n   * Removes focus filter (if set) when elementloses focus.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Original event\r\n   */\n  Sprite.prototype.handleBlur = function (ev) {\n    if (this.focusable) {\n      if (this.topParent) {\n        this.topParent.hasFocused = false;\n        this.topParent.focusedElement = undefined;\n      }\n      if (this.focusFilter) {\n        // Any `filters` manipulation will trigger `applyFilters()` so we don't\n        // need to call it here\n        this.filters.removeValue(this.focusFilter);\n      }\n      if (this.hoverOnFocus) {\n        // Trigger a out event as well\n        this.isHover = false;\n        this.handleOut();\n      }\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"focusFilter\", {\n    /**\r\n     * A reference to a [[Filter]] to apply to element when it gains focus.\r\n     *\r\n     * Normally, browsers will draw a default ugly square around focused element,\r\n     * which totally makes sense because its purpose is to help identify active\r\n     * element for visually impaired people.\r\n     *\r\n     * However, if you would rather apply a filter, so you can modify how focused\r\n     * element looks like, use `focusFilter`.\r\n     *\r\n     * Simply set it to an anstance of [[FocusFilter]], or any other filter\r\n     * object.\r\n     *\r\n     * ```TypeScript\r\n     * chart.focusFilter = new am4core.FocusFilter();\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.focusFilter = new am4core.FocusFilter();\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"focusFilter\": {\r\n     *     \"type\": \"FocusFilter\"\r\n     *   },\r\n     *   // ...\r\n     * }\r\n     * ```\r\n     *\r\n     * @see {@link Filter}\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/accessibility/} more about accessibility\r\n     * @see {@link https://www.amcharts.com/docs/v4/tutorials/changing-appearance-of-focused-items/} cusomizing focus appearance\r\n     * @ignore Exclude from docs\r\n     * @return Focused element filter\r\n     */\n    get: function () {\n      /*if (!this._focusFilter) {\r\n          this._focusFilter = new FocusFilter();\r\n          this._disposers.push(this._focusFilter);\r\n      }*/\n      //return this._focusFilter;\n      var focusFilter = this._focusFilter;\n      if (focusFilter) {\n        return focusFilter;\n      }\n      if (this.virtualParent) {\n        return this.virtualParent.focusFilter;\n      } else if (this._parent) {\n        return this._parent.focusFilter;\n      }\n      //this._focusFilter = new FocusFilter();\n      //this._disposers.push(this._focusFilter);\n    },\n\n    /**\r\n     * @see {@link Filter}\r\n     * @ignore Exclude from docs\r\n     * @todo This is still experimental, don't use it\r\n     */\n    set: function (value) {\n      this._focusFilter = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"hoverOnFocus\", {\n    /**\r\n     * @return Trigger hover on focus?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"hoverOnFocus\");\n    },\n    /**\r\n     * If set to `true`, this element will also trigger `\"over\"` event with all\r\n     * the related consequences, like \"hover\" state being applied and tooltip\r\n     * being shown.\r\n     *\r\n     * Useful as an accessibility feature to display rollover tooltips on items\r\n     * selected via keyboard.\r\n     *\r\n     * @param value  Trigger hover on focus?\r\n     * @default false\r\n     */\n    set: function (value) {\n      if (value !== this.hoverOnFocus) {\n        this.setPropertyValue(\"hoverOnFocus\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tabindex\", {\n    /**\r\n     * @return TAB index\r\n     */\n    get: function () {\n      var index = this._tabindex;\n      if (index != null) {\n        return index;\n      } else if (this.virtualParent) {\n        return this.virtualParent.tabindex;\n      } else if (this._parent) {\n        return this._parent.tabindex;\n      }\n    },\n    /**\r\n     * Sets or returns TAB index.\r\n     *\r\n     * Tab index maintains the order in which focusable elements gain focus when\r\n     * TAB key is pressed.\r\n     *\r\n     * Please note, tab index is not local to the chart. It affects the whole\r\n     * of the page, including non-SVG elements. Maintain extreme causion when\r\n     * setting tab indexes, as it affects the user experience for the whole\r\n     * web page.\r\n     *\r\n     * @param value TAB index\r\n     */\n    set: function (value) {\n      value = $type.toNumber(value);\n      if (this.setPropertyValue(\"tabindex\", value) && $type.isNumber(value)) {\n        this.interactions.tabindex = value;\n        this.setSVGAttribute({\n          \"tabindex\": value\n        });\n        this._tabindex = value;\n        this.focusable = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"inertiaOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * DRAGGING AND RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Returns element's options to be used for inertia. This setting is\r\n     * inheritable, meaning that if not set directly, it will search in all its\r\n     * ascendants until very top.\r\n     *\r\n     * Inertia is used only if element's `inert` is set to `true`.\r\n     *\r\n     * \"Inert\" element, when dragged and released, will carry the momentum of the\r\n     * movement, and will continue moving in the same drag direction, gradually\r\n     * reducing in speed until finally stops.\r\n     *\r\n     * Check [[IInertiaOptions]] for how you tweak inertia animations.\r\n     *\r\n     * @return Inertia options\r\n     */\n    get: function () {\n      if (!this.interactions.inertiaOptions) {\n        if (this._parent) {\n          return this._parent.inertiaOptions;\n        }\n      }\n      return this.interactions.inertiaOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"draggable\", {\n    /**\r\n     * @return `true` if element can be dragged\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"draggable\");\n    },\n    /**\r\n     * Controls if the element is draggable.\r\n     *\r\n     * @param value  `true` if element can be dragged\r\n     */\n    set: function (value) {\n      var _this = this;\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"draggable\", value)) {\n        if (!value && !this.isInteractive()) {} else {\n          this.applyCursorStyle();\n          this.interactions.draggable = value;\n          //interaction.processDraggable(this);\n          // Add events\n          // @todo Maybe attach to InteractionObject's multidisposer so that\n          // sprites events get disposed together with them?\n          // this.interactions.disposers.getItem(\"movable\")\n          // setEventDisposer will also remove listeners if value == false\n          this.interactions.setEventDisposer(\"sprite-draggable\", value, function () {\n            return new MultiDisposer([_this.events.on(\"down\", _this.handleDown, _this, false), _this.events.on(\"dragstart\", _this.handleDragStart, _this, false), _this.events.on(\"drag\", _this.handleDragMove, _this, false), _this.events.on(\"dragstop\", _this.handleDragStop, _this, false)]);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Executes when dragged element is being started to drag.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.handleDragStart = function (ev) {\n    if (!this.interactions.isTouchProtected || !ev.touch) {\n      this.interactions.originalPosition = {\n        x: this.pixelX,\n        y: this.pixelY\n      };\n      this._isDragged = true;\n      this.hideTooltip(0);\n    }\n  };\n  /**\r\n   * Tell this element to start being dragged. This is useful if you want to\r\n   * drag items by interactions performed not directly on the target element.\r\n   *\r\n   * Parameter `pointer` is highly recommended. By passing in the Pointer you\r\n   * will ensure that movement is tracked for the pointer that you want. If not\r\n   * supplied, the system will try to determine the most logical pointer.\r\n   *\r\n   * However this may fail if you have more than one pointer active, which\r\n   * might happen if you have several objects being dragged on a touch device.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param pointer Pointer to use for movement\r\n   */\n  Sprite.prototype.dragStart = function (pointer) {\n    //this.dragStop(pointer);\n    //this.draggable = true;\n    this._isDragged = true;\n    getInteraction().dragStart(this.interactions, pointer);\n  };\n  /**\r\n   * Executes when dragged element is being dropped.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.handleDragStop = function (ev) {\n    if (!this.interactions.isTouchProtected || !ev.touch) {\n      this._isDragged = false;\n      this.showTooltip();\n      this.interactions.originalPosition = undefined;\n    }\n  };\n  /**\r\n   * Stops manually initiated dragging of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param pointer Pointer to use as a reference\r\n   */\n  Sprite.prototype.dragStop = function (pointer, cancelled) {\n    //this.draggable = false;\n    this._isDragged = false;\n    getInteraction().dragStop(this.interactions, pointer, cancelled);\n    //this.handleDragStop();\n  };\n  /**\r\n   * Executes when {Sprite} is being dragged.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   * @todo Implement parent position offset calculation\r\n   */\n  Sprite.prototype.handleDragMove = function (ev) {\n    if (!this.interactions.isTouchProtected || !ev.touch) {\n      var point = this.interactions.originalPosition;\n      if (point && this._isDragged) {\n        var globalScale = this._parent.globalScale * this.svgContainer.cssScale;\n        this.moveTo({\n          x: point.x + ev.shift.x / globalScale,\n          y: point.y + ev.shift.y / globalScale\n        }, undefined, undefined, true);\n      }\n      this.dispatchImmediately(\"dragged\", ev);\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"inert\", {\n    /**\r\n     * @return `true` if element should use inertia when animated\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"inert\");\n    },\n    /**\r\n     * Controls if the element should use inertia when interacted with.\r\n     *\r\n     * \"Inert\" element, when dragged and released, will carry the momentum of the\r\n     * movement, and will continue moving in the same drag direction, gradually\r\n     * reducing in speed until finally stops.\r\n     *\r\n     * @default false\r\n     * @param value `true` if element should use inertia when animated\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"inert\", value)) {\n        if (!value && !this.isInteractive()) {\n          // void\n        } else {\n          this.interactions.inert = value;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"hoverOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * HOVERING\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Returns Sprite's hover options.\r\n     *\r\n     * @see {@link IHoverOptions} for available options.\r\n     * @return Options\r\n     */\n    get: function () {\n      if (!this.interactions.hoverOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.hoverOptions;\n        }\n        if (this._parent) {\n          return this._parent.hoverOptions;\n        }\n      }\n      return this.interactions.hoverOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"hoverable\", {\n    /**\r\n     * @return `true` if element is hoverable\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"hoverable\");\n    },\n    /**\r\n     * Controls if the element is hoverable (hover events are registered).\r\n     *\r\n     * Use `over` and `out` events, to watch for those respective actions.\r\n     *\r\n     * @default false\r\n     * @param value `true` if element can be hovered\r\n     */\n    set: function (value) {\n      var _this = this;\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"hoverable\", value)) {\n        if (!value && !this.isInteractive()) {\n          // void\n        } else {\n          this.applyCursorStyle();\n          this.interactions.hoverable = value;\n          // setEventDisposer will also remove listeners if value == false\n          this.interactions.setEventDisposer(\"sprite-hoverable\", value, function () {\n            return new MultiDisposer([_this.events.on(\"over\", _this.handleOver, _this, false), _this.events.on(\"out\", _this.handleOut, _this, false)]);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles tasks when element becomes hovered:\r\n   * * Shows [[Tooltip]] if applicable\r\n   * * Applies \"hover\" state\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n  Sprite.prototype.handleOver = function (ev) {\n    if (this._outTimeout) {\n      this._outTimeout.dispose();\n    }\n    if (this.isHover) {\n      if (this.states.hasKey(\"hover\")) {\n        //this.setState(\"hover\");\n        // This will check `isHover` and will set \"hover\" state\n        if (!this.isHidden) {\n          this.applyCurrentState();\n        }\n      }\n      var point = void 0;\n      if (ev && ev.pointer) {\n        point = $utils.documentPointToSvg(ev.pointer.point, this.svgContainer.SVGContainer, this.svgContainer.cssScale);\n      }\n      if (this.showTooltipOn == \"hover\") {\n        this.showTooltip(point);\n      }\n    } else {\n      if (this.showTooltipOn == \"hover\") {\n        this.hideTooltip();\n      }\n      if (!this.isHidden && this.states.hasKey(\"hover\")) {\n        this.applyCurrentState();\n      }\n    }\n  };\n  /**\r\n   * Handles tasks when element loses hover:\r\n   *\r\n   * * Hides [[Tooltip]]\r\n   * * Applies default state\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev [description]\r\n   */\n  Sprite.prototype.handleOut = function (ev) {\n    var _this = this;\n    if (this.tooltip && this.tooltip.targetSprite == this && this.tooltip.keepTargetHover) {\n      this._outTimeout = this.setTimeout(function () {\n        if (!_this.tooltip.isHover) {\n          if (_this.tooltip.targetSprite == _this) {\n            _this.hideTooltip();\n          }\n          _this._outTimeout = _this.setTimeout(_this.handleOutReal.bind(_this), _this.rollOutDelay);\n        }\n      }, 10);\n      return;\n    }\n    if (this.showTooltipOn == \"hover\") {\n      this.hideTooltip();\n    }\n    this._outTimeout = this.setTimeout(this.handleOutReal.bind(this), this.rollOutDelay);\n  };\n  /**\r\n   * [handleOutReal description]\r\n   *\r\n   * @ignore\r\n   * @todo description\r\n   */\n  Sprite.prototype.handleOutReal = function () {\n    if (!this.isHidden && !this.isHiding && this.states.hasKey(\"hover\")) {\n      this.applyCurrentState();\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"hitOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * CLICKING/TAPPING AND TOGGLING STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Returns Sprite's click (hit) options.\r\n     *\r\n     * Click (hit) options control things like double-click, timeouts, etc.\r\n     *\r\n     * @see {@link IHitOptions} for available options.\r\n     * @return Options\r\n     */\n    get: function () {\n      if (!this.interactions.hitOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.hitOptions;\n        }\n        if (this._parent) {\n          return this._parent.hitOptions;\n        }\n      }\n      return this.interactions.hitOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Prepares element's after `down` event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event\r\n   */\n  Sprite.prototype.handleDown = function (ev) {\n    if (this.interactions.downPointers.length === 1) {\n      this.interactions.originalPosition = {\n        x: this.pixelX,\n        y: this.pixelY\n      };\n      this.interactions.originalAngle = this.rotation;\n      this.interactions.originalScale = this.scale;\n      if (this.states.hasKey(\"down\")) {\n        this.setState(\"down\");\n      }\n    }\n  };\n  /**\r\n   * Prepares element's after `up` event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event\r\n   */\n  Sprite.prototype.handleUp = function (ev) {\n    var _this = this;\n    /*if (!this.isDown) {\r\n        this.interactions.originalPosition = null;\r\n        this.interactions.originalAngle = null;\r\n        this.interactions.originalScale = null;\r\n    }*/\n    this._isResized = false;\n    if (this.states.hasKey(\"down\")) {\n      this.applyCurrentState();\n    }\n    if (this.showTooltipOn == \"hit\") {\n      this.updateTooltipPosition(ev.pointer ? ev.pointer.point : undefined);\n      this._disposers.push(registry.events.once(\"exitframe\", function () {\n        _this.showTooltip();\n      }));\n      this._disposers.push(getInteraction().body.events.once(\"down\", function (ev) {\n        _this.hideTooltip();\n      }));\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"clickable\", {\n    /**\r\n     * @return {boolean}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"clickable\");\n    },\n    /**\r\n     * Indicates if the element is clickable.\r\n     *\r\n     * Some type of the elements, like buttons are clickable by default.\r\n     *\r\n     * Most of the elements are not clickable by default.\r\n     *\r\n     * Use `hit`, `doublehit`, `up`, `down`, `toggled` events to watch for\r\n     * respective click/touch actions.\r\n     *\r\n     * @param value `true` if element can be clicked\r\n     */\n    set: function (value) {\n      var _this = this;\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"clickable\", value)) {\n        if (!value && !this.isInteractive()) {\n          // void\n        } else {\n          this.applyCursorStyle();\n          this.interactions.clickable = value;\n          // setEventDisposer will also remove listeners if value == false\n          this.interactions.setEventDisposer(\"sprite-clickable\", value, function () {\n            return new MultiDisposer([_this.events.on(\"down\", _this.handleDown, _this, false), _this.events.on(\"up\", _this.handleUp, _this, false)]);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"togglable\", {\n    /**\r\n     * @return Is togglable?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"togglable\");\n    },\n    /**\r\n     * Indicates if element can be toggled on and off by subsequent clicks/taps.\r\n     *\r\n     * Togglable element will alternate its `isActive` property between `true`\r\n     * and `false` with each click.\r\n     *\r\n     * @param value Is togglable?\r\n     */\n    set: function (value) {\n      var _this = this;\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"togglable\", value)) {\n        if (!value && !this.isInteractive()) {\n          // void\n        } else {\n          // setEventDisposer will also remove listeners if value == false\n          this.interactions.setEventDisposer(\"sprite-togglable\", value, function () {\n            return _this.events.on(\"hit\", _this.handleToggle, _this, false);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles toggling of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event\r\n   */\n  Sprite.prototype.handleToggle = function (ev) {\n    this.isActive = !this.isActive;\n  };\n  Object.defineProperty(Sprite.prototype, \"contextMenuDisabled\", {\n    /**\r\n     * @return Context menu disabled?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"contextMenuDisabled\");\n    },\n    /**\r\n     * Should element prevent context menu to be displayed, e.g. when\r\n     * right-clicked?\r\n     *\r\n     * @default false\r\n     * @param value Context menu disabled?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"contextMenuDisabled\", value)) {\n        this.interactions.contextMenuDisabled = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"url\", {\n    /**\r\n     * @return URL\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"url\");\n    },\n    /**\r\n     * Click-through URL for this element.\r\n     *\r\n     * If set, clicking/tapping this element will open the new URL in a target\r\n     * window/tab as set by `urlTarget`.\r\n     *\r\n     * Please note that URL will be parsed by data placeholders in curly\r\n     * brackets, to be populated from data. E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * series.columns.template.url = \"https://www.google.com/search?q={category.urlEncode()}\";\r\n     * ```\r\n     * ```JavaScript\r\n     * series.columns.template.url = \"https://www.google.com/search?q={category.urlEncode()}\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"columns\": {\r\n     *       \"url\": \"https://www.google.com/search?q={category.urlEncode()}\"\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @param value URL\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"url\", value)) {\n        if (this._urlDisposer) {\n          this._urlDisposer.dispose();\n        }\n        // If URL is not empty, set up events\n        if ($utils.isNotEmpty(value)) {\n          this._urlDisposer = this.events.on(\"hit\", this.urlHandler, this, false);\n          // Set other required parameters\n          this.clickable = true;\n          this.cursorOverStyle = MouseCursorStyle.pointer;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"baseId\", {\n    /**\r\n     * [baseId description]\r\n     *\r\n     * @ignore\r\n     * @return [description]\r\n     */\n    get: function () {\n      if (!this._baseId && this._parent) {\n        this.baseId = this._parent.baseId;\n      }\n      return this._baseId;\n    },\n    /**\r\n     * [baseId description]\r\n     *\r\n     * @ignore\r\n     * @param  value  [description]\r\n     */\n    set: function (value) {\n      this.setBaseId(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Sprite.prototype.setBaseId = function (value) {\n    if (value != this._baseId) {\n      if (this.invalid) {\n        this.invalid = false;\n        registry.removeFromInvalidSprites(this);\n        this.invalidate();\n      }\n      this._baseId = value;\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"baseSprite\", {\n    /**\r\n     * Returns the mail chart object that this element belongs to.\r\n     *\r\n     * In most cases it will mean the chart object.\r\n     *\r\n     * Can be used to retrieve chart object in various events and adapters.\r\n     *\r\n     * ```TypeScript\r\n     * chart.seriesContainer.events.on(\"hit\", function(ev) {\r\n     *   console.log(ev.target.baseSprite);\r\n     * });\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.seriesContainer.events.on(\"hit\", function(ev) {\r\n     *   console.log(ev.target.baseSprite);\r\n     * });\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"seriesContainer\": {\r\n     *     \"events\": {\r\n     *       \"hit\": function(ev) {\r\n     *         console.log(ev.target.baseSprite);\r\n     *       }\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @readonly\r\n     * @return  Base chart object\r\n     */\n    get: function () {\n      if (this.isBaseSprite) {\n        return this;\n      } else if (this._parent) {\n        return this._parent.baseSprite;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"urlTarget\", {\n    /**\r\n     * @return URL target\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"urlTarget\");\n    },\n    /**\r\n     * Target to use for URL clicks:\r\n     *\r\n     * * _blank\r\n     * * _self (default)\r\n     * * _parent\r\n     * * _top\r\n     * * Name of the window/frame\r\n     *\r\n     * Ignored if `url` is not set.\r\n     *\r\n     * @param value URL target\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"urlTarget\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles URL transition on element click.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev An event object\r\n   */\n  Sprite.prototype.urlHandler = function (ev) {\n    // Is URL set?\n    if ($utils.isNotEmpty(this.url)) {\n      // Proceed to the URL\n      var url = this.populateString(this.url);\n      if (this.urlTarget === \"_self\") {\n        window.location.href = url;\n      } else {\n        window.open(url, this.urlTarget);\n      }\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"swipeOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * SWIPING GESTURE TRACKING\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Returns element's swipe gesture options.\r\n     *\r\n     * @return Swipe gesture options\r\n     */\n    get: function () {\n      if (!this.interactions.swipeOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.swipeOptions;\n        }\n        if (this._parent) {\n          return this._parent.swipeOptions;\n        }\n      }\n      return this.interactions.swipeOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"swipeable\", {\n    /**\r\n     * @return Element swipable?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"swipeable\");\n    },\n    /**\r\n     * Controls if element is swipeable.\r\n     *\r\n     * Swipable element will invoke `swipe`, `swipeleft` and `swiperight` events,\r\n     * when quick horizontal drag action is performed with either mouse or touch.\r\n     *\r\n     * Please note that combining swipe and drag is possible, however will incur\r\n     * a slight but noticeable delay in drag start.\r\n     *\r\n     * @param value  Element swipable?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"swipeable\", value)) {\n        this.applyCursorStyle();\n        if (!value && !this.isInteractive()) {\n          // void\n        } else {\n          this.interactions.swipeable = value;\n        }\n        //interaction.processSwipeable(this);\n      }\n    },\n\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"trackable\", {\n    /**\r\n     * @return Track cursor movement over element?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"trackable\");\n    },\n    /**\r\n     * ==========================================================================\r\n     * POINTER TRACKING\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Indicates if the element is trackable (mouse position over it is reported to\r\n     * event listeners).\r\n     *\r\n     * Will invoke `track` events whenever pointer (cursor) changes position\r\n     * while over element.\r\n     *\r\n     * Please note, touch devices will also invoke `track` events when touch\r\n     * point is moved while holding down on a trackable element.\r\n     *\r\n     * @param value Track cursor movement over element?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"trackable\", value)) {\n        if (!value && !this.isInteractive()) {\n          // void\n        } else {\n          this.applyCursorStyle();\n          this.interactions.trackable = value;\n        }\n        //interaction.processTrackable(this);\n      }\n    },\n\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"wheelable\", {\n    /**\r\n     * @return Mouse wheel events enabled?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"wheelable\");\n    },\n    /**\r\n     * ==========================================================================\r\n     * MOUSE-WHEEL RELATED\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Indicates if the element can be interacted with mouse wheel.\r\n     *\r\n     * Will invoke `wheel`, `wheelup`, `wheeldown`, `wheelleft`, and `wheelright`\r\n     * events when using mouse wheel over the element.\r\n     *\r\n     * @param value Mouse wheel events enabled?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"wheelable\", value)) {\n        if (!value && !this.isInteractive()) {\n          // void\n        } else {\n          this.applyCursorStyle();\n          this.interactions.wheelable = value;\n        }\n        //interaction.processWheelable(this);\n      }\n    },\n\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"resizable\", {\n    /**\r\n     * @return Element resizable?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"resizable\");\n    },\n    /**\r\n     * ==========================================================================\r\n     * RESIZE\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Indicates if this element is resizable.\r\n     *\r\n     * Enabling resize will turn on various interactions on the element. Their\r\n     * actual functionality will depend on other properties.\r\n     *\r\n     * If the element also `draggable`, resize will only happen with two points\r\n     * of contact on a touch device.\r\n     *\r\n     * If the element is not draggable, resize can be performed with just one\r\n     * point of contact, touch or mouse.\r\n     *\r\n     * Will invoke `resize` event every time the size of the element changes.\r\n     *\r\n     * @param value  Element resizable?\r\n     */\n    set: function (value) {\n      var _this = this;\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"resizable\", value)) {\n        if (!value && !this.isInteractive()) {\n          // void\n        } else {\n          this.applyCursorStyle();\n          this.interactions.resizable = value;\n          // setEventDisposer will also remove listeners if value == false\n          this.interactions.setEventDisposer(\"sprite-resizable\", value, function () {\n            return new MultiDisposer([_this.events.on(\"down\", _this.handleDown, _this, false), _this.events.on(\"resize\", _this.handleResize, _this, false)]);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles resize intermediate step.\r\n   *\r\n   * By default this method resizes actual element. Each element, can override\r\n   * this method to implement their own resize logic.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n  Sprite.prototype.handleResize = function (ev) {\n    if (!this.interactions.isTouchProtected || !ev.touch) {\n      this._isResized = true;\n      this.scale = this.interactions.originalScale * ev.scale;\n      this.validatePosition();\n      /*center: (io.draggable\r\n      ? $math.getMidPoint(point1, point2)\r\n      : {\r\n          \"x\": io.originalPosition.x,\r\n          \"y\": io.originalPosition.y\r\n      })*/\n      //this.moveTo(this.originalPosition.x + ev.shift.x, this.originalPosition.y + ev.shift.y);\n      if (this.draggable || this.dragWhileResize) {\n        this._isDragged = false;\n        var svgPoint1 = $utils.documentPointToSvg(ev.point1, this.htmlContainer, this.svgContainer.cssScale);\n        var svgPoint2 = $utils.documentPointToSvg(ev.point2, this.htmlContainer, this.svgContainer.cssScale);\n        var svgMidPoint = $math.getMidPoint(svgPoint1, svgPoint2);\n        var parentPoint1 = $utils.documentPointToSprite(ev.startPoint1, this._parent);\n        var parentPoint2 = $utils.documentPointToSprite(ev.startPoint2, this._parent);\n        var originalPosition = this.interactions.originalPosition;\n        var originalScale = this.interactions.originalScale;\n        if (originalPosition) {\n          var spritePoint1 = {\n            x: (parentPoint1.x - originalPosition.x) / originalScale,\n            y: (parentPoint1.y - originalPosition.y) / originalScale\n          };\n          var spritePoint2 = {\n            x: (parentPoint2.x - originalPosition.x) / originalScale,\n            y: (parentPoint2.y - originalPosition.y) / originalScale\n          };\n          var spriteMidPoint = $math.getMidPoint(spritePoint1, spritePoint2);\n          var parentPoint = $utils.svgPointToSprite(svgMidPoint, this._parent);\n          this.moveTo({\n            x: parentPoint.x - spriteMidPoint.x * this.scale,\n            y: parentPoint.y - spriteMidPoint.y * this.scale\n          }, undefined, undefined, true);\n        }\n      }\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"cursorOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * MOUSE-RELATED\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Returns element's cursor options.\r\n     *\r\n     * Cursor options usually define cursor style for various states of the\r\n     * hovered element.\r\n     *\r\n     * Elements inherit `cursorOptions` from their parents if they don't have\r\n     * them set explicitly.\r\n     *\r\n     * @see {@link ICursorOptions} for a list of available options\r\n     * @return Cursor options\r\n     */\n    get: function () {\n      if (!this.interactions.cursorOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.cursorOptions;\n        }\n        if (this._parent) {\n          return this._parent.cursorOptions;\n        }\n      }\n      return this.interactions.cursorOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"cursorOverStyle\", {\n    /**\r\n     * A shortcut to setting mouse cursor on hover.\r\n     *\r\n     * Example:\r\n     *\r\n     * ```TypeScript\r\n     * series.slices.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;\r\n     * ```\r\n     * ```JavaScript\r\n     * series.slices.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": {\r\n     *     // ...\r\n     *     \"slices\": {\r\n     *       \"cursorOverStyle\": \"pointer\"\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @param style An array of styles to apply onhover\r\n     */\n    set: function (style) {\n      if (!this.cursorOptions.overStyle) {\n        this.interactions.cursorOptions = {\n          defaultStyle: this.cursorOptions.defaultStyle\n        };\n      }\n      this.cursorOptions.overStyle = style;\n      getInteraction().applyCursorOverStyle(this.interactions);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"cursorDownStyle\", {\n    /**\r\n     * A shortcut to setting mouse cursor when button is pressed down.\r\n     *\r\n     * Example:\r\n     *\r\n     * ```TypeScript\r\n     * series.slices.template.cursorDownStyle = am4core.MouseCursorStyle.grabbing;\r\n     * ```\r\n     * ```JavaScript\r\n     * series.slices.template.cursorDownStyle = am4core.MouseCursorStyle.grabbing;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": {\r\n     *     // ...\r\n     *     \"slices\": {\r\n     *       \"cursorDownStyle\": \"grabbing\"\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @param style An array of styles to apply onhover\r\n     */\n    set: function (style) {\n      this.cursorOptions.downStyle = style;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Applies default cursor styles for interactable elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Determine if this is necessary. Maybe let's not apply any cursor styles by default\r\n   */\n  Sprite.prototype.applyCursorStyle = function () {\n    // Draggable styles\n    /*if (this.draggable) {\r\n          if (!$type.hasValue(this.cursorOptions.overStyle)) {\r\n            this.cursorOptions.overStyle = MouseCursorStyle.grab;\r\n        }\r\n          if (!$type.hasValue(this.cursorOptions.downStyle)) {\r\n            this.cursorOptions.downStyle = MouseCursorStyle.grabbing;\r\n        }\r\n    }*/\n  };\n  Object.defineProperty(Sprite.prototype, \"interactionsEnabled\", {\n    /**\r\n     * @return Is interaction enabled for this element?\r\n     */\n    get: function () {\n      var value = this.getPropertyValue(\"interactionsEnabled\");\n      if (value === false) {\n        return false;\n      }\n      if (this.virtualParent) {\n        return this.virtualParent.interactionsEnabled;\n      }\n      if (this._parent) {\n        return this._parent.interactionsEnabled;\n      }\n      return true;\n    },\n    /**\r\n     * Setting this to `false` will effectively disable all interactivity on the\r\n     * element.\r\n     *\r\n     * @param value  Is interaction enabled for this element?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"interactionsEnabled\", value)) {\n        var pointerEvents = null; // must be null, not \"null\"!\n        if (!value) {\n          pointerEvents = \"none\";\n        } else {\n          // this is for IE\n          this.group.node.style.pointerEvents = \"\";\n        }\n        this.group.node.style.pointerEvents = pointerEvents;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"exporting\", {\n    /**\r\n     * @return Export instance\r\n     */\n    get: function () {\n      return this.getExporting();\n    },\n    /**\r\n     * ==========================================================================\r\n     * EXPORT-RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * An [[Export]] instance.\r\n     *\r\n     * Used to access API of the chart export functionality.\r\n     *\r\n     * If `exporting` is not set, the element inherits [[Export]] instance from\r\n     * its parents.\r\n     *\r\n     * Upon request, if no parent has such instance, a new one is created, using\r\n     * default settings, what in most cases is just enough.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/exporting/} for more info about exporting\r\n     * @param exp  Export\r\n     */\n    set: function (exp) {\n      this._exporting.set(exp, exp);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * This is here as a method so that inheriting classes could override it.\r\n   *\r\n   * @return Export instance\r\n   */\n  Sprite.prototype.getExporting = function () {\n    var _export = this._exporting.get();\n    if (_export) {\n      return _export;\n    } else {\n      if (this.isStandaloneInstance || !this._parent) {\n        _export = new Export(this.svgContainer.SVGContainer);\n        _export.sprite = this;\n        _export.language = this.language;\n        _export.numberFormatter = this.numberFormatter;\n        _export.dateFormatter = this.dateFormatter;\n        _export.durationFormatter = this.durationFormatter;\n        this._exporting.set(_export, _export);\n      } else {\n        return this._parent.exporting;\n      }\n    }\n    return _export;\n  };\n  Object.defineProperty(Sprite.prototype, \"exportable\", {\n    /**\r\n     * @return Export?\r\n     */\n    get: function () {\n      return this._exportable;\n      /*const svgContainer = this.svgContainer;\r\n      return !svgContainer || $array.indexOf(svgContainer.nonExportableSprites, this) == -1;*/\n    },\n\n    /**\r\n     * If set to `false` this element will be omitted when exporting the chart\r\n     * to an image.\r\n     *\r\n     * @default true\r\n     * @param value  Export?\r\n     */\n    set: function (value) {\n      var svgContainer = this.svgContainer;\n      this._exportable = value;\n      if (svgContainer) {\n        if (value) {\n          $array.remove(svgContainer.nonExportableSprites, this);\n        } else if ($array.indexOf(svgContainer.nonExportableSprites, this) == -1) {\n          svgContainer.nonExportableSprites.push(this);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * ==========================================================================\r\n   * MODAL/POPUP RELATED STUFF\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n  /**\r\n   * Private method to be used for \"classPrefix\" adapter for modals/popups.\r\n   *\r\n   * @param value  Prefix\r\n   */\n  Sprite.prototype.modalPrefix = function (value) {\n    value = options.classNamePrefix + value;\n    return value;\n  };\n  Object.defineProperty(Sprite.prototype, \"modal\", {\n    /**\r\n     * Returns a [[Modal]] instance, associated with this chart.\r\n     * (elements top parent)\r\n     *\r\n     * Accessing modal does not make it appear. To make a modal appear, use\r\n     * `showModal()` method.\r\n     *\r\n     * @see {@link Modal} for more information about using Modal windows\r\n     * @return Modal instance\r\n     */\n    get: function () {\n      var svgContainer = this.svgContainer;\n      if (svgContainer) {\n        var modal = svgContainer.modal;\n        if (!modal.adapter.has(\"classPrefix\", this.modalPrefix)) {\n          modal.adapter.add(\"classPrefix\", this.modalPrefix);\n        }\n        return modal;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Opens a modal window with specific content (`text` parameter) and,\r\n   * optionally, `title`.\r\n   *\r\n   * The `text` parameter can contain HTML content.\r\n   *\r\n   * @see {@link Modal} for more information about using Modal windows\r\n   * @param text   Modal contents\r\n   * @param title  Title for the modal window\r\n   */\n  Sprite.prototype.openModal = function (text, title) {\n    var svgContainer = this.svgContainer;\n    if (svgContainer) {\n      return svgContainer.openModal(text, title);\n    }\n  };\n  /**\r\n   * Hides modal window if there is one currently open.\r\n   */\n  Sprite.prototype.closeModal = function () {\n    var svgContainer = this.svgContainer;\n    if (svgContainer) {\n      svgContainer.closeModal();\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"popups\", {\n    /**\r\n     * A list of popups for this chart.\r\n     *\r\n     * @return Popups\r\n     */\n    get: function () {\n      var svgContainer = this.svgContainer;\n      if (svgContainer) {\n        var popups = svgContainer.popups;\n        popups.template.sprite = this;\n        if (!popups.template.adapter.has(\"classPrefix\", this.modalPrefix)) {\n          popups.template.adapter.add(\"classPrefix\", this.modalPrefix);\n        }\n        return popups;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates, opens, and returns a new [[Popup]] window.\r\n   *\r\n   * `text` can be any valid HTML.\r\n   *\r\n   * `title` is currently not supported.\r\n   *\r\n   * @param text   Popup contents\r\n   * @param title  Popup title\r\n   * @return Popup instance\r\n   */\n  Sprite.prototype.openPopup = function (text, title) {\n    var svgContainer = this.svgContainer;\n    if (svgContainer) {\n      return svgContainer.openPopup(text, title);\n    }\n  };\n  /**\r\n   * Closes all currently open popup windows\r\n   */\n  Sprite.prototype.closeAllPopups = function () {\n    var svgContainer = this.svgContainer;\n    if (svgContainer) {\n      svgContainer.closeAllPopups();\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"x\", {\n    /**\r\n     * @return X coordinate\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"x\");\n    },\n    /**\r\n     * ==========================================================================\r\n     * POSITIONAL PROPERTIES AND RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Element's absolute or relative X coordinate.\r\n     *\r\n     * If setting both X and Y, please consider using `moveTo()` method instead,\r\n     * as it will be faster to set both coordinates at once.\r\n     *\r\n     * @param value X coordinate\r\n     */\n    set: function (value) {\n      if (!this.isDragged) {\n        this.setPercentProperty(\"x\", value, false, true, this._positionPrecision, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelX\", {\n    /**\r\n     * Returns element's current absolute X coordinate in pixels.\r\n     *\r\n     * @readonly\r\n     * @return X coordinate (px)\r\n     */\n    get: function () {\n      var value = $math.fitToRange(this.getPixelX(this.x), this.minX, this.maxX);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelX\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeX\", {\n    /**\r\n     * Returns element's current relative X coordinate in [[Percent]].\r\n     *\r\n     * @return X coordinate ([[Percent]])\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        return this.getRelativeX(this.x);\n      } else {\n        return this._adapterO.apply(\"relativeX\", this.getRelativeX(this.x));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"minX\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Min X (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minX\");\n    },\n    /**\r\n     * The smallest allowable absolute X coordinate for this element.\r\n     *\r\n     * This is used to contain element movement within certain boundaries.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Min X (px)\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"minX\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"maxX\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Max X (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxX\");\n    },\n    /**\r\n     * The biggest allowable absolute X coordinate for this element.\r\n     *\r\n     * This is used to contain element movement within certain boundaries.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Max X (px)\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"maxX\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"y\", {\n    /**\r\n     * @return Y coordinate\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"y\");\n    },\n    /**\r\n     * Element's absolute or relative Y coordinate.\r\n     *\r\n     * If setting both X and Y, please consider using `moveTo()` method instead,\r\n     * as it will be faster to set both coordinates at once.\r\n     *\r\n     * @param value  Y coordinate\r\n     */\n    set: function (value) {\n      if (!this.isDragged) {\n        this.setPercentProperty(\"y\", value, false, true, this._positionPrecision, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelY\", {\n    /**\r\n     * Returns element's current absolute Y coordinate in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Y coordinate (px)\r\n     */\n    get: function () {\n      var value = $math.fitToRange(this.getPixelY(this.y), this.minY, this.maxY);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelY\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeY\", {\n    /**\r\n     * Returns element's current relative Y coordinate in [[Percent]].\r\n     *\r\n     * @readonly\r\n     * @return Y coordinate ([[Percent]])\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        return this.getRelativeX(this.y);\n      } else {\n        return this._adapterO.apply(\"relativeY\", this.getRelativeX(this.y));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"minY\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Min Y (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minY\");\n    },\n    /**\r\n     * The smallest allowable absolute Y coordinate for this element.\r\n     *\r\n     * This is used to contain element movement within certain boundaries.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Min Y (px)\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"minY\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"maxY\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Max Y (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxY\");\n    },\n    /**\r\n     * The biggest allowable absolute Y coordinate for this element.\r\n     *\r\n     * This is used to contain element movement within certain boundaries.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Max Y (px)\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"maxY\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"dx\", {\n    /**\r\n     * @return Horizontal offset (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"dx\");\n    },\n    /**\r\n     * A horizontal offset for the element in pixels.\r\n     *\r\n     * Can be negative value for offset to the left.\r\n     *\r\n     * @param value  Horizontal offset (px)\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"dx\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"dy\", {\n    /**\r\n     * @return Vertical offset (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"dy\");\n    },\n    /**\r\n     * A vertical offset for the element in pixels.\r\n     *\r\n     * Can be negative value for offset upwards.\r\n     *\r\n     * @param value  Vertical offset (px)\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"dy\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"rotation\", {\n    /**\r\n     * @return Rotation (0-360)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"rotation\");\n    },\n    /**\r\n     * Rotation of the element in degrees. (0-360)\r\n     *\r\n     * Note: For convenience purposes, negative values (for counter-clockwise\r\n     * rotation) and values exceeding 360 can also be used.\r\n     *\r\n     * @param value  Rotation (0-360)\r\n     */\n    set: function (value) {\n      value = $type.toNumber(value);\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n      this.setPropertyValue(\"rotation\", value, false, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"align\", {\n    /**\r\n     * @return Horizontal align\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"align\");\n    },\n    /**\r\n     * Controls horizontal alignment of the element.\r\n     *\r\n     * This is used by parent [[Container]] when layouting its children.\r\n     *\r\n     * @param value  Horizontal align\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"align\", value)) {\n        if (this._parent) {\n          this._parent.invalidateLayout();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"valign\", {\n    /**\r\n     * @return Vertical align\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"valign\");\n    },\n    /**\r\n     * Controls vertical alignment of the element.\r\n     *\r\n     * This is used by parent [[Container]] when layouting its children.\r\n     *\r\n     * @param value  Vertical align\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"valign\", value)) {\n        if (this._parent) {\n          this._parent.invalidateLayout();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"horizontalCenter\", {\n    /**\r\n     * @return Horizontal center\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"horizontalCenter\");\n    },\n    /**\r\n     * Controls which part of the element to treat as a horizontal center.\r\n     *\r\n     * The setting will be used when positioning, resizing and rotating the\r\n     * element.\r\n     *\r\n     * @param value  Horizontal center\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"horizontalCenter\", value)) {\n        this.updateCenter();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"verticalCenter\", {\n    /**\r\n     * @return Vertical center\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"verticalCenter\");\n    },\n    /**\r\n     * Controls which part of the element to treat as a vertical center.\r\n     *\r\n     * The setting will be used when positioning, resizing and rotating the\r\n     * element.\r\n     *\r\n     * @param value  Vertical center\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"verticalCenter\", value)) {\n        this.updateCenter();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"maxWidth\", {\n    /**\r\n     * @return Maximum width (px)\r\n     */\n    get: function () {\n      var maxWidth = this.getPropertyValue(\"maxWidth\");\n      if (!$type.isNumber(maxWidth)) {\n        if (this._parent) {\n          var parentWidth = this._parent.maxWidth;\n          if (this._parent.layout != \"absolute\" && this.align != \"none\" && this.align != undefined) {\n            parentWidth = parentWidth - this.pixelMarginLeft - this.pixelMarginRight;\n          }\n          return parentWidth;\n        }\n      }\n      return maxWidth;\n    },\n    /**\r\n     * ==========================================================================\r\n     * DIMENSIONAL PROPERTIES AND RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Maximum allowed width for the element in pixels.\r\n     *\r\n     * @param value  Maximum width (px)\r\n     */\n    set: function (value) {\n      this.setMaxWidth(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Sprite.prototype.setMaxWidth = function (value) {\n    var prevWidth = this.maxWidth;\n    var prevHeight = this.maxHeight;\n    if (this.setPropertyValue(\"maxWidth\", value)) {\n      if ($type.isNumber(this.relativeWidth)) {\n        this.invalidate();\n      }\n      var event_2 = {\n        type: \"maxsizechanged\",\n        target: this,\n        previousWidth: prevWidth,\n        previousHeight: prevHeight\n      };\n      this.dispatchImmediately(\"maxsizechanged\", event_2);\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"maxHeight\", {\n    /**\r\n     * @return Maximum height (px)\r\n     */\n    get: function () {\n      var maxHeight = this.getPropertyValue(\"maxHeight\");\n      if (!$type.isNumber(maxHeight)) {\n        if (this._parent) {\n          var parentHeight = this._parent.maxHeight;\n          if (this._parent.layout != \"absolute\" && this.valign != \"none\" && this.valign != undefined) {\n            parentHeight = parentHeight - this.pixelMarginTop - this.pixelMarginBottom;\n          }\n          return parentHeight;\n        }\n      }\n      return maxHeight;\n    },\n    /**\r\n     * Maximum allowed height for the element in pixels.\r\n     *\r\n     * @param value  Maximum height (px)\r\n     */\n    set: function (value) {\n      this.setMaxHeight(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Sprite.prototype.setMaxHeight = function (value) {\n    var prevWidth = this.maxWidth;\n    var prevHeight = this.maxHeight;\n    if (this.setPropertyValue(\"maxHeight\", value)) {\n      if ($type.isNumber(this.relativeHeight)) {\n        this.invalidate();\n      }\n      var event_3 = {\n        type: \"maxsizechanged\",\n        target: this,\n        previousWidth: prevWidth,\n        previousHeight: prevHeight\n      };\n      this.dispatchImmediately(\"maxsizechanged\", event_3);\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"minWidth\", {\n    /**\r\n     * @return Minimum width (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minWidth\");\n    },\n    /**\r\n     * Minimum width of the element in pixels.\r\n     *\r\n     * Set to `undefined` to remove the limit.\r\n     *\r\n     * @param value  Minimum width (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"minWidth\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"minHeight\", {\n    /**\r\n     * @return Minimum height (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minHeight\");\n    },\n    /**\r\n     * Minimum height for the element in pixels.\r\n     *\r\n     * Set to `undefined` to remove the limit.\r\n     *\r\n     * @param value  Minimum height (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"minHeight\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"width\", {\n    /**\r\n     * @return Width (absolute or relative)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"width\");\n    },\n    /**\r\n     * Element's absolute or relative width.\r\n     *\r\n     * The width can either be absolute, set in numeric pixels, or relative, set\r\n     * in [[Percent]].\r\n     *\r\n     * Relative width will be calculated using closest measured ancestor\r\n     * [[Container]].\r\n     *\r\n     * NOTE: `width` is an accessor, which allows setting width in pixels or\r\n     * percent. It is a sort of a \"shortcut\" for the users. Actual renderer does\r\n     * not ever use it. It uses either `pixelWidth` or `percentWidth`, so if\r\n     * you need to add an adapter for width add it for either of the two\r\n     * properties - whichever suits your requirements.\r\n     *\r\n     * @param value  Width (numeric in pixels or relative)\r\n     */\n    set: function (value) {\n      var changed = this.setPercentProperty(\"width\", value, true, false, this._positionPrecision, true);\n      if (changed) {\n        this.percentWidth = undefined;\n        this.relativeWidth = undefined;\n        if (value instanceof Percent) {\n          this.percentWidth = value.percent;\n          if ($type.isNumber(this._pixelWidth)) {\n            this.maxWidth = undefined;\n          }\n          this._pixelWidth = undefined;\n        } else {\n          this._pixelWidth = Number(value);\n          //this._measuredWidth = this._pixelWidth;\n          this.maxWidth = this._pixelWidth;\n        }\n        this.invalidatePosition();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"height\", {\n    /**\r\n     * @return height (absolute or relative)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"height\");\n    },\n    /**\r\n     * Element's absolute or relative height.\r\n     *\r\n     * The height can either be absolute, set in numeric pixels, or relative, set\r\n     * in [[Percent]].\r\n     *\r\n     * Relative height will be calculated using closest measured ancestor\r\n     * [[Container]].\r\n     *\r\n     * NOTE: `height` is an accessor, which allows setting height in pixels or\r\n     * percent. It is a sort of a \"shortcut\" for the users. Actual renderer does\r\n     * not ever use it. It uses either `pixelHeight` or `percentHeight`, so if\r\n     * you need to add an adapter for height add it for either of the two\r\n     * properties - whichever suits your requirements.\r\n     *\r\n     * @param value  Height (numeric in pixels or relative)\r\n     */\n    set: function (value) {\n      var changed = this.setPercentProperty(\"height\", value, true, false, this._positionPrecision, true);\n      if (changed) {\n        this.percentHeight = undefined;\n        this._relativeHeight = undefined;\n        if (value instanceof Percent) {\n          this.percentHeight = value.percent;\n          if ($type.isNumber(this._pixelHeight)) {\n            this.maxHeight = undefined;\n          }\n          this._pixelHeight = undefined;\n        } else {\n          this._pixelHeight = Number(value);\n          //this._measuredHeight = this._pixelHeight;\n          this.maxHeight = this._pixelHeight; // yes, we reset maxWidth\n        }\n\n        this.invalidatePosition();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelWidth\", {\n    /**\r\n     * Returns element's width in pixels, if width was set. For actual width use measuredWidth property.\r\n     *\r\n     * @readonly\r\n     * @return Width (px)\r\n     */\n    get: function () {\n      var width;\n      if ($type.isNumber(this.percentWidth)) {\n        width = this.maxWidth;\n      } else if ($type.isNumber(this._pixelWidth)) {\n        width = this._pixelWidth;\n      } else {\n        width = 0;\n      }\n      var minWidth = this.minWidth;\n      if (minWidth != null && width < minWidth) {\n        width = minWidth;\n      }\n      var value = $math.round(width, this._positionPrecision, true);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelWidth\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelHeight\", {\n    /**\r\n     * Returns element's height in pixels. For actual height use measuredHeight property.\r\n     *\r\n     * @readonly\r\n     * @return Height (px)\r\n     */\n    get: function () {\n      var height;\n      if ($type.isNumber(this.percentHeight)) {\n        height = this.maxHeight;\n      } else if ($type.isNumber(this._pixelHeight)) {\n        height = this._pixelHeight;\n      } else {\n        height = 0; //this._measuredHeightSelf;\n      }\n\n      var minHeight = this.minHeight;\n      if (minHeight != null && height < minHeight) {\n        height = minHeight;\n      }\n      var value = $math.round(height, this._positionPrecision, true);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelHeight\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeWidth\", {\n    /**\r\n     * @return Relative width\r\n     * @ignore\r\n     */\n    get: function () {\n      var relativeWidth = this._relativeWidth;\n      if ($type.isNumber(relativeWidth)) {\n        if (!this._adapterO) {\n          return relativeWidth;\n        } else {\n          return this._adapterO.apply(\"relativeWidth\", relativeWidth);\n        }\n      }\n    },\n    /**\r\n     * Element's relative width in [[Percent]].\r\n     * @ignore\r\n     *\r\n     * @param value  Relative width\r\n     */\n    set: function (value) {\n      if (this._relativeWidth != value) {\n        this._relativeWidth = value;\n        //\t\t\tthis.invalidate();\n      }\n    },\n\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeHeight\", {\n    /**\r\n     * @return Relative height\r\n     * @ignore\r\n     */\n    get: function () {\n      var relativeHeight = this._relativeHeight;\n      if ($type.isNumber(relativeHeight)) {\n        if (!this._adapterO) {\n          return relativeHeight;\n        } else {\n          return this._adapterO.apply(\"relativeHeight\", relativeHeight);\n        }\n      }\n    },\n    /**\r\n     * Element's relative height in [[Percent]].\r\n     *\r\n     * @param value  Relative height\r\n     * @ignore\r\n     */\n    set: function (value) {\n      if (this._relativeHeight != value) {\n        this._relativeHeight = value;\n        //\t\t\tthis.invalidate();\n      }\n    },\n\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"measuredWidth\", {\n    /**\r\n     * Returns element's measured width in pixels.\r\n     *\r\n     * A measured width is actual width of contents plus `paddingRight` and* `paddingLeft`, relative to sprite parent, meaning that\r\n     * rotation and scale is taken into account.\r\n     *\r\n     * @readonly\r\n     * @return Width (px)\r\n     */\n    get: function () {\n      if (this.disabled || this.__disabled) {\n        return 0;\n      }\n      if (!this._adapterO) {\n        return this._measuredWidth;\n      } else {\n        return this._adapterO.apply(\"measuredWidth\", this._measuredWidth);\n      }\n      // it's not good to fit to min/max range as then rotations and scale won't be taken into account\n      //return this.adapter.apply(\"measuredWidth\", $math.fitToRange(this._measuredWidth, this.minWidth, this.maxWidth));\n    },\n\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"measuredHeight\", {\n    /**\r\n     * Returns elements's measured height in pixels.\r\n     *\r\n     * A measured height is actual height of contents plus `paddingTop` and `paddingBottom`, relative to sprite parent, meaning that\r\n     * rotation and scale taken into account.\r\n     *\r\n     * @readonly\r\n     * @return Height (px)\r\n     */\n    get: function () {\n      if (this.disabled || this.__disabled) {\n        return 0;\n      }\n      // it's not good to fit to min/max range as then rotations and scale won't be taken into account\n      //return this.adapter.apply(\"measuredHeight\", $math.fitToRange(this._measuredHeight, this.minHeight, this.maxHeight));\n      if (!this._adapterO) {\n        return this._measuredHeight;\n      } else {\n        return this._adapterO.apply(\"measuredHeight\", this._measuredHeight);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"outerWidth\", {\n    /**\r\n     * Returns element's measured width plus its left and right margins in\r\n     * pixels.\r\n     *\r\n     * @readonly\r\n     * @return Outer width (px)\r\n     */\n    get: function () {\n      var value = this.pixelWidth + this.pixelMarginRight + this.pixelMarginLeft;\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"outerWidth\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"outerHeight\", {\n    /**\r\n     * Returns element's measured height plus its top and bottom margins in\r\n     * pixels.\r\n     *\r\n     * @readonly\r\n     * @return Outer height (px)\r\n     */\n    get: function () {\n      var value = this.pixelHeight + this.pixelMarginTop + this.pixelMarginBottom;\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"outerHeight\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"innerWidth\", {\n    /**\r\n     * Returns element's measured inner width in pixels.\r\n     *\r\n     * Inner width is actual available space for content, e.g. element's width\r\n     * minus horizontal padding.\r\n     *\r\n     * @readonly\r\n     * @return Inner width (px)\r\n     */\n    get: function () {\n      var value = Math.max(0, this.pixelWidth - this.pixelPaddingRight - this.pixelPaddingLeft);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"innerWidth\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"innerHeight\", {\n    /**\r\n     * Returns element's measured inner height in pixels.\r\n     *\r\n     * Inner height is actual available space for content, e.g. element's height\r\n     * minus vertical padding.\r\n     *\r\n     * @readonly\r\n     * @return Inner height (px)\r\n     */\n    get: function () {\n      var value = Math.max(0, this.pixelHeight - this.pixelPaddingTop - this.pixelPaddingBottom);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"innerHeight\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"globalScale\", {\n    /**\r\n     * Returns element's current \"global\" scale.\r\n     *\r\n     * Scale values accumulate over hierarchy of elements.\r\n     *\r\n     * E.g. if a [[Container]] has `scale = 2` and it's child has a `scale = 2`,\r\n     * the child's `globalScale` will be 4. (a multitude of `2 x 2`)\r\n     *\r\n     * @readonly\r\n     * @return Global scale\r\n     */\n    get: function () {\n      var scale = this.scale;\n      if (this._parent) {\n        scale = scale * this._parent.globalScale;\n      }\n      if (!this._adapterO) {\n        return scale;\n      } else {\n        return this._adapterO.apply(\"globalScale\", scale);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"scale\", {\n    /**\r\n     * @return Scale (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"scale\");\n    },\n    /**\r\n     * Scale of the element.\r\n     *\r\n     * The scale is set from 0 (element reduced to nothing) to 1 (default size).\r\n     * * 2 will mean element is increased twice.\r\n     * * 0.5 - reduced by 50%.\r\n     *\r\n     * Etc.\r\n     *\r\n     * @param value  Scale (0-1)\r\n     */\n    set: function (value) {\n      value = $type.toNumber(value);\n      if (value < 0) {\n        value = 0;\n      }\n      if (value != this.getPropertyValue(\"scale\")) {\n        this.setPropertyValue(\"scale\", value, false, true);\n        this.handleGlobalScale();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets all four margins for the element at once.\r\n   *\r\n   * Margins are set in pixels.\r\n   *\r\n   * @param top     Top margin\r\n   * @param right   Right margin\r\n   * @param bottom  Bottom margin\r\n   * @param left    Left margin\r\n   * @return Current element\r\n   */\n  Sprite.prototype.margin = function (top, right, bottom, left) {\n    this.marginTop = top;\n    this.marginRight = right;\n    this.marginBottom = bottom;\n    this.marginLeft = left;\n    return this;\n  };\n  Object.defineProperty(Sprite.prototype, \"marginLeft\", {\n    /**\r\n     * @return Margin value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"marginLeft\");\n    },\n    /**\r\n     * Left margin - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Margin value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"marginLeft\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"marginRight\", {\n    /**\r\n     * @return Margin value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"marginRight\");\n    },\n    /**\r\n     * Right margin - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Margin value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"marginRight\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"marginTop\", {\n    /**\r\n     * @return Margin value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"marginTop\");\n    },\n    /**\r\n     * Top margin - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Margin value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"marginTop\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"marginBottom\", {\n    /**\r\n     * @return Margin value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"marginBottom\");\n    },\n    /**\r\n     * Bottom margin - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Margin value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"marginBottom\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelMarginRight\", {\n    /**\r\n     * Returns current right margin in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Right margin (px)\r\n     */\n    get: function () {\n      var value = this.getPixelX(this.marginRight);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelMarginRight\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeMarginRight\", {\n    /**\r\n     * Returns current relative right margin.\r\n     *\r\n     * @readonly\r\n     * @return Relative right margin\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      var value = this.getRelativeX(this.marginRight);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"relativeMarginRight\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelMarginLeft\", {\n    /**\r\n     * Returns current left margin in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Left margin (px)\r\n     */\n    get: function () {\n      var value = this.getPixelX(this.marginLeft);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelMarginLeft\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeMarginLeft\", {\n    /**\r\n     * Returns current relative left margin.\r\n     *\r\n     * @readonly\r\n     * @return Relative left margin\r\n     */\n    get: function () {\n      //@todo Maybe use [[Percent]]?\n      var value = this.getRelativeX(this.marginLeft);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"relativeMarginLeft\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelMarginTop\", {\n    /**\r\n     * Returns current top margin in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Top margin (px)\r\n     */\n    get: function () {\n      var value = this.getPixelY(this.marginTop);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelMarginTop\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeMarginTop\", {\n    /**\r\n     * Returns current relative top margin.\r\n     *\r\n     * @readonly\r\n     * @return Relative top margin\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      var value = this.getRelativeY(this.marginTop);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"relativeMarginTop\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelMarginBottom\", {\n    /**\r\n     * Returns current bottom margin in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Bottom margin (px)\r\n     */\n    get: function () {\n      var value = this.getPixelY(this.marginBottom);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelMarginBottom\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeMarginBottom\", {\n    /**\r\n     * Returns current relative bottom margin.\r\n     *\r\n     * @readonly\r\n     * @return Relative bottom margin\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      var value = this.getRelativeY(this.marginBottom);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"relativeMarginBottom\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets padding for the element in pixels.\r\n   *\r\n   * @param top     Top padding (px)\r\n   * @param right   Right padding (px)\r\n   * @param bottom  Bottom padding (px)\r\n   * @param left    Left padding (px)\r\n   * @return Element\r\n   */\n  Sprite.prototype.padding = function (top, right, bottom, left) {\n    this.paddingTop = top;\n    this.paddingRight = right;\n    this.paddingBottom = bottom;\n    this.paddingLeft = left;\n    return this;\n  };\n  Object.defineProperty(Sprite.prototype, \"paddingLeft\", {\n    /**\r\n     * @return Padding value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"paddingLeft\");\n    },\n    /**\r\n     * Left padding - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Padding value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"paddingLeft\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"paddingRight\", {\n    /**\r\n     * @return Padding value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"paddingRight\");\n    },\n    /**\r\n     * Right padding - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Padding value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"paddingRight\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"paddingTop\", {\n    /**\r\n     * @return Padding value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"paddingTop\");\n    },\n    /**\r\n     * Top padding - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Padding value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"paddingTop\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"paddingBottom\", {\n    /**\r\n     * @return Padding value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"paddingBottom\");\n    },\n    /**\r\n     * Bottom padding - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Padding value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"paddingBottom\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelPaddingRight\", {\n    /**\r\n     * Returns current right padding in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Right padding (px)\r\n     */\n    get: function () {\n      return this.getPixelX(this.paddingRight);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativePaddingRight\", {\n    /**\r\n     * Returns current relative right padding.\r\n     *\r\n     * @readonly\r\n     * @return Relative right padding\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      return this.getRelativeX(this.paddingRight);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelPaddingLeft\", {\n    /**\r\n     * Returns current left padding in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Left padding (px)\r\n     */\n    get: function () {\n      return this.getPixelX(this.paddingLeft);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativePaddingLeft\", {\n    /**\r\n     * Returns current relative left padding.\r\n     *\r\n     * @readonly\r\n     * @return Relative left padding\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      return this.getRelativeX(this.paddingLeft);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelPaddingTop\", {\n    /**\r\n     * Returns current top padding in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Top padding (px)\r\n     */\n    get: function () {\n      return this.getPixelY(this.paddingTop);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativePaddingTop\", {\n    /**\r\n     * Returns current relative top padding.\r\n     *\r\n     * @readonly\r\n     * @return Relative top padding\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      return this.getRelativeY(this.paddingTop);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelPaddingBottom\", {\n    /**\r\n     * Returns current bottom padding in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Bottom padding (px)\r\n     */\n    get: function () {\n      return this.getPixelY(this.paddingBottom);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativePaddingBottom\", {\n    /**\r\n     * Returns current relative bottom padding.\r\n     *\r\n     * @readonly\r\n     * @return Relative bottom padding\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      return this.getRelativeY(this.paddingBottom);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"path\", {\n    /**\r\n     * @return Path of a Sprite element\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"path\");\n    },\n    /**\r\n     * ==========================================================================\r\n     * APPEARANCE-RELATED PROPERTIES AND RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Path of Sprite element\r\n     */\n    set: function (value) {\n      this.setPath(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n  Sprite.prototype.setPath = function (value) {\n    if (this.setPropertyValue(\"path\", value)) {\n      if (this._adapterO) {\n        value = this._adapterO.apply(\"path\", value);\n      }\n      if (!this._isPath) {\n        if (!this.element || this.element.node && !(this.element.node instanceof SVGPathElement)) {\n          this.element = this.paper.add(\"path\");\n        }\n        this._isPath = true;\n      }\n      if ($type.hasValue(value)) {\n        this.element.attr({\n          \"d\": value\n        });\n      } else {\n        this.element.removeAttr(\"d\");\n      }\n      this.invalidatePosition();\n      // otherwise is 0x0\n      if (!this.inited) {\n        this.events.once(\"inited\", this.validatePosition, this, false);\n      }\n      return true;\n    }\n    return false;\n  };\n  Object.defineProperty(Sprite.prototype, \"fillModifier\", {\n    /**\r\n     * @return Fill color modifier\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"fillModifier\");\n    },\n    /**\r\n     * [[ColorModifier]] that can be used to modify color and pattern of the\r\n     * element's fill, e.g. create gradients.\r\n     *\r\n     * @param value  Fill color modifiier\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"fillModifier\", value)) {\n        this.setFill(this.fill);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeModifier\", {\n    /**\r\n     * @return Stroke color modifier\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeModifier\");\n    },\n    /**\r\n     * [[ColorModifier]] that can be used to modify color and pattern of the\r\n     * element's stroke (outline), e.g. create gradients.\r\n     *\r\n     * @param value  Stroke color modifier\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"strokeModifier\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"fillOpacity\", {\n    /**\r\n     * @return Opacity (0-9)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"fillOpacity\");\n    },\n    /**\r\n     * Element's fill opacity.\r\n     *\r\n     * Opacity ranges from 0 (fully transparent) to 1 (fully opaque).\r\n     *\r\n     * @param value  Opacity (0-1)\r\n     */\n    set: function (value) {\n      value = $math.toNumberRange(value, 0, 1);\n      if (this.setPropertyValue(\"fillOpacity\", value)) {\n        this.setSVGAttribute({\n          \"fill-opacity\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"fill\", {\n    /**\r\n     * @return Fill\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"fill\");\n    },\n    /**\r\n     * Element's fill color or pattern.\r\n     *\r\n     * @param value  Fill\r\n     */\n    set: function (value) {\n      this.setFill(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets actual `fill` property on the SVG element, including applicable color\r\n   * modifiers.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Fill\r\n   */\n  Sprite.prototype.setFill = function (value) {\n    if (!$type.isObject(value) || \"r\" in value) {\n      value = toColor(value);\n    }\n    if (this.setColorProperty(\"fill\", value) || this.fillModifier) {\n      // this can not go into next if, as value is turned to Gradient\n      if (value instanceof Color) {\n        if (this.fillModifier) {\n          value = this.fillModifier.modify(value);\n        }\n      }\n      this.realFill = value;\n      // todo: review this place when some Color type will be added\n      if (value instanceof Color) {\n        this.setSVGAttribute({\n          \"fill\": value.toString()\n        });\n      } else if (!$type.hasValue(value)) {\n        this.removeSVGAttribute(\"fill\");\n      } else if (value instanceof Pattern || value instanceof LinearGradient || value instanceof RadialGradient) {\n        var fill = value;\n        fill.paper = this.paper;\n        this.setSVGAttribute({\n          \"fill\": \"url(\\\"\" + $utils.getBaseURI() + fill.id + \"\\\")\"\n        });\n      }\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"opacity\", {\n    /**\r\n     * @return Opacity (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"opacity\");\n    },\n    /**\r\n     * Element's opacity.\r\n     *\r\n     * Opacity setting can range from 0 (fully transparent) to 1 (fully opaque).\r\n     *\r\n     * ATTENTION: It is highly not recommended to use `opacity` directly on the\r\n     * element. The charts use `opacity` to hide/show elements, so your setting\r\n     * might be lost if element is hidden and then later shown.\r\n     *\r\n     * Instead use methods `hide()` and `show()` to completely toggle off and on\r\n     * the element.\r\n     *\r\n     * Or, use properties `fillOpacity` and `strokeOpacity`, if you need to make\r\n     * the element semi-transparent.\r\n     *\r\n     * @param value Opacity (0-1)\r\n     */\n    set: function (value) {\n      value = $math.toNumberRange(value, 0, 1);\n      if (this.setPropertyValue(\"opacity\", value)) {\n        this.setSVGAttribute({\n          \"opacity\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"stroke\", {\n    /**\r\n     * @return Stroke setting\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"stroke\");\n    },\n    /**\r\n     * Element's stroke (outline) color or pattern.\r\n     *\r\n     * @param value  Stroke setting\r\n     */\n    set: function (value) {\n      this.setStroke(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets actual `stroke` property on the SVG element, including applicable\r\n   * color modifiers.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value Stroke setting\r\n   */\n  Sprite.prototype.setStroke = function (value) {\n    if (!$type.isObject(value) || \"r\" in value) {\n      value = toColor(value);\n    }\n    if (this.setColorProperty(\"stroke\", value) || this.strokeModifier) {\n      // this can not go into next if, as value is turned to Gradient\n      if (value instanceof Color) {\n        if (this.strokeModifier) {\n          value = this.strokeModifier.modify(value);\n        }\n      }\n      this.realStroke = value;\n      if (value instanceof Color) {\n        if (value.hex == \"none\") {\n          this.removeSVGAttribute(\"stroke\");\n        } else {\n          this.setSVGAttribute({\n            \"stroke\": value.toString()\n          });\n        }\n      } else if (!$type.hasValue(value)) {\n        this.removeSVGAttribute(\"stroke\");\n      } else if (value instanceof Pattern || value instanceof LinearGradient || value instanceof RadialGradient) {\n        var stroke = value;\n        stroke.paper = this.paper;\n        this.setSVGAttribute({\n          \"stroke\": \"url(\\\"\" + $utils.getBaseURI() + stroke.id + \"\\\")\"\n        });\n      }\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"strokeOpacity\", {\n    /**\r\n     * @return Opacity (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeOpacity\");\n    },\n    /**\r\n     * Stroke (outline) opacity.\r\n     *\r\n     * The values may range from 0 (fully transparent) to 1 (fully opaque).\r\n     *\r\n     * @param value  Opacity (0-1)\r\n     */\n    set: function (value) {\n      value = $math.toNumberRange(value, 0, 1);\n      if (this.setPropertyValue(\"strokeOpacity\", value)) {\n        this.setSVGAttribute({\n          \"stroke-opacity\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"nonScalingStroke\", {\n    /**\r\n     * @return Do not scale stroke (outline)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"nonScalingStroke\");\n    },\n    /**\r\n     * Controls if the element's stroke (outline) should remain keep constant\r\n     * thicnkess and do not scale when the whole element is resized.\r\n     *\r\n     * @param value  Do not scale stroke (outline)\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"nonScalingStroke\", value)) {\n        this.strokeWidth = this.strokeWidth;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"nonScaling\", {\n    /**\r\n     * @return Is element scaleable?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"nonScaling\");\n    },\n    /**\r\n     * Controls if element should keep constant size and not scale even if there is\r\n     * space available, or it does not fit.\r\n     *\r\n     * @param value  Is element scaleable?\r\n     */\n    set: function (value) {\n      // @todo Description (review)\n      value = $type.toBoolean(value);\n      this.setPropertyValue(\"nonScaling\", value, false, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeWidth\", {\n    /**\r\n     * @return Thickness (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeWidth\");\n    },\n    /**\r\n     * Stroke (outline) thickness in pixels.\r\n     *\r\n     * @param value  Thickness (px)\r\n     */\n    set: function (value) {\n      value = $type.toNumber(value);\n      this.setPropertyValue(\"strokeWidth\", value, true);\n      if (this.nonScalingStroke) {\n        if (!$type.isNumber(value)) {\n          value = 1;\n        }\n        value = value / this.globalScale;\n      }\n      this.setSVGAttribute({\n        \"stroke-width\": value\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeDasharray\", {\n    /**\r\n     * @return `stroke-dasharray`\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeDasharray\");\n    },\n    /**\r\n     * A `stroke-dasharray` for the stroke (outline).\r\n     *\r\n     * \"Dasharray\" allows setting rules to make lines dashed, dotted, etc.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray} for more info on `stroke-dasharray`\r\n     * @param value  `stroke-dasharray`\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"strokeDasharray\", value)) {\n        this.setSVGAttribute({\n          \"stroke-dasharray\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeDashoffset\", {\n    /**\r\n     * @return `stroke-dashoffset`\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeDashoffset\");\n    },\n    /**\r\n     * A `stroke-dashoffset` for the stroke (outline).\r\n     *\r\n     * \"Dashoffset\" allows setting the start position of the dashes if\r\n     * `strokeDasharray` is used.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dashoffset} for more info on `stroke-dashoffset`\r\n     * @param value  `stroke-dashoffset`\r\n     */\n    set: function (value) {\n      value = $type.toNumber(value);\n      if (this.setPropertyValue(\"strokeDashoffset\", value)) {\n        this.setSVGAttribute({\n          \"stroke-dashoffset\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeLinecap\", {\n    /**\r\n     * @return `stroke-linecap`\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeLinecap\");\n    },\n    /**\r\n     * A `stroke-linecap` to indicate how line ends are drawn.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes#Stroke} for more info on `stroke-linecap`\r\n     * @param value  `stroke-linecap`\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"strokeLinecap\", value)) {\n        this.setSVGAttribute({\n          \"stroke-linecap\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeLinejoin\", {\n    /**\r\n     * @return `stroke-linejoin`\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeLinejoin\");\n    },\n    /**\r\n     * A `stroke-linejoin` to indicate how line ends are drawn.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes#Stroke} for more info on `stroke-linejoin`\r\n     * @param value  `stroke-linejoin`\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"strokeLinejoin\", value)) {\n        this.setSVGAttribute({\n          \"stroke-linejoin\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"shapeRendering\", {\n    /**\r\n     * @return 'shape-rendering' value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"shapeRendering\");\n    },\n    /**\r\n     * An SVG-specific `shape-rendering` value.\r\n     *\r\n     * `shape-rendering` controls how vector graphics are drawn and rendered.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering} for more information about `shape-rendering`\r\n     * @default \"auto\"\r\n     * @param value  'shape-rendering' value\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"shapeRendering\", value)) {\n        this.setSVGAttribute({\n          \"shape-rendering\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelPerfect\", {\n    /**\r\n     * @return Use pixel perfect?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"pixelPerfect\");\n    },\n    /**\r\n     * Controls if SVG vectors should be drawn with \"pixel\" precision, producing\r\n     * perfectly crisp lines on retina displays.\r\n     *\r\n     * Setting this to `true` might improve visual quality, but may have a\r\n     * negative effect on performance.\r\n     *\r\n     * Different elements use different default setting for `pixelPerfect`.\r\n     *\r\n     * We recommend leaving this at their default settings, unless there's a\r\n     * specific need.\r\n     *\r\n     * @param value  Use pixel perfect?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (value) {\n        this._positionPrecision = options.pixelPerfectPrecision;\n      } else {\n        this._positionPrecision = 3;\n      }\n      this.setPropertyValue(\"pixelPerfect\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"rtl\", {\n    /**\r\n     * @return RTL?\r\n     */\n    get: function () {\n      if ($type.hasValue(this._rtl)) {\n        return this._rtl;\n      } else if (this._topParent) {\n        return this._topParent.rtl;\n      }\n      //this.rtl = false;\n      return false;\n    },\n    /**\r\n     * An RTL (right-to-left) setting.\r\n     *\r\n     * RTL may affect alignment, text, and other visual properties.\r\n     *\r\n     * If you set this on a top-level chart object, it will be used for all\r\n     * child elements, e.g. labels, unless they have their own `rtl` setting\r\n     * set directly on them.\r\n     *\r\n     * @param value  `true` for to use RTL\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (this.isBaseSprite) {\n        this.topParent.rtl = value;\n      }\n      this._rtl = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * ==========================================================================\r\n   * VISIBILITY AND ORDER PROPERTIES AND RELATED STUFF\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n  /**\r\n   * Reveals hidden element.\r\n   *\r\n   * Has no effect if element is already visible.\r\n   *\r\n   * If `duration` is not specified, it will use default.\r\n   *\r\n   * @param duration  Fade in duration (ms)\r\n   * @return Animation object if such object was created\r\n   */\n  Sprite.prototype.show = function (duration) {\n    return this.showReal(duration);\n  };\n  /**\r\n   * Performs actual operations to reveal this element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param duration Fade in duration (ms)\r\n   * @return Fade in duration (ms)\r\n   */\n  Sprite.prototype.showReal = function (duration) {\n    var _this = this;\n    if (this.preventShow) {\n      return;\n    }\n    var transition;\n    var properties = this.defaultState.properties;\n    if (!this.disabled && (this.isHidden || !this.visible || this.isHiding || properties.opacity != null && this.opacity < properties.opacity && !this.isShowing) && !this.isDisposed()) {\n      // helps to avoid flicker, as show might change opacity or visibility but item might be at invalid state/position\n      if (this.invalid) {\n        this.validate();\n      }\n      if (this.positionInvalid) {\n        this.validatePosition();\n      }\n      if (!$type.isNumber(duration)) {\n        duration = this.defaultState.transitionDuration;\n      }\n      if (this._hideAnimation) {\n        this._hideAnimation.kill();\n        this._hideAnimation = undefined;\n      }\n      // Cancel hide handler just in case it was there\n      if (this._showHideDisposer) {\n        this.removeDispose(this._showHideDisposer);\n      }\n      this._isHidden = false;\n      this.isHiding = false;\n      this.isShowing = true;\n      // Apply current state\n      transition = this.applyCurrentState(duration);\n      if (transition && !transition.isFinished()) {\n        this._showHideDisposer = transition.events.on(\"animationended\", function () {\n          _this.isShowing = false;\n        });\n        this._disposers.push(this._showHideDisposer);\n      } else {\n        this.isShowing = false;\n      }\n      // Make it visible\n      var visible = this.defaultState.properties.visible;\n      if (!$type.hasValue(visible)) {\n        visible = true;\n      }\n      this.visible = visible;\n      // Unhide from screen readers\n      this.readerHidden = false;\n      // Dispatch \"show\" event\n      this.dispatchImmediately(\"shown\");\n    }\n    return transition;\n  };\n  /**\r\n   * Initiates hiding of Sprite.\r\n   * When called it will fade out the the Sprite to transparency, then make it\r\n   * invisible.\r\n   * @param duration Duration in millisecons\r\n   */\n  /**\r\n   * Hides the element, by applying `hidden` state.\r\n   *\r\n   * Has no effect if element is already hidden.\r\n   *\r\n   * If `duration` is not specified, it will use default.\r\n   *\r\n   * While element is fading out, its `isHiding` property will resolve to\r\n   * `true`.\r\n   *\r\n   * When element is hidden, its `visible` property will resolve to `false`.\r\n   *\r\n   * @param duration  Fade out duration (ms)\r\n   * @return hide Animation object if such object was created\r\n   */\n  Sprite.prototype.hide = function (duration) {\n    return this.hideReal(duration);\n  };\n  /**\r\n   * Hides actual SVG elements and handles hiding animations.\r\n   *\r\n   * @param duration  Fade out duration (ms)\r\n   * @return Fade out duration (ms)\r\n   * @ignore\r\n   */\n  Sprite.prototype.hideReal = function (duration) {\n    var _this = this;\n    var transition;\n    if (!this.isHiding && this.visible && !this.isDisposed()) {\n      // added to solve 51375\n      if (this.tooltip && this.tooltip.currentSprite == this) {\n        this.hideTooltip(0);\n      }\n      if (this._hideAnimation) {\n        this._hideAnimation.kill();\n        this._hideAnimation = undefined;\n      }\n      this.isShowing = false;\n      // Cancel hide handler just in case it was there\n      if (this._showHideDisposer) {\n        this.removeDispose(this._showHideDisposer);\n      }\n      // Get state\n      var hiddenState_1 = this.hiddenState;\n      // Transition to \"hidden\" state, provided Sprite has one set\n      if (hiddenState_1) {\n        // Yes, we have a \"hidden\" state\n        // `setState` will return an `Animation` object which we can set\n        // events on\n        transition = this.setState(hiddenState_1, duration, undefined);\n        if (transition && !transition.isFinished()) {\n          this._hideAnimation = transition;\n          this._showHideDisposer = transition.events.on(\"animationended\", function () {\n            _this.isHiding = false;\n            _this._isHidden = true;\n            if (hiddenState_1.properties.visible == false) {\n              _this.visible = false;\n            }\n          }, this);\n          this._disposers.push(this._showHideDisposer);\n          // Thrown everything into `_disposers` just in case Sprite gets\n          // destroyed in the meantime\n          this._disposers.push(transition);\n        } else {\n          this.isHiding = false;\n          this._isHidden = true;\n        }\n      } else {\n        // No hidden state, let's just set `visible` and call it a day\n        this.visible = false;\n        this.isHiding = false;\n        this._isHidden = true;\n      }\n      // Hide from screen readers\n      this.readerHidden = true;\n      // Dispach \"hidden\" event\n      this.dispatchImmediately(\"hidden\");\n      this.invalidate(); // hide it at once to avoid flickers // validate() causes SO\n    }\n\n    if (!$type.isNumber(duration)) {\n      duration = this.hiddenState.transitionDuration;\n    }\n    return transition;\n  };\n  Object.defineProperty(Sprite.prototype, \"visible\", {\n    /**\r\n     * @return Visible?\r\n     */\n    get: function () {\n      return this.getVisibility();\n    },\n    /**\r\n     * Indicates if element is current visible (`true`) or hidden (`false`).\r\n     *\r\n     * @param value Visible?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      this.setVisibility(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns visibility value\r\n   * @ignore\r\n   */\n  Sprite.prototype.getVisibility = function () {\n    var value = this.getPropertyValue(\"visible\");\n    if (!$type.hasValue(value)) {\n      value = true;\n    }\n    return value;\n  };\n  /**\r\n   * Sets `visibility` property:\r\n   *\r\n   * * `true` - visible\r\n   * * `false` - hidden\r\n   *\r\n   * @param value  true - visible, false - hidden\r\n   * @return Current visibility\r\n   */\n  Sprite.prototype.setVisibility = function (value) {\n    if (this.setPropertyValue(\"visible\", value)) {\n      if (value) {\n        this.group.removeAttr(\"visibility\");\n      } else {\n        this.group.attr({\n          \"visibility\": \"hidden\"\n        });\n      }\n      //this.invalidatePosition();\n      if (this.events.isEnabled(\"visibilitychanged\")) {\n        var event_4 = {\n          type: \"visibilitychanged\",\n          target: this,\n          visible: value\n        };\n        this.events.dispatchImmediately(\"visibilitychanged\", event_4);\n      }\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"zIndex\", {\n    /**\r\n     * @return zIndex\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"zIndex\");\n    },\n    /**\r\n     * A \"zIndex\" of the element.\r\n     *\r\n     * \"zIndex\" determines the order of how elements are placed over each other.\r\n     *\r\n     * Higher \"zIndex\" will mean the element will be draw on top of elements\r\n     * with lower \"zIndexes\".\r\n     *\r\n     * @param value  zIndex\r\n     */\n    set: function (value) {\n      value = $type.toNumber(value);\n      if (this.setPropertyValue(\"zIndex\", value)) {\n        this.dispatch(\"zIndexChanged\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Moves the element to the very top in element order, so that it appears\r\n   * in front of other elements.\r\n   */\n  Sprite.prototype.toFront = function () {\n    var parent = this._parent;\n    if (parent && parent.children.indexOf(this) != parent.children.length - 1) {\n      parent.children.moveValue(this, parent.children.length - 1);\n      this.dispatch(\"zIndexChanged\");\n    }\n  };\n  /**\r\n   * Moves the element to the very bottom in the element order, so that it\r\n   * appears behind other elements.\r\n   */\n  Sprite.prototype.toBack = function () {\n    var parent = this._parent;\n    if (parent && parent.children.indexOf(this) != 0) {\n      parent.children.moveValue(this, 0);\n      this.dispatch(\"zIndexChanged\");\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"userClassName\", {\n    /**\r\n     * @return Class name\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"userClassName\");\n    },\n    /**\r\n     * A custom class name to set on the element.\r\n     *\r\n     * If set, the value will be added to element's `class` attribute.\r\n     *\r\n     * @since 4.9.11\r\n     * @param  value  Class name\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"userClassName\", value)) {\n        if (!value && this.userClassName) {\n          this.group.removeClass(this.userClassName);\n        }\n        this.setClassName();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltip\", {\n    /**\r\n     * @return Tooltip\r\n     */\n    get: function () {\n      if (this._tooltip) {\n        return this._tooltip;\n      } else if (this.virtualParent) {\n        return this.virtualParent.tooltip;\n      } else if (this._parent) {\n        return this._parent.tooltip;\n      }\n    },\n    /**\r\n     * ==========================================================================\r\n     * TOOLTIP-RELATED PROPERTIES STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * A [[Tooltip]] object to be used when displayed rollover information for\r\n     * the element.\r\n     *\r\n     * @param tooltip  Tooltip\r\n     */\n    set: function (tooltip) {\n      if (this._tooltip) {\n        //this._tooltip.dispose();\n        this.removeDispose(this._tooltip);\n      }\n      this._tooltip = tooltip;\n      if (tooltip) {\n        tooltip.parent = this.tooltipContainer;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipDataItem\", {\n    /**\r\n     * @return Tooltip data item\r\n     */\n    get: function () {\n      var tooltipDataItem = this._tooltipDataItem;\n      if (tooltipDataItem) {\n        return tooltipDataItem;\n      } else {\n        return this.dataItem;\n      }\n    },\n    /**\r\n     * A [[DataItem]] to use when populating content for the element's\r\n     * [[Tooltip]].\r\n     *\r\n     * @see {@link Tooltip}\r\n     * @see {@link DataItem}\r\n     * @param value  Tooltip data item\r\n     */\n    set: function (value) {\n      // important: do not dispose tooltip dataItem, as it is some actual data item from data!\n      this._tooltipDataItem = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipColorSource\", {\n    /**\r\n     * @return Tooltip color source\r\n     */\n    get: function () {\n      return this._tooltipColorSource;\n    },\n    /**\r\n     * A [[Sprite]] or sprite template to use when getting colors for tooltip. If a template is set,\r\n     * tooltip will look for a clone in tooltipDataItem.sprites. If no clone is found, then template colors will be used.\r\n     *\r\n     * @see {@link Tooltip}\r\n     * @see {@link Sprite}\r\n     * @param sprite Sprite\r\n     */\n    set: function (sprite) {\n      this._tooltipColorSource = sprite;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Shows the element's [[Tooltip]].\r\n   *\r\n   * A tooltip will be populated using text templates in either `tooltipHTML` or\r\n   * `tooltipText` as well as data in `tooltipDataItem`.\r\n   *\r\n   * @see {@link Tooltip}\r\n   * @param optional point (sprite-related) to which tooltip must point.\r\n   * @return returns true if the tooltip was shown and false if it wasn't (no text was found)\r\n   */\n  Sprite.prototype.showTooltip = function (point) {\n    if (this.showTooltipOn == \"always\" && !this._tooltip && this.tooltip) {\n      this._tooltip = this.tooltip.clone();\n    }\n    if (!point && this.tooltipPosition == \"pointer\" && this.isHover) {\n      point = $utils.documentPointToSvg(getInteraction().lastPointer.point, this.svgContainer.SVGContainer, this.svgContainer.cssScale);\n    }\n    // do not show if hidden\n    var sprite = this;\n    while (sprite != undefined) {\n      if (!sprite.visible || sprite.disabled || sprite.__disabled) {\n        if (this._tooltip && this._tooltip.visible) {\n          this._tooltip.hide(0);\n        }\n        return;\n      }\n      sprite = sprite.parent;\n    }\n    if ($type.hasValue(this.tooltipText) || $type.hasValue(this.tooltipHTML)) {\n      var tooltip = this.tooltip;\n      var tooltipDataItem = this.tooltipDataItem;\n      if (tooltip) {\n        tooltip.targetSprite = this;\n        var colorSource_1 = this;\n        var tooltipColorSource_1 = this.tooltipColorSource;\n        if ((tooltip.getStrokeFromObject || tooltip.getFillFromObject) && tooltipColorSource_1) {\n          if (tooltipColorSource_1.isTemplate) {\n            if (tooltipDataItem) {\n              $array.eachContinue(tooltipDataItem.sprites, function (sprite) {\n                if (sprite.clonedFrom == tooltipColorSource_1) {\n                  colorSource_1 = sprite;\n                  return false;\n                }\n                return true;\n              });\n            }\n          } else {\n            colorSource_1 = tooltipColorSource_1;\n          }\n        }\n        if (tooltip.getStrokeFromObject) {\n          var stroke = this.stroke;\n          var source = colorSource_1;\n          while (source.parent != undefined) {\n            stroke = source.stroke;\n            if (stroke == undefined) {\n              source = source.parent;\n            }\n            if (stroke != undefined) {\n              break;\n            }\n          }\n          if (stroke instanceof Color) {\n            tooltip.background.animate({\n              property: \"stroke\",\n              to: stroke\n            }, tooltip.animationDuration);\n          } else {\n            tooltip.background.stroke = stroke;\n          }\n        }\n        // Set data item\n        tooltip.dataItem = tooltipDataItem;\n        tooltip.label.populateStringFrom = this;\n        if (tooltip.getFillFromObject) {\n          var fill = this.fill;\n          var source = colorSource_1;\n          while (source.parent != undefined) {\n            fill = source.fill;\n            if (fill == undefined || fill instanceof Color && fill.rgb == undefined) {\n              source = source.parent;\n            } else if (fill != undefined) {\n              break;\n            }\n          }\n          if (fill == undefined) {\n            fill = color(\"#000000\");\n          }\n          if (fill instanceof Color) {\n            if (!tooltip.visible) {\n              tooltip.background.fill = fill;\n            } else {\n              tooltip.background.animate({\n                property: \"fill\",\n                to: fill\n              }, tooltip.animationDuration);\n            }\n          } else {\n            tooltip.background.fill = fill;\n          }\n          if (tooltip.autoTextColor && fill instanceof Color) {\n            tooltip.label.fill = fill.alternative;\n          }\n        }\n        // Apply tooltip text\n        var text = \"\";\n        if (this.tooltipHTML) {\n          tooltip.html = this.tooltipHTML;\n          text = this.tooltipHTML;\n        }\n        if (this.tooltipText) {\n          tooltip.text = this.tooltipText;\n          text = this.tooltipText;\n        }\n        if (this.updateTooltipPosition(point)) {\n          // Set accessibility option\n          tooltip.readerDescribedBy = this.uidAttr();\n          // make label to render to be able to check currentText\n          if (tooltip.label.invalid) {\n            tooltip.label.validate();\n          }\n          if (text != undefined && text != \"\" && tooltip.label.currentText != \"\") {\n            //@todo: think of how to solve this better\n            if (tooltip && !tooltip.parent) {\n              tooltip.parent = this.tooltipContainer;\n            }\n            // Reveal tooltip\n            // showing it in 1 ms helps to avoid strange flickering in IE\n            var duration = tooltip.defaultState.transitionDuration;\n            if (duration <= 0) {\n              duration = 1;\n            }\n            tooltip.show(duration);\n            tooltip.currentSprite = this;\n            return true;\n          } else {\n            this.hideTooltip(0);\n          }\n        } else {\n          this.hideTooltip(0);\n        }\n      }\n    }\n    return false;\n  };\n  /**\r\n   * @ignore\r\n   */\n  Sprite.prototype.updateTooltipPosition = function (point) {\n    var _this = this;\n    if (this.tooltipPosition == \"pointer\") {\n      if (this._interactionDisposer) {\n        this._interactionDisposer.dispose();\n      }\n      this._interactionDisposer = getInteraction().body.events.on(\"track\", function (ev) {\n        return _this.pointTooltipTo($utils.documentPointToSvg(ev.point, _this.svgContainer.SVGContainer, _this.svgContainer.cssScale), true);\n      });\n      if (point) {\n        return this.pointTooltipTo(point, true);\n      }\n    } else {\n      // Point to the X/Y of this Sprite\n      var globalPoint = $utils.spritePointToSvg({\n        \"x\": this.getTooltipX(),\n        \"y\": this.getTooltipY()\n      }, this);\n      return this.pointTooltipTo(globalPoint);\n    }\n  };\n  /**\r\n   * Sets the point the [[Tooltip]] should point to.\r\n   *\r\n   * @param point      Coordinates to point to\r\n   * @param instantly  Move instantly without animation\r\n   */\n  Sprite.prototype.pointTooltipTo = function (point, instantly) {\n    var tooltip = this.tooltip;\n    if (tooltip && this.topParent) {\n      if (tooltip.showInViewport) {\n        tooltip.pointTo(point, instantly);\n        return true;\n      }\n      if ($math.isInRectangle(point, {\n        x: 0,\n        y: 0,\n        width: this.topParent.maxWidth,\n        height: this.topParent.maxHeight\n      })) {\n        tooltip.pointTo(point, instantly);\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\r\n   * Hides element's [[Tooltip]].\r\n   *\r\n   * @see {@link Tooltip}\r\n   */\n  Sprite.prototype.hideTooltip = function (duration) {\n    if (this.showTooltipOn == \"always\") {\n      return;\n    }\n    var tooltip = this.tooltip;\n    if (tooltip) {\n      if (tooltip.targetSprite == this) {\n        tooltip.targetSprite = undefined;\n      }\n      tooltip.hide(duration);\n      if (this._interactionDisposer) {\n        this._interactionDisposer.dispose();\n        this._interactionDisposer = undefined;\n      }\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"tooltipHTML\", {\n    /**\r\n     * @return Tooltip HTML content template\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tooltipHTML\");\n    },\n    /**\r\n     * An HTML template to be used to populate [[Tooltip]] contents.\r\n     *\r\n     * If element has `tooltipDataItem` or `dataItem` set, this will be parsed\r\n     * for any data values to be replaced with the values from respective data\r\n     * items.\r\n     *\r\n     * @param value Tooltip HTML content template\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      this.hoverable = true;\n      if (this.setPropertyValue(\"tooltipHTML\", value)) {\n        if (this.tooltip) {\n          if (this.tooltip.visible) {\n            this.showTooltip();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipText\", {\n    /**\r\n     * @return Tooltip content template\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tooltipText\");\n    },\n    /**\r\n     * A text template to be used to populate Tooltip's contents.\r\n     *\r\n     * If element has `tooltipDataItem` or `dataItem` set, this will be parsed\r\n     * for any data values to be replaced with the values from respective data\r\n     * items.\r\n     *\r\n     * This template will also be parsed for any special formatting tags.\r\n     *\r\n     * @param value Tooltip content template\r\n     * @see {@link TextFormatter}\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (value) {\n        this.hoverable = true;\n      }\n      if (this.setPropertyValue(\"tooltipText\", value)) {\n        if (this.tooltip) {\n          if (this.tooltip.visible) {\n            this.showTooltip();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipContainer\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Container\r\n     */\n    get: function () {\n      if (this._tooltipContainer) {\n        return this._tooltipContainer;\n      } else if (this._parent) {\n        return this._parent.tooltipContainer;\n      }\n    },\n    /**\r\n     * A container reference that should be used to place element's\r\n     * [[Tooltip]] in.\r\n     *\r\n     * Will use parent's container if does not have one set.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Container\r\n     * @todo Dispose of the old _tooltipContainer ?\r\n     */\n    set: function (value) {\n      this._tooltipContainer = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipX\", {\n    /**\r\n     * @return Tooltip X (px)\r\n     */\n    get: function () {\n      return this.getTooltipX();\n    },\n    /**\r\n     * X coordinate the [[Tooltip]] should be shown at.\r\n     *\r\n     * @param value  Tooltip X (px)\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"tooltipX\", value) && this.tooltip) {\n        this.tooltip.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"alwaysShowTooltip\", {\n    /**\r\n     * @return Always show tooltip?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"showTooltipOn\") == \"always\";\n    },\n    /**\r\n     * DEPRECATION NOTICE: This setting is deprecated in favor of a more flexible\r\n     * setting: `showTooltipOn`. Please use `showTooltipOn = \"always\"` instead.\r\n     *\r\n     * Indicates if this element should display a tooltip permanently.\r\n     *\r\n     * Useful, if you want to show permanent tooltips on some items.\r\n     *\r\n     * @default false\r\n     * @since 4.5.4\r\n     * @deprecated Use `showTooltipOn = \"always\"` instead\r\n     * @param  value  Always show tooltip?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (value) {\n        this.showTooltipOn = \"always\";\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"showTooltipOn\", {\n    /**\r\n     * @return When to show tooltip\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"showTooltipOn\");\n    },\n    /**\r\n     * Indicates when tooltip needs to be shown on this element:\r\n     *\r\n     * * `\"hover\"` (default) - Tooltip will be shown when element is hovered on.\r\n     * * `\"hit\"` - Tooltip will be shown when element is clicked/tapped. Tooltip will be hidden when clicked/tapped anywhere else.\r\n     * * `\"always\"` - Tooltip will be shown on the element permanently.\r\n     *\r\n     * For example, if you would like to show tooltips on all of the columns of\r\n     * a [[ColumnSeries]]:\r\n     *\r\n     * ```TypeScript\r\n     * series.columns.template.showTooltipOn = \"always\";\r\n     * ```\r\n     * ```JavaScript\r\n     * series.columns.template.showTooltipOn = \"always\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"columns\": {\r\n     *       \"showTooltipOn\": \"always\"\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * It can even be set to display on a selected columns via `propertyFields`:\r\n     *\r\n     * ```TypeScript\r\n     * series.columns.template.propertyFields.showTooltipOn = \"tooltip\";\r\n     * ```\r\n     * ```JavaScript\r\n     * series.columns.template.propertyFields.showTooltipOn = \"tooltip\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"columns\": {\r\n     *       \"propertyFields\": {\r\n     *         \"showTooltipOn\": \"tooltip\"\r\n     *       }\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @default \"hover\"\r\n     * @since 4.7.9\r\n     * @param  value  When to show tooltip\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"showTooltipOn\", value)) {\n        if (value == \"hit\") {\n          this.clickable = true;\n        }\n        if (this.tooltip) {\n          if (value == \"always\") {\n            this.showTooltip();\n          } else {\n            this.handleAlwaysShowTooltip();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipPosition\", {\n    /**\r\n     * Position\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tooltipPosition\");\n    },\n    /**\r\n     * Specifies if [[Tooltip]] should follow the mouse or touch pointer or stay\r\n     * at the fixed position.\r\n     *\r\n     * @param value  Position\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tooltipPosition\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipY\", {\n    /**\r\n     * @return Tooltip Y (px)\r\n     */\n    get: function () {\n      return this.getTooltipY();\n    },\n    /**\r\n     * Y coordinate the [[Tooltip]] should be shown at.\r\n     *\r\n     * @param value  Tooltip Y (px)\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"tooltipY\", value) && this.tooltip) {\n        this.tooltip.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns Tooltip X coordinate if it's set, or middle of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return X (px)\r\n   */\n  Sprite.prototype.getTooltipX = function () {\n    var x = this.getPropertyValue(\"tooltipX\");\n    if (!$type.hasValue(x)) {\n      x = percent(50);\n    }\n    var value;\n    if ($type.isNumber(x)) {\n      value = x;\n    }\n    if (x instanceof Percent) {\n      value = this.maxLeftSelf + this._measuredWidthSelf * x.value - this.pixelPaddingLeft - this.ex; // overflow is know only for measured items, so this is not always good\n    }\n\n    if (!$type.isNumber(value)) {\n      value = 0;\n    }\n    return value;\n  };\n  /**\r\n   * Returns Tooltip Y coordinate if it's set, or middle of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Y (px)\r\n   */\n  Sprite.prototype.getTooltipY = function () {\n    var y = this.getPropertyValue(\"tooltipY\");\n    if (!$type.hasValue(y)) {\n      y = percent(50);\n    }\n    var value;\n    if ($type.isNumber(y)) {\n      value = y;\n    }\n    if (y instanceof Percent) {\n      value = this.maxTopSelf + this._measuredHeightSelf * y.value - this.pixelPaddingTop - this.ey; // overflow is know only for measured items, so this is not always good\n    }\n\n    if (!$type.isNumber(value)) {\n      value = 0;\n    }\n    return value;\n  };\n  /**\r\n   * Displays a modal or console message with error, and halts any further\r\n   * processing of this item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param e Error\r\n   * @todo Implement from applying further actions to this item\r\n   */\n  Sprite.prototype.raiseCriticalError = function (e, closable) {\n    if (this.svgContainer) {\n      if (!this._adapterO) {\n        this.modal.content = e.message;\n      } else {\n        this.modal.content = this._adapterO.apply(\"criticalError\", e).message;\n      }\n      if (!closable) {\n        this.disabled = true;\n      } else {\n        this.modal.closable = true;\n      }\n      if (!options.suppressErrors) {\n        this.modal.open();\n      }\n    }\n    if (options.verbose) {\n      console.log(e);\n    }\n  };\n  /**\r\n  * Processes JSON-based config before it is applied to the object.\r\n  *\r\n  * @ignore Exclude from docs\r\n  * @param config  Config\r\n  */\n  Sprite.prototype.processConfig = function (config) {\n    if (config) {\n      // Tooltip color source\n      if ($type.hasValue(config.tooltipColorSource) && $type.isString(config.tooltipColorSource) && this.map.hasKey(config.tooltipColorSource)) {\n        config.tooltipColorSource = this.map.getKey(config.tooltipColorSource);\n      }\n      // Cursor styles\n      if ($type.hasValue(config.cursorOverStyle) && $type.isString(config.cursorOverStyle)) {\n        config.cursorOverStyle = this.getCursorStyle(config.cursorOverStyle);\n      }\n      if ($type.hasValue(config.cursorDowntyle) && $type.isString(config.cursorDowntyle)) {\n        config.cursorDowntyle = this.getCursorStyle(config.cursorDowntyle);\n      }\n      if ($type.hasValue(config.cursorOptions)) {\n        if ($type.hasValue(config.cursorOptions.overStyle) && $type.isString(config.cursorOptions.overStyle)) {\n          config.cursorOptions.overStyle = this.getCursorStyle(config.cursorOptions.overStyle);\n        }\n        if ($type.hasValue(config.cursorOptions.downStyle) && $type.isString(config.cursorOptions.downStyle)) {\n          config.cursorOptions.downStyle = this.getCursorStyle(config.cursorOptions.downStyle);\n        }\n      }\n    }\n    _super.prototype.processConfig.call(this, config);\n    this.processDelayedMap();\n  };\n  /**\r\n   * Converts string name of the cursor into actual [[MouseCursorStyle]].\r\n   *\r\n   * @param style  Cursor type\r\n   * @return Cursor definition\r\n   */\n  Sprite.prototype.getCursorStyle = function (style) {\n    switch (style) {\n      case \"grab\":\n        return MouseCursorStyle.grab;\n      case \"grabbing\":\n        return MouseCursorStyle.grabbing;\n      case \"pointer\":\n        return MouseCursorStyle.pointer;\n      case \"horizontalResize\":\n        return MouseCursorStyle.horizontalResize;\n      case \"verticalResize\":\n        return MouseCursorStyle.verticalResize;\n      default:\n        return MouseCursorStyle.default;\n    }\n  };\n  /**\r\n   * This function is used to sort element's JSON config properties, so that\r\n   * some properties that absolutely need to be processed last, can be put at\r\n   * the end.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param a  Element 1\r\n   * @param b  Element 2\r\n   * @return Sorting number\r\n   */\n  Sprite.prototype.configOrder = function (a, b) {\n    if (a == b) {\n      return 0;\n    }\n    // Must come last\n    else if (a == \"tooltipColorSource\") {\n      return 1;\n    } else if (b == \"tooltipColorSource\") {\n      return -1;\n    } else {\n      return _super.prototype.configOrder.call(this, a, b);\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"isHidden\", {\n    /**\r\n     * If `sprite.hide()` is called, we set isHidden to true when sprite is hidden.\r\n     * This was added becaus hidden state might have visibility set to true and so\r\n     * there would not be possible to find out if a sprite is technically hidden or not.\r\n     */\n    get: function () {\n      if (this._isHidden) {\n        return this._isHidden;\n      } else if (this._parent) {\n        return this._parent.isHidden;\n      }\n      return false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"showOnInit\", {\n    /**\r\n     * @return Show on init?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"showOnInit\");\n    },\n    /**\r\n     * If this is set to `true`, Sprite, when inited will be instantly hidden\r\n     * (\"hidden\" state applied) and then shown (\"default\" state applied).\r\n     *\r\n     * If your \"default\" state's `transitionDuration > 0` this will result in\r\n     * initial animation from \"hidden\" state to \"default\" state.\r\n     *\r\n     * If you need a Sprite which has `showOnInit = true` not to be shown\r\n     * initially, set `sprite.hidden = true`. Setting `sprite.visible = false`\r\n     * will not prevent the animation and the sprite will be shown.\r\n     *\r\n     * @param value show on init?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      this.setShowOnInit(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n  Sprite.prototype.setShowOnInit = function (value) {\n    if (this.setPropertyValue(\"showOnInit\", value)) {\n      if (!this.isTemplate) {\n        if (value && !this.inited && !this.hidden) {\n          this._showOnInitDisposer = new MultiDisposer([registry.events.once(\"enterframe\", this.hideInitially, this), this.events.once(\"beforevalidated\", this.hideInitially, this, false), this.events.on(\"inited\", this.appear, this, false)]);\n          this._disposers.push(this._showOnInitDisposer);\n        } else {\n          if (this._showOnInitDisposer) {\n            this._showOnInitDisposer.dispose();\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  Sprite.prototype.hideInitially = function () {\n    if (!this.isDisposed()) {\n      this.appeared = false;\n      //if (!this.hidden && !this._isHidden) { // not good for series, as on enterframe it doesn't have data items yet.\n      if (!this.inited) {\n        this.hide(0);\n      }\n    }\n  };\n  /**\r\n   * Hides the chart instantly and then shows it. If defaultState.transitionDuration > 0, this will result an animation in which properties of hidden state will animate to properties of visible state.\r\n   */\n  Sprite.prototype.appear = function () {\n    var _this = this;\n    this.appeared = false;\n    if (!this.hidden && !this.isHidden) {\n      this.hide(0);\n    }\n    if (!this.hidden) {\n      var animation = this.show();\n      if (animation && !animation.isFinished()) {\n        this.addDisposer(animation.events.on(\"animationended\", function () {\n          _this.appeared = true;\n          _this.dispatch(\"appeared\");\n        }));\n      } else {\n        this.appeared = true;\n        this.dispatch(\"appeared\");\n      }\n    } else {\n      this.appeared = true;\n      this.dispatch(\"appeared\");\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"hidden\", {\n    /**\r\n     * @return Is initially hidden?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"hidden\");\n    },\n    /**\r\n     * If a sprite has `showOnInit = true`, it will animate from \"hidden\" to\r\n     * \"default\" state when initialized. To prevent this but keep\r\n     * `showOnInit = true`, you can set `sprite.hidden = true`.\r\n     *\r\n     * @param value initially hidden?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      this.setPropertyValue(\"hidden\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"bbox\", {\n    /**\r\n     * Returns bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function () {\n      if (this.definedBBox) {\n        return this.definedBBox;\n      }\n      return this._bbox;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"plugins\", {\n    /**\r\n     * A list of plugins (objects that implement [[IPlugin]] interface) attached\r\n     * to this object.\r\n     *\r\n     * @since 4.2.2\r\n     * @return List of plugins\r\n     */\n    get: function () {\n      var _this = this;\n      if (!this._plugins) {\n        this._plugins = new List();\n        this._disposers.push(this._plugins.events.on(\"inserted\", function (ev) {\n          ev.newValue.target = _this;\n          ev.newValue.init();\n        }));\n        this._disposers.push(new ListDisposer(this._plugins));\n      }\n      return this._plugins;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Called during the System.update method\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype._systemUpdate = function (skippedSprites) {\n    this.validate();\n  };\n  /**\r\n   * Called during the System.update method\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype._systemCheckIfValidate = function () {\n    return true;\n  };\n  /**\r\n   * Called during the System.validatePositions method\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype._systemValidatePositions = function () {\n    this.validatePosition();\n  };\n  /**\r\n   * Called during the System.validateLayouts method\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype._systemValidateLayouts = function () {};\n  return Sprite;\n}(BaseObjectEvents);\nexport { Sprite };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Sprite\"] = Sprite;","map":{"version":3,"mappings":"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","names":["SpriteState","SpriteEventDispatcher","BaseObjectEvents","Adapter","globalAdapter","Dictionary","DictionaryTemplate","DictionaryDisposer","ListDisposer","List","MultiDisposer","Disposer","MutableValueDisposer","Animation","AnimationDisposer","getGhostPaper","Container","Pattern","LinearGradient","RadialGradient","Color","color","toColor","getInteraction","MouseCursorStyle","options","registry","NumberFormatter","DateFormatter","DurationFormatter","getTextFormatter","Language","Export","$utils","$math","$strings","$array","$object","$type","$iter","system","Percent","percent","visualProperties","__extends","_super","_this","x","y","width","height","className","_disposers","push","_eventDispatcher","used","uid","group","paper","addGroup","setPropertyValue","_prevMeasuredWidth","_prevMeasuredHeight","_measuredWidth","_measuredHeight","_isMeasured","invalidate","applyTheme","events","_mask","_language","_exporting","each","_bindings","key","value","dispose","Object","Sprite","_adapterO","autoSetClassName","setClassName","themes","_themes","parent_1","_parent","getCurrentThemes","_internalDefaultsApplied","disabled","_isTemplate","__disabled","invalid","addToInvalidSprites","requestFrame","dispatchImmediately","applyInternalDefaults","beforeDraw","draw","removeFromInvalidSprites","afterDraw","positionInvalid","addToInvalidPositions","pixelX","pixelY","dx","dy","_updateDisabled","_internalDisabled","attr","removeSVGAttribute","sizeChanged","measure","prevGroupTransform","transformString","moveTo","rotation","nonScaling","scale","globalScale","dispatch","showTooltipOn","updateTooltipPosition","removeFromInvalidPositions","maskRectangle","_maskRectangle","_clipElement","isMeasured","horizontalCenter","verticalCenter","measureElement","_inited","keys","applyFilters","visible","interactionsEnabled","getPropertyValue","showOnInit","appeared","hidden","hide","applyMask","dispatchReady","showTooltip","hideTooltip","isReady","_ready","setState","defaultState","nonScalingStroke","strokeWidth","validatePosition","updateFilterScale","filters","iterator","filter","source","copyFrom","states","length","clone","adapter","interactions","plugins","configField","applyOnClones","virtualParent","exportable","_tooltip","tooltip","cloneTooltip","_showSystemTooltip","showSystemTooltip","copyProperties","propertyFields","properties","fillModifier","strokeModifier","focusFilter","isDisposed","isBaseSprite","htmlContainer","childNodes","removeChild","firstChild","clear","_clones","i","getIndex","_svgContainer","_interactionDisposer","undefined","_urlDisposer","removeFromInvalids","element","_numberFormatter","_focusFilter","stroke","clonedFrom","fill","hasValue","id","map","removeKey","parent","_filters","removeValue","_alwaysShowDisposers","toBoolean","children","child","isTemplate","applyAccessibility","_topParent","topParent","oldParent","baseId","_tooltipContainer","tooltipContainer","_dataItem","dataItem","handleAlwaysShowTooltip","sprite","oldDisposers","oldDisposer","disposer","on","handleAlwaysShow","addDisposer","_virtualParent","filterElement","appendDef","fill_1","modify","stroke_1","_clipPath","_exportable","top","_map","delayedMap","_delayedMap","_id","hasKey","Error","setKey","node","_paper","parent_2","setPaper","oldPaper","appendDefs","_htmlContainer","parent_3","_titleElement","add","_descriptionElement","onAll","opacity","fillOpacity","strokeOpacity","shapeRendering","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin","focusable","tabindex","role","attribute","removeAttr","classNamePrefix","addClass","userClassName","setSVGAttribute","mask","getUniqueId","getBaseURI","max","pixelWidth","pixelHeight","point","spritePointToSprite","width_1","height_1","removeChildNodes","filterUnits","appendPrimitives","w","h","removeDispose","setSVGAttributes","_element","removeElement","SVGPathElement","_isPath","validate","svgContainer","definedBBox","_bbox","svgBBox","getBBox","prevElementTransform","bbox","ex","ey","elementX","elementY","elementWidth","elementHeigth","pixelPaddingLeft","pixelPaddingRight","pixelPaddingTop","pixelPaddingBottom","measuredWidth","measuredHeight","left","right","top_1","bottom","round","_positionPrecision","maxLeft","maxRight","maxTop","maxBottom","pixelPerfect","pixelPerfectPrecision","updateCenter","_measuredWidthSelf","_measuredHeightSelf","positionPrecision","maxLeftSelf","maxRightSelf","maxTopSelf","maxBottomSelf","svg","matrix","createSVGMatrix","a","cos","c","sin","e","b","d","f","p1","createSVGPoint","p2","p3","p4","pt1","matrixTransform","pt2","pt3","pt4","Math","min","isHover","tooltipText","tooltipHTML","index","indexOf","moveValue","sortChildren","innerWidth","innerHeight","pixel","isNumber","relative","isDragged","invalidatePosition","get","apply","createClipPath","set","inited","reset","removeClipPath","rect","ax1","ay1","ax2","ay2","bx1","by1","bx2","by2","_states","state","processState","getKey","hiddenState","create","event","newValue","name","hoverable","clickable","clones","values","length_1","_animations","getBoundingClientRect","animationOptions","duration","easing","start","transitionDuration","isHidden","isHiding","setVisibility","isActive","transitionEasing","transitTo","animation","isDown","downPointers","isFocused","propValues","allValues","transition","propertyName","finalValue","currentValue","option","from","to","property","animate","isFinished","newFilters_1","stateFilter","newFilter","currentFilter","contains","pushAll","animations","isInteractive","handleOver","isRealHover","handleOut","_isDragged","_isResized","handleDown","handleUp","handleFocus","handleBlur","_isActive","setActive","applyCurrentState","current","setDisabled","hasChild","deepInvalidate","_background","numberFormatter","language","_dateFormatter","dateFormatter","_durationFormatter","durationFormatter","ev","exporting","string","castString","escape","tags","match","tag","replace","getTagValue","split","join","unescape","tagName","format","parts","reg","matches","exec","prop","params","trim","reg2","matches2","method","getTagValueFromObject","isObject","dataContext","component","populateStringFrom","object","formatApplied","len","part","numberValue","anyToNumber","dateValue","isString","parse","anyToDate","isDate","isNaN","getTime","durationValue","encodeURIComponent","formatParts","formatterType","getFormat","NUMBER","DATE","DURATION","setDataItem","dataContext_1","config","dataContext_2","dataContext2_1","fieldValue","anyThis","propValue","applyAll","toString","transform","precision","floor","toNumberOrPercent","isEnabled","event_1","type","target","length_2","bindToProperty","modifier","listener","context","shouldClone","toArray","call","title","readerTitle","description","readerDescription","readerHidden","checked","readerChecked","controls","readerControls","live","readerLive","orientation","readerOrientation","valueNow","readerValueNow","valueText","readerValueText","labelledByIds","describedByIds","labelledBy","readerLabelledBy","describedBy","readerDescribedBy","titleElement","titleId","textContent","descriptionElement","descriptionId","populateString","toText","keyboardOptions","mouseOptions","_interaction","interaction","dom","trackable","draggable","swipeable","resizable","wheelable","contextMenuDisabled","inert","_tabindex","setEventDisposer","hasFocused","focusedElement","hoverOnFocus","toNumber","inertiaOptions","applyCursorStyle","handleDragStart","handleDragMove","handleDragStop","isTouchProtected","touch","originalPosition","pointer","dragStart","cancelled","dragStop","cssScale","shift","hoverOptions","_outTimeout","documentPointToSvg","SVGContainer","targetSprite","keepTargetHover","setTimeout","handleOutReal","bind","rollOutDelay","hitOptions","originalAngle","originalScale","once","body","handleToggle","isNotEmpty","urlHandler","cursorOverStyle","_baseId","setBaseId","baseSprite","url","urlTarget","window","location","href","open","swipeOptions","handleResize","dragWhileResize","svgPoint1","point1","svgPoint2","point2","svgMidPoint","getMidPoint","parentPoint1","documentPointToSprite","startPoint1","parentPoint2","startPoint2","spritePoint1","spritePoint2","spriteMidPoint","parentPoint","svgPointToSprite","cursorOptions","style","overStyle","defaultStyle","applyCursorOverStyle","downStyle","pointerEvents","getExporting","exp","_export","isStandaloneInstance","remove","nonExportableSprites","modal","has","modalPrefix","text","openModal","closeModal","popups","template","openPopup","closeAllPopups","setPercentProperty","fitToRange","getPixelX","minX","maxX","getRelativeX","getPixelY","minY","maxY","invalidateLayout","maxWidth","parentWidth","layout","align","pixelMarginLeft","pixelMarginRight","setMaxWidth","prevWidth","prevHeight","maxHeight","relativeWidth","event_2","previousWidth","previousHeight","parentHeight","valign","pixelMarginTop","pixelMarginBottom","setMaxHeight","relativeHeight","event_3","changed","percentWidth","_pixelWidth","Number","percentHeight","_relativeHeight","_pixelHeight","minWidth","minHeight","_relativeWidth","handleGlobalScale","marginTop","marginRight","marginBottom","marginLeft","getRelativeY","paddingTop","paddingRight","paddingBottom","paddingLeft","setPath","setFill","toNumberRange","setColorProperty","realFill","setStroke","realStroke","hex","_rtl","rtl","showReal","preventShow","isShowing","_hideAnimation","kill","_showHideDisposer","_isHidden","hideReal","currentSprite","hiddenState_1","getVisibility","event_4","removeClass","tooltipDataItem","_tooltipDataItem","_tooltipColorSource","tooltipPosition","lastPointer","colorSource_1","tooltipColorSource_1","tooltipColorSource","getStrokeFromObject","getFillFromObject","eachContinue","sprites","background","animationDuration","label","rgb","autoTextColor","alternative","html","uidAttr","currentText","show","pointTooltipTo","globalPoint","spritePointToSvg","getTooltipX","getTooltipY","instantly","showInViewport","pointTo","isInRectangle","closable","content","message","suppressErrors","verbose","console","log","getCursorStyle","cursorDowntyle","processConfig","processDelayedMap","grab","grabbing","horizontalResize","verticalResize","default","configOrder","setShowOnInit","_showOnInitDisposer","hideInitially","appear","_plugins","init","skippedSprites","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\core\\Sprite.ts"],"sourcesContent":["/**\r\n * This is the main class that encapsulates every object on the chart.\r\n *\r\n * If it's an element that is to be displayed on the screen at some point, its\r\n * class must extend [[Sprite]] class.\r\n */\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SpriteState } from \"./SpriteState\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"./SpriteEvents\";\r\nexport { ISpriteEvents, SpriteEventDispatcher, AMEvent };\r\n\r\nimport { BaseObjectEvents } from \"./Base\";\r\nimport { Adapter, globalAdapter } from \"./utils/Adapter\";\r\nimport { ITheme } from \"../themes/ITheme\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"./utils/Dictionary\";\r\nimport { ListTemplate, ListDisposer, List } from \"./utils/List\";\r\nimport { EventDispatcher } from \"./utils/EventDispatcher\";\r\nimport { MultiDisposer, IDisposer, Disposer, MutableValueDisposer } from \"./utils/Disposer\";\r\nimport { Animation, IAnimatable, IAnimationOptions, AnimationDisposer } from \"./utils/Animation\";\r\nimport { Optional } from \"./utils/Type\";\r\nimport { Group } from \"./rendering/Group\";\r\nimport { Paper, getGhostPaper } from \"./rendering/Paper\";\r\nimport { DataItem } from \"./DataItem\";\r\nimport { Container } from \"./Container\";\r\nimport { Pattern } from \"./rendering/fills/Pattern\";\r\nimport { LinearGradient } from \"./rendering/fills/LinearGradient\";\r\nimport { RadialGradient } from \"./rendering/fills/RadialGradient\";\r\nimport { SVGContainer } from \"./rendering/SVGContainer\";\r\nimport { Align } from \"./defs/Align\";\r\nimport { Roles, AriaLive } from \"./defs/Accessibility\";\r\nimport { IPlugin } from \"./utils/Plugin\";\r\nimport { Popup } from \"./elements/Popup\";\r\nimport { Modal } from \"./elements/Modal\";\r\nimport { Color, color, toColor } from \"./utils/Color\";\r\nimport { Ordering } from \"./utils/Order\";\r\n\r\nimport { HorizontalCenter } from \"./defs/HorizontalCenter\";\r\nimport { VerticalCenter } from \"./defs/VerticalCenter\";\r\nimport { VerticalAlign } from \"./defs/VerticalAlign\";\r\nimport { ShapeRendering } from \"./defs/ShapeRendering\";\r\nimport { AMElement } from \"./rendering/AMElement\";\r\nimport { Filter } from \"./rendering/filters/Filter\";\r\n\r\nimport { ColorModifier } from \"./rendering/fills/ColorModifier\";\r\n\r\nimport { getInteraction } from \"./interaction/Interaction\";\r\nimport { InteractionObject } from \"./interaction/InteractionObject\";\r\n\r\nimport { IInertiaOptions, ISwipeOptions, IHitOptions, IHoverOptions, ICursorOptions, IKeyboardOptions, IMouseOptions } from \"./interaction/InteractionOptions\";\r\nimport { IPointer } from \"./interaction/Pointer\";\r\nimport { MouseCursorStyle } from \"./interaction/Mouse\";\r\nimport { InertiaTypes } from \"./interaction/Inertia\";\r\nimport { IStyleProperty } from \"./defs/IStyleProperty\";\r\n\r\nimport { options } from \"./Options\";\r\nimport { registry } from \"./Registry\";\r\nimport { IPoint } from \"./defs/IPoint\";\r\nimport { IRectangle } from \"./defs/IRectangle\";\r\nimport { Tooltip } from \"./elements/Tooltip\";\r\n\r\nimport { NumberFormatter } from \"./formatters/NumberFormatter\";\r\nimport { DateFormatter } from \"./formatters/DateFormatter\";\r\nimport { DurationFormatter } from \"./formatters/DurationFormatter\";\r\nimport { getTextFormatter } from \"./formatters/TextFormatter\";\r\nimport { Language } from \"./utils/Language\";\r\nimport { Export } from \"./export/Export\";\r\nimport { AmChartsLogo } from \"./elements/AmChartsLogo\";\r\n\r\n\r\nimport { ISVGAttribute } from \"./rendering/AMElement\";\r\n\r\nimport * as $utils from \"./utils/Utils\";\r\nimport * as $math from \"./utils/Math\";\r\nimport * as $strings from \"./utils/Strings\";\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\nimport * as $iter from \"./utils/Iterator\";\r\n\r\nimport { system } from \"./System\";\r\n\r\nimport { Percent, percent } from \"./utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Sprite]]\r\n */\r\nexport interface ISpriteProperties {\r\n\tdisabled?: boolean;\r\n\tx?: number | Percent;\r\n\ty?: number | Percent;\r\n\twidth?: number | Percent;\r\n\theight?: number | Percent;\r\n\tscale?: number;\r\n\trotation?: number;\r\n\tpixelPerfect?: boolean;\r\n\tmarginLeft?: number;\r\n\tmarginRight?: number;\r\n\tmarginTop?: number;\r\n\tmarginBottom?: number;\r\n\tfillOpacity?: number;\r\n\tfill?: Color | LinearGradient | RadialGradient | Pattern;\r\n\topacity?: number;\r\n\tstroke?: Color | LinearGradient | RadialGradient | Pattern;\r\n\tstrokeOpacity?: number;\r\n\tstrokeWidth?: number;\r\n\tstrokeDasharray?: string;\r\n\tstrokeDashoffset?: number;\r\n\tstrokeLinecap?: \"butt\" | \"square\" | \"round\";\r\n\tstrokeLinejoin?: \"miter\" | \"round\" | \"bevel\";\r\n\tshapeRendering?: ShapeRendering;\r\n\tdraggable?: boolean;\r\n\tinert?: boolean;\r\n\tresizable?: boolean;\r\n\tswipeable?: boolean;\r\n\ttrackable?: boolean;\r\n\thoverable?: boolean;\r\n\tclickable?: boolean;\r\n\ttogglable?: boolean;\r\n\twheelable?: boolean;\r\n\tfocusable?: boolean;\r\n\ttabindex?: number;\r\n\tcontextMenuDisabled?: boolean;\r\n\tvisible?: boolean;\r\n\ttooltipText?: string;\r\n\ttooltipHTML?: string;\r\n\ttooltipX?: number | Percent;\r\n\ttooltipY?: number | Percent;\r\n\talwaysShowTooltip?: boolean;\r\n\ttooltipPosition?: \"fixed\" | \"pointer\";\r\n\tshowTooltipOn?: \"hover\" | \"hit\" | \"always\";\r\n\tinteractionsEnabled?: boolean;\r\n\thorizontalCenter?: HorizontalCenter;\r\n\tverticalCenter?: VerticalCenter;\r\n\talign?: Align;\r\n\tvalign?: VerticalAlign;\r\n\tpaddingLeft?: number;\r\n\tpaddingRight?: number;\r\n\tpaddingTop?: number;\r\n\tpaddingBottom?: number;\r\n\tminX?: number;\r\n\tminY?: number;\r\n\tmaxX?: number;\r\n\tmaxY?: number;\r\n\tdx?: number;\r\n\tdy?: number;\r\n\trole?: Roles;\r\n\treaderDescribedBy?: string;\r\n\treaderLabelledBy?: string;\r\n\treaderLive?: AriaLive;\r\n\treaderControls?: string;\r\n\treaderChecked?: boolean;\r\n\treaderHidden?: boolean;\r\n\treaderDescription?: string;\r\n\treaderTitle?: string;\r\n\treaderOrientation?: string;\r\n\treaderValueNow?: string;\r\n\treaderValueText?: string;\r\n\tnonScaling?: boolean;\r\n\tnonScalingStroke?: boolean;\r\n\tzIndex?: number;\r\n\tminWidth?: number;\r\n\tmaxWidth?: number;\r\n\tminHeight?: number;\r\n\tmaxHeight?: number;\r\n\tfillModifier?: ColorModifier;\r\n\tstrokeModifier?: ColorModifier;\r\n\thoverOnFocus?: boolean;\r\n\tpath?: string;\r\n\turlTarget?: string;\r\n\turl?: string;\r\n\thidden?: boolean;\r\n\tshowOnInit?: boolean;\r\n\tid?: string;\r\n\tisActive?: boolean;\r\n\tisHover?: boolean;\r\n\tuserClassName?: string;\r\n}\r\n\r\n/**\r\n * Defines animation options\r\n */\r\nexport interface ISpriteAnimationOptions {\r\n\tfrom?: Percent | Color | number | string;\r\n\tto: Percent | Color | number | string;\r\n\tproperty: any; // todo: this[\"_properties\"] can not be used here, think.\r\n}\r\n\r\n/**\r\n * Defines list ofvisual properties\r\n */\r\nexport const visualProperties: (keyof ISpriteProperties)[] = [\"fill\", \"fillOpacity\", \"stroke\", \"strokeOpacity\", \"strokeWidth\", \"strokeDasharray\", \"strokeDashoffset\", \"strokeLinecap\", \"strokeLinejoin\"]; // do not add opacity here, as it is used for showing/hiding\r\n\r\n/**\r\n * Represents a list of available adapters for [[Sprite]]\r\n */\r\nexport interface ISpriteAdapters extends ISpriteProperties {\r\n\r\n\tpixelHeight: number;\r\n\tpixelWidth: number;\r\n\trelativeHeight: number\r\n\trelativeWidth: number;\r\n\tmeasuredHeight: number;\r\n\tmeasuredWidth: number;\r\n\touterHeight: number;\r\n\touterWidth: number;\r\n\tinnerHeight: number;\r\n\tinnerWidth: number;\r\n\tglobalScale: number;\r\n\tpixelMarginRight: number;\r\n\trelativeMarginRight: number;\r\n\tpixelMarginLeft: number;\r\n\trelativeMarginLeft: number;\r\n\tpixelMarginTop: number;\r\n\trelativeMarginTop: number;\r\n\tpixelMarginBottom: number;\r\n\trelativeMarginBottom: number;\r\n\tpixelX: number;\r\n\trelativeX: number;\r\n\tpixelY: number;\r\n\trelativeY: number;\r\n\tmask: Sprite;\r\n\tpopulateString: string;\r\n\r\n\tinertiaOptions: Dictionary<InertiaTypes, IInertiaOptions>;\r\n\thitOptions: IHitOptions;\r\n\thoverOptions: IHoverOptions;\r\n\tswipeOptions: ISwipeOptions;\r\n\tkeyboardOptions: IKeyboardOptions;\r\n\tmouseOptions: IMouseOptions;\r\n\tcursorOptions: ICursorOptions;\r\n\tcriticalError: Error;\r\n};\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Sprite represents any displayable element.\r\n *\r\n * This is the main class that encapsulates every object on the chart.\r\n *\r\n * If it's an element that is to be displayed on the screen at some point, its\r\n * class must extend [[Sprite]] class.\r\n *\r\n * [[Sprite]] class represents the a hierarchical structure. Every object that\r\n * extends [[Sprite]] can have children, that would inherit their properties,\r\n * such as language, formatters, etc.\r\n *\r\n * @see {@link SpriteState}\r\n * @see {@link ISpriteEvents} for a list of available events\r\n * @see {@link ISpriteAdapters} for a list of available Adapters\r\n *\r\n * @todo Review child elements that need to go into `_disposers`\r\n * @important\r\n */\r\nexport class Sprite extends BaseObjectEvents implements IAnimatable {\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: ISpriteProperties;\r\n\r\n\t/**\r\n\t * Defines state type.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\t//public _state: SpriteState;\r\n\r\n\t/**\r\n\t * Defines type used in the Sprite.\r\n\t */\r\n\tpublic _adapter!: ISpriteAdapters;\r\n\r\n\t/**\r\n\t * Holds values for Sprite's properties.\r\n\t */\r\n\tpublic properties: this[\"_properties\"] = {};\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISpriteEvents;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _eventDispatcher: SpriteEventDispatcher<AMEvent<this, this[\"_events\"]>> = new SpriteEventDispatcher(this);\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/event-listeners/} for more info about Events\r\n\t */\r\n\tpublic get events(): SpriteEventDispatcher<AMEvent<this, this[\"_events\"]>> {\r\n\t\treturn this._eventDispatcher;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _adapterO: Adapter<this, this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * Holds Adapter.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/adapters/} for more info about Adapters\r\n\t */\r\n\tpublic get adapter(): Adapter<this, this[\"_adapter\"]> {\r\n\t\tif (!this._adapterO) {\r\n\t\t\tthis._adapterO = new Adapter<this, this[\"_adapter\"]>(this);\r\n\t\t}\r\n\t\treturn this._adapterO;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprivate _bindings: { [key: string]: IDisposer } = {};\r\n\r\n\t/**\r\n\t * Holds indicator if this Sprite is a \"template\" to be used for creating\r\n\t * other Sprites from and should not be treated as full-fledged element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _isTemplate: boolean = false;\r\n\r\n\tprotected _isPath: boolean = false;\r\n\r\n\t/**\r\n\t * Holds collection of Sprite States.\r\n\t */\r\n\tpublic _states: $type.Optional<DictionaryTemplate<string, SpriteState<this[\"_properties\"], this[\"_adapter\"]>>>;\r\n\r\n\t/**\r\n\t * Holds indicator whether this sprite was already initialized.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _inited: boolean = false;\r\n\r\n\t/**\r\n\t * Holds indicator whether this sprite was already initialized and ready.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _ready: boolean = false;\r\n\r\n\t/**\r\n\t * A reference to a Tooltip for this Sprite.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _tooltip: $type.Optional<Tooltip>;\r\n\r\n\t/**\r\n\t * A special data item which tooltip will use when formatting data. In case\r\n\t * it is not set, dataItem will be used.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _tooltipDataItem: $type.Optional<DataItem>;\r\n\r\n\t/**\r\n\t * A reference to another sprite or sprite template from which tooltip should take colors if getFillFromObject or getStrokeFromObject are set to true.\r\n\t * Mostly used when we need to adjust tooltip color for a series, depending on column or bullet color.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _tooltipColorSource: $type.Optional<Sprite>;\r\n\r\n\t/**\r\n\t * If `sprite.hide()` is called and we have \"hidden\" state and\r\n\t * `transitionDuration > 0`, we set `isHiding` flag to `true` in order to\r\n\t * avoid restarting animations in case `hide()` method is called multiple\r\n\t * times.\r\n\t */\r\n\tpublic isHiding: boolean = false;\r\n\r\n\t/**\r\n\t * If `sprite.hide()` is called, we set isHidden to true when sprite is hidden.\r\n\t * This was added becaus hidden state might have visibility set to true and so\r\n\t * there would not be possible to find out if a sprite is technically hidden or not.\r\n\t */\r\n\tprotected _isHidden: boolean = false;\r\n\r\n\t/**\r\n\t * This property indicates if Sprite is currently being revealed from hidden\r\n\t * state. This is used to prevent multiple calls to `sprite.show()` to\r\n\t * restart reveal animation. (if enabled)\r\n\t */\r\n\tpublic isShowing: boolean = false;\r\n\r\n\t/**\r\n\t * Indicates if this element is a standalone instance. A \"standalone\r\n\t * instance\" means this is a autonomous object which maintains its own\r\n\t * set of controls like Preloader, Export, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic isStandaloneInstance: boolean = false;\r\n\r\n\t/**\r\n\t * Indicates if togglable Sprite is currently active (toggled on).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _isActive: boolean = false;\r\n\r\n\t/**\r\n\t * A Sprite element to use as a mask for this Sprite.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _mask = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _clipPath: Optional<Group>;\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _clipElement: $type.Optional<AMElement>;\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _positionPrecision: number = 3;\r\n\r\n\t/**\r\n\t * Holds reference to Sprite's [[InteractionObject]]. Sprite does not\r\n\t * perform any user interactions directly, it happens via [[InteractionObject]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _interaction: $type.Optional<InteractionObject>;\r\n\r\n\t/**\r\n\t * An instance of [[Language]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _language = new MutableValueDisposer<Language>();\r\n\r\n\t/**\r\n\t * An instance of [[NumberFormatter]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _numberFormatter: $type.Optional<NumberFormatter>;\r\n\r\n\t/**\r\n\t * An instance of [[DateFormatter]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _dateFormatter: $type.Optional<DateFormatter>;\r\n\r\n\t/**\r\n\t * An instance of [[DurationFormatter]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _durationFormatter: $type.Optional<DurationFormatter>;\r\n\r\n\t/**\r\n\t * An HTML element to which [[svgContainer]] is added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _htmlContainer: $type.Optional<HTMLElement>;\r\n\r\n\t/**\r\n\t * An HTML element to which all chart elements are added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _svgContainer: $type.Optional<SVGContainer>;\r\n\r\n\t/**\r\n\t * A [[Container]] instance to place this element's [[Tooltip]] elements in\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _tooltipContainer: $type.Optional<Container>;\r\n\r\n\r\n\tprotected _urlDisposer: $type.Optional<IDisposer>;\r\n\r\n\t/**\r\n\t * Should this element be measured when measuring its parent container's\r\n\t * dimentions?\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _isMeasured: $type.Optional<boolean>;\r\n\r\n\t/**\r\n\t * Indicates if the chart should follow right-to-left rules.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _rtl: boolean;\r\n\r\n\t/**\r\n\t * Holds [[Export]] object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _exporting = new MutableValueDisposer<Export>();\r\n\r\n\t/**\r\n\t * Should this Sprite be included when exporting?\r\n\t */\r\n\tprotected _exportable: boolean = true;\r\n\r\n\t/**\r\n\t * A reference to a top-level SVG node for this Sprite element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _element: Optional<AMElement>;\r\n\r\n\t/**\r\n\t * Holds Sprite's main SVG group (`<g>`) element. Other Sprite's elements\r\n\t * are all placed in this group.\r\n\t */\r\n\tpublic group: Group;\r\n\r\n\t/**\r\n\t * A reference to [[Paper]] SVG renderer used to create SVG nodes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _paper: $type.Optional<Paper>;\r\n\r\n\t/**\r\n\t * Elements's top-level [[Container]].\r\n\t *\r\n\t *\r\n\t * @return Top-level ascendant\r\n\t */\r\n\tprotected _topParent: Optional<Container>;\r\n\r\n\t/**\r\n\t * Data item assigned to the sprite. It might contain information defining\r\n\t * some style properties.\r\n\t */\r\n\tpublic _dataItem: $type.Optional<DataItem>;\r\n\r\n\t/**\r\n\t * Parent container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _parent: Container;\r\n\r\n\t/**\r\n\t * Sprite's \"virtual\" parent.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _virtualParent: Sprite;\r\n\r\n\t/**\r\n\t * Defines bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _bbox: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t/**\r\n\t * Base tab index for the Sprite. Used for TAB-key selection order.\r\n\t *\r\n\t * Use accessors `tabIndex` to set and retrieve.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _tabindex: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * Should system tooltips be allowed to be displayed if the element has\r\n\t * `readerTitle` set?\r\n\t *\r\n\t * Use accessors `showSystemTooltip` to set and retrieve.\r\n\t *\r\n\t * This is an accessibility feature.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _showSystemTooltip: $type.Optional<boolean>;\r\n\r\n\t/**\r\n\t * List of animations currently playing for this Sprite.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _animations: $type.Optional<Array<Animation>>;\r\n\r\n\t/**\r\n\t * A link to [[Disposer]] for event handler which is attached to hide\r\n\t * animation. In some cases we need to cancel this event. This property is\r\n\t * used to hold the reference to disposer of this event so that we can\r\n\t * cancel it by calling its `dispose()` method.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _showHideDisposer: $type.Optional<IDisposer>;\r\n\r\n\t/**\r\n\t * If element is currently hiding, this property will hold a reference to\r\n\t * [[Animation]] instance, which is handling hiding animation.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _hideAnimation: $type.Optional<Animation>;\r\n\r\n\t/**\r\n\t * List of [[Filter]] items that are currently applied to the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _filters: $type.Optional<List<Filter>>;\r\n\r\n\t/**\r\n\t * A shortcut to the special \"Focus\" filter which is applied when the element\r\n\t * gains focus.\r\n\t *\r\n\t * This is an accessibility feature.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _focusFilter: $type.Optional<Filter>;\r\n\r\n\t/**\r\n\t * Indicates if this element is invalid and should be re-validated (redrawn).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalid: boolean = false;\r\n\r\n\t/**\r\n\t * Indicates if this elements position is invalid and should be repositioned\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic positionInvalid: boolean = false;\r\n\r\n\t/**\r\n\t * A collection of key/value pairs that can be used to bind specific Sprite\r\n\t * properties to [[DataItem]].\r\n\t *\r\n\t * For example: `fill` property can be bound to `myCustomColor` field in\r\n\t * DataItem. The Sprite will automatically get the value for `fill` from its\r\n\t * DataItem.\r\n\t *\r\n\t * Can be set for each [[SpriteState]] individually to override default\r\n\t * bindings.\r\n\t *\r\n\t * @see {@link SpriteState}\r\n\t */\r\n\tpublic propertyFields: { [index in keyof this[\"_properties\"]]?: string } = {};\r\n\t//public propertyFields: Dictionary<keyof this[\"_properties\"], string> = new Dictionary<keyof this[\"_properties\"], string>();\r\n\r\n\t/**\r\n\t * Element's relative width.\r\n\t *\r\n\t * Do not set this property directly. Use `width` accessor with [[Percent]]\r\n\t * value instead.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic percentWidth: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * Element's relative height.\r\n\t *\r\n\t * Do not set this property directly. Use `height` accessor with [[Percent]]\r\n\t * value instead.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic percentHeight: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * An SVG group element that is used to put all SVG filters to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic filterElement: $type.Optional<Group>;\r\n\r\n\t/**\r\n\t * A field in data context of element's `dataItem` that holds config values\r\n\t * for this element.\r\n\t *\r\n\t * This is a very powerful feature, allowing changing virtually any setting,\r\n\t * including those for element's children, for the element via data.\r\n\t *\r\n\t * Example data:\r\n\t *\r\n\t * ```JSON\r\n\t * {\r\n\t *   \"value\": 100,\r\n\t *   \"config\": {\r\n\t *     \"fill\": \"#F00\"\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * If you set element's `configField = \"config\"`, the element for this\r\n\t * specific data point will have a red fill.\r\n\t */\r\n\tpublic configField: $type.Optional<string>;\r\n\r\n\t/**\r\n\t * Reference to element's `<title>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _titleElement: Optional<AMElement>;\r\n\r\n\t/**\r\n\t * Reference to element's `<description>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _descriptionElement: Optional<AMElement>;\r\n\r\n\t/**\r\n\t * Specifies if property changes on this object should be propagated to the\r\n\t * objects cloned from this object.\r\n\t *\r\n\t * This setting affects property changes *after* cloning, since at the moment\r\n\t * of cloning all of properties from source object are copied to the clone\r\n\t * anyway.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tpublic applyOnClones: boolean = false;\r\n\r\n\t/**\r\n\t * a reference to an object which should be used when populating string. used for tooltip label mostly.\r\n\t * @ignore\r\n\t */\r\n\tpublic populateStringFrom: any;\r\n\r\n\t/**\r\n\t * Internal storage properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected _measuredWidth: number;\r\n\tprotected _measuredHeight: number;\r\n\r\n\t// unrotated unscaled\r\n\tprotected _measuredWidthSelf: number = 0;\r\n\tprotected _measuredHeightSelf: number = 0;\r\n\r\n\tprotected _prevMeasuredWidth: number;\r\n\tprotected _prevMeasuredHeight: number;\r\n\r\n\tprotected _pixelWidth: $type.Optional<number>;\r\n\tprotected _pixelHeight: $type.Optional<number>;\r\n\r\n\tprotected _relativeWidth: $type.Optional<number>;\r\n\tprotected _relativeHeight: $type.Optional<number>;\r\n\r\n\t// read only, sprite extreme coordinates\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic maxLeft: number = 0;\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic maxRight: number = 0;\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic maxTop: number = 0;\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic maxBottom: number = 0;\r\n\r\n\t// not rotated and not scaled\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic maxLeftSelf: number = 0;\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic maxRightSelf: number = 0;\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic maxTopSelf: number = 0;\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic maxBottomSelf: number = 0;\r\n\r\n\tprotected _isDragged: boolean = false;\r\n\r\n\tprotected _isResized: boolean = false;\r\n\r\n\t/**\r\n\t * @deprecated Moved to [[SpriteProperties]]\r\n\t */\r\n\tprotected _disabled: boolean = false;\r\n\r\n\tprotected _internalDisabled: boolean = false;\r\n\r\n\tprotected _updateDisabled: boolean = false;\r\n\r\n\tprotected _maskRectangle: $type.Optional<IRectangle>;\r\n\r\n\tprotected _internalDefaultsApplied: boolean = false;\r\n\r\n\tprotected _interactionDisposer: $type.Optional<IDisposer>;\r\n\r\n\t/**\r\n\t * You can set bbox from outside if you know what size your element must be (used in radar chart for example)\r\n\t * @ignore\r\n\t */\r\n\tpublic definedBBox: IRectangle;\r\n\r\n\t/**\r\n\t * Time in milliseconds after which rollout event happens when user rolls-out of the sprite. This helps to avoid flickering in some cases.\r\n\t */\r\n\tpublic rollOutDelay: number = 0;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _outTimeout: $type.Optional<IDisposer>;\r\n\r\n\t/**\r\n\t * This flag is set to `true` for the initial sprite you create and place\r\n\t * to the div so that we could clear all additional\r\n\t * sprites/containers when this sprite is disposed.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic isBaseSprite: boolean = false;\r\n\r\n\t/**\r\n\t * Indicates whether this sprite should be cloned when cloning its parent\r\n\t * container. We set this to `false` in those cases when a sprite is created\r\n\t * by the class, so that when cloning a duplicate sprite would not appear.\r\n\t */\r\n\tpublic shouldClone: boolean = true;\r\n\r\n\t/**\r\n\t * A property which you can use to store any data you want.\r\n\t */\r\n\tpublic dummyData: any;\r\n\r\n\t/**\r\n\t * A reference to a real fill object. Sometimes might be useful to modify\r\n\t * gradient (when fill is color but we have FillModifier).\r\n\t */\r\n\tpublic realFill: Color | Pattern | LinearGradient | RadialGradient;\r\n\r\n\t/**\r\n\t * A reference to a real stroke object. Sometimes might be useful to modify\r\n\t * gradient (when fill is color but we have a FillModifier).\r\n\t */\r\n\tpublic realStroke: Color | Pattern | LinearGradient | RadialGradient;\r\n\r\n\t/**\r\n\t * A reference to amCharts logo element.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic logo: AmChartsLogo;\r\n\r\n\t/**\r\n\t * [_baseId description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _baseId: string;\r\n\r\n\t/**\r\n\t * A read-only flag which indicates if a sprite has completed its initial\r\n\t * animation (if `showOnInit = true`).\r\n\t *\r\n\t * In case `showOnInit = false`, `appeared` is set to `true` on init.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic appeared: boolean = false;\r\n\r\n\t/**\r\n\t * [ex description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore\r\n\t */\r\n\tpublic ex: number = 0;\r\n\r\n\t/**\r\n\t * [ey description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore\r\n\t */\r\n\tpublic ey: number = 0;\r\n\r\n\t/**\r\n\t * [_showOnInitDisposer description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _showOnInitDisposer: MultiDisposer;\r\n\r\n\t/**\r\n\t * Holds the list of plugins attached to this Sprite.\r\n\t */\r\n\tprotected _plugins: $type.Optional<List<IPlugin>>;\r\n\r\n\t/**\r\n\t * Indicates if the sprite can be moved around when resizing it with two fingers (will only work if draggable = false)\r\n\t * @ignore\r\n\t */\r\n\tpublic dragWhileResize: boolean = false;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic vpDisposer: MultiDisposer;\r\n\r\n\tprotected _alwaysShowDisposers: IDisposer[];\r\n\r\n\t/**\r\n\t *  @ignore\r\n\t */\r\n\tpublic measureFailed: boolean = false;\r\n\r\n\t/**\r\n\t * If this flag is set to true, calling show() will not reveal the sprite.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic preventShow: boolean = false;\r\n\r\n\t/**\r\n\t * When cloning a sprite, if the template has it's own tooltip assigned, this tooltip is also cloned by default.\r\n\t * This is not good for cpu and sometimes you might only need one single tooltip for all clones. Set this to false in order not to clone tooltip.\r\n\t */\r\n\tpublic cloneTooltip: boolean = true;\r\n\r\n\t/**\r\n\t * Constructor:\r\n\t * * Creates initial node\r\n\t * * Sets default properties\r\n\t * * Creates required default states\r\n\t * * Inits accessibility\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"Sprite\";\r\n\r\n\t\tthis._disposers.push(this._eventDispatcher);\r\n\r\n\t\t// Generate a unique ID\r\n\t\t$utils.used(this.uid);\r\n\r\n\t\t// Create SVG group to hold everything in\r\n\t\tthis.group = this.paper.addGroup(\"g\");\r\n\r\n\t\t// Set defaults\r\n\t\t// it is better to set defauls like this in order to save invaliation calls and events\r\n\t\tthis.setPropertyValue(\"scale\", 1);\r\n\t\tthis.setPropertyValue(\"rotation\", 0);\r\n\t\tthis.setPropertyValue(\"align\", \"none\");\r\n\t\tthis.setPropertyValue(\"valign\", \"none\");\r\n\t\tthis.setPropertyValue(\"pixelPerfect\", false);\r\n\t\tthis.setPropertyValue(\"visible\", true);\r\n\t\tthis.setPropertyValue(\"tooltipPosition\", \"fixed\");\r\n\t\tthis.setPropertyValue(\"verticalCenter\", \"none\");\r\n\t\tthis.setPropertyValue(\"horizontalCenter\", \"none\");\r\n\r\n\t\tthis.setPropertyValue(\"tooltipX\", percent(50));\r\n\t\tthis.setPropertyValue(\"tooltipX\", percent(50));\r\n\r\n\t\tthis.setPropertyValue(\"marginTop\", 0);\r\n\t\tthis.setPropertyValue(\"marginBottom\", 0);\r\n\t\tthis.setPropertyValue(\"marginLeft\", 0);\r\n\t\tthis.setPropertyValue(\"marginRight\", 0);\r\n\r\n\t\tthis.setPropertyValue(\"dx\", 0);\r\n\t\tthis.setPropertyValue(\"dy\", 0);\r\n\r\n\t\tthis.setPropertyValue(\"paddingTop\", 0);\r\n\t\tthis.setPropertyValue(\"paddingBottom\", 0);\r\n\t\tthis.setPropertyValue(\"paddingRight\", 0);\r\n\t\tthis.setPropertyValue(\"paddingLeft\", 0);\r\n\r\n\t\tthis.setPropertyValue(\"togglable\", false);\r\n\t\tthis.setPropertyValue(\"hidden\", false);\r\n\t\tthis.setPropertyValue(\"urlTarget\", \"_self\");\r\n\t\tthis.setPropertyValue(\"alwaysShowTooltip\", false);\r\n\t\tthis.setPropertyValue(\"showTooltipOn\", \"hover\");\r\n\r\n\t\tthis._prevMeasuredWidth = 0;\r\n\t\tthis._prevMeasuredHeight = 0;\r\n\t\tthis._measuredWidth = 0;\r\n\t\tthis._measuredHeight = 0;\r\n\r\n\t\tthis._isMeasured = true;\r\n\r\n\t\t// Invalidate the Sprite so that renderer knows it needs to be drawn\r\n\t\tthis.invalidate();\r\n\r\n\t\t//this.states.create(\"default\").properties.opacity = 1;\r\n\r\n\t\t// Apply the theme\r\n\t\tthis.applyTheme();\r\n\r\n\t\t//this._disposers.push(this._clickable);\r\n\r\n\t\t// Decorate adapter with events so that we can apply its settings whenever\r\n\t\t// it is modified\r\n\t\t// @todo Think what to do here. We can't just apply the adapter value to\r\n\t\t// property since not all of those are for properties. Commented out for\r\n\t\t// now.\r\n\t\t/*this.adapter.events.on(\"inserted\", (ev: any) => {\r\n\t\t\t(<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];\r\n\t\t});\r\n\t\tthis.adapter.events.on(\"removed\", (ev: any) => {\r\n\t\t\t(<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];\r\n\t\t});*/\r\n\r\n\t\t// Add disposable dependencies to `_disposers` so they are automatically\r\n\t\t// disposed of when this object is disposed\r\n\t\tthis._disposers.push(this.events);\r\n\t\tthis._disposers.push(this.group);\r\n\t\tthis._disposers.push(this._mask);\r\n\t\tthis._disposers.push(this._language);\r\n\t\tthis._disposers.push(this._exporting);\r\n\t\t//this._disposers.push(this._parent);\r\n\t\t//this._disposers.push(this._modal);\r\n\r\n\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t$object.each(this._bindings, (key, value) => {\r\n\t\t\t\tvalue.dispose();\r\n\t\t\t});\r\n\t\t}));\r\n\r\n\t\tthis.setPropertyValue(\"interactionsEnabled\", true);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * ELEMENT VALIDATION, INIT, AND DRAWING STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Applies properties from all assigned themes.\r\n\t *\r\n\t * We do this here so that we can apply class names as well.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic applyTheme(): void {\r\n\t\tsuper.applyTheme();\r\n\t\tif (options.autoSetClassName) {\r\n\t\t\tthis.setClassName();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns theme(s) used by this object either set explicitly on this\r\n\t * element, inherited from parent, or inherited from [[System]].\r\n\t *\r\n\t * @return An array of theme references\r\n\t */\r\n\tpublic getCurrentThemes(): ITheme[] {\r\n\t\tconst themes = this._themes;\r\n\r\n\t\tif (themes) {\r\n\t\t\treturn themes;\r\n\r\n\t\t} else {\r\n\t\t\tconst parent = this._parent;\r\n\r\n\t\t\tif (parent) {\r\n\t\t\t\treturn parent.getCurrentThemes();\r\n\r\n\t\t\t} else {\r\n\t\t\t\treturn registry.themes;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Called just before element's validation, this function allows setting\r\n\t * defaults.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\t// Nothing here, but extending classes might override this function\r\n\t\t// so that they can set their defaults\r\n\t\tthis._internalDefaultsApplied = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates element.\r\n\t *\r\n\t * Object will be redrawn during the next update cycle.\r\n\t *\r\n\t * Please note that in most cases elements will auto-invalidate when needed. If\r\n\t * everything works, DO NOT use this method. Use it only if some changes do\r\n\t * not take otherwise.\r\n\t */\r\n\tpublic invalidate(): void {\r\n\t\tif (this.disabled || this._isTemplate || this.__disabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// We no longer reset this on each invalidate, so that they are applied\r\n\t\t// only once, and do not overwrite user-defined settings\r\n\t\t//this._internalDefaultsApplied = false;\r\n\r\n\t\tif (!this.invalid) {\r\n\t\t\tthis.invalid = true;\r\n\t\t\tregistry.addToInvalidSprites(this);\r\n\t\t\tsystem.requestFrame();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates element:\r\n\t * * Triggers events\r\n\t * * Redraws the element\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tthis.dispatchImmediately(\"beforevalidated\");\r\n\r\n\t\t// prevents from drawing if topparent is 0x0\r\n\t\t/*\r\n\t\tlet topParent = this.topParent;\r\n\r\n\t\tif (topParent) {\r\n\t\t\tif (!topParent.maxWidth || !topParent.maxHeight) {\r\n\t\t\t\tthis._disposers.push(topParent.events.once(\"maxsizechanged\", this.invalidate, this));\r\n\t\t\t}\r\n\t\t}*/\r\n\r\n\t\t// Set internal defaults\r\n\t\tif (!this._internalDefaultsApplied) {\r\n\t\t\tthis.applyInternalDefaults();\r\n\t\t}\r\n\r\n\t\tthis.beforeDraw();\r\n\t\tthis.draw();\r\n\r\n\t\tthis.invalid = false;\r\n\r\n\t\tregistry.removeFromInvalidSprites(this);\r\n\t\tthis.afterDraw();\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates element's position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidatePosition(): void {\r\n\t\tif (this.disabled || this._isTemplate) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!this.positionInvalid) {\r\n\t\t\tthis.positionInvalid = true;\r\n\t\t\tregistry.addToInvalidPositions(this);\r\n\t\t\tsystem.requestFrame();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Transforms the element.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition(): void {\r\n\r\n\t\tlet pixelX = this.pixelX;\r\n\t\tlet pixelY = this.pixelY;\r\n\t\tlet dx = this.dx;\r\n\t\tlet dy = this.dy;\r\n\r\n\t\tlet x: number = pixelX + dx;\r\n\t\tlet y: number = pixelY + dy;\r\n\r\n\t\tif (this._updateDisabled) {\r\n\t\t\tif (this._internalDisabled) {\r\n\t\t\t\tthis.group.attr({ \"display\": \"none\" })\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (!this.disabled) {\r\n\t\t\t\t\tthis.removeSVGAttribute(\"display\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._updateDisabled = false;\r\n\t\t}\r\n\r\n\t\tlet sizeChanged: boolean = this.measure();\r\n\r\n\t\t//if (!this.invalid) {\r\n\t\tlet prevGroupTransform: string = this.group.transformString;\r\n\r\n\t\tthis.group.moveTo({ x: x, y: y });\r\n\t\tthis.group.rotation = this.rotation;\r\n\t\tif (this.nonScaling) {\r\n\t\t\tthis.group.scale = this.scale / this.globalScale;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.group.scale = this.scale;\r\n\t\t}\r\n\r\n\t\tif (prevGroupTransform != this.group.transformString || sizeChanged) {\r\n\t\t\t// not yet sure, this is to avoid many transforms=>container layout invalidation on initial buid\r\n\t\t\tif (prevGroupTransform == null) {\r\n\t\t\t\tthis.dispatch(\"transformed\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.dispatchImmediately(\"transformed\");\r\n\t\t\t}\r\n\t\t\t// TODO clear existing positionchanged dispatches ?\r\n\t\t\tthis.dispatch(\"positionchanged\");\r\n\r\n\t\t\tif (this.showTooltipOn == \"hit\" || this.showTooltipOn == \"always\") {\r\n\t\t\t\tthis.updateTooltipPosition();\r\n\t\t\t}\r\n\t\t}\r\n\t\t//}\r\n\r\n\t\t// it might happen that x and y changed again, so we only remove if they didn't\r\n\t\tif (pixelX + dx == x && pixelY + dy == y) {\r\n\t\t\tregistry.removeFromInvalidPositions(this);\r\n\t\t\tthis.positionInvalid = false;\r\n\t\t}\r\n\t\tlet maskRectangle = this._maskRectangle;\r\n\t\t// todo: verify this\r\n\t\tif (maskRectangle) {\r\n\t\t\tthis._clipElement.moveTo({ x: maskRectangle.x - pixelX, y: maskRectangle.y - pixelY });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A placeholder method that is called **before** element begins to be drawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A placeholder method that draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected draw(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A placeholder method that is called **after** element finishes drawing\r\n\t * itself.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tif (this.isMeasured || this.horizontalCenter !== \"none\" || this.verticalCenter !== \"none\") {\r\n\t\t\tthis.measureElement();\r\n\t\t}\r\n\r\n\t\t//this.applyMask();\r\n\r\n\t\tif (!this._inited) {\r\n\t\t\tif (this._adapterO) {\r\n\t\t\t\t// used to be applySVGAttrbutes here, this is more efficient\r\n\t\t\t\tfor (let key of this._adapterO.keys()) {\r\n\t\t\t\t\tswitch (key) {\r\n\t\t\t\t\t\tcase \"mask\":\r\n\t\t\t\t\t\tcase \"fill\":\r\n\t\t\t\t\t\tcase \"opacity\":\r\n\t\t\t\t\t\tcase \"fillOpacity\":\r\n\t\t\t\t\t\tcase \"stroke\":\r\n\t\t\t\t\t\tcase \"strokeOpacity\":\r\n\t\t\t\t\t\tcase \"strokeWidth\":\r\n\t\t\t\t\t\tcase \"shapeRendering\":\r\n\t\t\t\t\t\tcase \"strokeDasharray\":\r\n\t\t\t\t\t\tcase \"strokeDashoffset\":\r\n\t\t\t\t\t\tcase \"strokeLinecap\":\r\n\t\t\t\t\t\tcase \"strokeLinejoin\":\r\n\t\t\t\t\t\tcase \"textDecoration\":\r\n\t\t\t\t\t\tcase \"fontSize\":\r\n\t\t\t\t\t\tcase \"fontFamily\":\r\n\t\t\t\t\t\tcase \"fontWeight\":\r\n\t\t\t\t\t\t\t//case \"focusable\":\r\n\t\t\t\t\t\t\t//case \"tabindex\":\r\n\t\t\t\t\t\t\t//case \"role\":\r\n\t\t\t\t\t\t\t(<any>this)[key] = (<any>this)[key];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.applyFilters();\r\n\r\n\t\t\tthis.visible = this.visible;\r\n\t\t\tthis.interactionsEnabled = this.getPropertyValue(\"interactionsEnabled\"); // can't use .interactionsEnabled as it get's parent's\r\n\r\n\t\t\tthis._inited = true;\r\n\r\n\t\t\tif (!this.showOnInit) {\r\n\t\t\t\tthis.appeared = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.hidden) {\r\n\t\t\t\tthis.hide(0);\r\n\t\t\t}\r\n\r\n\t\t\tthis.applyMask();\r\n\t\t\tthis.dispatch(\"validated\");\r\n\t\t\tthis.dispatch(\"inited\");\r\n\t\t\tthis.dispatchReady();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.dispatch(\"validated\");\r\n\t\t}\r\n\r\n\t\tif (this.showTooltipOn == \"always\") {\r\n\t\t\tif (this.visible && !this.disabled && !this.__disabled) {\r\n\t\t\t\tthis.showTooltip();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.hideTooltip(0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches `\"ready\"` event. Sprite dispatches it right after `\"inited\"` event.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic dispatchReady(): void {\r\n\t\tif (!this.isReady()) {\r\n\t\t\tthis._ready = true;\r\n\t\t\tthis.dispatch(\"ready\");\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Triggers a re-initialization of this element.\r\n\t *\r\n\t * Will result in complete redrawing of the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic reinit(): void {\r\n\t\tthis._inited = false;\r\n\t\tthis.setState(this.defaultState);\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the situation where parent element is resized.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleGlobalScale(): void {\r\n\t\tthis.dispatch(\"globalscalechanged\");\r\n\r\n\t\tif (this.nonScalingStroke) {\r\n\t\t\tthis.strokeWidth = this.strokeWidth;\r\n\t\t}\r\n\r\n\t\tif (this.nonScaling) {\r\n\t\t\tthis.validatePosition();\r\n\t\t}\r\n\r\n\t\tthis.updateFilterScale();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates filter properties which might depend on scale\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateFilterScale(): void {\r\n\t\t$iter.each(this.filters.iterator(), (filter) => {\r\n\t\t\tfilter.scale = this.globalScale;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Removes itself from system's invalid lists.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected removeFromInvalids() {\r\n\t\tregistry.removeFromInvalidSprites(this);\r\n\t\tregistry.removeFromInvalidPositions(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Sprite]].\r\n\t *\r\n\t * @param source Source Sprite\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tthis.isMeasured = source.isMeasured;\r\n\r\n\t\tthis.states.copyFrom(source.states);\r\n\r\n\t\tif (source.filters.length > 0) {\r\n\t\t\tsource.filters.each((filter) => {\r\n\t\t\t\tthis.filters.push(filter.clone());\r\n\t\t\t})\r\n\t\t}\r\n\t\tif (source._adapterO) {\r\n\t\t\tthis.adapter.copyFrom(source._adapterO);\r\n\t\t}\r\n\r\n\t\t//helps to avoid calling getter which creates instance\r\n\t\tif ((<any>source)[\"_interaction\"]) {\r\n\t\t\tthis.interactions.copyFrom(source.interactions);\r\n\t\t}\r\n\r\n\t\tif ((<any>source)[\"_plugins\"]) {\r\n\t\t\tthis.plugins.copyFrom(source.plugins);\r\n\t\t}\r\n\r\n\t\tthis.configField = source.configField;\r\n\r\n\t\tthis.applyOnClones = source.applyOnClones;\r\n\r\n\t\t// this.numberFormatter = source.numberFormatter; // todo: this creates loose number formatter and copies it to all clones. somehow we need to know if source had numberFormatter explicitly created and not just because a getter was called.\r\n\r\n\t\t//this.mask = source.mask; need to think about this, generally this causes a lot of problems\r\n\t\tthis.disabled = source.disabled;\r\n\r\n\t\tthis.virtualParent = source.virtualParent;\r\n\r\n\t\tthis.exportable = source.exportable;\r\n\t\t//@todo: create tooltip if it's on source but not on this?\r\n\t\t//const tooltip = this._tooltip;\r\n\t\t//if (tooltip) {\r\n\t\t//\ttooltip.copyFrom(source.tooltip);\r\n\t\t//}\r\n\r\n\t\tif (source._tooltip) {\r\n\t\t\tif (this._tooltip) {\r\n\t\t\t\tthis._tooltip.copyFrom(source.tooltip);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (source.cloneTooltip) {\r\n\t\t\t\t\tthis.tooltip = source.tooltip.clone();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._tooltip = source.tooltip;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//if ((<any>source)[\"_tooltip\"] && !this._tooltip) {\r\n\t\t//\tthis._tooltip = (<any>source)[\"_tooltip\"];\r\n\t\t//}\r\n\r\n\t\tthis._showSystemTooltip = source.showSystemTooltip;\r\n\r\n\t\t$utils.copyProperties(source.propertyFields, this.propertyFields);\r\n\t\t$utils.copyProperties(source.properties, this);\r\n\r\n\t\tif (source.fillModifier) {\r\n\t\t\tthis.fillModifier = source.fillModifier.clone();\r\n\t\t}\r\n\r\n\t\tif (source.strokeModifier) {\r\n\t\t\tthis.strokeModifier = source.strokeModifier.clone();\r\n\t\t}\r\n\r\n\t\tif (source.focusFilter) {\r\n\t\t\tthis.focusFilter = source.focusFilter.clone();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tif (!this.isDisposed()) {\r\n\r\n\t\t\tif (this.showTooltipOn == \"always\" && this.tooltip) {\r\n\t\t\t\tthis.tooltip.hide();\r\n\t\t\t}\r\n\r\n\t\t\tthis.dispatchImmediately(\"beforedisposed\");\r\n\r\n\t\t\tif (this.isBaseSprite) {\r\n\t\t\t\tif (this.htmlContainer) {\r\n\t\t\t\t\twhile (this.htmlContainer.childNodes.length > 0) {\r\n\t\t\t\t\t\tthis.htmlContainer.removeChild(this.htmlContainer.firstChild);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.isBaseSprite = false;\r\n\t\t\t}\r\n\r\n\t\t\tsuper.dispose();\r\n\r\n\t\t\t// Clear adapters\r\n\t\t\tif (this._adapterO) {\r\n\t\t\t\tthis._adapterO.clear();\r\n\t\t\t}\r\n\r\n\t\t\tif (this.applyOnClones) {\r\n\t\t\t\tif (this._clones) {\r\n\t\t\t\t\tfor (let i = this._clones.length - 1; i >= 0; i--) {\r\n\t\t\t\t\t\tlet clone = this._clones.getIndex(i);\r\n\t\t\t\t\t\tclone.dispose();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this._svgContainer) {\r\n\t\t\t\tthis._svgContainer.dispose();\r\n\t\t\t}\r\n\r\n\t\t\tif (this._interactionDisposer) {\r\n\t\t\t\tthis._interactionDisposer.dispose();\r\n\t\t\t\tthis._interactionDisposer = undefined;\r\n\t\t\t}\r\n\r\n\t\t\tif (this._urlDisposer) {\r\n\t\t\t\tthis._urlDisposer.dispose();\r\n\t\t\t}\r\n\r\n\t\t\tthis.removeFromInvalids();\r\n\r\n\t\t\tif (this.element) {\r\n\t\t\t\tthis.element.dispose();\r\n\t\t\t}\r\n\t\t\tif (this.group) {\r\n\t\t\t\tthis.group.dispose();\r\n\t\t\t}\r\n\r\n\t\t\tif (this._numberFormatter) {\r\n\t\t\t\tthis._numberFormatter.dispose();\r\n\t\t\t}\r\n\r\n\t\t\tif (this._focusFilter) {\r\n\t\t\t\tthis._focusFilter.dispose();\r\n\t\t\t}\r\n\r\n\t\t\tlet stroke = this.stroke;\r\n\t\t\tif (stroke && !(stroke instanceof Color) && stroke.dispose) {\r\n\t\t\t\tif (this.clonedFrom && this.clonedFrom.stroke == stroke) {\r\n\t\t\t\t\t// do nothing\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tstroke.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// TODO a bit hacky\r\n\t\t\tlet fill = this.fill;\r\n\t\t\tif (fill && !(fill instanceof Color) && fill.dispose) {\r\n\t\t\t\tif (this.clonedFrom && this.clonedFrom.fill == fill) {\r\n\t\t\t\t\t// do nothing\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfill.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// remove from map\r\n\t\t\tif ($type.hasValue(this.id)) {\r\n\t\t\t\tthis.map.removeKey(this.id);\r\n\t\t\t}\r\n\r\n\t\t\tthis.parent = undefined;\r\n\t\t\tif (this._filters) {\r\n\t\t\t\twhile (this._filters.length > 0) {\r\n\t\t\t\t\tlet filter = <Filter>this._filters.getIndex(0);\r\n\t\t\t\t\tfilter.dispose();\r\n\t\t\t\t\tthis._filters.removeValue(filter);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._alwaysShowDisposers = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this element is a \"template\".\r\n\t *\r\n\t * Template Sprites act only as a holders for config for other \"real\"\r\n\t * elements to be cloned from.\r\n\t *\r\n\t * Templates are treated differently, as they are not validated, redrawn, or\r\n\t * otherwise are processed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Is template?\r\n\t */\r\n\tpublic set isTemplate(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this._isTemplate != value) {\r\n\t\t\tthis._isTemplate = value;\r\n\r\n\t\t\tif (this instanceof Container) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tchild.isTemplate = value;\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.parent = this._parent;\r\n\t\t\t\tthis.removeFromInvalids();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Is template?\r\n\t */\r\n\tpublic get isTemplate(): boolean {\r\n\t\treturn this._isTemplate;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether the element should attempt to construct itself in a way\r\n\t * so that system tooltip is shown if its `readerTitle` is set.\r\n\t *\r\n\t * @param value Show system tooltip?\r\n\t */\r\n\tpublic set showSystemTooltip(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this._showSystemTooltip != value) {\r\n\t\t\tthis._showSystemTooltip = value;\r\n\t\t\tthis.applyAccessibility();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Show system tooltip?\r\n\t */\r\n\tpublic get showSystemTooltip(): boolean {\r\n\t\tif (!$type.hasValue(this._showSystemTooltip)) {\r\n\t\t\tif (this.virtualParent) {\r\n\t\t\t\treturn this.virtualParent.showSystemTooltip;\r\n\t\t\t}\r\n\t\t\telse if (this._parent) {\r\n\t\t\t\treturn this._parent.showSystemTooltip;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._showSystemTooltip;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * HIERARCHY AND STRUCTURE RELATED STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Sprites's top-level [[Container]].\r\n\t *\r\n\t * Please note that in most cases it won't be the chart element.\r\n\t *\r\n\t * To access base chart element, use `baseSprite` instead.\r\n\t *\r\n\t * @return Top-level ascendant\r\n\t */\r\n\tpublic get topParent(): Optional<Container> {\r\n\t\tif (this._topParent) {\r\n\t\t\treturn this._topParent;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._parent) {\r\n\t\t\t\treturn this._parent.topParent;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @param value {Container} top parent of a sprite\r\n\t */\r\n\tpublic set topParent(value: Container) {\r\n\t\tthis._topParent = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Elements' parent [[Container]].\r\n\t *\r\n\t * @param parent  Parent container\r\n\t */\r\n\tpublic set parent(parent: Optional<Container>) {\r\n\t\tif (this._isTemplate) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// TODO is this needed ?\r\n\t\t$utils.used(this.paper);\r\n\r\n\t\tlet oldParent = this._parent;\r\n\t\tif (oldParent != parent) {\r\n\r\n\t\t\tif (oldParent) {\r\n\t\t\t\toldParent.children.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._parent = parent;\r\n\r\n\t\t\tif (parent) {\r\n\r\n\t\t\t\tthis.topParent = parent.topParent;\r\n\r\n\t\t\t\tif (parent.isTemplate) {\r\n\t\t\t\t\tthis.isTemplate = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.baseId = parent.baseId;\r\n\r\n\t\t\t\tparent.children.push(this);\r\n\t\t\t\t// insert handler at Container invalidates +  invalidatesLayout + adds to group\r\n\r\n\t\t\t\tif (this._tooltip && !this._tooltipContainer) {\r\n\t\t\t\t\tthis._tooltip.parent = parent.tooltipContainer;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!this._dataItem) {\r\n\t\t\t\t\tthis.dataItem = parent.dataItem;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.handleAlwaysShowTooltip();\r\n\r\n\t\t\t\tif (this.dataItem) {\r\n\t\t\t\t\t// No need to apply accessibility if there's no data item\r\n\t\t\t\t\t// The whole reason of applying it here is to populate data\r\n\t\t\t\t\t// placesholders, and if tehre's no data item, it won't work anyway\r\n\t\t\t\t\tthis.applyAccessibility();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.dispatchImmediately(\"parentset\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.topParent = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleAlwaysShow() {\r\n\t\tthis.showTooltip();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleAlwaysShowTooltip() {\r\n\t\tlet sprite: Sprite = this;\r\n\r\n\t\tlet oldDisposers = this._alwaysShowDisposers;\r\n\t\tif (oldDisposers) {\r\n\t\t\t$array.each(oldDisposers, (oldDisposer) => {\r\n\t\t\t\toldDisposer.dispose();\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis._alwaysShowDisposers = [];\r\n\r\n\t\tif (this.showTooltipOn == \"always\") {\r\n\t\t\twhile (sprite != undefined) {\r\n\t\t\t\tlet disposer = sprite.events.on(\"visibilitychanged\", this.handleAlwaysShow, this, false);\r\n\t\t\t\tthis.addDisposer(disposer);\r\n\t\t\t\tthis._alwaysShowDisposers.push(disposer);\r\n\t\t\t\tsprite = sprite.parent;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Parent container\r\n\t */\r\n\tpublic get parent(): Optional<Container> {\r\n\t\treturn this._parent;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's \"virtual\" parent.\r\n\t *\r\n\t * This is required in ordere to maintain proper inheritance (like\r\n\t * formatters).\r\n\t *\r\n\t * Sometimes an element is a \"logical\" parent, even though it's not a direct\r\n\t * ascendant.\r\n\t *\r\n\t * Example: a bullet is not a child of the axis, but it would make sense\r\n\t * for it to inherit series' formatters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Virtual parent\r\n\t */\r\n\tpublic set virtualParent(value: Sprite) {\r\n\t\tthis._virtualParent = value;\r\n\t\tif (this.dataItem) {\r\n\t\t\t// No need to apply accessibility if there's no data item\r\n\t\t\t// The whole reason of applying it here is to populate data\r\n\t\t\t// placesholders, and if tehre's no data item, it won't work anyway\r\n\t\t\tthis.applyAccessibility();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Virtual parent\r\n\t */\r\n\tpublic get virtualParent(): Optional<Sprite> {\r\n\t\treturn this._virtualParent;\r\n\t}\r\n\r\n\t/**\r\n\t * Moves `<defs>` to correct place in DOM.\r\n\t *\r\n\t * Some elements are initially created in \"ghost\" container. When moving\r\n\t * those into proper place in DOM, their respective `<defs>` need to be moved\r\n\t * as well.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic appendDefs(): void {\r\n\r\n\t\tif (this.filterElement) {\r\n\t\t\tthis.paper.appendDef(this.filterElement);\r\n\t\t}\r\n\r\n\t\tlet fill = <any>this.fill;\r\n\r\n\t\tif (fill && fill.element) {\r\n\t\t\tthis.paper.appendDef(fill.element);\r\n\t\t}\r\n\r\n\t\tlet stroke = <any>this.stroke;\r\n\t\tif (stroke && stroke.element) {\r\n\t\t\tthis.paper.appendDef(stroke.element);\r\n\t\t}\r\n\r\n\t\tif (this.fillModifier && this.fill instanceof Color) {\r\n\t\t\tlet fill = <any>this.fillModifier.modify(this.fill);\r\n\t\t\tif (fill && fill.element) {\r\n\t\t\t\tthis.paper.appendDef(fill.element);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.strokeModifier && this.stroke instanceof Color) {\r\n\t\t\tlet stroke = <any>this.strokeModifier.modify(this.stroke);\r\n\t\t\tif (stroke && stroke.element) {\r\n\t\t\t\tthis.paper.appendDef(stroke.element);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._clipPath) {\r\n\t\t\tthis.paper.appendDef(this._clipPath);\r\n\t\t}\r\n\r\n\t\tif (this._exportable === false) {\r\n\t\t\tthis.exportable = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[Dictionary]] which maps object ids with their respective\r\n\t * objects.\r\n\t *\r\n\t * Can be used to retrieve any object by id, e.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * console.log(mySprite.map.getKey(\"myid\"));\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * console.log(mySprite.map.getKey(\"myid\"));\r\n\t * ```\r\n\t *\r\n\t * @return Map collection\r\n\t */\r\n\tpublic get map(): Dictionary<string, any> {\r\n\t\tconst top = this.topParent;\r\n\r\n\t\tif (top) {\r\n\t\t\treturn top.map;\r\n\t\t} else if (!this._map) {\r\n\t\t\tthis._map = new Dictionary<string, any>();\r\n\t\t}\r\n\r\n\t\treturn this._map;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @return Map collection\r\n\t */\r\n\tpublic get delayedMap(): Dictionary<string, any> {\r\n\t\tconst top = this.topParent;\r\n\r\n\t\tif (top) {\r\n\t\t\treturn top.delayedMap;\r\n\t\t} else if (!this._delayedMap) {\r\n\t\t\tthis._delayedMap = new Dictionary<string, any>();\r\n\t\t}\r\n\r\n\t\treturn this._delayedMap;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's user-defined ID.\r\n\t *\r\n\t * Will throw an Error if there already is an object with the same ID.\r\n\t *\r\n\t * Please note that above check will be performed withing the scope of the\r\n\t * current chart instance. It will not do checks across other chart instances\r\n\t * or in globally in DOM.\r\n\t *\r\n\t * Make sure the IDs are unique.\r\n\t *\r\n\t * @param value ID\r\n\t */\r\n\tpublic set id(value: string) {\r\n\t\tif (this._id != value) {\r\n\t\t\tthis._id = value;\r\n\t\t\tif (this.map.hasKey(value)) {\r\n\t\t\t\tthrow Error(\"Duplicate id (\" + value + \") used on multiple objects.\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.map.setKey(value, this);\r\n\t\t\t}\r\n\t\t\tif (options.autoSetClassName) {\r\n\t\t\t\tthis.setClassName();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return ID\r\n\t */\r\n\tpublic get id(): string {\r\n\t\treturn this._id;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * ELEMENT AND DOM TREE MANIPULATION AND MEASURING\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Returns DOM element reference associated with this element.\r\n\t *\r\n\t * @readonly\r\n\t * @return DOM element\r\n\t */\r\n\tpublic get dom(): SVGSVGElement {\r\n\t\treturn this.group.node;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Paper]] instance to place elements on.\r\n\t *\r\n\t * If there's no Paper set for this element, it goes up the ascendant tree\r\n\t * until it finds one.\r\n\t *\r\n\t * This method is used by important `addChild()` method, so it's essential\r\n\t * to have a [[Paper]] instance.\r\n\t *\r\n\t * If this element has a separate `htmlContainer` set, it will have a\r\n\t * [[Paper]] instance itself.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param paper  Paper\r\n\t */\r\n\tpublic set paper(paper: Paper) {\r\n\t\tthis.setPaper(paper);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets [[Paper]] instance to use to draw elements.\r\n\t * @ignore\r\n\t * @param paper Paper\r\n\t * @return true if paper was changed, false, if it's the same\r\n\t */\r\n\tpublic setPaper(paper: Paper): boolean {\r\n\t\tlet oldPaper = this._paper;\r\n\r\n\t\tif (oldPaper != paper) {\r\n\t\t\tthis._paper = paper;\r\n\r\n\t\t\tthis.appendDefs();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Paper\r\n\t */\r\n\tpublic get paper(): Paper {\r\n\t\tif (this._paper) {\r\n\t\t\treturn this._paper;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet parent = this._parent;\r\n\t\t\tif (parent) {\r\n\t\t\t\treturn parent.paper;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn getGhostPaper();\r\n\t}\r\n\r\n\t/**\r\n\t * An HTML element to be used when placing wrapper element (`<div>`)\r\n\t * for the whole chart.\r\n\t *\r\n\t * This is the same for **all** elements within the same chart.\r\n\t *\r\n\t * @param htmlContainer HTML element\r\n\t */\r\n\tpublic set htmlContainer(htmlContainer: $type.Optional<HTMLElement>) {\r\n\t\tthis._htmlContainer = htmlContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * @return HTML element\r\n\t */\r\n\tpublic get htmlContainer(): $type.Optional<HTMLElement> {\r\n\t\tif (this._htmlContainer) {\r\n\t\t\treturn this._htmlContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet parent = this._parent;\r\n\t\t\tif (parent) {\r\n\t\t\t\treturn parent.htmlContainer;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates (if not yet created) and returns element's `<title>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Title element\r\n\t */\r\n\tpublic get titleElement(): AMElement {\r\n\t\tif (!this._titleElement) {\r\n\t\t\tthis._titleElement = this.paper.add(\"title\");\r\n\t\t\tthis.group.add(this._titleElement);\r\n\t\t}\r\n\t\treturn this._titleElement;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates (if not yet created) and returns element's `<desc>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Desc element\r\n\t */\r\n\tpublic get descriptionElement(): AMElement {\r\n\t\tif (!this._descriptionElement) {\r\n\t\t\tthis._descriptionElement = this.paper.add(\"desc\");\r\n\t\t\tthis.group.add(this._descriptionElement);\r\n\t\t}\r\n\t\treturn this._descriptionElement;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns list of SVG filters (effects) applied to element. If the filter\r\n\t * list is not yet initilized, creates and returns an empty one.\r\n\t * Note, not all filters combine well with one another. We recommend using one filter per sprite.\r\n\t *\r\n\t * @return List of filters\r\n\t */\r\n\tpublic get filters(): List<Filter> {\r\n\t\tif (!this._filters) {\r\n\t\t\tthis._filters = new List<Filter>();\r\n\t\t\t// TODO only add certain events ?\r\n\t\t\tthis._disposers.push(this._filters.events.onAll(this.applyFilters, this));\r\n\t\t\tthis._disposers.push(new ListDisposer(this._filters));\r\n\t\t}\r\n\t\treturn this._filters;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets required SVG attributes. Must be called every time an element is\r\n\t * redrawn so that attributes are (re)applied.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected setSVGAttributes(): void {\r\n\t\tthis.fill = this.fill;\r\n\t\tthis.opacity = this.opacity;\r\n\t\tthis.fillOpacity = this.fillOpacity;\r\n\t\tthis.stroke = this.stroke;\r\n\t\tthis.strokeOpacity = this.strokeOpacity;\r\n\t\tthis.shapeRendering = this.shapeRendering;\r\n\t\tthis.strokeDasharray = this.strokeDasharray;\r\n\t\tthis.strokeDashoffset = this.strokeDashoffset;\r\n\t\tthis.strokeLinecap = this.strokeLinecap;\r\n\t\tthis.strokeLinejoin = this.strokeLinejoin;\r\n\t\tthis.focusable = this.focusable;\r\n\t\tthis.tabindex = this.tabindex;\r\n\t\tthis.role = this.role;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets an attribute directly on an SVG element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param attribute Attribute object\r\n\t */\r\n\tprotected setSVGAttribute(attribute: ISVGAttribute): void {\r\n\t\tthis.group.attr(attribute);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes an attribute directly from SVG element.\r\n\t *\r\n\t * @param attribute Attribute key to remove\r\n\t */\r\n\tprotected removeSVGAttribute(attribute: string): void {\r\n\t\tthis.group.removeAttr(attribute);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets `class` attribute of the elements SVG node.\r\n\t *\r\n\t * Uses `am4core.options.classNamePrefix`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic setClassName(): void {\r\n\r\n\t\tlet className = this.className;\r\n\t\tlet classNamePrefix = options.classNamePrefix;\r\n\r\n\t\tif (this.element) {\r\n\t\t\tthis.element.addClass(classNamePrefix + className);\r\n\t\t}\r\n\r\n\t\tthis.group.addClass(classNamePrefix + className + \"-group\");\r\n\r\n\t\tif ($type.hasValue(this.id)) {\r\n\t\t\tthis.group.addClass(classNamePrefix + this.id);\r\n\t\t}\r\n\r\n\t\tif (this.userClassName) {\r\n\t\t\tthis.group.addClass(this.userClassName);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an `id` attribute the the element and returns the id.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Element's ID\r\n\t */\r\n\tpublic uidAttr(): string {\r\n\t\tthis.setSVGAttribute({ \"id\": this.uid });\r\n\t\treturn this.uid;\r\n\t}\r\n\r\n\t/**\r\n\t * [updateClipPath description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected updateClipPath(): void {\r\n\t\tconst element = this._clipElement;\r\n\r\n\t\tif (element) {\r\n\t\t\telement.moveTo({ x: this.mask.pixelX, y: this.mask.pixelY });\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createClipPath() {\r\n\t\tif (!this._clipPath) {\r\n\t\t\tthis._clipPath = this.paper.addGroup(\"clipPath\");\r\n\t\t\tthis.paper.appendDef(this._clipPath);\r\n\t\t\tthis._disposers.push(this._clipPath);\r\n\t\t\tlet id: string = registry.getUniqueId();\r\n\t\t\tthis._clipPath.attr({ \"id\": id });\r\n\t\t\tthis.group.attr({ \"clip-path\": \"url(\\\"\" + $utils.getBaseURI() + id + \"\\\")\" });\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Applies the mask Sprite.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected applyMask(): void {\r\n\t\tlet mask = this.mask;\r\n\r\n\t\tif (this._clipPath && mask) {\r\n\t\t\t// Container\r\n\t\t\tif (mask instanceof Container) {\r\n\t\t\t\tthis._clipElement.attr({ \"width\": $math.max(0, mask.pixelWidth), \"height\": $math.max(0, mask.pixelHeight) });\r\n\r\n\t\t\t\tlet point = $utils.spritePointToSprite({ x: mask.pixelX, y: mask.pixelY }, mask.parent, this);\r\n\r\n\t\t\t\tthis._clipPath.x = point.x;\r\n\t\t\t\tthis._clipPath.y = point.y;\r\n\t\t\t}\r\n\t\t\t// Sprite\r\n\t\t\telse {\r\n\t\t\t\tif (mask.element && mask.element != this._clipElement) {\r\n\t\t\t\t\tthis._clipElement = mask.element;\r\n\t\t\t\t\tthis._clipPath.add(this._clipElement);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._clipPath.scale = mask.scale;\r\n\t\t\t\tthis._clipPath.x = mask.pixelX;\r\n\t\t\t\tthis._clipPath.y = mask.pixelY;\r\n\t\t\t\tthis._clipPath.rotation = mask.rotation;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Applies filters to the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected applyFilters(): void {\r\n\t\t// we create a separate filter for each sprite as otherwise it would be impossible to animate filter.\r\n\t\t// svg doesn't support multiple filters applied to one element, so we put all the primitives to one filterElement of a sprite.\r\n\t\tif (this._filters && this._filters.length > 0) {\r\n\r\n\t\t\tlet width = 100;\r\n\t\t\tlet height = 100;\r\n\r\n\t\t\tif (!this.filterElement) {\r\n\t\t\t\tthis.filterElement = this.paper.addGroup(\"filter\");\r\n\t\t\t\tthis._disposers.push(this.filterElement);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.filterElement.removeChildNodes();\r\n\t\t\t}\r\n\r\n\t\t\tthis.paper.appendDef(this.filterElement);\r\n\r\n\t\t\tlet id: string = \"filter-\" + this.uid;\r\n\t\t\tthis.filterElement.attr({ \"id\": id });\r\n\r\n\t\t\t$iter.each(this.filters.iterator(), (filter) => {\r\n\t\t\t\tfilter.sprite = this;\r\n\t\t\t\tfilter.paper = this.paper;\r\n\r\n\t\t\t\tthis.filterElement.attr({ filterUnits: filter.filterUnits });\r\n\r\n\t\t\t\tfilter.appendPrimitives(this.filterElement);\r\n\r\n\t\t\t\tif (filter.width > width) {\r\n\t\t\t\t\twidth = filter.width;\r\n\t\t\t\t}\r\n\t\t\t\tif (filter.height > height) {\r\n\t\t\t\t\theight = filter.height;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfilter.scale = this.globalScale;\r\n\t\t\t});\r\n\r\n\t\t\tlet w = width + \"%\";\r\n\t\t\tlet h = height + \"%\";\r\n\r\n\t\t\t/* temporarily removed as it is breaking tooltips on Safari @todo come back to this\r\n\t\t\tif (this._measuredHeight <= 1) {\r\n\t\t\t\th = height + \"\";\r\n\t\t\t}\r\n\r\n\t\t\tif (this._measuredWidth <= 1) {\r\n\t\t\t\th = width + \"\";\r\n\t\t\t}*/\r\n\r\n\t\t\tthis.filterElement.attr({ \"width\": w, \"height\": h, \"x\": -(width - 100) / 2 + \"%\", \"y\": -(height - 100) / 2 + \"%\" });\r\n\r\n\t\t\tthis.group.attr({ \"filter\": \"url(\\\"\" + $utils.getBaseURI() + id + \"\\\")\" });\r\n\t\t}\r\n\t\telse if (this.filterElement) {\r\n\t\t\tthis.group.removeAttr(\"filter\");\r\n\t\t\tthis.filterElement.removeChildNodes();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [removeClipPath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected removeClipPath(): void {\r\n\t\tif (this._clipPath) {\r\n\t\t\t//this._clipPath.dispose();\r\n\t\t\tthis.removeDispose(this._clipPath);\r\n\t\t\tthis._clipPath = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [setElement description]\r\n\t *\r\n\t * @ignore\r\n\t * @todo Description\r\n\t * @param element [description]\r\n\t */\r\n\tpublic setElement(element: AMElement) {\r\n\t\tthis.element = element;\r\n\t\tthis.setSVGAttributes();\r\n\t\tthis.applyAccessibility();\r\n\t}\r\n\r\n\t/**\r\n\t * The main element for this Sprite, usually an SVG `<g>`.\r\n\t *\r\n\t * All other sub-elements are created in it.\r\n\t *\r\n\t * @param element  Element\r\n\t */\r\n\tpublic set element(element: Optional<AMElement>) {\r\n\r\n\t\t// Destroy previous element if there was one before\r\n\t\tthis.removeElement();\r\n\r\n\t\t// Set new element\r\n\t\tthis._element = element;\r\n\r\n\t\t// Add element to group\r\n\t\t// Since we are adding Element to group, which is already in the\r\n\t\t// `.disposers` it will be removed automatically when Sprite is disposed\r\n\t\t// of\r\n\t\tthis.group.add(element);\r\n\r\n\t\tif (element.node instanceof SVGPathElement) {\r\n\t\t\tthis._isPath = true;\r\n\t\t}\r\n\r\n\t\t// This is needed if someone is setting element not in draw method but\r\n\t\t// from outside\r\n\t\tif (!this.invalid) {\r\n\t\t\tthis.validate();\r\n\t\t}\r\n\r\n\t\tif (options.autoSetClassName) {\r\n\t\t\tthis.setClassName();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Element\r\n\t */\r\n\tpublic get element(): Optional<AMElement> {\r\n\t\treturn this._element;\r\n\t}\r\n\r\n\t/**\r\n\t * HTML container (`<div>`) which is used to place chart's `<svg>` element\r\n\t * in.\r\n\t *\r\n\t * @return Container for chart elements\r\n\t */\r\n\tpublic get svgContainer(): $type.Optional<SVGContainer> {\r\n\t\tif (this._svgContainer) {\r\n\t\t\treturn this._svgContainer;\r\n\t\t}\r\n\t\telse if (this._parent) {\r\n\t\t\treturn this._parent.svgContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets HTML container to add SVG and other chart elements to.\r\n\t *\r\n\t * @param svgContainer Container for chart elements\r\n\t */\r\n\tpublic set svgContainer(svgContainer: $type.Optional<SVGContainer>) {\r\n\t\tthis._svgContainer = svgContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Measures main element.\r\n\t *\r\n\t * Saves measurements into private `_bbox` property.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected measureElement() {\r\n\r\n\t\tif (this.element) {\r\n\t\t\tif (this.definedBBox) {\r\n\t\t\t\tthis._bbox = this.definedBBox;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet svgBBox: IRectangle = this.element.getBBox();\r\n\t\t\t\tthis._bbox = { x: svgBBox.x, y: svgBBox.y, width: svgBBox.width, height: svgBBox.height };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Positions element according its center settings.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateCenter() {\r\n\t\tif (this.element) {\r\n\t\t\tlet prevElementTransform: string = this.element.transformString;\r\n\r\n\t\t\tlet bbox = this.bbox;\r\n\r\n\t\t\tlet ex = 0;\r\n\t\t\tlet ey = 0;\r\n\r\n\t\t\tlet elementX = bbox.x;\r\n\t\t\tlet elementY = bbox.y;\r\n\r\n\t\t\tlet elementWidth = bbox.width;\r\n\t\t\tlet elementHeigth = bbox.height;\r\n\r\n\t\t\tlet pixelPaddingLeft = this.pixelPaddingLeft;\r\n\t\t\tlet pixelPaddingRight = this.pixelPaddingRight;\r\n\t\t\tlet pixelPaddingTop = this.pixelPaddingTop;\r\n\t\t\tlet pixelPaddingBottom = this.pixelPaddingBottom;\r\n\r\n\t\t\t// add padding to the measured size\r\n\t\t\tlet measuredWidth = $math.max(elementWidth + pixelPaddingLeft + pixelPaddingRight, this.pixelWidth);\r\n\t\t\tlet measuredHeight = $math.max(elementHeigth + pixelPaddingTop + pixelPaddingBottom, this.pixelHeight);\r\n\r\n\t\t\t// extremes\r\n\t\t\tlet left = bbox.x;\r\n\t\t\tlet right = bbox.x + measuredWidth;\r\n\r\n\t\t\tlet top = bbox.y;\r\n\t\t\tlet bottom = bbox.y + measuredHeight;\r\n\r\n\t\t\tlet horizontalCenter = this.horizontalCenter;\r\n\t\t\tlet verticalCenter = this.verticalCenter;\r\n\r\n\t\t\tswitch (horizontalCenter) {\r\n\t\t\t\tcase \"none\":\r\n\t\t\t\t\tex = elementX + pixelPaddingLeft;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"left\":\r\n\t\t\t\t\tex = pixelPaddingLeft;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"middle\":\r\n\t\t\t\t\tex = pixelPaddingLeft - (elementWidth + pixelPaddingRight + pixelPaddingLeft) / 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"right\":\r\n\t\t\t\t\tex = -pixelPaddingRight - elementWidth;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tswitch (verticalCenter) {\r\n\t\t\t\tcase \"none\":\r\n\t\t\t\t\tey = elementY + pixelPaddingTop;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"top\":\r\n\t\t\t\t\tey = pixelPaddingTop;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"middle\":\r\n\t\t\t\t\tey = pixelPaddingTop - (elementHeigth + pixelPaddingBottom + pixelPaddingTop) / 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\tey = -pixelPaddingBottom - elementHeigth;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tthis._measuredHeight = measuredHeight;\r\n\t\t\tthis._measuredWidth = measuredWidth;\r\n\r\n\t\t\tlet x: number = $math.round(ex - elementX, this._positionPrecision, true);\r\n\t\t\tlet y: number = $math.round(ey - elementY, this._positionPrecision, true);\r\n\r\n\t\t\tthis.ex = x - pixelPaddingLeft;\r\n\t\t\tthis.ey = y - pixelPaddingTop;\r\n\r\n\t\t\tthis.maxLeft = left + x - pixelPaddingLeft;\r\n\t\t\tthis.maxRight = right + x - pixelPaddingLeft;\r\n\r\n\t\t\tthis.maxTop = top + y - pixelPaddingTop;\r\n\t\t\tthis.maxBottom = bottom + y - pixelPaddingTop;\r\n\r\n\t\t\tif (this.pixelPerfect && options.pixelPerfectPrecision == 0) {\r\n\t\t\t\tx -= 0.5;\r\n\t\t\t\ty -= 0.5;\r\n\t\t\t}\r\n\r\n\t\t\tthis.element.moveTo({ x: x, y: y });\r\n\r\n\t\t\tif (prevElementTransform != this.element.transformString) {\r\n\t\t\t\tthis.dispatchImmediately(\"transformed\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the whole element.\r\n\t *\r\n\t * Returns `true` if the size has changed from the last measurement.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Did the size changed from the last measurement?\r\n\t */\r\n\tpublic measure(): boolean {\r\n\r\n\t\tthis.updateCenter();\r\n\r\n\t\tlet measuredWidth = this._measuredWidth;\r\n\t\tlet measuredHeight = this._measuredHeight;\r\n\r\n\t\t// extremes\r\n\t\tlet left = this.maxLeft;\r\n\t\tlet right = this.maxRight;\r\n\r\n\t\tlet top = this.maxTop;\r\n\t\tlet bottom = this.maxBottom;\r\n\r\n\t\t// non-parent wise size\r\n\t\tthis._measuredWidthSelf = measuredWidth;\r\n\t\tthis._measuredHeightSelf = measuredHeight;\r\n\r\n\t\tlet positionPrecision = this._positionPrecision;\r\n\r\n\t\tthis.maxLeftSelf = this.maxLeft;\r\n\t\tthis.maxRightSelf = this.maxRight;\r\n\t\tthis.maxTopSelf = this.maxTop;\r\n\t\tthis.maxBottomSelf = this.maxBottom;\r\n\r\n\t\t// if a sprite is rotated or scaled, calculate measured size after transformations\r\n\r\n\t\tif (this.rotation !== 0 || this.scale !== 1 || this.nonScaling) {\r\n\r\n\t\t\t// not good to handleGlobalScale here.\r\n\t\t\tif (this.nonScalingStroke) {\r\n\t\t\t\tthis.strokeWidth = this.strokeWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet svg = this.paper.svg;\r\n\r\n\t\t\tlet matrix: SVGMatrix = svg.createSVGMatrix();\r\n\t\t\tlet rotation: number = this.rotation;\r\n\r\n\t\t\tlet scale = this.scale;\r\n\r\n\t\t\tif (this.nonScaling) {\r\n\t\t\t\tscale = this.scale / this.globalScale;\r\n\t\t\t}\r\n\r\n\t\t\tmatrix.a = $math.cos(rotation) * scale;\r\n\t\t\tmatrix.c = - $math.sin(rotation) * scale;\r\n\t\t\tmatrix.e = 0;\r\n\t\t\tmatrix.b = $math.sin(rotation) * scale;\r\n\t\t\tmatrix.d = $math.cos(rotation) * scale;\r\n\t\t\tmatrix.f = 0;\r\n\r\n\t\t\tlet p1: SVGPoint = svg.createSVGPoint();\r\n\t\t\tp1.x = left;\r\n\t\t\tp1.y = top;\r\n\r\n\t\t\tlet p2: SVGPoint = svg.createSVGPoint();\r\n\t\t\tp2.x = right;\r\n\t\t\tp2.y = top;\r\n\r\n\t\t\tlet p3: SVGPoint = svg.createSVGPoint();\r\n\t\t\tp3.x = right;\r\n\t\t\tp3.y = bottom;\r\n\r\n\t\t\tlet p4: SVGPoint = svg.createSVGPoint();\r\n\t\t\tp4.x = left;\r\n\t\t\tp4.y = bottom;\r\n\r\n\t\t\tlet pt1: SVGPoint = p1.matrixTransform(matrix);\r\n\t\t\tlet pt2: SVGPoint = p2.matrixTransform(matrix);\r\n\t\t\tlet pt3: SVGPoint = p3.matrixTransform(matrix);\r\n\t\t\tlet pt4: SVGPoint = p4.matrixTransform(matrix);\r\n\r\n\t\t\tleft = Math.min(pt1.x, pt2.x, pt3.x, pt4.x);\r\n\t\t\tright = Math.max(pt1.x, pt2.x, pt3.x, pt4.x);\r\n\t\t\ttop = Math.min(pt1.y, pt2.y, pt3.y, pt4.y);\r\n\t\t\tbottom = Math.max(pt1.y, pt2.y, pt3.y, pt4.y);\r\n\r\n\t\t\tmeasuredWidth = right - left;\r\n\t\t\tmeasuredHeight = bottom - top;\r\n\r\n\t\t\tthis.maxLeft = $math.round(left, positionPrecision, true);\r\n\t\t\tthis.maxRight = $math.round(right, positionPrecision, true);\r\n\t\t\tthis.maxTop = $math.round(top, positionPrecision, true);\r\n\t\t\tthis.maxBottom = $math.round(bottom, positionPrecision, true);\r\n\t\t}\r\n\r\n\t\tthis._measuredWidth = $math.round(measuredWidth, positionPrecision, true);\r\n\t\tthis._measuredHeight = $math.round(measuredHeight, positionPrecision, true);\r\n\r\n\r\n\t\t// dispatch event\r\n\t\tif (this._measuredWidth != this._prevMeasuredWidth || this._measuredHeight != this._prevMeasuredHeight) {\r\n\t\t\tthis._prevMeasuredHeight = this._measuredHeight;\r\n\t\t\tthis._prevMeasuredWidth = this._measuredWidth;\r\n\r\n\t\t\t// TODO clear existing sizechanged dispatches ?\r\n\t\t\tthis.dispatch(\"sizechanged\");\r\n\r\n\t\t\tif ((this.isHover || this.showTooltipOn == \"hit\" || this.showTooltipOn == \"always\") && this.tooltip && this.tooltip.visible && ($type.hasValue(this.tooltipText) || $type.hasValue(this.tooltipHTML))) {\r\n\t\t\t\tthis.updateTooltipPosition();\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Insert this element before sibling element.\r\n\t *\r\n\t * @param sprite  Target element\r\n\t * @return This element\r\n\t */\r\n\tpublic insertBefore(sprite: Sprite): Sprite {\r\n\t\tlet parent = this._parent;\r\n\r\n\t\tif (parent) {\r\n\t\t\tlet index: number = parent.children.indexOf(sprite);\r\n\t\t\tif (index !== -1) {\r\n\t\t\t\tparent.children.moveValue(this, index);\r\n\t\t\t\tparent.sortChildren();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Insert this element after sibling element.\r\n\t *\r\n\t * @param sprite  Target element\r\n\t * @return This element\r\n\t */\r\n\tpublic insertAfter(sprite: Sprite): Sprite {\r\n\t\tlet parent = this._parent;\r\n\r\n\t\tif (parent) {\r\n\t\t\tlet index: number = parent.children.indexOf(sprite);\r\n\t\t\tif (index !== -1) {\r\n\t\t\t\tparent.children.moveValue(this, index + 1);\r\n\t\t\t\tparent.sortChildren();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes the main SVG element.\r\n\t *\r\n\t * This does not destroy the whole Sprite element. To do that use\r\n\t * `dispose()` instead.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected removeElement() {\r\n\t\t// remove visual element\r\n\t\tif (this._element) {\r\n\t\t\tthis.removeDispose(this._element);\r\n\t\t\tthis._element = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative (percent) value of the X coordindate within this element.\r\n\t *\r\n\t * A relative value is a hundredth of a percent. So 100% would result in a 1\r\n\t * as relative value.\r\n\t *\r\n\t * @param value  Absolute or relative X coordinate\r\n\t * @return Relative value\r\n\t */\r\n\tpublic getRelativeX(value: number | Percent): number {\r\n\t\tif (value instanceof Percent) {\r\n\t\t\treturn value.value;\r\n\t\t}\r\n\t\telse if (this._parent) {\r\n\t\t\treturn value / this._parent.innerWidth;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative (percent) value of the Y coordindate within this element.\r\n\t *\r\n\t * A relative value is a hundredth of a percent. So 100% would result in a 1\r\n\t * as relative value.\r\n\t *\r\n\t * @param value  Absolute or relative Y coordinate\r\n\t * @return Relative value\r\n\t */\r\n\tpublic getRelativeY(value: number | Percent): number {\r\n\t\tif (value instanceof Percent) {\r\n\t\t\treturn value.value;\r\n\t\t}\r\n\t\telse if (this._parent) {\r\n\t\t\treturn value / this._parent.innerHeight;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an X coordinate in pixel within the element.\r\n\t *\r\n\t * If number is passed in as parameter, the same number will be returned\r\n\t * back.\r\n\t *\r\n\t * If [[Percent]] is passed in, it will be recalculated to pixels.\r\n\t *\r\n\t * @param value  Absolute or relative X coordinate\r\n\t * @return X coordinate in pixels\r\n\t */\r\n\tpublic getPixelX(value: number | Percent): number {\r\n\r\n\t\t// we don't use $utils.valueToRelative as this would mean that we should access parent.innerWidth\r\n\t\t// all the time and this would result chain of the same actions and will slow down the system a lot\r\n\r\n\t\tlet pixel: number = 0;\r\n\t\tif ($type.isNumber(value)) {\r\n\t\t\tpixel = value;\r\n\t\t}\r\n\t\telse if (value instanceof Percent) {\r\n\t\t\tlet relative: number = value.value;\r\n\r\n\t\t\tif (this._parent) {\r\n\t\t\t\tpixel = $math.round(this._parent.innerWidth * relative, this._positionPrecision, true);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn pixel;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an Y coordinate in pixel within the element.\r\n\t *\r\n\t * If number is passed in as parameter, the same number will be returned\r\n\t * back.\r\n\t *\r\n\t * If [[Percent]] is passed in, it will be recalculated to pixels.\r\n\t *\r\n\t * @param value  Absolute or relative Y coordinate\r\n\t * @return Y coordinate in pixels\r\n\t */\r\n\tpublic getPixelY(value: number | Percent): number {\r\n\r\n\t\t// we don't use $utils.valueToRelative as this would mean that we should access parent.innerWidth\r\n\t\t// all the time and this would result chain of the same actions and will slow down the system a lot\r\n\r\n\t\tlet pixel: number = 0;\r\n\t\tif ($type.isNumber(value)) {\r\n\t\t\tpixel = value;\r\n\t\t}\r\n\t\telse if (value instanceof Percent) {\r\n\t\t\tlet relative: number = value.value;\r\n\r\n\t\t\tif (this._parent) {\r\n\t\t\t\tpixel = $math.round(this._parent.innerHeight * relative, this._positionPrecision, true);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn pixel;\r\n\t}\r\n\r\n\t/**\r\n\t * Moves the element to a specified coordinates.\r\n\t *\r\n\t * Using this method is preferred method of moving element, as it saves some\r\n\t * CPU processing power over setting `x` and `y` properties separately.\r\n\t *\r\n\t * The method respects element's center settings. The element will be\r\n\t * positioned so that `point` coordinates come in whatever \"center\" of the\r\n\t * element is, as set in `horizontalCenter` and `verticalCenter`.\r\n\t *\r\n\t * Besides moving the element, you can also at the same time scale and\r\n\t * rotate the element.\r\n\t *\r\n\t * @param point     New coordinates\r\n\t * @param rotation  New rotation\r\n\t * @param scale     New Scale\r\n\t */\r\n\tpublic moveTo(point: IPoint, rotation?: number, scale?: number, isDragged?: boolean): void {\r\n\t\tif (this.isDragged && !isDragged) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (point) {\r\n\t\t\tif ($type.isNumber(point.x)) {\r\n\t\t\t\tthis.setPropertyValue(\"x\", $math.round(point.x, this._positionPrecision, true));\r\n\t\t\t}\r\n\t\t\tif ($type.isNumber(point.y)) {\r\n\t\t\t\tthis.setPropertyValue(\"y\", $math.round(point.y, this._positionPrecision, true));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(rotation)) {\r\n\t\t\tthis.rotation = rotation;\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(scale)) {\r\n\t\t\tthis.scale = scale;\r\n\t\t}\r\n\r\n\t\t// must leave this\r\n\t\tthis.invalidatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets another [[Sprite]] element as this elements mask.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param mask A [[Sprite]] to use as mask\r\n\t */\r\n\tpublic set mask(mask: Optional<Sprite>) {\r\n\t\tif (this._mask.get() !== mask) {\r\n\t\t\t// this is good\r\n\t\t\tif (mask) {\r\n\r\n\t\t\t\tthis.createClipPath();\r\n\r\n\t\t\t\tif (!(mask instanceof Container)) {\r\n\t\t\t\t\tmask.isMeasured = false;\r\n\t\t\t\t\tif (mask.element) {\r\n\t\t\t\t\t\tthis._clipElement = mask.element;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._clipElement = this.paper.add(\"rect\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this._clipElement) {\r\n\t\t\t\t\tthis._clipPath.add(this._clipElement);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._mask.set(mask, new MultiDisposer([\r\n\t\t\t\t\t//mask.addEventListener(SpriteEvent.TRANSFORMED, this.applyMask, false, this);\r\n\t\t\t\t\tmask.events.on(\"maxsizechanged\", () => { if (this.inited) { this.applyMask(); } }, undefined, false),\r\n\t\t\t\t\tmask.events.on(\"validated\", this.applyMask, this, false),\r\n\t\t\t\t\tmask.events.on(\"positionchanged\", this.applyMask, this, false)\r\n\t\t\t\t]));\r\n\r\n\t\t\t\tthis.applyMask();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._mask.reset();\r\n\t\t\t\tthis.group.removeAttr(\"clip-path\");\r\n\t\t\t\tthis.removeClipPath();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns [[Sprite]] element currently used as mask for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return A [[Sprite]] to use as mask\r\n\t */\r\n\tpublic get mask(): Optional<Sprite> {\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn this._mask.get();\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"mask\", this._mask.get());\r\n\t\t}\r\n\t}\r\n\r\n\t// you can set IRectangle as a mask instead o a sprite. Note, the changes of the object won't be monitored\r\n\r\n\t/**\r\n\t * Instead of creating a [[Sprite]] for mask, you can just use a\r\n\t * [[Rectangle]] by setting this accessor.\r\n\t *\r\n\t * Please note that the element will not monitor any changes to the mask\r\n\t * rectangle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param rect Mask Rectangle\r\n\t */\r\n\tpublic set maskRectangle(rect: IRectangle) {\r\n\t\tif (rect) {\r\n\r\n\t\t\tthis.createClipPath();\r\n\r\n\t\t\tif (!this._clipElement) {\r\n\t\t\t\tthis._clipElement = this.paper.add(\"rect\");\r\n\t\t\t\tthis._clipPath.add(this._clipElement);\r\n\t\t\t}\r\n\t\t\tthis._clipElement.attr({ \"width\": rect.width, \"height\": rect.height });\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.removeClipPath();\r\n\t\t\tthis._clipElement = undefined;\r\n\t\t}\r\n\t\tthis._maskRectangle = rect;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Mask Rectangle\r\n\t */\r\n\tpublic get maskRectangle(): IRectangle {\r\n\t\treturn this._maskRectangle;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this element was already measured.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Was element already measured?\r\n\t */\r\n\tpublic set isMeasured(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\r\n\t\tif (!value) {\r\n\t\t\tthis._measuredWidth = 0;\r\n\t\t\tthis._measuredHeight = 0;\r\n\t\t\t//this._pixelHeight = 0;\r\n\t\t\t//this._pixelWidth = 0;\r\n\t\t}\r\n\r\n\t\tif (this._isMeasured != value) {\r\n\t\t\tthis._isMeasured = value;\r\n\t\t\tthis.invalidatePosition();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Was element already measured?\r\n\t */\r\n\tpublic get isMeasured(): boolean {\r\n\t\treturn this._isMeasured;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the this element has any of its parts overlapping with another\r\n\t * element.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param sprite  Second element to test again\r\n\t * @return Overlapping?\r\n\t */\r\n\tpublic hitTest(sprite: Sprite): boolean {\r\n\t\t// validate, otherwise we will not know measuredWidth and measuredHeight\r\n\t\tif (this.invalid) {\r\n\t\t\tthis.validate();\r\n\t\t}\r\n\t\tif (sprite.invalid) {\r\n\t\t\tsprite.validate();\r\n\t\t}\r\n\r\n\t\tlet ax1 = this.pixelX + this.maxLeft;\r\n\t\tlet ay1 = this.pixelY + this.maxTop;\r\n\t\tlet ax2 = ax1 + this.maxRight;\r\n\t\tlet ay2 = ay1 + this.maxBottom;\r\n\r\n\t\tlet bx1 = sprite.pixelX + sprite.maxLeft;\r\n\t\tlet by1 = sprite.pixelY + sprite.maxTop;\r\n\t\tlet bx2 = bx1 + sprite.maxRight;\r\n\t\tlet by2 = by1 + sprite.maxBottom;\r\n\r\n\t\treturn !(bx1 > ax2 || bx2 < ax1 || by1 > ay2 || by2 < ay1);\r\n\t}\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * STATE-RELATED\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Returns `true` if Sprite has already finished initializing.\r\n\t *\r\n\t * @return Initialized?\r\n\t */\r\n\tpublic get inited(): boolean {\r\n\t\treturn this._inited;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if Sprite has already finished initializing and is ready.\r\n\t *\r\n\t * If this object is a [[Container]] it will wait for all of its children\r\n\t * are ready before becoming ready itself and firing a `\"ready\"` event.\r\n\t *\r\n\t * @return is ready?\r\n\t */\r\n\tpublic isReady(): boolean {\r\n\t\treturn this._ready;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a collection of element's available [[SpriteState]] entries.\r\n\t *\r\n\t * @see {@link SpriteState}\r\n\t * @return States\r\n\t */\r\n\tpublic get states(): DictionaryTemplate<string, SpriteState<this[\"_properties\"], this[\"_adapter\"]>> {\r\n\t\tif (!this._states) {\r\n\t\t\tconst state = new SpriteState<this[\"_properties\"], this[\"_adapter\"]>();\r\n\r\n\t\t\t// works\r\n\t\t\tthis._states = new DictionaryTemplate<string, SpriteState<this[\"_properties\"], this[\"_adapter\"]>>(state);\r\n\r\n\t\t\t// TODO what about removeKey ?\r\n\t\t\tthis._disposers.push(this._states.events.on(\"insertKey\", this.processState, this, false));\r\n\t\t\tthis._disposers.push(this._states.events.on(\"setKey\", this.processState, this, false));\r\n\r\n\t\t\tthis._disposers.push(new DictionaryDisposer(this._states));\r\n\t\t\tthis._disposers.push(state);\r\n\t\t}\r\n\t\treturn this._states;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[SpriteState]] object for \"hidden\" state.\r\n\t *\r\n\t * This is a shortcut to `this.states.getKey(\"hidden\")`.\r\n\t *\r\n\t * @return Hidden state\r\n\t */\r\n\tpublic get hiddenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this.states.getKey(\"hidden\")) {\r\n\t\t\tlet hiddenState = this.states.create(\"hidden\");\r\n\t\t\thiddenState.properties.opacity = 0;\r\n\t\t\thiddenState.properties.visible = false;\r\n\t\t}\r\n\r\n\t\treturn this.states.getKey(\"hidden\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[SpriteState]] object for \"default\" state.\r\n\t *\r\n\t * This is a shortcut to `this.states.getKey(\"default\")`.\r\n\t *\r\n\t * @return Hidden state\r\n\t */\r\n\tpublic get defaultState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\r\n\t\tif (!this.states.getKey(\"default\")) {\r\n\t\t\tlet defaultState = this.states.create(\"default\");\r\n\t\t\tdefaultState.properties.opacity = 1;\r\n\t\t}\r\n\r\n\t\treturn this.states.getKey(\"default\");\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if some key states are defined and updates Sprite properties\r\n\t * accordingly.\r\n\t *\r\n\t * For example if there's a state \"down\" defined for Sprite, we automatically\r\n\t * make it \"clickable\".\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event An event which caused state list update\r\n\t */\r\n\tprotected processState(event: IDictionaryEvents<string, SpriteState<this[\"_properties\"], this[\"_adapter\"]>>[\"insertKey\" | \"setKey\"]): void {\r\n\t\tlet state: SpriteState<this[\"_properties\"], this[\"_adapter\"]> = event.newValue;\r\n\t\tstate.sprite = this;\r\n\t\tstate.name = event.key;\r\n\t\tif (this.states.hasKey(\"hover\") || (this.showTooltipOn == \"hover\" && ($type.hasValue(this.tooltipHTML) || $type.hasValue(this.tooltipText)))) {\r\n\t\t\tthis.hoverable = true;\r\n\t\t}\r\n\r\n\t\tif (this.states.hasKey(\"down\") || (this.showTooltipOn == \"hover\" && ($type.hasValue(this.tooltipHTML) || $type.hasValue(this.tooltipText)))) {\r\n\t\t\tthis.clickable = true;\r\n\t\t}\r\n\r\n\t\tif (this.states.hasKey(\"focus\")) {\r\n\t\t\tthis.focusable = true;\r\n\t\t}\r\n\r\n\t\t// Propagate the new state to clones\r\n\t\tif (this.applyOnClones) {\r\n\t\t\tconst clones = this.clones.values;\r\n\t\t\tconst length = clones.length;\r\n\r\n\t\t\tfor (let i = 0; i < length; ++i) {\r\n\t\t\t\tconst clone = clones[i];\r\n\t\t\t\tif (!clone.isDisposed()) {\r\n\t\t\t\t\tclone.states.setKey(state.name, state);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a list elements's animations currently being played.\r\n\t *\r\n\t * If the list has not been initialized it is created.\r\n\t *\r\n\t * @return List of animations\r\n\t */\r\n\tpublic get animations(): Array<Animation> {\r\n\t\tif (!this._animations) {\r\n\t\t\tthis._animations = [];\r\n\t\t\tthis._disposers.push(new AnimationDisposer(this._animations));\r\n\t\t}\r\n\t\treturn this._animations;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts element's local coordinates to the coordinates within the main\r\n\t * chart container.\r\n\t *\r\n\t * @param point  Local point\r\n\t * @return Global point\r\n\t */\r\n\tpublic getSvgPoint(point: IPoint): IPoint {\r\n\t\ttry {\r\n\t\t\t// Calculate SVG point\r\n\t\t\tlet bbox = this.htmlContainer.getBoundingClientRect();\r\n\r\n\t\t\treturn {\r\n\t\t\t\t\"x\": point.x - bbox.left,\r\n\t\t\t\t\"y\": point.y - bbox.top\r\n\t\t\t};\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\treturn point;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and starts an [[Animation]] with given `animationOptions`.\r\n\t *\r\n\t * @see {@link Animation} for additional information about available options\r\n\t * @param animationOptions  Animation options\r\n\t * @param duration          Duration in milliseconds\r\n\t * @param easing            Easing function\r\n\t * @return Animation instance\r\n\t */\r\n\tpublic animate(animationOptions: ISpriteAnimationOptions[] | ISpriteAnimationOptions, duration: number, easing?: (value: number) => number): Animation {\r\n\t\treturn new Animation(this, animationOptions, duration, easing).start();\r\n\t}\r\n\r\n\t/**\r\n\t * Applies a [[SpriteState]] on this element.\r\n\t *\r\n\t * The first parameter can either be a name state or a [[SpriteState]]\r\n\t * instance.\r\n\t *\r\n\t * When run, this method will apply SVG properties defined in a\r\n\t * [[SpriteState]], but only those that are relevant to this particular\r\n\t * element, i.e. are in the `properties` array.\r\n\t *\r\n\t * @see {@link SpriteState}\r\n\t * @param value               A state - name key or instance\r\n\t * @param transitionDuration  Duration of the transition between current and new state\r\n\t * @param easing              An easing function\r\n\t */\r\n\tpublic setState(value: string | SpriteState<this[\"_properties\"], this[\"_adapter\"]>, transitionDuration?: number, easing?: (value: number) => number): $type.Optional<Animation> {\r\n\t\tlet state: Optional<SpriteState<this[\"_properties\"], this[\"_adapter\"]>>;\r\n\t\tif (value instanceof SpriteState) {\r\n\t\t\tthis.states.setKey(value.name, value);\r\n\t\t\tstate = value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstate = this.states.getKey(value);\r\n\t\t\tif (!state) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// stop previous transition\r\n\t\t// not good - foe expample, we are animating to some \"active\" state and in them middle \"hover\" state happens. then \"active\" stat won't be applied\r\n\t\t//if (this._transition) {\r\n\t\t//this._transition.stop();\r\n\t\t//}\r\n\r\n\t\tif (state.name == \"hover\") {\r\n\t\t\tif (this.isHidden) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.isHover = true;\r\n\t\t}\r\n\r\n\t\tif (state.name == \"hidden\") {\r\n\t\t\tthis.isHiding = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (!this.visible) {\r\n\t\t\t\tthis.setVisibility(state.properties.visible || this.defaultState.properties.visible);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (state.name == \"active\") {\r\n\t\t\tthis.isActive = true;\r\n\t\t}\r\n\t\t// we do not set isActive = false here if it's not active, but container does that if setStateOnChildren = true\r\n\r\n\r\n\t\tif (!$type.isNumber(transitionDuration)) {\r\n\t\t\ttransitionDuration = state.transitionDuration;\r\n\t\t}\r\n\r\n\t\tif (!$type.hasValue(easing)) {\r\n\t\t\teasing = state.transitionEasing;\r\n\t\t}\r\n\r\n\t\treturn this.transitTo(state, transitionDuration, easing);\r\n\t}\r\n\r\n\t/**\r\n\t * Applies proper state based on the condition of the element. A condition is\r\n\t * deducted in this order:\r\n\t * * \"hover\" if Sprite has currently any pointers over it\r\n\t * * \"down\" if Sprite has any pointers (touch or mouse) currently pressed over it\r\n\t * * \"focus\" if Sprite has currently got focus (accessibility)\r\n\t * * \"hidden\" if Sprite is currently hidden\r\n\t *\r\n\t * Returns an [[Animation]] object, which is handling gradual transition from\r\n\t * current values of properties, to the new target state(s).\r\n\t *\r\n\t * @param duration  Duration for the animation (ms)\r\n\t * @return [[Animation]] object which is handling the transition\r\n\t */\r\n\tpublic applyCurrentState(duration?: number): $type.Optional<Animation> {\r\n\r\n\t\t//if (!this.isHidden) { // this was done for hover state not to take effect if \"hidden\" is actually visible, need to think about it.\r\n\r\n\t\tlet animation: $type.Optional<Animation> = this.setState(this.defaultState, duration);\r\n\r\n\t\tif (this.isHover) {\r\n\t\t\tanimation = this.setState(\"hover\", duration);\r\n\t\t}\r\n\r\n\t\tif (this.isDown && this.interactions.downPointers.length) {\r\n\t\t\tanimation = this.setState(\"down\", duration);\r\n\t\t}\r\n\r\n\t\tthis.isFocused = this.isFocused;\r\n\r\n\t\tif (this.isActive) {\r\n\t\t\tanimation = this.setState(\"active\", duration);\r\n\t\t\tif (this.isHover && this.states.hasKey(\"hoverActive\")) {\r\n\t\t\t\tanimation = this.setState(\"hoverActive\", duration);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn animation;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Starts an [[Animation]] of the properties to specific values as they are\r\n\t * set in `state`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param state     Target State\r\n\t * @param duration  Duration in milliseconds\r\n\t * @param easing    Easing function\r\n\t * @return Transition Animation\r\n\t */\r\n\tprotected transitTo(state: SpriteState<this[\"_properties\"], this[\"_adapter\"]>, duration: number, easing?: (value: number) => number): Optional<Animation> {\r\n\t\t// Init\r\n\t\tlet options: ISpriteAnimationOptions[] = [],\r\n\t\t\tpropValues = state.allValues,\r\n\t\t\ttransition: Optional<Animation>;\r\n\r\n\t\t// todo: do this for numeric/color properties only?\r\n\t\t// @todo use state.getPropertyValue instead\r\n\t\t$object.each(propValues, (propertyName, finalValue) => {\r\n\t\t\tlet currentValue: any = (<any>this)[propertyName];\r\n\t\t\t// save current value to default state. this solves a big problem where values must be set both on sprite and default state\r\n\t\t\tif (finalValue != currentValue && this.defaultState.properties[propertyName] == undefined) {\r\n\t\t\t\tthis.defaultState.properties[propertyName] = currentValue;\r\n\t\t\t}\r\n\r\n\t\t\t//if (finalValue != currentValue && $type.hasValue(finalValue)) {\r\n\t\t\tif (<any>finalValue != \"__unset\") {\r\n\t\t\t\tlet option: ISpriteAnimationOptions = { from: currentValue, to: <any>finalValue, property: propertyName };\r\n\t\t\t\toptions.push(option);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (options.length > 0) {\r\n\t\t\ttransition = this.animate(options, duration, easing);\r\n\t\t\tif (transition && !transition.isFinished()) {\r\n\t\t\t\t// TODO should this use events.once ?\r\n\t\t\t\t// TODO push onto _disposers array ?\r\n\t\t\t\tthis._disposers.push(transition.events.on(\"animationended\", () => {\r\n\t\t\t\t\tthis.dispatchImmediately(\"transitionended\");\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.dispatchImmediately(\"transitionended\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// apply filters if set\r\n\t\tif (state.filters.length > 0) {\r\n\t\t\tlet newFilters: Filter[] = [];\r\n\t\t\t// check for the same filters\r\n\t\t\t$iter.each(state.filters.iterator(), (stateFilter) => {\r\n\t\t\t\tlet newFilter: Filter = <Filter>stateFilter.clone();\r\n\t\t\t\tnewFilters.push(newFilter);\r\n\t\t\t\tlet animationOptions: IAnimationOptions[] = [];\r\n\r\n\t\t\t\t$iter.each(this.filters.iterator(), (currentFilter) => {\r\n\t\t\t\t\t// if we have the same filters\r\n\t\t\t\t\tif (currentFilter.className == newFilter.className) {\r\n\r\n\t\t\t\t\t\tif (!$iter.contains(this.defaultState.filters.iterator(), (x) => x.className === newFilter.className)) {\r\n\t\t\t\t\t\t\tthis.defaultState.filters.push(currentFilter);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t$object.each(newFilter.properties, (propertyName, newValue) => {\r\n\t\t\t\t\t\t\tlet currentValue = (<any>currentFilter).properties[propertyName];\r\n\t\t\t\t\t\t\t// if values are not the same, push to animation options array\r\n\t\t\t\t\t\t\tif (currentValue != newValue) {\r\n\t\t\t\t\t\t\t\tanimationOptions.push({ property: propertyName, from: currentValue, to: newValue });\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\t// animate to new value\r\n\t\t\t\tnewFilter.animate(animationOptions, duration, easing);\r\n\t\t\t});\r\n\t\t\tthis.filters.clear();\r\n\t\t\tthis.filters.pushAll(newFilters);\r\n\t\t}\r\n\r\n\t\treturn transition;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if Sprite is currently transiting from one state/value to\r\n\t * another.\r\n\t *\r\n\t * @return Is in transition?\r\n\t */\r\n\tpublic isInTransition(): boolean {\r\n\t\treturn this.animations.length > 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this element has a mouse pointer currently hovering\r\n\t * over it, or if it has any touch pointers pressed on it.\r\n\t *\r\n\t * You can force element to be \"hovered\" manually, by setting this property\r\n\t * to `true`.\r\n\t *\r\n\t * @param value Is hovered?\r\n\t */\r\n\tpublic set isHover(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (value !== this.isHover) {\r\n\t\t\tif (this.isInteractive()) {\r\n\t\t\t\tthis.interactions.isHover = value;\r\n\t\t\t\tif (value) {\r\n\t\t\t\t\tthis.handleOver();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.interactions.isRealHover = false;\r\n\t\t\t\t\tthis.handleOut();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Is hovered?\r\n\t */\r\n\tpublic get isHover(): boolean {\r\n\t\tif (this.isInteractive()) {\r\n\t\t\treturn this.interactions.isHover;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns indicator if this element is being dragged at the moment.\r\n\t *\r\n\t * @return Is dragged?\r\n\t */\r\n\tpublic get isDragged(): boolean {\r\n\t\treturn this._isDragged;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns indicator if this element is being resized at the moment.\r\n\t *\r\n\t * @return Is resized?\r\n\t */\r\n\tpublic get isResized(): boolean {\r\n\t\treturn this._isResized;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this element has any pointers (mouse or touch) pressing down\r\n\t * on it.\r\n\t *\r\n\t * @param value Is down?\r\n\t */\r\n\tpublic set isDown(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.isInteractive() && this.isDown != value) {\r\n\t\t\tthis.interactions.isDown = value;\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.handleDown();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.handleUp();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Is down?\r\n\t */\r\n\tpublic get isDown(): boolean {\r\n\t\tif (this.isInteractive()) {\r\n\t\t\treturn this.interactions.isDown;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this element is focused (possibly by tab navigation).\r\n\t *\r\n\t * @param value Is focused?\r\n\t */\r\n\tpublic set isFocused(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.focusable && this.isFocused != value) {\r\n\t\t\tif (this.isInteractive()) {\r\n\t\t\t\tthis.interactions.isFocused = value;\r\n\t\t\t\tif (value === true) {\r\n\t\t\t\t\tthis.handleFocus();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.handleBlur();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Is focused?\r\n\t */\r\n\tpublic get isFocused(): boolean {\r\n\t\tif (this.isInteractive()) {\r\n\t\t\treturn this.interactions.isFocused;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this element is currently active (toggled on) or not\r\n\t * (toggled off).\r\n\t *\r\n\t * @param value Is active?\r\n\t */\r\n\tpublic set isActive(value: boolean) {\r\n\t\tthis.setActive(value);\r\n\t}\r\n\r\n\r\n\tprotected setActive(value: boolean) {\r\n\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this._isActive !== value) {\r\n\t\t\tthis._isActive = value;\r\n\t\t\tif (value && this.states.hasKey(\"active\")) {\r\n\t\t\t\tthis.setState(\"active\");\r\n\t\t\t\tif (this.isHover && this.states.hasKey(\"hoverActive\")) {\r\n\t\t\t\t\tthis.setState(\"hoverActive\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.applyCurrentState();\r\n\t\t\t}\r\n\r\n\t\t\tthis.dispatchImmediately(\"toggled\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Is active?\r\n\t */\r\n\tpublic get isActive(): boolean {\r\n\t\treturn this._isActive;\r\n\t}\r\n\r\n\t/**\r\n\t * Controls if element is disabled.\r\n\t *\r\n\t * A disabled element is hidden, and is removed from any processing, layout\r\n\t * calculations, and generally treated as if it does not exist.\r\n\t *\r\n\t * The element itself is not destroyed, though. Setting this back to `false`,\r\n\t * will \"resurrect\" the element.\r\n\t *\r\n\t * @param value  Disabled?\r\n\t */\r\n\tpublic set disabled(value: boolean) {\r\n\t\tthis.setDisabled(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Disabled?\r\n\t */\r\n\tpublic get disabled(): boolean {\r\n\t\t//if(this._internalDisabled){\r\n\t\t//\treturn true;\r\n\t\t//}\r\n\t\tlet current = this.getPropertyValue(\"disabled\");\r\n\t\tif ($type.hasValue(current)) {\r\n\t\t\treturn current;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.virtualParent) {\r\n\t\t\t\treturn this.virtualParent.disabled;\r\n\t\t\t}\r\n\t\t\tif (this._parent) {\r\n\t\t\t\treturn this._parent.disabled;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tprotected setDisabled(value: boolean): boolean {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tlet current = this.getPropertyValue(\"disabled\");\r\n\t\tif (current != value) {\r\n\t\t\tthis.setPropertyValue(\"disabled\", value, true);\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.parent = this._parent;\r\n\t\t\t\tthis.removeFromInvalids();\r\n\t\t\t\tthis.group.attr({ \"display\": \"none\" });\r\n\t\t\t\tthis.dispatch(\"disabled\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._parent) {\r\n\t\t\t\t\tlet group = <Group>this._parent.element;\r\n\t\t\t\t\tif (!group.hasChild(this.group)) {\r\n\t\t\t\t\t\tgroup.add(this.group);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this instanceof Container) {\r\n\t\t\t\t\tthis.deepInvalidate();\r\n\t\t\t\t\tif (this._background) {\r\n\t\t\t\t\t\tthis._background.invalidate();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.invalidate();\r\n\t\t\t\t}\r\n\t\t\t\tif (!this.__disabled) {\r\n\t\t\t\t\tthis.removeSVGAttribute(\"display\");\r\n\t\t\t\t}\r\n\t\t\t\tthis.dispatch(\"enabled\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.dispatch(\"transformed\");\r\n\t\t\tsystem.requestFrame();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Internal disable method.\r\n\t *\r\n\t * Do not use it for disabling elements. Use `disabled` accessor instead.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Disabled?\r\n\t */\r\n\tpublic set __disabled(value: boolean) {\r\n\t\tif (this._internalDisabled != value) {\r\n\t\t\tthis._internalDisabled = value;\r\n\t\t\tthis._updateDisabled = true;\r\n\t\t\tthis.invalidatePosition(); // better use this instead of invalidate()\r\n\r\n\t\t\tif(!value){\r\n\t\t\t\tthis.invalidate();\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @return Disabled?\r\n\t */\r\n\tpublic get __disabled(): boolean {\r\n\t\treturn this._internalDisabled;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * FORMATTERS AND OTHER EXTERNAL HELPERS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * A [[NumberFormatter]] instance.\r\n\t *\r\n\t * This is used to format numbers.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.numberFormatter.numberFormat = \"#,###.#####\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.numberFormatter.numberFormat = \"#,###.#####\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"numberFormatter\": {\r\n\t *     \"numberFormat\": \"#,###.#####\"\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * You can set a separate instance of formatter for each\r\n\t * individual element. However that would be unnecessary overhead as\r\n\t * all elements would automatically inherit formatter from their parents,\r\n\t * all the way up to the chart itself.\r\n\t *\r\n\t *\r\n\t * @see {@link NumberFormatter} for more info on formatting numbers\r\n\t * @param value  An instance of NumberFormatter\r\n\t */\r\n\tpublic set numberFormatter(value: NumberFormatter) {\r\n\t\tthis._numberFormatter = value;\r\n\t\tthis._numberFormatter.language = this.language;\r\n\t}\r\n\r\n\t/**\r\n\t * @return A [[NumberFormatter]] instance to be used\r\n\t */\r\n\tpublic get numberFormatter(): NumberFormatter {\r\n\t\tif (this._numberFormatter) {\r\n\t\t\treturn this._numberFormatter;\r\n\t\t}\r\n\t\telse if (this.virtualParent) {\r\n\t\t\treturn this.virtualParent.numberFormatter;\r\n\t\t}\r\n\t\telse if (this._parent) {\r\n\t\t\treturn this._parent.numberFormatter;\r\n\t\t}\r\n\t\tthis._numberFormatter = new NumberFormatter();\r\n\t\tthis._numberFormatter.language = this.language;\r\n\t\treturn this.numberFormatter;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[DateFormatter]] instance.\r\n\t *\r\n\t * This is used to format dates, e.g. on a date axes, balloons, etc.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.dateFormatter.dateFormat = \"yyyy-MM-dd\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.dateFormatter.dateFormat = \"yyyy-MM-dd\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"dateFormatter\": {\r\n\t *     \"dateFormat\": \"yyyy-MM-dd\"\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * You can set a separate instance of formatter for each\r\n\t * individual element. However that would be unnecessary overhead as\r\n\t * all elements would automatically inherit formatter from their parents,\r\n\t * all the way up to the chart itself.\r\n\t *\r\n\t * @see {@link DateFormatter} for more info on dates formatting\r\n\t * @param value  An instance of DateFormatter\r\n\t */\r\n\tpublic set dateFormatter(value: DateFormatter) {\r\n\t\tthis._dateFormatter = value;\r\n\t\tthis._dateFormatter.language = this.language;\r\n\t}\r\n\r\n\t/**\r\n\t * @return An instance of DateFormatter\r\n\t */\r\n\tpublic get dateFormatter(): DateFormatter {\r\n\t\tif (this._dateFormatter) {\r\n\t\t\treturn this._dateFormatter;\r\n\t\t}\r\n\t\telse if (this.virtualParent) {\r\n\t\t\treturn this.virtualParent.dateFormatter;\r\n\t\t}\r\n\t\telse if (this._parent) {\r\n\t\t\treturn this._parent.dateFormatter;\r\n\t\t}\r\n\t\tthis._dateFormatter = new DateFormatter();\r\n\t\tthis._dateFormatter.language = this.language;\r\n\t\treturn this.dateFormatter;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[DurationFormatter]] instance.\r\n\t *\r\n\t * This is used to format numbers as durations, e.g. on a value axes.\r\n\t *\r\n\t * You can set a separate instance of formatter for each\r\n\t * individual element. However that would be unnecessary overhead as\r\n\t * all elements would automatically inherit formatter from their parents,\r\n\t * all the way up to the chart itself.\r\n\t *\r\n\t * @see {@link DurationFormatter} for more info on durations\r\n\t * @param value  An instance of DurationFormatter\r\n\t */\r\n\tpublic set durationFormatter(value: DurationFormatter) {\r\n\t\tthis._durationFormatter = value;\r\n\t\tthis._durationFormatter.language = this.language;\r\n\t}\r\n\r\n\t/**\r\n\t * @return An instance of DurationFormatter\r\n\t */\r\n\tpublic get durationFormatter(): DurationFormatter {\r\n\t\tif (this._durationFormatter) {\r\n\t\t\treturn this._durationFormatter;\r\n\t\t}\r\n\t\telse if (this.virtualParent) {\r\n\t\t\treturn this.virtualParent.durationFormatter;\r\n\t\t}\r\n\t\telse if (this._parent) {\r\n\t\t\treturn this._parent.durationFormatter;\r\n\t\t}\r\n\t\tthis._durationFormatter = new DurationFormatter();\r\n\t\tthis._durationFormatter.language = this.language;\r\n\t\treturn this.durationFormatter;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Language]] instance to use for translations.\r\n\t *\r\n\t * Normally it is enough to set language for the top-most element - chart.\r\n\t *\r\n\t * All other element child elements will automatically re-use that language\r\n\t * object.\r\n\t *\r\n\t * @param value  An instance of Language\r\n\t */\r\n\tpublic set language(value: Language) {\r\n\t\tif (this._language.get() !== value) {\r\n\t\t\tthis._language.set(value, value.events.on(\"localechanged\", (ev) => {\r\n\t\t\t\tif (this._numberFormatter) {\r\n\t\t\t\t\tthis._numberFormatter.language = this.language;\r\n\t\t\t\t}\r\n\t\t\t\tif (this._dateFormatter) {\r\n\t\t\t\t\tthis._dateFormatter.language = this.language;\r\n\t\t\t\t}\r\n\t\t\t\tif (this._durationFormatter) {\r\n\t\t\t\t\tthis._durationFormatter.language = this.language;\r\n\t\t\t\t}\r\n\t\t\t\tif (this._exporting.get()) {\r\n\t\t\t\t\tconst exporting = this._exporting.get();\r\n\t\t\t\t\texporting.numberFormatter.language = this.language;\r\n\t\t\t\t\texporting.dateFormatter.language = this.language;\r\n\t\t\t\t\texporting.durationFormatter.language = this.language;\r\n\t\t\t\t\texporting.language = this.language;\r\n\t\t\t\t}\r\n\t\t\t\tif (this instanceof Container) {\r\n\t\t\t\t\tthis.deepInvalidate();\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return An instance of Language\r\n\t */\r\n\tpublic get language(): Language {\r\n\t\tlet language = this._language.get();\r\n\t\tif (language) {\r\n\t\t\treturn language;\r\n\t\t}\r\n\t\telse if (this.virtualParent) {\r\n\t\t\treturn this.virtualParent.language;\r\n\t\t}\r\n\t\telse if (this._parent) {\r\n\t\t\treturn this._parent.language;\r\n\t\t}\r\n\t\tlanguage = new Language();\r\n\t\tthis.language = language;\r\n\t\treturn language;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * DATA-RELATED STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Parses the string for meta tags `{tag}` and replaces them with a real\r\n\t * value. Supports straight up tags referring to the field in data, i.e.\r\n\t * `{value}` or tags with additional formatting info. E.g.:\r\n\t *\r\n\t * ```Text\r\n\t * {myfield.formatDate(\"yyyy-MM-dd\")}\r\n\t * {myfield.formatDate()}\r\n\t * {myfield.formatNumber(\"#,####.00\")}\r\n\t * {myfield.formatNumber()}\r\n\t * {myField.formatDuration(\"mm:ss\")}\r\n\t * ```\r\n\t *\r\n\t * Etc.\r\n\t *\r\n\t * This method Will automatically detect and use proper formatter for the\r\n\t * value.\r\n\t *\r\n\t * The source value will be looked up in various places: (in order)\r\n\t * * Sprite's own `dataItem`\r\n\t * * Sprite's properties\r\n\t * * Parent's `dataItem`\r\n\t * * Parent's properties\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param string            A string to format\r\n\t * @param dataItem          DataItem\r\n\t * @return Formatted string\r\n\t */\r\n\r\n\tpublic populateString(string: string, dataItem?: DataItem): string {\r\n\t\tif ($type.hasValue(string)) {\r\n\t\t\tstring = $type.castString(string);\r\n\t\t\tstring = getTextFormatter().escape(string);\r\n\t\t\tlet tags = string.match(/\\{([^}]+)\\}/g);\r\n\t\t\tlet i;\r\n\t\t\tif (tags) {\r\n\t\t\t\tfor (i = 0; i < tags.length; i++) {\r\n\t\t\t\t\tlet tag = tags[i].replace(/\\{([^}]+)\\}/, \"$1\");\r\n\t\t\t\t\tlet value = this.getTagValue(tag, \"\", dataItem);\r\n\r\n\t\t\t\t\tif (!$type.hasValue(value)) {\r\n\t\t\t\t\t\tvalue = \"\";\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tstring = string.split(tags[i]).join(value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tstring = getTextFormatter().unescape(string);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstring = \"\";\r\n\t\t}\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn string;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"populateString\", string);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the value from data item and formats it according to specified format.\r\n\t *\r\n\t * If `format` is specified, it will use its contents to choose formatter for\r\n\t * the value. Otherwise it will select formatter accordingly to actual value\r\n\t * type.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Ability to force certain formatter on known numeric and date values\r\n\t * @see {@link NumberFormatter}\r\n\t * @see {@link DateFormatter}\r\n\t * @see {@link DurationFormatter}\r\n\t * @param tagName           Tag name to replace\r\n\t * @param format            Format to use\r\n\t * @param dataItem          DataItem\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic getTagValue(tagName: string, format?: string, dataItem?: DataItem): string {\r\n\t\tlet value: any;\r\n\t\tif (!$type.hasValue(dataItem)) {\r\n\t\t\tdataItem = this.dataItem;\r\n\t\t}\r\n\r\n\t\t// Parse parts\r\n\t\tlet parts: any[] = [];\r\n\t\tlet reg = /([^.]+)\\(([^)]*)\\)|([^.]+)/g;;\r\n\t\tlet matches;\r\n\r\n\t\twhile (true) {\r\n\t\t\tmatches = reg.exec(tagName);\r\n\r\n\t\t\tif (matches === null) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (matches[3]) {\r\n\t\t\t\t// Simple property\r\n\t\t\t\tparts.push({\r\n\t\t\t\t\tprop: matches[3]\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Method\r\n\t\t\t\t// Parse parameters\r\n\t\t\t\tlet params: any[] = [];\r\n\t\t\t\tif ($utils.trim(matches[2]) != \"\") {\r\n\t\t\t\t\tlet reg2 = /'([^']*)'|\"([^\"]*)\"|([0-9\\-]+)/g;\r\n\t\t\t\t\tlet matches2;\r\n\r\n\t\t\t\t\twhile (true) {\r\n\t\t\t\t\t\tmatches2 = reg2.exec(matches[2]);\r\n\r\n\t\t\t\t\t\tif (matches2 === null) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tparams.push(matches2[1] || matches2[2] || matches2[3])\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tparts.push({\r\n\t\t\t\t\tmethod: matches[1],\r\n\t\t\t\t\tparams: params\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t// Check if we can retrieve the value from data item\r\n\t\tif (dataItem) {\r\n\r\n\r\n\t\t\t// Check values\r\n\t\t\tvalue = this.getTagValueFromObject(parts, dataItem.values);\r\n\r\n\t\t\t// Check properties\r\n\t\t\tif (!$type.hasValue(value) || $type.isObject(value)) { // isObject helps to solve problem with date axis, as for example dateX will get dateX from values object and won't get to the dateX date.\r\n\t\t\t\tvalue = this.getTagValueFromObject(parts, dataItem);\r\n\t\t\t}\r\n\r\n\t\t\t// Check data context\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (!$type.hasValue(value) && dataContext) {\r\n\t\t\t\tvalue = this.getTagValueFromObject(parts, dataItem.dataContext);\r\n\r\n\t\t\t\t// Maybe it's a literal dot-separated name of the key in dataContext?\r\n\t\t\t\tif (!$type.hasValue(value)) {\r\n\t\t\t\t\tvalue = this.getTagValueFromObject([{\r\n\t\t\t\t\t\tprop: tagName\r\n\t\t\t\t\t}], dataContext);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// scond data context level sometimes exist (tree map)\r\n\t\t\t\tif (!$type.hasValue(value) && dataContext.dataContext) {\r\n\t\t\t\t\tvalue = this.getTagValueFromObject(parts, dataContext.dataContext);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Check component's data item\r\n\t\t\tif (!$type.hasValue(value) && dataItem.component && dataItem.component.dataItem !== dataItem) {\r\n\t\t\t\tvalue = dataItem.component.getTagValue(tagName, format);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Check sprite's properties\r\n\t\tif (!$type.hasValue(value)) {\r\n\t\t\tvalue = this.getTagValueFromObject(parts, this.populateStringFrom || <any>this);\r\n\t\t}\r\n\r\n\t\t// Finally, check the parent\r\n\t\tif (!$type.hasValue(value) && this._parent) {\r\n\t\t\tvalue = this._parent.getTagValue(tagName, format);\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Tries to retrieve values from properties of any object, then applies\r\n\t * proper formatting to it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (improve)\r\n\t * @param parts   Properties ant methods to access\r\n\t * @param object  Source object\r\n\t * @param format  A specific format to apply\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic getTagValueFromObject(parts: any[], object: any, format?: string): any {\r\n\t\tlet current: any = object;\r\n\t\tlet formatApplied = false;\r\n\t\tfor (let i = 0, len = parts.length; i < len; i++) {\r\n\t\t\tlet part = parts[i];\r\n\t\t\tif (part.prop) {\r\n\t\t\t\t// Regular property\r\n\t\t\t\tcurrent = current[part.prop];\r\n\t\t\t\tif (!$type.hasValue(current)) {\r\n\t\t\t\t\t// Not set, return undefined\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Method\r\n\r\n\t\t\t\tswitch (part.method) {\r\n\t\t\t\t\tcase \"formatNumber\":\r\n\t\t\t\t\t\tlet numberValue = $utils.anyToNumber(current);\r\n\t\t\t\t\t\tif ($type.hasValue(numberValue)) {\r\n\t\t\t\t\t\t\tcurrent = this.numberFormatter.format(\r\n\t\t\t\t\t\t\t\tnumberValue,\r\n\t\t\t\t\t\t\t\tformat || part.params[0] || undefined\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tformatApplied = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"formatDate\":\r\n\t\t\t\t\t\tlet dateValue;\r\n\t\t\t\t\t\tif ($type.isString(current)) {\r\n\t\t\t\t\t\t\tdateValue = this.dateFormatter.parse(current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tdateValue = $utils.anyToDate(current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!$type.isDate(dateValue) || $type.isNaN(dateValue.getTime())) {\r\n\t\t\t\t\t\t\t// Was not able to get date out of value, quitting and letting\r\n\t\t\t\t\t\t\t// calling method try another value\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ($type.hasValue(dateValue)) {\r\n\t\t\t\t\t\t\tcurrent = this.dateFormatter.format(\r\n\t\t\t\t\t\t\t\tdateValue,\r\n\t\t\t\t\t\t\t\tformat || part.params[0] || undefined\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tformatApplied = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"formatDuration\":\r\n\t\t\t\t\t\tlet durationValue = $utils.anyToNumber(current);\r\n\t\t\t\t\t\tif ($type.hasValue(durationValue)) {\r\n\t\t\t\t\t\t\tcurrent = this.durationFormatter.format(\r\n\t\t\t\t\t\t\t\tdurationValue,\r\n\t\t\t\t\t\t\t\tformat || part.params[0] || undefined,\r\n\t\t\t\t\t\t\t\tpart.params[1] || undefined\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tformatApplied = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"urlEncode\":\r\n\t\t\t\t\tcase \"encodeURIComponent\":\r\n\t\t\t\t\t\tcurrent = encodeURIComponent(current);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tif (current[part.method]) {\r\n\t\t\t\t\t\t\tcurrent[part.method].apply(this, part.params);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Apply default format if it wasn't applied explicitly\r\n\t\tif (!formatApplied) {\r\n\r\n\t\t\tlet formatParts = [{\r\n\t\t\t\tmethod: \"\",\r\n\t\t\t\tparams: format\r\n\t\t\t}];\r\n\r\n\t\t\tif (!$type.hasValue(format)) {\r\n\r\n\t\t\t\t// Format is not set\r\n\t\t\t\t// Determine from the type of the value\r\n\t\t\t\tif ($type.isNumber(current)) {\r\n\t\t\t\t\tformatParts[0].method = \"formatNumber\";\r\n\t\t\t\t\tformatParts[0].params = \"\";\r\n\t\t\t\t}\r\n\t\t\t\telse if ($type.isDate(current)) {\r\n\t\t\t\t\tformatParts[0].method = \"formatDate\";\r\n\t\t\t\t\tformatParts[0].params = \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\t// Format set\r\n\t\t\t\t// Try to determine formatter based on the format\r\n\t\t\t\tlet formatterType: string = $utils.getFormat(format);\r\n\r\n\t\t\t\t// format\r\n\t\t\t\tif (formatterType === $strings.NUMBER) {\r\n\t\t\t\t\tformatParts[0].method = \"formatNumber\";\r\n\t\t\t\t}\r\n\t\t\t\telse if (formatterType === $strings.DATE) {\r\n\t\t\t\t\tformatParts[0].method = \"formatDate\";\r\n\t\t\t\t}\r\n\t\t\t\telse if (formatterType === $strings.DURATION) {\r\n\t\t\t\t\tformatParts[0].method = \"formatDuration\";\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Apply format\r\n\t\t\tif (formatParts[0].method) {\r\n\t\t\t\tcurrent = this.getTagValueFromObject(formatParts, current);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn current;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A [[DataItem]] to use as element's data source.\r\n\t *\r\n\t * @todo Review type\r\n\t * @param dataItem  DataItem\r\n\t */\r\n\tpublic set dataItem(dataItem: this[\"_dataItem\"]) {\r\n\t\t//an not use this[\"_dataItem\"] here, as we return parent data item if this sprite doesn't have one.\r\n\t\t// @todo:think about it\r\n\t\tthis.setDataItem(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [[DataItem]]\r\n\t */\r\n\tpublic get dataItem(): this[\"_dataItem\"] {\r\n\t\tif (!this._dataItem) {\r\n\t\t\tif (this.virtualParent) {\r\n\t\t\t\treturn this.virtualParent.dataItem;\r\n\t\t\t}\r\n\t\t\tif (this._parent) {\r\n\t\t\t\treturn this._parent.dataItem;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._dataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets currently used [[DataItem]].\r\n\t *\r\n\t * If the element has also `configField` set, it will also look for any\r\n\t * config in DataItem's data context to apply to this element.\r\n\t *\r\n\t * @param dataItem DataItem\r\n\t */\r\n\tprotected setDataItem(dataItem: DataItem) {\r\n\t\tif (this._dataItem != dataItem) {\r\n\t\t\tthis._dataItem = dataItem;\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (this.configField) {\r\n\t\t\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\t\t\tif (dataContext) {\r\n\t\t\t\t\t\tthis.config = dataContext[this.configField];\r\n\t\t\t\t\t\tif (!this.config && dataContext.dataContext) {\r\n\t\t\t\t\t\t\tthis.config = dataContext.dataContext[this.configField];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet dataContext = <any>dataItem.dataContext;\r\n\r\n\t\t\t\tif (dataContext) {\r\n\r\n\t\t\t\t\tlet dataContext2 = dataContext.dataContext;\r\n\r\n\t\t\t\t\t$object.each(this.propertyFields, (propertyName, fieldValue) => {\r\n\t\t\t\t\t\tif ($type.hasValue(dataContext[fieldValue])) {\r\n\t\t\t\t\t\t\tlet anyThis = <any>this;\r\n\t\t\t\t\t\t\tanyThis[propertyName] = dataContext[fieldValue];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (dataContext2) {\r\n\t\t\t\t\t\t\t\tlet value = dataContext2[fieldValue];\r\n\t\t\t\t\t\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\t\t\t\t\t\tlet anyThis = <any>this;\r\n\t\t\t\t\t\t\t\t\tanyThis[propertyName] = value;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * PROPERTY UTILITIES\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Returns element's property value.\r\n\t *\r\n\t * Will check if there are any bindings with [[DataItem]].\r\n\t *\r\n\t * Will also apply any adapters bound to `propertyName`.\r\n\t *\r\n\t * @param propertyName  Property name\r\n\t * @return Property value\r\n\t */\r\n\tpublic getPropertyValue<Key extends keyof this[\"_properties\"]>(propertyName: Key): this[\"_properties\"][Key] {\r\n\t\tlet propValue: this[\"_properties\"][Key] = this.properties[propertyName];\r\n\r\n\t\t// Apply adapter\r\n\t\tif (!this._isTemplate) {\r\n\t\t\tif (this._adapterO) {\r\n\t\t\t\tpropValue = this._adapterO.apply(propertyName, <any>propValue);\r\n\t\t\t}\r\n\r\n\t\t\tpropValue = globalAdapter.applyAll(this, propertyName, propValue);\r\n\t\t}\r\n\r\n\t\treturn propValue;\r\n\t}\r\n\r\n\r\n\tprotected setColorProperty<Key extends keyof this[\"properties\"]>(property: Key, value: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>, invalidate?: boolean): boolean {\r\n\t\tlet currentValue = this.properties[property];\r\n\t\tif (value instanceof Color && currentValue instanceof Color && value.toString() == currentValue.toString()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.setPropertyValue(property, value, invalidate);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected setPercentProperty<Key extends keyof this[\"properties\"]>(property: Key, value: Percent | number, invalidate?: boolean, transform?: boolean, precision?: number, floor?: boolean): boolean {\r\n\t\tvalue = $type.toNumberOrPercent(value);\r\n\r\n\t\tif ($type.isNumber(value)) {\r\n\t\t\tif ($type.isNumber(precision)) {\r\n\t\t\t\tvalue = $math.round(value, precision, floor);\r\n\t\t\t}\r\n\r\n\t\t\treturn this.setPropertyValue(property, value, invalidate, transform);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet currentValue = this.properties[property];\r\n\r\n\t\t\tif (value instanceof Percent && currentValue instanceof Percent && value.value == currentValue.value) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.setPropertyValue(property, value, invalidate, transform);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets elements's property value. Will also propagate the same property value\r\n\t * on all element's clones.\r\n\t *\r\n\t * @param property    Property\r\n\t * @param value       Value\r\n\t * @param invalidate  Should the sprite be invalidated, cause it's re-rendering\r\n\t * @param transform   Re-apply positioning of the element\r\n\t * @return Did the value change? It will return `true` if the new value and the old value of the property are not the same\r\n\t * @todo Review propagation to clones. Right now we simply check if clone is disposed before setting the same property on it. It's better to remove from clone list altogether.\r\n\t */\r\n\tpublic setPropertyValue<Key extends keyof this[\"properties\"]>(property: Key, value: any, invalidate?: boolean, transform?: boolean): boolean {\r\n\t\tif (this.properties[property] !== value && !this.isDisposed()) {\r\n\t\t\tthis.properties[property] = value;\r\n\r\n\t\t\tif (this.events.isEnabled(\"propertychanged\")) {\r\n\r\n\t\t\t\tconst event: AMEvent<this, ISpriteEvents>[\"propertychanged\"] = {\r\n\t\t\t\t\ttype: \"propertychanged\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tproperty: <string>property\r\n\t\t\t\t};\r\n\t\t\t\tthis.events.dispatchImmediately(\"propertychanged\", event);\r\n\t\t\t}\r\n\r\n\t\t\tif (invalidate) {\r\n\t\t\t\tthis.invalidate();\r\n\t\t\t}\r\n\r\n\t\t\tif (transform) {\r\n\t\t\t\tthis.invalidatePosition();\r\n\t\t\t}\r\n\r\n\t\t\tif (this.applyOnClones) {\r\n\t\t\t\tconst clones = this.clones.values;\r\n\t\t\t\tconst length = clones.length;\r\n\r\n\t\t\t\tfor (let i = 0; i < length; ++i) {\r\n\t\t\t\t\tconst clone = clones[i];\r\n\r\n\t\t\t\t\tif (!clone.isDisposed()) {\r\n\t\t\t\t\t\t//(<Sprite>clone).setPropertyValue(<any>property, value, invalidate, transform);\r\n\t\t\t\t\t\t(<any>clone)[property] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Verify this\r\n\t */\r\n\tpublic bind<\r\n\t\tS extends { cloneId: string, events: EventDispatcher<{ propertychanged: { property: string } }> },\r\n\t\tFrom extends (keyof S & keyof this),\r\n\t\tTo extends keyof this\r\n\t>(\r\n\t\tproperty: To,\r\n\t\tsource: S,\r\n\t\tbindToProperty: From,\r\n\t\tmodifier?: (value: this[From]) => this[To]\r\n\t): void;\r\n\tpublic bind<\r\n\t\tS extends { cloneId: string, events: EventDispatcher<{ propertychanged: { property: string } }> },\r\n\t\tKey extends (keyof S & keyof this)\r\n\t>(\r\n\t\tproperty: Key,\r\n\t\tsource: S,\r\n\t\tmodifier?: (value: this[Key]) => this[Key]\r\n\t): void;\r\n\tpublic bind<\r\n\t\tS extends this & { cloneId: string, events: EventDispatcher<{ propertychanged: { property: string } }> },\r\n\t\tKey extends (keyof S & keyof this)\r\n\t>(\r\n\t\tproperty: Key,\r\n\t\tsource: S,\r\n\t\tbindToProperty: Key = property,\r\n\t\tmodifier?: (value: this[Key]) => this[Key]\r\n\t): void {\r\n\t\tif ($type.hasValue(this._bindings[<string>property])) {\r\n\t\t\tthis._bindings[<string>property].dispose();\r\n\t\t}\r\n\r\n\t\t// set current value\r\n\t\tthis[property] = source[bindToProperty];\r\n\r\n\t\t//source.addEventListener(AMEvent.PROPERTY_CHANGED, this.handleBindings, false, this);\r\n\t\tthis._bindings[<string>property] = source.events.on(\"propertychanged\", (event) => {\r\n\t\t\tif (event.property === bindToProperty) {\r\n\t\t\t\tlet value: this[Key] = source[bindToProperty];\r\n\r\n\t\t\t\tif (modifier) {\r\n\t\t\t\t\tvalue = modifier(value);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// TODO clonesById\r\n\t\t\t\tthis[property] = value;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up and obeserver function to monitor changes in particular property\r\n\t * or properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param property  Element's property name\r\n\t * @param listener  Handler function\r\n\t * @param context   Context for handler function\r\n\t * @returns Event Disposer\r\n\t */\r\n\tpublic observe<C>(property: string | string[], listener: (this: C, event: AMEvent<this, ISpriteEvents>[\"propertychanged\"]) => void, context?: C, shouldClone?: boolean): IDisposer {\r\n\t\treturn new MultiDisposer($array.map($array.toArray(property), (prop) => {\r\n\t\t\treturn this.events.on(\"propertychanged\", (e) => {\r\n\t\t\t\tif (e.property === prop) {\r\n\t\t\t\t\tlistener.call(context, e);\r\n\t\t\t\t}\r\n\t\t\t}, context, shouldClone);\r\n\t\t}));\r\n\t}\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * ACCESSIBILITY-RELATED PROPERTIES\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Applies accessibility to the SVG element.\r\n\t *\r\n\t * Adds `<title>` and `<description>` elements as well as `aria-labelledby`\r\n\t * and `role` properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected applyAccessibility(): void {\r\n\r\n\t\t// Check if we need to add label and description\r\n\t\tlet title = this.readerTitle,\r\n\t\t\tdescription = this.readerDescription,\r\n\t\t\trole = this.role,\r\n\t\t\thidden = this.readerHidden,\r\n\t\t\tchecked = this.readerChecked,\r\n\t\t\tcontrols = this.readerControls,\r\n\t\t\tlive = this.readerLive,\r\n\t\t\torientation = this.readerOrientation,\r\n\t\t\tvalueNow = this.readerValueNow,\r\n\t\t\tvalueText = this.readerValueText;\r\n\r\n\t\t// Init label/describe ids\r\n\t\tlet labelledByIds: string[] = [];\r\n\t\tlet describedByIds: string[] = [];\r\n\r\n\t\tlet labelledBy: string = this.readerLabelledBy;\r\n\t\tif (labelledBy) {\r\n\t\t\tlabelledByIds.push(labelledBy);\r\n\t\t}\r\n\r\n\t\tlet describedBy: string = this.readerDescribedBy;\r\n\t\tif (describedBy) {\r\n\t\t\tdescribedByIds.push(describedBy);\r\n\t\t}\r\n\r\n\t\t// Add arial-label attribute if present\r\n\t\t// If not readerTitle and labelledBy is set we will use <title> element\r\n\t\t// instead of aria-label\r\n\t\t// TODO: should we check agains this.showSystemTooltip?\r\n\t\tif (title) {\r\n\r\n\t\t\tif (labelledByIds.length || this.showSystemTooltip) {\r\n\r\n\t\t\t\tconst titleElement = this.titleElement;\r\n\t\t\t\tconst titleId = this.uid + \"-title\";\r\n\t\t\t\tif (titleElement.node.textContent != title) {\r\n\t\t\t\t\ttitleElement.node.textContent = title;\r\n\t\t\t\t\ttitleElement.attr({ id: titleId });\r\n\t\t\t\t}\r\n\t\t\t\tlabelledByIds.push(titleId);\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\tif (this._titleElement) {\r\n\t\t\t\t\tthis.group.removeElement(this._titleElement);\r\n\t\t\t\t\tthis._titleElement = undefined;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.setSVGAttribute({\r\n\t\t\t\t\t\"aria-label\": title\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.removeSVGAttribute(\"aria-label\");\r\n\t\t\tif (this._titleElement) {\r\n\t\t\t\tthis.group.removeElement(this._titleElement);\r\n\t\t\t\tthis._titleElement = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t// Add description\r\n\t\tif (description) {\r\n\r\n\t\t\tconst descriptionElement = this.descriptionElement;\r\n\t\t\tconst descriptionId = this.uid + \"-description\";\r\n\t\t\tif (descriptionElement.node.textContent != description) {\r\n\t\t\t\tdescriptionElement.node.textContent = description;\r\n\t\t\t\tdescriptionElement.attr({ id: descriptionId });\r\n\t\t\t}\r\n\t\t\tdescribedByIds.push(descriptionId);\r\n\r\n\t\t}\r\n\t\telse if (this._descriptionElement) {\r\n\t\t\tthis.group.removeElement(this._descriptionElement);\r\n\t\t\tthis._descriptionElement = undefined;\r\n\t\t}\r\n\r\n\r\n\t\t// Add label and described properties\r\n\t\tif (labelledByIds.length) {\r\n\t\t\tthis.setSVGAttribute({ \"aria-labelledby\": labelledByIds.join(\" \") });\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.removeSVGAttribute(\"aria-labelledby\");\r\n\t\t}\r\n\r\n\t\tif (describedByIds.length) {\r\n\t\t\tthis.setSVGAttribute({ \"aria-describedby\": describedByIds.join(\" \") });\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.removeSVGAttribute(\"aria-describedby\");\r\n\t\t}\r\n\r\n\t\t// Apply role\r\n\t\tif (role) {\r\n\t\t\tthis.setSVGAttribute({ \"role\": role });\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.removeSVGAttribute(\"role\");\r\n\t\t}\r\n\r\n\t\t// Apply aria-hidden\r\n\t\tif (hidden) {\r\n\t\t\tthis.setSVGAttribute({ \"aria-hidden\": \"true\" });\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.removeSVGAttribute(\"aria-hidden\");\r\n\t\t}\r\n\r\n\t\t// Apply aria-checked\r\n\t\tif (checked) {\r\n\t\t\tthis.setSVGAttribute({ \"aria-checked\": \"true\" });\r\n\t\t}\r\n\t\telse if (checked === false) {\r\n\t\t\tthis.setSVGAttribute({ \"aria-checked\": \"false\" });\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.removeSVGAttribute(\"aria-checked\");\r\n\t\t}\r\n\r\n\t\t// Apply aria-controls\r\n\t\tif (controls) {\r\n\t\t\tthis.setSVGAttribute({ \"aria-controls\": controls });\r\n\t\t} else {\r\n\t\t\tthis.removeSVGAttribute(\"aria-controls\");\r\n\t\t}\r\n\r\n\t\t// Apply aria-live\r\n\t\tif (live) {\r\n\t\t\tthis.setSVGAttribute({ \"aria-live\": live });\r\n\t\t} else {\r\n\t\t\tthis.removeSVGAttribute(\"aria-live\");\r\n\t\t}\r\n\r\n\t\t// Apply aria-orientation\r\n\t\tif (orientation) {\r\n\t\t\tthis.setSVGAttribute({ \"aria-orientation\": orientation });\r\n\t\t} else {\r\n\t\t\tthis.removeSVGAttribute(\"aria-orientation\");\r\n\t\t}\r\n\r\n\t\t// Apply aria-valuenow\r\n\t\tif (valueNow) {\r\n\t\t\tthis.setSVGAttribute({ \"aria-valuenow\": valueNow });\r\n\t\t} else {\r\n\t\t\tthis.removeSVGAttribute(\"aria-valuenow\");\r\n\t\t}\r\n\r\n\t\t// Apply aria-valuetext\r\n\t\tif (valueText) {\r\n\t\t\tthis.setSVGAttribute({ \"aria-valuetext\": valueText });\r\n\t\t} else {\r\n\t\t\tthis.removeSVGAttribute(\"aria-valuetext\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Screen reader title of the element.\r\n\t *\r\n\t * @param value Title\r\n\t */\r\n\tpublic set readerTitle(value: string) {\r\n\t\tvalue = $type.toText(value);\r\n\t\tif (this.setPropertyValue(\"readerTitle\", value)) {\r\n\t\t\tthis.applyAccessibility();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Title\r\n\t */\r\n\tpublic get readerTitle(): string {\r\n\t\tconst title = this.getPropertyValue(\"readerTitle\");\r\n\t\tif ($type.hasValue(title) && this.dataItem) {\r\n\t\t\treturn this.populateString(title);\r\n\t\t}\r\n\t\treturn title;\r\n\t}\r\n\r\n\t/**\r\n\t * Screen reader description of the element.\r\n\t *\r\n\t * @param value Description\r\n\t */\r\n\tpublic set readerDescription(value: string) {\r\n\t\tvalue = $type.toText(value);\r\n\t\tif (this.setPropertyValue(\"readerDescription\", value)) {\r\n\t\t\tthis.applyAccessibility();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Description\r\n\t */\r\n\tpublic get readerDescription(): string {\r\n\t\tconst description = this.getPropertyValue(\"readerDescription\");\r\n\t\tif ($type.hasValue(description) && this.dataItem) {\r\n\t\t\treturn this.populateString(description);\r\n\t\t}\r\n\t\treturn this.getPropertyValue(\"readerDescription\");\r\n\t}\r\n\r\n\t/**\r\n\t * A WAI-ARIA role for the element.\r\n\t *\r\n\t * @see {@link https://www.w3.org/TR/wai-aria-1.1/#role_definitions} for more information on WAI-ARIA roles\r\n\t * @param value  Role\r\n\t */\r\n\tpublic set role(value: Roles) {\r\n\t\tvalue = <Roles>$type.toText(value);\r\n\t\tif (this.setPropertyValue(\"role\", value)) {\r\n\t\t\tthis.applyAccessibility();\r\n\r\n\t\t\tif (value == \"slider\") {\r\n\t\t\t\tthis.setSVGAttribute({ \"aria-valuemin\": \"0\" });\r\n\t\t\t\tthis.setSVGAttribute({ \"aria-valuemax\": \"100\" });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Role\r\n\t */\r\n\tpublic get role(): Roles {\r\n\t\treturn this.getPropertyValue(\"role\");\r\n\t}\r\n\r\n\t/**\r\n\t * Controls if element should be hidden from screen readers.\r\n\t *\r\n\t * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-hidden} for more information\r\n\t * @param value  Hidden?\r\n\t */\r\n\tpublic set readerHidden(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.setPropertyValue(\"readerHidden\", value)) {\r\n\t\t\tthis.applyAccessibility();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hidden?\r\n\t */\r\n\tpublic get readerHidden(): boolean {\r\n\t\treturn this.getPropertyValue(\"readerHidden\");\r\n\t}\r\n\r\n\t/**\r\n\t * Controls if element is currently marked as \"checked\".\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-checked} for more information\r\n\t * @param value Checked?\r\n\t */\r\n\tpublic set readerChecked(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.setPropertyValue(\"readerChecked\", value)) {\r\n\t\t\tthis.applyAccessibility();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Checked?\r\n\t */\r\n\tpublic get readerChecked(): boolean {\r\n\t\treturn this.getPropertyValue(\"readerChecked\");\r\n\t}\r\n\r\n\t/**\r\n\t * A `uid` of an element this element controls.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-controls} for more information\r\n\t * @param value Setting value\r\n\t */\r\n\tpublic set readerControls(value: string) {\r\n\t\tvalue = $type.toText(value);\r\n\t\tif (this.setPropertyValue(\"readerControls\", value)) {\r\n\t\t\tthis.applyAccessibility();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Setting value\r\n\t */\r\n\tpublic get readerControls(): string {\r\n\t\treturn this.getPropertyValue(\"readerControls\");\r\n\t}\r\n\r\n\t/**\r\n\t * Controls accessibility setting \"aria-live\" for the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions} for more information\r\n\t * @param value Setting value\r\n\t */\r\n\tpublic set readerLive(value: AriaLive) {\r\n\t\tvalue = <AriaLive>$type.toText(value);\r\n\t\tif (this.setPropertyValue(\"readerLive\", value)) {\r\n\t\t\tthis.applyAccessibility();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Setting value\r\n\t */\r\n\tpublic get readerLive(): AriaLive {\r\n\t\treturn this.getPropertyValue(\"readerLive\");\r\n\t}\r\n\r\n\t/**\r\n\t * A `uid` of an element that describes this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby} for more information\r\n\t * @param value Target element\r\n\t */\r\n\tpublic set readerLabelledBy(value: string) {\r\n\t\tvalue = $type.toText(value);\r\n\t\tif (this.setPropertyValue(\"readerLabelledBy\", value)) {\r\n\t\t\tthis.applyAccessibility();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Target element\r\n\t */\r\n\tpublic get readerLabelledBy(): string {\r\n\t\treturn this.getPropertyValue(\"readerLabelledBy\");\r\n\t}\r\n\r\n\t/**\r\n\t * A `uid` of an element that describes this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-describedby} for more information\r\n\t * @param value Target element\r\n\t */\r\n\tpublic set readerDescribedBy(value: string) {\r\n\t\tvalue = $type.toText(value);\r\n\t\tif (this.setPropertyValue(\"readerDescribedBy\", value)) {\r\n\t\t\tthis.applyAccessibility();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Target element\r\n\t */\r\n\tpublic get readerDescribedBy(): string {\r\n\t\treturn this.getPropertyValue(\"readerDescribedBy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the element.\r\n\t *\r\n\t * @since 4.7.16\r\n\t * @param value Orientation\r\n\t */\r\n\tpublic set readerOrientation(value: string) {\r\n\t\tvalue = $type.toText(value);\r\n\t\tif (this.setPropertyValue(\"readerOrientation\", value)) {\r\n\t\t\tthis.applyAccessibility();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get readerOrientation(): string {\r\n\t\treturn this.getPropertyValue(\"readerOrientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current value of the element.\r\n\t *\r\n\t * @since 4.7.16\r\n\t * @param value Current value\r\n\t */\r\n\tpublic set readerValueNow(value: string) {\r\n\t\tvalue = $type.toText(value);\r\n\t\tif (this.setPropertyValue(\"readerValueNow\", value)) {\r\n\t\t\tthis.applyAccessibility();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Current value\r\n\t */\r\n\tpublic get readerValueNow(): string {\r\n\t\treturn this.getPropertyValue(\"readerValueNow\");\r\n\t}\r\n\r\n\t/**\r\n\t * Text representation of the current value of the element.\r\n\t *\r\n\t * @since 4.7.16\r\n\t * @param value Current value (text)\r\n\t */\r\n\tpublic set readerValueText(value: string) {\r\n\t\tvalue = $type.toText(value);\r\n\t\tif (this.setPropertyValue(\"readerValueText\", value)) {\r\n\t\t\tthis.applyAccessibility();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Current value (text)\r\n\t */\r\n\tpublic get readerValueText(): string {\r\n\t\treturn this.getPropertyValue(\"readerValueText\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * USER INTERACTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Returns elements keyboard options.\r\n\t *\r\n\t * @return Keyboard options\r\n\t */\r\n\tpublic get keyboardOptions(): IKeyboardOptions {\r\n\t\tif (!this.interactions.keyboardOptions) {\r\n\t\t\tif (this.virtualParent) {\r\n\t\t\t\treturn this.virtualParent.keyboardOptions;\r\n\t\t\t}\r\n\t\t\tif (this._parent) {\r\n\t\t\t\treturn this._parent.keyboardOptions;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.interactions.keyboardOptions;\r\n\t}\r\n\r\n\t/**\r\n\t * Mouse options.\r\n\t *\r\n\t * Enables controlling options related to the mouse, for example sensitivity\r\n\t * of its mouse wheel.\r\n\t *\r\n\t * E.g. the below will reduce chart's wheel-zoom speed to half its default\r\n\t * speed:\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"plotContainer\": {\r\n\t *     \"mouseOptions\": {\r\n\t *       \"sensitivity\": 0.5\r\n\t *     }\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Mouse options\r\n\t */\r\n\tpublic get mouseOptions(): IMouseOptions {\r\n\t\tif (!this.interactions.mouseOptions) {\r\n\t\t\tif (this.virtualParent) {\r\n\t\t\t\treturn this.virtualParent.mouseOptions;\r\n\t\t\t}\r\n\t\t\tif (this._parent) {\r\n\t\t\t\treturn this._parent.mouseOptions;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.interactions.mouseOptions;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns (creates if necessary) an [[InteractionObject]] associated with\r\n\t * this element.\r\n\t *\r\n\t * [[InteractionObject]] is used to attach all kinds of user-interactions to\r\n\t * the element, e.g. click/touch, dragging, hovering, and similar events.\r\n\t *\r\n\t * @return Interaction object\r\n\t */\r\n\tpublic get interactions(): InteractionObject {\r\n\t\tif (!this._interaction) {\r\n\t\t\tconst interaction = getInteraction().getInteraction(this.dom);\r\n\t\t\tthis._interaction = interaction;\r\n\t\t\tthis._interaction.clickable = this.clickable;\r\n\t\t\tthis._interaction.hoverable = this.hoverable;\r\n\t\t\tthis._interaction.trackable = this.trackable;\r\n\t\t\tthis._interaction.draggable = this.draggable;\r\n\t\t\tthis._interaction.swipeable = this.swipeable;\r\n\t\t\tthis._interaction.resizable = this.resizable;\r\n\t\t\tthis._interaction.wheelable = this.wheelable;\r\n\t\t\tthis._interaction.contextMenuDisabled = this.contextMenuDisabled;\r\n\t\t\tthis._interaction.inert = this.inert;\r\n\t\t\tthis._interaction.sprite = this;\r\n\t\t\tthis._disposers.push(this._interaction);\r\n\t\t}\r\n\t\treturn this._interaction;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true if interactions object was created. Mostly used just to avoid creating interactions object if not needed.\r\n\t * @return Is Sprite interactive?\r\n\t */\r\n\tpublic isInteractive(): boolean {\r\n\t\tif (this._interaction) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * ELEMENT FOCUS-RELATED STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Controls if the element can gain focus.\r\n\t *\r\n\t * Focusable element will be selectable via TAB key.\r\n\t *\r\n\t * Please note, clicking it with a mouse or touching will not add focus to\r\n\t * it.\r\n\t *\r\n\t * Focused element will show a system-specific highlight, which might ruin\r\n\t * the overal look. This is why we don't focus element on click/touch.\r\n\t *\r\n\t * A default setting varies for different elements. By default all elements\r\n\t * are not focusable, except certain items like buttons, legend items, etc.\r\n\t *\r\n\t * @default undefined (auto)\r\n\t * @param value  Can element be focused?\r\n\t */\r\n\tpublic set focusable(value: Optional<boolean>) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.setPropertyValue(\"focusable\", value)) {\r\n\t\t\tif (!value && !this.isInteractive()) {\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.interactions.focusable = value;\r\n\t\t\t\tif (value) {\r\n\t\t\t\t\tthis.setSVGAttribute({ \"focusable\": value });\r\n\t\t\t\t\tif (!$type.hasValue(this._tabindex)) {\r\n\t\t\t\t\t\tthis.tabindex = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.removeSVGAttribute(\"focusable\");\r\n\t\t\t\t\tthis.tabindex = undefined;\r\n\t\t\t\t}\r\n\t\t\t\t// Set focus events that would apply \"focus\" state\r\n\t\t\t\t// setEventDisposer will also remove listeners if value == false\r\n\t\t\t\tthis.interactions.setEventDisposer(\"sprite-focusable\", value, () => new MultiDisposer([\r\n\t\t\t\t\tthis.events.on(\"blur\", this.handleBlur, this, false),\r\n\t\t\t\t\tthis.events.on(\"focus\", this.handleFocus, this, false)\r\n\t\t\t\t]));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Can element be focused?\r\n\t */\r\n\tpublic get focusable(): Optional<boolean> {\r\n\t\treturn this.getPropertyValue(\"focusable\");\r\n\t}\r\n\r\n\t/**\r\n\t * Applies filters (if set) when element gains focus.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev Original event\r\n\t */\r\n\tpublic handleFocus(ev?: AMEvent<Sprite, ISpriteEvents>[\"focus\"]): void {\r\n\t\tif (this.focusable) {\r\n\t\t\tif (this.topParent) {\r\n\t\t\t\tthis.topParent.hasFocused = true;\r\n\t\t\t\tthis.topParent.focusedElement = this;\r\n\t\t\t}\r\n\t\t\tif (this.focusFilter) {\r\n\t\t\t\t// Any `filters` manipulation will trigger `applyFilters()` so we don't\r\n\t\t\t\t// need to call it here\r\n\t\t\t\tthis.filters.push(this.focusFilter);\r\n\t\t\t}\r\n\t\t\tif (this.hoverOnFocus) {\r\n\t\t\t\t// Trigger a hover event as well\r\n\t\t\t\tthis.isHover = true;\r\n\t\t\t\tthis.handleOver();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes focus filter (if set) when elementloses focus.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev Original event\r\n\t */\r\n\tpublic handleBlur(ev?: AMEvent<Sprite, ISpriteEvents>[\"blur\"]): void {\r\n\t\tif (this.focusable) {\r\n\t\t\tif (this.topParent) {\r\n\t\t\t\tthis.topParent.hasFocused = false;\r\n\t\t\t\tthis.topParent.focusedElement = undefined;\r\n\t\t\t}\r\n\t\t\tif (this.focusFilter) {\r\n\t\t\t\t// Any `filters` manipulation will trigger `applyFilters()` so we don't\r\n\t\t\t\t// need to call it here\r\n\t\t\t\tthis.filters.removeValue(this.focusFilter);\r\n\t\t\t}\r\n\t\t\tif (this.hoverOnFocus) {\r\n\t\t\t\t// Trigger a out event as well\r\n\t\t\t\tthis.isHover = false;\r\n\t\t\t\tthis.handleOut();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Filter]] to apply to element when it gains focus.\r\n\t *\r\n\t * Normally, browsers will draw a default ugly square around focused element,\r\n\t * which totally makes sense because its purpose is to help identify active\r\n\t * element for visually impaired people.\r\n\t *\r\n\t * However, if you would rather apply a filter, so you can modify how focused\r\n\t * element looks like, use `focusFilter`.\r\n\t *\r\n\t * Simply set it to an anstance of [[FocusFilter]], or any other filter\r\n\t * object.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.focusFilter = new am4core.FocusFilter();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.focusFilter = new am4core.FocusFilter();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"focusFilter\": {\r\n\t *     \"type\": \"FocusFilter\"\r\n\t *   },\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link Filter}\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/accessibility/} more about accessibility\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/changing-appearance-of-focused-items/} cusomizing focus appearance\r\n\t * @ignore Exclude from docs\r\n\t * @return Focused element filter\r\n\t */\r\n\tpublic get focusFilter(): $type.Optional<Filter> {\r\n\t\t/*if (!this._focusFilter) {\r\n\t\t\tthis._focusFilter = new FocusFilter();\r\n\t\t\tthis._disposers.push(this._focusFilter);\r\n\t\t}*/\r\n\t\t//return this._focusFilter;\r\n\r\n\t\tconst focusFilter = this._focusFilter;\r\n\r\n\t\tif (focusFilter) {\r\n\t\t\treturn focusFilter;\r\n\t\t}\r\n\t\tif (this.virtualParent) {\r\n\t\t\treturn this.virtualParent.focusFilter;\r\n\t\t}\r\n\t\telse if (this._parent) {\r\n\t\t\treturn this._parent.focusFilter;\r\n\t\t}\r\n\r\n\t\t//this._focusFilter = new FocusFilter();\r\n\t\t//this._disposers.push(this._focusFilter);\r\n\t}\r\n\r\n\t/**\r\n\t * @see {@link Filter}\r\n\t * @ignore Exclude from docs\r\n\t * @todo This is still experimental, don't use it\r\n\t */\r\n\tpublic set focusFilter(value: $type.Optional<Filter>) {\r\n\t\tthis._focusFilter = value;\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true`, this element will also trigger `\"over\"` event with all\r\n\t * the related consequences, like \"hover\" state being applied and tooltip\r\n\t * being shown.\r\n\t *\r\n\t * Useful as an accessibility feature to display rollover tooltips on items\r\n\t * selected via keyboard.\r\n\t *\r\n\t * @param value  Trigger hover on focus?\r\n\t * @default false\r\n\t */\r\n\tpublic set hoverOnFocus(value: boolean) {\r\n\t\tif (value !== this.hoverOnFocus) {\r\n\t\t\tthis.setPropertyValue(\"hoverOnFocus\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Trigger hover on focus?\r\n\t */\r\n\tpublic get hoverOnFocus(): boolean {\r\n\t\treturn this.getPropertyValue(\"hoverOnFocus\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets or returns TAB index.\r\n\t *\r\n\t * Tab index maintains the order in which focusable elements gain focus when\r\n\t * TAB key is pressed.\r\n\t *\r\n\t * Please note, tab index is not local to the chart. It affects the whole\r\n\t * of the page, including non-SVG elements. Maintain extreme causion when\r\n\t * setting tab indexes, as it affects the user experience for the whole\r\n\t * web page.\r\n\t *\r\n\t * @param value TAB index\r\n\t */\r\n\tpublic set tabindex(value: number) {\r\n\t\tvalue = $type.toNumber(value);\r\n\t\tif (this.setPropertyValue(\"tabindex\", value) && $type.isNumber(value)) {\r\n\t\t\tthis.interactions.tabindex = value;\r\n\t\t\tthis.setSVGAttribute({ \"tabindex\": value });\r\n\t\t\tthis._tabindex = value;\r\n\t\t\tthis.focusable = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return TAB index\r\n\t */\r\n\tpublic get tabindex(): $type.Optional<number> {\r\n\t\tconst index = this._tabindex;\r\n\r\n\t\tif (index != null) {\r\n\t\t\treturn index;\r\n\t\t}\r\n\t\telse if (this.virtualParent) {\r\n\t\t\treturn this.virtualParent.tabindex;\r\n\t\t}\r\n\t\telse if (this._parent) {\r\n\t\t\treturn this._parent.tabindex;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * DRAGGING AND RELATED STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Returns element's options to be used for inertia. This setting is\r\n\t * inheritable, meaning that if not set directly, it will search in all its\r\n\t * ascendants until very top.\r\n\t *\r\n\t * Inertia is used only if element's `inert` is set to `true`.\r\n\t *\r\n\t * \"Inert\" element, when dragged and released, will carry the momentum of the\r\n\t * movement, and will continue moving in the same drag direction, gradually\r\n\t * reducing in speed until finally stops.\r\n\t *\r\n\t * Check [[IInertiaOptions]] for how you tweak inertia animations.\r\n\t *\r\n\t * @return Inertia options\r\n\t */\r\n\tpublic get inertiaOptions(): Dictionary<InertiaTypes, IInertiaOptions> {\r\n\t\tif (!this.interactions.inertiaOptions) {\r\n\t\t\tif (this._parent) {\r\n\t\t\t\treturn this._parent.inertiaOptions;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.interactions.inertiaOptions;\r\n\t}\r\n\r\n\t/**\r\n\t * Controls if the element is draggable.\r\n\t *\r\n\t * @param value  `true` if element can be dragged\r\n\t */\r\n\tpublic set draggable(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.setPropertyValue(\"draggable\", value)) {\r\n\r\n\t\t\tif (!value && !this.isInteractive()) {\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.applyCursorStyle();\r\n\t\t\t\tthis.interactions.draggable = value;\r\n\t\t\t\t//interaction.processDraggable(this);\r\n\r\n\t\t\t\t// Add events\r\n\t\t\t\t// @todo Maybe attach to InteractionObject's multidisposer so that\r\n\t\t\t\t// sprites events get disposed together with them?\r\n\t\t\t\t// this.interactions.disposers.getItem(\"movable\")\r\n\t\t\t\t// setEventDisposer will also remove listeners if value == false\r\n\t\t\t\tthis.interactions.setEventDisposer(\"sprite-draggable\", value, () => new MultiDisposer([\r\n\t\t\t\t\tthis.events.on(\"down\", this.handleDown, this, false),\r\n\t\t\t\t\tthis.events.on(\"dragstart\", this.handleDragStart, this, false),\r\n\t\t\t\t\tthis.events.on(\"drag\", this.handleDragMove, this, false),\r\n\t\t\t\t\tthis.events.on(\"dragstop\", this.handleDragStop, this, false)\r\n\t\t\t\t]));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return `true` if element can be dragged\r\n\t */\r\n\tpublic get draggable(): boolean {\r\n\t\treturn this.getPropertyValue(\"draggable\");\r\n\t}\r\n\r\n\t/**\r\n\t * Executes when dragged element is being started to drag.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected handleDragStart(ev: AMEvent<Sprite, ISpriteEvents>[\"dragstart\"]): void {\r\n\t\tif (!this.interactions.isTouchProtected || !ev.touch) {\r\n\t\t\tthis.interactions.originalPosition = {\r\n\t\t\t\tx: this.pixelX,\r\n\t\t\t\ty: this.pixelY\r\n\t\t\t};\r\n\t\t\tthis._isDragged = true;\r\n\t\t\tthis.hideTooltip(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Tell this element to start being dragged. This is useful if you want to\r\n\t * drag items by interactions performed not directly on the target element.\r\n\t *\r\n\t * Parameter `pointer` is highly recommended. By passing in the Pointer you\r\n\t * will ensure that movement is tracked for the pointer that you want. If not\r\n\t * supplied, the system will try to determine the most logical pointer.\r\n\t *\r\n\t * However this may fail if you have more than one pointer active, which\r\n\t * might happen if you have several objects being dragged on a touch device.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param pointer Pointer to use for movement\r\n\t */\r\n\tpublic dragStart(pointer?: IPointer): void {\r\n\t\t//this.dragStop(pointer);\r\n\t\t//this.draggable = true;\r\n\t\tthis._isDragged = true;\r\n\t\tgetInteraction().dragStart(this.interactions, pointer);\r\n\t}\r\n\r\n\t/**\r\n\t * Executes when dragged element is being dropped.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected handleDragStop(ev: AMEvent<Sprite, ISpriteEvents>[\"dragstop\"]): void {\r\n\t\tif (!this.interactions.isTouchProtected || !ev.touch) {\r\n\t\t\tthis._isDragged = false;\r\n\t\t\tthis.showTooltip();\r\n\t\t\tthis.interactions.originalPosition = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Stops manually initiated dragging of the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param pointer Pointer to use as a reference\r\n\t */\r\n\tpublic dragStop(pointer?: IPointer, cancelled?: boolean): void {\r\n\t\t//this.draggable = false;\r\n\t\tthis._isDragged = false;\r\n\t\tgetInteraction().dragStop(this.interactions, pointer, cancelled);\r\n\t\t//this.handleDragStop();\r\n\t}\r\n\r\n\t/**\r\n\t * Executes when {Sprite} is being dragged.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev Event object\r\n\t * @todo Implement parent position offset calculation\r\n\t */\r\n\tpublic handleDragMove(ev: AMEvent<Sprite, ISpriteEvents>[\"drag\"]): void {\r\n\t\tif (!this.interactions.isTouchProtected || !ev.touch) {\r\n\t\t\tlet point: Optional<IPoint> = this.interactions.originalPosition;\r\n\r\n\t\t\tif (point && this._isDragged) {\r\n\t\t\t\tlet globalScale = this._parent.globalScale * this.svgContainer.cssScale;\r\n\t\t\t\tthis.moveTo({ x: point.x + ev.shift.x / globalScale, y: point.y + ev.shift.y / globalScale }, undefined, undefined, true);\r\n\t\t\t}\r\n\r\n\t\t\tthis.dispatchImmediately(\"dragged\", ev);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Controls if the element should use inertia when interacted with.\r\n\t *\r\n\t * \"Inert\" element, when dragged and released, will carry the momentum of the\r\n\t * movement, and will continue moving in the same drag direction, gradually\r\n\t * reducing in speed until finally stops.\r\n\t *\r\n\t * @default false\r\n\t * @param value `true` if element should use inertia when animated\r\n\t */\r\n\tpublic set inert(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.setPropertyValue(\"inert\", value)) {\r\n\t\t\tif (!value && !this.isInteractive()) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.interactions.inert = value;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return `true` if element should use inertia when animated\r\n\t */\r\n\tpublic get inert(): boolean {\r\n\t\treturn this.getPropertyValue(\"inert\");\r\n\t}\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * HOVERING\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Returns Sprite's hover options.\r\n\t *\r\n\t * @see {@link IHoverOptions} for available options.\r\n\t * @return Options\r\n\t */\r\n\tpublic get hoverOptions(): IHoverOptions {\r\n\t\tif (!this.interactions.hoverOptions) {\r\n\t\t\tif (this.virtualParent) {\r\n\t\t\t\treturn this.virtualParent.hoverOptions;\r\n\t\t\t}\r\n\t\t\tif (this._parent) {\r\n\t\t\t\treturn this._parent.hoverOptions;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.interactions.hoverOptions;\r\n\t}\r\n\r\n\t/**\r\n\t * Controls if the element is hoverable (hover events are registered).\r\n\t *\r\n\t * Use `over` and `out` events, to watch for those respective actions.\r\n\t *\r\n\t * @default false\r\n\t * @param value `true` if element can be hovered\r\n\t */\r\n\tpublic set hoverable(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.setPropertyValue(\"hoverable\", value)) {\r\n\t\t\tif (!value && !this.isInteractive()) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.applyCursorStyle();\r\n\t\t\t\tthis.interactions.hoverable = value;\r\n\r\n\t\t\t\t// setEventDisposer will also remove listeners if value == false\r\n\t\t\t\tthis.interactions.setEventDisposer(\"sprite-hoverable\", value, () => new MultiDisposer([\r\n\t\t\t\t\tthis.events.on(\"over\", this.handleOver, this, false),\r\n\t\t\t\t\tthis.events.on(\"out\", this.handleOut, this, false),\r\n\t\t\t\t]));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return `true` if element is hoverable\r\n\t */\r\n\tpublic get hoverable(): boolean {\r\n\t\treturn this.getPropertyValue(\"hoverable\");\r\n\t}\r\n\r\n\t/**\r\n\t * Handles tasks when element becomes hovered:\r\n\t * * Shows [[Tooltip]] if applicable\r\n\t * * Applies \"hover\" state\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev Event object\r\n\t */\r\n\tpublic handleOver(ev?: AMEvent<Sprite, ISpriteEvents>[\"over\"]): void {\r\n\t\tif (this._outTimeout) {\r\n\t\t\tthis._outTimeout.dispose();\r\n\t\t}\r\n\t\tif (this.isHover) {\r\n\r\n\t\t\tif (this.states.hasKey(\"hover\")) {\r\n\t\t\t\t//this.setState(\"hover\");\r\n\t\t\t\t// This will check `isHover` and will set \"hover\" state\r\n\t\t\t\tif (!this.isHidden) {\r\n\t\t\t\t\tthis.applyCurrentState();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet point: IPoint\r\n\t\t\tif (ev && ev.pointer) {\r\n\t\t\t\tpoint = $utils.documentPointToSvg(ev.pointer.point, this.svgContainer.SVGContainer, this.svgContainer.cssScale)\r\n\t\t\t}\r\n\r\n\t\t\tif (this.showTooltipOn == \"hover\") {\r\n\t\t\t\tthis.showTooltip(point);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.showTooltipOn == \"hover\") {\r\n\t\t\t\tthis.hideTooltip();\r\n\t\t\t}\r\n\t\t\tif (!this.isHidden && this.states.hasKey(\"hover\")) {\r\n\t\t\t\tthis.applyCurrentState();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handles tasks when element loses hover:\r\n\t *\r\n\t * * Hides [[Tooltip]]\r\n\t * * Applies default state\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev [description]\r\n\t */\r\n\tpublic handleOut(ev?: AMEvent<Sprite, ISpriteEvents>[\"out\"]): void {\r\n\t\tif (this.tooltip && this.tooltip.targetSprite == this && this.tooltip.keepTargetHover) {\r\n\t\t\tthis._outTimeout = this.setTimeout(() => {\r\n\t\t\t\tif (!this.tooltip.isHover) {\r\n\t\t\t\t\tif (this.tooltip.targetSprite == this) {\r\n\t\t\t\t\t\tthis.hideTooltip();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._outTimeout = this.setTimeout(this.handleOutReal.bind(this), this.rollOutDelay);\r\n\t\t\t\t}\r\n\t\t\t}, 10);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (this.showTooltipOn == \"hover\") {\r\n\t\t\tthis.hideTooltip();\r\n\t\t}\r\n\t\tthis._outTimeout = this.setTimeout(this.handleOutReal.bind(this), this.rollOutDelay);\r\n\t}\r\n\r\n\t/**\r\n\t * [handleOutReal description]\r\n\t *\r\n\t * @ignore\r\n\t * @todo description\r\n\t */\r\n\tpublic handleOutReal() {\r\n\t\tif (!this.isHidden && !this.isHiding && this.states.hasKey(\"hover\")) {\r\n\t\t\tthis.applyCurrentState();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * CLICKING/TAPPING AND TOGGLING STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Returns Sprite's click (hit) options.\r\n\t *\r\n\t * Click (hit) options control things like double-click, timeouts, etc.\r\n\t *\r\n\t * @see {@link IHitOptions} for available options.\r\n\t * @return Options\r\n\t */\r\n\tpublic get hitOptions(): IHitOptions {\r\n\t\tif (!this.interactions.hitOptions) {\r\n\t\t\tif (this.virtualParent) {\r\n\t\t\t\treturn this.virtualParent.hitOptions;\r\n\t\t\t}\r\n\t\t\tif (this._parent) {\r\n\t\t\t\treturn this._parent.hitOptions;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.interactions.hitOptions;\r\n\t}\r\n\r\n\t/**\r\n\t * Prepares element's after `down` event.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev Event\r\n\t */\r\n\tpublic handleDown(ev?: AMEvent<Sprite, ISpriteEvents>[\"down\"]): void {\r\n\t\tif (this.interactions.downPointers.length === 1) {\r\n\t\t\tthis.interactions.originalPosition = {\r\n\t\t\t\tx: this.pixelX,\r\n\t\t\t\ty: this.pixelY\r\n\t\t\t};\r\n\t\t\tthis.interactions.originalAngle = this.rotation;\r\n\t\t\tthis.interactions.originalScale = this.scale;\r\n\t\t\tif (this.states.hasKey(\"down\")) {\r\n\t\t\t\tthis.setState(\"down\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Prepares element's after `up` event.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev Event\r\n\t */\r\n\tpublic handleUp(ev?: AMEvent<Sprite, ISpriteEvents>[\"up\"]): void {\r\n\t\t/*if (!this.isDown) {\r\n\t\t\tthis.interactions.originalPosition = null;\r\n\t\t\tthis.interactions.originalAngle = null;\r\n\t\t\tthis.interactions.originalScale = null;\r\n\t\t}*/\r\n\t\tthis._isResized = false;\r\n\t\tif (this.states.hasKey(\"down\")) {\r\n\t\t\tthis.applyCurrentState();\r\n\t\t}\r\n\t\tif (this.showTooltipOn == \"hit\") {\r\n\t\t\tthis.updateTooltipPosition(ev.pointer ? ev.pointer.point : undefined);\r\n\t\t\tthis._disposers.push(registry.events.once(\"exitframe\", () => {\r\n\t\t\t\tthis.showTooltip();\r\n\t\t\t}));\r\n\r\n\t\t\tthis._disposers.push(getInteraction().body.events.once(\"down\", (ev) => {\r\n\t\t\t\tthis.hideTooltip();\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if the element is clickable.\r\n\t *\r\n\t * Some type of the elements, like buttons are clickable by default.\r\n\t *\r\n\t * Most of the elements are not clickable by default.\r\n\t *\r\n\t * Use `hit`, `doublehit`, `up`, `down`, `toggled` events to watch for\r\n\t * respective click/touch actions.\r\n\t *\r\n\t * @param value `true` if element can be clicked\r\n\t */\r\n\tpublic set clickable(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.setPropertyValue(\"clickable\", value)) {\r\n\t\t\tif (!value && !this.isInteractive()) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.applyCursorStyle();\r\n\t\t\t\tthis.interactions.clickable = value;\r\n\r\n\t\t\t\t// setEventDisposer will also remove listeners if value == false\r\n\t\t\t\tthis.interactions.setEventDisposer(\"sprite-clickable\", value, () => new MultiDisposer([\r\n\t\t\t\t\tthis.events.on(\"down\", this.handleDown, this, false),\r\n\t\t\t\t\tthis.events.on(\"up\", this.handleUp, this, false)\r\n\t\t\t\t]));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean}\r\n\t */\r\n\tpublic get clickable(): boolean {\r\n\t\treturn this.getPropertyValue(\"clickable\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if element can be toggled on and off by subsequent clicks/taps.\r\n\t *\r\n\t * Togglable element will alternate its `isActive` property between `true`\r\n\t * and `false` with each click.\r\n\t *\r\n\t * @param value Is togglable?\r\n\t */\r\n\tpublic set togglable(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.setPropertyValue(\"togglable\", value)) {\r\n\t\t\tif (!value && !this.isInteractive()) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// setEventDisposer will also remove listeners if value == false\r\n\t\t\t\tthis.interactions.setEventDisposer(\"sprite-togglable\", value, () => this.events.on(\"hit\", this.handleToggle, this, false));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Is togglable?\r\n\t */\r\n\tpublic get togglable(): boolean {\r\n\t\treturn this.getPropertyValue(\"togglable\");\r\n\t}\r\n\r\n\t/**\r\n\t * Handles toggling of the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev Event\r\n\t */\r\n\tpublic handleToggle(ev: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tthis.isActive = !this.isActive;\r\n\t}\r\n\r\n\t/**\r\n\t * Should element prevent context menu to be displayed, e.g. when\r\n\t * right-clicked?\r\n\t *\r\n\t * @default false\r\n\t * @param value Context menu disabled?\r\n\t */\r\n\tpublic set contextMenuDisabled(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.setPropertyValue(\"contextMenuDisabled\", value)) {\r\n\t\t\tthis.interactions.contextMenuDisabled = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Context menu disabled?\r\n\t */\r\n\tpublic get contextMenuDisabled(): boolean {\r\n\t\treturn this.getPropertyValue(\"contextMenuDisabled\");\r\n\t}\r\n\r\n\t/**\r\n\t * Click-through URL for this element.\r\n\t *\r\n\t * If set, clicking/tapping this element will open the new URL in a target\r\n\t * window/tab as set by `urlTarget`.\r\n\t *\r\n\t * Please note that URL will be parsed by data placeholders in curly\r\n\t * brackets, to be populated from data. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.columns.template.url = \"https://www.google.com/search?q={category.urlEncode()}\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.columns.template.url = \"https://www.google.com/search?q={category.urlEncode()}\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"columns\": {\r\n\t *       \"url\": \"https://www.google.com/search?q={category.urlEncode()}\"\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param value URL\r\n\t */\r\n\tpublic set url(value: $type.Optional<string>) {\r\n\t\tif (this.setPropertyValue(\"url\", value)) {\r\n\t\t\tif (this._urlDisposer) {\r\n\t\t\t\tthis._urlDisposer.dispose();\r\n\t\t\t}\r\n\r\n\t\t\t// If URL is not empty, set up events\r\n\t\t\tif ($utils.isNotEmpty(value)) {\r\n\t\t\t\tthis._urlDisposer = this.events.on(\"hit\", this.urlHandler, this, false);\r\n\r\n\t\t\t\t// Set other required parameters\r\n\t\t\t\tthis.clickable = true;\r\n\t\t\t\tthis.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return URL\r\n\t */\r\n\tpublic get url(): $type.Optional<string> {\r\n\t\treturn this.getPropertyValue(\"url\");\r\n\t}\r\n\r\n\t/**\r\n\t * [baseId description]\r\n\t *\r\n\t * @ignore\r\n\t * @param  value  [description]\r\n\t */\r\n\tpublic set baseId(value: string) {\r\n\t\tthis.setBaseId(value);\r\n\t}\r\n\r\n\t/**\r\n\t * [baseId description]\r\n\t *\r\n\t * @ignore\r\n\t * @return [description]\r\n\t */\r\n\tpublic get baseId(): string {\r\n\t\tif (!this._baseId && this._parent) {\r\n\t\t\tthis.baseId = this._parent.baseId;\r\n\t\t}\r\n\r\n\t\treturn this._baseId;\r\n\t}\r\n\r\n\tprotected setBaseId(value: string) {\r\n\t\tif (value != this._baseId) {\r\n\t\t\tif (this.invalid) {\r\n\t\t\t\tthis.invalid = false;\r\n\t\t\t\tregistry.removeFromInvalidSprites(this);\r\n\t\t\t\tthis.invalidate();\r\n\t\t\t}\r\n\t\t\tthis._baseId = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the mail chart object that this element belongs to.\r\n\t *\r\n\t * In most cases it will mean the chart object.\r\n\t *\r\n\t * Can be used to retrieve chart object in various events and adapters.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.seriesContainer.events.on(\"hit\", function(ev) {\r\n\t *   console.log(ev.target.baseSprite);\r\n\t * });\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.seriesContainer.events.on(\"hit\", function(ev) {\r\n\t *   console.log(ev.target.baseSprite);\r\n\t * });\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"seriesContainer\": {\r\n\t *     \"events\": {\r\n\t *       \"hit\": function(ev) {\r\n\t *         console.log(ev.target.baseSprite);\r\n\t *       }\r\n\t *     }\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @readonly\r\n\t * @return  Base chart object\r\n\t */\r\n\tpublic get baseSprite(): $type.Optional<Sprite> {\r\n\t\tif (this.isBaseSprite) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\telse if (this._parent) {\r\n\t\t\treturn this._parent.baseSprite;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Target to use for URL clicks:\r\n\t *\r\n\t * * _blank\r\n\t * * _self (default)\r\n\t * * _parent\r\n\t * * _top\r\n\t * * Name of the window/frame\r\n\t *\r\n\t * Ignored if `url` is not set.\r\n\t *\r\n\t * @param value URL target\r\n\t */\r\n\tpublic set urlTarget(value: string) {\r\n\t\tthis.setPropertyValue(\"urlTarget\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return URL target\r\n\t */\r\n\tpublic get urlTarget(): string {\r\n\t\treturn this.getPropertyValue(\"urlTarget\");\r\n\t}\r\n\r\n\t/**\r\n\t * Handles URL transition on element click.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev An event object\r\n\t */\r\n\tpublic urlHandler(ev: AMEvent<Sprite, ISpriteEvents>[\"hit\"]): void {\r\n\t\t// Is URL set?\r\n\t\tif ($utils.isNotEmpty(this.url)) {\r\n\t\t\t// Proceed to the URL\r\n\t\t\tlet url = this.populateString(this.url);\r\n\t\t\tif (this.urlTarget === \"_self\") {\r\n\t\t\t\twindow.location.href = url;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\twindow.open(url, this.urlTarget);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * SWIPING GESTURE TRACKING\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Returns element's swipe gesture options.\r\n\t *\r\n\t * @return Swipe gesture options\r\n\t */\r\n\tpublic get swipeOptions(): ISwipeOptions {\r\n\t\tif (!this.interactions.swipeOptions) {\r\n\t\t\tif (this.virtualParent) {\r\n\t\t\t\treturn this.virtualParent.swipeOptions;\r\n\t\t\t}\r\n\t\t\tif (this._parent) {\r\n\t\t\t\treturn this._parent.swipeOptions;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.interactions.swipeOptions;\r\n\t}\r\n\r\n\t/**\r\n\t * Controls if element is swipeable.\r\n\t *\r\n\t * Swipable element will invoke `swipe`, `swipeleft` and `swiperight` events,\r\n\t * when quick horizontal drag action is performed with either mouse or touch.\r\n\t *\r\n\t * Please note that combining swipe and drag is possible, however will incur\r\n\t * a slight but noticeable delay in drag start.\r\n\t *\r\n\t * @param value  Element swipable?\r\n\t */\r\n\tpublic set swipeable(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.setPropertyValue(\"swipeable\", value)) {\r\n\t\t\tthis.applyCursorStyle();\r\n\t\t\tif (!value && !this.isInteractive()) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.interactions.swipeable = value;\r\n\t\t\t}\r\n\t\t\t//interaction.processSwipeable(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Element swipable?\r\n\t */\r\n\tpublic get swipeable(): boolean {\r\n\t\treturn this.getPropertyValue(\"swipeable\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * POINTER TRACKING\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Indicates if the element is trackable (mouse position over it is reported to\r\n\t * event listeners).\r\n\t *\r\n\t * Will invoke `track` events whenever pointer (cursor) changes position\r\n\t * while over element.\r\n\t *\r\n\t * Please note, touch devices will also invoke `track` events when touch\r\n\t * point is moved while holding down on a trackable element.\r\n\t *\r\n\t * @param value Track cursor movement over element?\r\n\t */\r\n\tpublic set trackable(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.setPropertyValue(\"trackable\", value)) {\r\n\t\t\tif (!value && !this.isInteractive()) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.applyCursorStyle();\r\n\t\t\t\tthis.interactions.trackable = value;\r\n\t\t\t}\r\n\t\t\t//interaction.processTrackable(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Track cursor movement over element?\r\n\t */\r\n\tpublic get trackable(): boolean {\r\n\t\treturn this.getPropertyValue(\"trackable\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * MOUSE-WHEEL RELATED\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Indicates if the element can be interacted with mouse wheel.\r\n\t *\r\n\t * Will invoke `wheel`, `wheelup`, `wheeldown`, `wheelleft`, and `wheelright`\r\n\t * events when using mouse wheel over the element.\r\n\t *\r\n\t * @param value Mouse wheel events enabled?\r\n\t */\r\n\tpublic set wheelable(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"wheelable\", value)) {\r\n\t\t\tif (!value && !this.isInteractive()) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.applyCursorStyle();\r\n\t\t\t\tthis.interactions.wheelable = value;\r\n\t\t\t}\r\n\t\t\t//interaction.processWheelable(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mouse wheel events enabled?\r\n\t */\r\n\tpublic get wheelable(): boolean {\r\n\t\treturn this.getPropertyValue(\"wheelable\");\r\n\t}\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * RESIZE\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Indicates if this element is resizable.\r\n\t *\r\n\t * Enabling resize will turn on various interactions on the element. Their\r\n\t * actual functionality will depend on other properties.\r\n\t *\r\n\t * If the element also `draggable`, resize will only happen with two points\r\n\t * of contact on a touch device.\r\n\t *\r\n\t * If the element is not draggable, resize can be performed with just one\r\n\t * point of contact, touch or mouse.\r\n\t *\r\n\t * Will invoke `resize` event every time the size of the element changes.\r\n\t *\r\n\t * @param value  Element resizable?\r\n\t */\r\n\tpublic set resizable(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.setPropertyValue(\"resizable\", value)) {\r\n\t\t\tif (!value && !this.isInteractive()) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.applyCursorStyle();\r\n\t\t\t\tthis.interactions.resizable = value;\r\n\t\t\t\t// setEventDisposer will also remove listeners if value == false\r\n\t\t\t\tthis.interactions.setEventDisposer(\"sprite-resizable\", value, () => new MultiDisposer([\r\n\t\t\t\t\tthis.events.on(\"down\", this.handleDown, this, false),\r\n\t\t\t\t\tthis.events.on(\"resize\", this.handleResize, this, false)\r\n\t\t\t\t]));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Element resizable?\r\n\t */\r\n\tpublic get resizable(): boolean {\r\n\t\treturn this.getPropertyValue(\"resizable\");\r\n\t}\r\n\r\n\t/**\r\n\t * Handles resize intermediate step.\r\n\t *\r\n\t * By default this method resizes actual element. Each element, can override\r\n\t * this method to implement their own resize logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev Event object\r\n\t */\r\n\tpublic handleResize(ev: AMEvent<Sprite, ISpriteEvents>[\"resize\"]): void {\r\n\t\tif (!this.interactions.isTouchProtected || !ev.touch) {\r\n\t\t\tthis._isResized = true;\r\n\r\n\t\t\tthis.scale = this.interactions.originalScale * ev.scale;\r\n\r\n\t\t\tthis.validatePosition();\r\n\t\t\t/*center: (io.draggable\r\n\t\t\t? $math.getMidPoint(point1, point2)\r\n\t\t\t: {\r\n\t\t\t\t\"x\": io.originalPosition.x,\r\n\t\t\t\t\"y\": io.originalPosition.y\r\n\t\t\t})*/\r\n\t\t\t//this.moveTo(this.originalPosition.x + ev.shift.x, this.originalPosition.y + ev.shift.y);\r\n\t\t\tif (this.draggable || this.dragWhileResize) {\r\n\t\t\t\tthis._isDragged = false;\r\n\t\t\t\tlet svgPoint1: IPoint = $utils.documentPointToSvg(ev.point1, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\t\t\tlet svgPoint2: IPoint = $utils.documentPointToSvg(ev.point2, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\t\t\tlet svgMidPoint: IPoint = $math.getMidPoint(svgPoint1, svgPoint2);\r\n\r\n\t\t\t\tlet parentPoint1: IPoint = $utils.documentPointToSprite(ev.startPoint1, this._parent);\r\n\t\t\t\tlet parentPoint2: IPoint = $utils.documentPointToSprite(ev.startPoint2, this._parent);\r\n\r\n\t\t\t\tlet originalPosition: Optional<IPoint> = this.interactions.originalPosition;\r\n\t\t\t\tlet originalScale: number = this.interactions.originalScale;\r\n\r\n\t\t\t\tif (originalPosition) {\r\n\t\t\t\t\tlet spritePoint1: IPoint = { x: (parentPoint1.x - originalPosition.x) / originalScale, y: (parentPoint1.y - originalPosition.y) / originalScale };\r\n\t\t\t\t\tlet spritePoint2: IPoint = { x: (parentPoint2.x - originalPosition.x) / originalScale, y: (parentPoint2.y - originalPosition.y) / originalScale };\r\n\r\n\t\t\t\t\tlet spriteMidPoint: IPoint = $math.getMidPoint(spritePoint1, spritePoint2);\r\n\r\n\t\t\t\t\tlet parentPoint: IPoint = $utils.svgPointToSprite(svgMidPoint, this._parent);\r\n\t\t\t\t\tthis.moveTo({ x: parentPoint.x - spriteMidPoint.x * this.scale, y: parentPoint.y - spriteMidPoint.y * this.scale }, undefined, undefined, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * MOUSE-RELATED\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Returns element's cursor options.\r\n\t *\r\n\t * Cursor options usually define cursor style for various states of the\r\n\t * hovered element.\r\n\t *\r\n\t * Elements inherit `cursorOptions` from their parents if they don't have\r\n\t * them set explicitly.\r\n\t *\r\n\t * @see {@link ICursorOptions} for a list of available options\r\n\t * @return Cursor options\r\n\t */\r\n\tpublic get cursorOptions(): ICursorOptions {\r\n\t\tif (!this.interactions.cursorOptions) {\r\n\t\t\tif (this.virtualParent) {\r\n\t\t\t\treturn this.virtualParent.cursorOptions;\r\n\t\t\t}\r\n\t\t\tif (this._parent) {\r\n\t\t\t\treturn this._parent.cursorOptions;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.interactions.cursorOptions;\r\n\t}\r\n\r\n\t/**\r\n\t * A shortcut to setting mouse cursor on hover.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.slices.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.slices.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": {\r\n\t *     // ...\r\n\t *     \"slices\": {\r\n\t *       \"cursorOverStyle\": \"pointer\"\r\n\t *     }\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param style An array of styles to apply onhover\r\n\t */\r\n\tpublic set cursorOverStyle(style: Array<IStyleProperty>) {\r\n\t\tif (!this.cursorOptions.overStyle) {\r\n\t\t\tthis.interactions.cursorOptions = {\r\n\t\t\t\tdefaultStyle: this.cursorOptions.defaultStyle\r\n\t\t\t};\r\n\t\t}\r\n\t\tthis.cursorOptions.overStyle = style;\r\n\t\tgetInteraction().applyCursorOverStyle(this.interactions);\r\n\t}\r\n\r\n\t/**\r\n\t * A shortcut to setting mouse cursor when button is pressed down.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.slices.template.cursorDownStyle = am4core.MouseCursorStyle.grabbing;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.slices.template.cursorDownStyle = am4core.MouseCursorStyle.grabbing;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": {\r\n\t *     // ...\r\n\t *     \"slices\": {\r\n\t *       \"cursorDownStyle\": \"grabbing\"\r\n\t *     }\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param style An array of styles to apply onhover\r\n\t */\r\n\tpublic set cursorDownStyle(style: Array<IStyleProperty>) {\r\n\t\tthis.cursorOptions.downStyle = style;\r\n\t}\r\n\r\n\t/**\r\n\t * Applies default cursor styles for interactable elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Determine if this is necessary. Maybe let's not apply any cursor styles by default\r\n\t */\r\n\tpublic applyCursorStyle(): void {\r\n\r\n\t\t// Draggable styles\r\n\t\t/*if (this.draggable) {\r\n\r\n\t\t\tif (!$type.hasValue(this.cursorOptions.overStyle)) {\r\n\t\t\t\tthis.cursorOptions.overStyle = MouseCursorStyle.grab;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.hasValue(this.cursorOptions.downStyle)) {\r\n\t\t\t\tthis.cursorOptions.downStyle = MouseCursorStyle.grabbing;\r\n\t\t\t}\r\n\t\t}*/\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setting this to `false` will effectively disable all interactivity on the\r\n\t * element.\r\n\t *\r\n\t * @param value  Is interaction enabled for this element?\r\n\t */\r\n\tpublic set interactionsEnabled(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\r\n\t\tif (this.setPropertyValue(\"interactionsEnabled\", value)) {\r\n\t\t\tlet pointerEvents = null; // must be null, not \"null\"!\r\n\t\t\tif (!value) {\r\n\t\t\t\tpointerEvents = \"none\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// this is for IE\r\n\t\t\t\tthis.group.node.style.pointerEvents = \"\";\r\n\t\t\t}\r\n\t\t\tthis.group.node.style.pointerEvents = pointerEvents;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Is interaction enabled for this element?\r\n\t */\r\n\tpublic get interactionsEnabled(): boolean {\r\n\t\tlet value = this.getPropertyValue(\"interactionsEnabled\");\r\n\t\tif (value === false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (this.virtualParent) {\r\n\t\t\treturn this.virtualParent.interactionsEnabled;\r\n\t\t}\r\n\t\tif (this._parent) {\r\n\t\t\treturn this._parent.interactionsEnabled;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * EXPORT-RELATED STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * An [[Export]] instance.\r\n\t *\r\n\t * Used to access API of the chart export functionality.\r\n\t *\r\n\t * If `exporting` is not set, the element inherits [[Export]] instance from\r\n\t * its parents.\r\n\t *\r\n\t * Upon request, if no parent has such instance, a new one is created, using\r\n\t * default settings, what in most cases is just enough.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/exporting/} for more info about exporting\r\n\t * @param exp  Export\r\n\t */\r\n\tpublic set exporting(exp: Export) {\r\n\t\tthis._exporting.set(exp, exp);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Export instance\r\n\t */\r\n\tpublic get exporting(): Export {\r\n\t\treturn this.getExporting();\r\n\t}\r\n\r\n\t/**\r\n\t * This is here as a method so that inheriting classes could override it.\r\n\t *\r\n\t * @return Export instance\r\n\t */\r\n\tprotected getExporting(): Export {\r\n\t\tlet _export = this._exporting.get();\r\n\r\n\t\tif (_export) {\r\n\t\t\treturn _export;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.isStandaloneInstance || !this._parent) {\r\n\t\t\t\t_export = new Export(this.svgContainer.SVGContainer);\r\n\t\t\t\t_export.sprite = this;\r\n\t\t\t\t_export.language = this.language;\r\n\t\t\t\t_export.numberFormatter = this.numberFormatter;\r\n\t\t\t\t_export.dateFormatter = this.dateFormatter;\r\n\t\t\t\t_export.durationFormatter = this.durationFormatter;\r\n\t\t\t\tthis._exporting.set(_export, _export);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this._parent.exporting;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn _export;\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `false` this element will be omitted when exporting the chart\r\n\t * to an image.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Export?\r\n\t */\r\n\tpublic set exportable(value: boolean) {\r\n\t\tconst svgContainer = this.svgContainer;\r\n\t\tthis._exportable = value;\r\n\t\tif (svgContainer) {\r\n\t\t\tif (value) {\r\n\t\t\t\t$array.remove(svgContainer.nonExportableSprites, this);\r\n\t\t\t}\r\n\t\t\telse if ($array.indexOf(svgContainer.nonExportableSprites, this) == -1) {\r\n\t\t\t\tsvgContainer.nonExportableSprites.push(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Export?\r\n\t */\r\n\tpublic get exportable(): boolean {\r\n\t\treturn this._exportable;\r\n\t\t/*const svgContainer = this.svgContainer;\r\n\t\treturn !svgContainer || $array.indexOf(svgContainer.nonExportableSprites, this) == -1;*/\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * MODAL/POPUP RELATED STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Private method to be used for \"classPrefix\" adapter for modals/popups.\r\n\t *\r\n\t * @param value  Prefix\r\n\t */\r\n\tprivate modalPrefix(value: string) {\r\n\t\tvalue = options.classNamePrefix + value;\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[Modal]] instance, associated with this chart.\r\n\t * (elements top parent)\r\n\t *\r\n\t * Accessing modal does not make it appear. To make a modal appear, use\r\n\t * `showModal()` method.\r\n\t *\r\n\t * @see {@link Modal} for more information about using Modal windows\r\n\t * @return Modal instance\r\n\t */\r\n\tpublic get modal(): Optional<Modal> {\r\n\t\tconst svgContainer = this.svgContainer;\r\n\t\tif (svgContainer) {\r\n\t\t\tconst modal = svgContainer.modal;\r\n\t\t\tif (!modal.adapter.has(\"classPrefix\", this.modalPrefix)) {\r\n\t\t\t\tmodal.adapter.add(\"classPrefix\", this.modalPrefix);\r\n\t\t\t}\r\n\t\t\treturn modal;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Opens a modal window with specific content (`text` parameter) and,\r\n\t * optionally, `title`.\r\n\t *\r\n\t * The `text` parameter can contain HTML content.\r\n\t *\r\n\t * @see {@link Modal} for more information about using Modal windows\r\n\t * @param text   Modal contents\r\n\t * @param title  Title for the modal window\r\n\t */\r\n\tpublic openModal(text: string, title?: string): Optional<Modal> {\r\n\t\tconst svgContainer = this.svgContainer;\r\n\t\tif (svgContainer) {\r\n\t\t\treturn svgContainer.openModal(text, title);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides modal window if there is one currently open.\r\n\t */\r\n\tpublic closeModal(): void {\r\n\t\tconst svgContainer = this.svgContainer;\r\n\t\tif (svgContainer) {\r\n\t\t\tsvgContainer.closeModal();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of popups for this chart.\r\n\t *\r\n\t * @return Popups\r\n\t */\r\n\tpublic get popups(): Optional<ListTemplate<Popup>> {\r\n\t\tconst svgContainer = this.svgContainer;\r\n\t\tif (svgContainer) {\r\n\t\t\tconst popups = svgContainer.popups;\r\n\t\t\tpopups.template.sprite = this;\r\n\r\n\t\t\tif (!popups.template.adapter.has(\"classPrefix\", this.modalPrefix)) {\r\n\t\t\t\tpopups.template.adapter.add(\"classPrefix\", this.modalPrefix);\r\n\t\t\t}\r\n\t\t\treturn popups;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates, opens, and returns a new [[Popup]] window.\r\n\t *\r\n\t * `text` can be any valid HTML.\r\n\t *\r\n\t * `title` is currently not supported.\r\n\t *\r\n\t * @param text   Popup contents\r\n\t * @param title  Popup title\r\n\t * @return Popup instance\r\n\t */\r\n\tpublic openPopup(text: string, title?: string): Optional<Popup> {\r\n\t\tconst svgContainer = this.svgContainer;\r\n\t\tif (svgContainer) {\r\n\t\t\treturn svgContainer.openPopup(text, title);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Closes all currently open popup windows\r\n\t */\r\n\tpublic closeAllPopups(): void {\r\n\t\tconst svgContainer = this.svgContainer;\r\n\t\tif (svgContainer) {\r\n\t\t\tsvgContainer.closeAllPopups();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * POSITIONAL PROPERTIES AND RELATED STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Element's absolute or relative X coordinate.\r\n\t *\r\n\t * If setting both X and Y, please consider using `moveTo()` method instead,\r\n\t * as it will be faster to set both coordinates at once.\r\n\t *\r\n\t * @param value X coordinate\r\n\t */\r\n\tpublic set x(value: number | Percent) {\r\n\t\tif (!this.isDragged) {\r\n\t\t\tthis.setPercentProperty(\"x\", value, false, true, this._positionPrecision, true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return X coordinate\r\n\t */\r\n\tpublic get x(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"x\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's current absolute X coordinate in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return X coordinate (px)\r\n\t */\r\n\tpublic get pixelX(): number {\r\n\t\tlet value = $math.fitToRange(this.getPixelX(this.x), this.minX, this.maxX);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"pixelX\", value);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's current relative X coordinate in [[Percent]].\r\n\t *\r\n\t * @return X coordinate ([[Percent]])\r\n\t */\r\n\tpublic get relativeX(): number {\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn this.getRelativeX(this.x)\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"relativeX\", this.getRelativeX(this.x));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The smallest allowable absolute X coordinate for this element.\r\n\t *\r\n\t * This is used to contain element movement within certain boundaries.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Min X (px)\r\n\t */\r\n\tpublic set minX(value: number) {\r\n\t\tif ($type.isNumber(value)) {\r\n\t\t\tvalue = $math.round(value, this._positionPrecision, true);\r\n\t\t\tthis.setPropertyValue(\"minX\", value, false, true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Min X (px)\r\n\t */\r\n\tpublic get minX(): number {\r\n\t\treturn this.getPropertyValue(\"minX\");\r\n\t}\r\n\r\n\t/**\r\n\t * The biggest allowable absolute X coordinate for this element.\r\n\t *\r\n\t * This is used to contain element movement within certain boundaries.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Max X (px)\r\n\t */\r\n\tpublic set maxX(value: number) {\r\n\t\tif ($type.isNumber(value)) {\r\n\t\t\tvalue = $math.round(value, this._positionPrecision, true);\r\n\t\t\tthis.setPropertyValue(\"maxX\", value, false, true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Max X (px)\r\n\t */\r\n\tpublic get maxX(): number {\r\n\t\treturn this.getPropertyValue(\"maxX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Element's absolute or relative Y coordinate.\r\n\t *\r\n\t * If setting both X and Y, please consider using `moveTo()` method instead,\r\n\t * as it will be faster to set both coordinates at once.\r\n\t *\r\n\t * @param value  Y coordinate\r\n\t */\r\n\tpublic set y(value: number | Percent) {\r\n\t\tif (!this.isDragged) {\r\n\t\t\tthis.setPercentProperty(\"y\", value, false, true, this._positionPrecision, true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y coordinate\r\n\t */\r\n\tpublic get y(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"y\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's current absolute Y coordinate in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Y coordinate (px)\r\n\t */\r\n\tpublic get pixelY(): number {\r\n\t\tlet value = $math.fitToRange(this.getPixelY(this.y), this.minY, this.maxY);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"pixelY\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's current relative Y coordinate in [[Percent]].\r\n\t *\r\n\t * @readonly\r\n\t * @return Y coordinate ([[Percent]])\r\n\t */\r\n\tpublic get relativeY(): number {\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn this.getRelativeX(this.y);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"relativeY\", this.getRelativeX(this.y));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The smallest allowable absolute Y coordinate for this element.\r\n\t *\r\n\t * This is used to contain element movement within certain boundaries.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Min Y (px)\r\n\t */\r\n\tpublic set minY(value: number) {\r\n\t\tif ($type.isNumber(value)) {\r\n\t\t\tvalue = $math.round(value, this._positionPrecision, true);\r\n\t\t\tthis.setPropertyValue(\"minY\", value, false, true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Min Y (px)\r\n\t */\r\n\tpublic get minY(): number {\r\n\t\treturn this.getPropertyValue(\"minY\");\r\n\t}\r\n\r\n\t/**\r\n\t * The biggest allowable absolute Y coordinate for this element.\r\n\t *\r\n\t * This is used to contain element movement within certain boundaries.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Max Y (px)\r\n\t */\r\n\tpublic set maxY(value: number) {\r\n\t\tif ($type.isNumber(value)) {\r\n\t\t\tvalue = $math.round(value, this._positionPrecision, true);\r\n\t\t\tthis.setPropertyValue(\"maxY\", value, false, true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Max Y (px)\r\n\t */\r\n\tpublic get maxY(): number {\r\n\t\treturn this.getPropertyValue(\"maxY\");\r\n\t}\r\n\r\n\t/**\r\n\t * A horizontal offset for the element in pixels.\r\n\t *\r\n\t * Can be negative value for offset to the left.\r\n\t *\r\n\t * @param value  Horizontal offset (px)\r\n\t */\r\n\tpublic set dx(value: number) {\r\n\t\tif ($type.isNumber(value)) {\r\n\t\t\tvalue = $math.round(value, this._positionPrecision, true);\r\n\t\t\tthis.setPropertyValue(\"dx\", value, false, true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal offset (px)\r\n\t */\r\n\tpublic get dx(): number {\r\n\t\treturn this.getPropertyValue(\"dx\");\r\n\t}\r\n\r\n\t/**\r\n\t * A vertical offset for the element in pixels.\r\n\t *\r\n\t * Can be negative value for offset upwards.\r\n\t *\r\n\t * @param value  Vertical offset (px)\r\n\t */\r\n\tpublic set dy(value: number) {\r\n\t\tif ($type.isNumber(value)) {\r\n\t\t\tvalue = $math.round(value, this._positionPrecision, true);\r\n\t\t\tthis.setPropertyValue(\"dy\", value, false, true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical offset (px)\r\n\t */\r\n\tpublic get dy(): number {\r\n\t\treturn this.getPropertyValue(\"dy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Rotation of the element in degrees. (0-360)\r\n\t *\r\n\t * Note: For convenience purposes, negative values (for counter-clockwise\r\n\t * rotation) and values exceeding 360 can also be used.\r\n\t *\r\n\t * @param value  Rotation (0-360)\r\n\t */\r\n\tpublic set rotation(value: number) {\r\n\t\tvalue = $type.toNumber(value);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"rotation\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Rotation (0-360)\r\n\t */\r\n\tpublic get rotation(): number {\r\n\t\treturn this.getPropertyValue(\"rotation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Controls horizontal alignment of the element.\r\n\t *\r\n\t * This is used by parent [[Container]] when layouting its children.\r\n\t *\r\n\t * @param value  Horizontal align\r\n\t */\r\n\tpublic set align(value: Align) {\r\n\t\tvalue = <Align>$type.toText(value);\r\n\t\tif (this.setPropertyValue(\"align\", value)) {\r\n\t\t\tif (this._parent) {\r\n\t\t\t\tthis._parent.invalidateLayout();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal align\r\n\t */\r\n\tpublic get align(): Align {\r\n\t\treturn this.getPropertyValue(\"align\");\r\n\t}\r\n\r\n\t/**\r\n\t * Controls vertical alignment of the element.\r\n\t *\r\n\t * This is used by parent [[Container]] when layouting its children.\r\n\t *\r\n\t * @param value  Vertical align\r\n\t */\r\n\tpublic set valign(value: VerticalAlign) {\r\n\t\tvalue = <VerticalAlign>$type.toText(value);\r\n\t\tif (this.setPropertyValue(\"valign\", value)) {\r\n\t\t\tif (this._parent) {\r\n\t\t\t\tthis._parent.invalidateLayout();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical align\r\n\t */\r\n\tpublic get valign(): VerticalAlign {\r\n\t\treturn this.getPropertyValue(\"valign\");\r\n\t}\r\n\r\n\t/**\r\n\t * Controls which part of the element to treat as a horizontal center.\r\n\t *\r\n\t * The setting will be used when positioning, resizing and rotating the\r\n\t * element.\r\n\t *\r\n\t * @param value  Horizontal center\r\n\t */\r\n\tpublic set horizontalCenter(value: HorizontalCenter) {\r\n\t\tvalue = <HorizontalCenter>$type.toText(value);\r\n\t\tif (this.setPropertyValue(\"horizontalCenter\", value)) {\r\n\t\t\tthis.updateCenter();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal center\r\n\t */\r\n\tpublic get horizontalCenter(): HorizontalCenter {\r\n\t\treturn this.getPropertyValue(\"horizontalCenter\");\r\n\t}\r\n\r\n\t/**\r\n\t * Controls which part of the element to treat as a vertical center.\r\n\t *\r\n\t * The setting will be used when positioning, resizing and rotating the\r\n\t * element.\r\n\t *\r\n\t * @param value  Vertical center\r\n\t */\r\n\tpublic set verticalCenter(value: VerticalCenter) {\r\n\t\tvalue = <VerticalCenter>$type.toText(value);\r\n\t\tif (this.setPropertyValue(\"verticalCenter\", value)) {\r\n\t\t\tthis.updateCenter();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical center\r\n\t */\r\n\tpublic get verticalCenter(): VerticalCenter {\r\n\t\treturn this.getPropertyValue(\"verticalCenter\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * DIMENSIONAL PROPERTIES AND RELATED STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Maximum allowed width for the element in pixels.\r\n\t *\r\n\t * @param value  Maximum width (px)\r\n\t */\r\n\tpublic set maxWidth(value: number) {\r\n\t\tthis.setMaxWidth(value);\r\n\t}\r\n\r\n\tprotected setMaxWidth(value: number) {\r\n\t\tlet prevWidth = this.maxWidth;\r\n\t\tlet prevHeight = this.maxHeight;\r\n\t\tif (this.setPropertyValue(\"maxWidth\", value)) {\r\n\t\t\tif ($type.isNumber(this.relativeWidth)) {\r\n\t\t\t\tthis.invalidate();\r\n\t\t\t}\r\n\r\n\t\t\tconst event: AMEvent<this, ISpriteEvents>[\"maxsizechanged\"] = {\r\n\t\t\t\ttype: \"maxsizechanged\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tpreviousWidth: prevWidth,\r\n\t\t\t\tpreviousHeight: prevHeight\r\n\t\t\t};\r\n\r\n\t\t\tthis.dispatchImmediately(\"maxsizechanged\", event);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Maximum width (px)\r\n\t */\r\n\tpublic get maxWidth(): number {\r\n\t\tlet maxWidth = this.getPropertyValue(\"maxWidth\");\r\n\r\n\t\tif (!$type.isNumber(maxWidth)) {\r\n\t\t\tif (this._parent) {\r\n\t\t\t\tlet parentWidth = this._parent.maxWidth;\r\n\t\t\t\tif (this._parent.layout != \"absolute\" && this.align != \"none\" && this.align != undefined) {\r\n\t\t\t\t\tparentWidth = parentWidth - this.pixelMarginLeft - this.pixelMarginRight;\r\n\t\t\t\t}\r\n\t\t\t\treturn parentWidth;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn maxWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum allowed height for the element in pixels.\r\n\t *\r\n\t * @param value  Maximum height (px)\r\n\t */\r\n\tpublic set maxHeight(value: number) {\r\n\t\tthis.setMaxHeight(value);\r\n\t}\r\n\r\n\tprotected setMaxHeight(value: number) {\r\n\r\n\t\tlet prevWidth = this.maxWidth;\r\n\t\tlet prevHeight = this.maxHeight;\r\n\r\n\t\tif (this.setPropertyValue(\"maxHeight\", value)) {\r\n\r\n\t\t\tif ($type.isNumber(this.relativeHeight)) {\r\n\t\t\t\tthis.invalidate();\r\n\t\t\t}\r\n\r\n\t\t\tconst event: AMEvent<this, ISpriteEvents>[\"maxsizechanged\"] = {\r\n\t\t\t\ttype: \"maxsizechanged\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tpreviousWidth: prevWidth,\r\n\t\t\t\tpreviousHeight: prevHeight\r\n\t\t\t};\r\n\r\n\t\t\tthis.dispatchImmediately(\"maxsizechanged\", event);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Maximum height (px)\r\n\t */\r\n\tpublic get maxHeight(): number {\r\n\t\tlet maxHeight = this.getPropertyValue(\"maxHeight\");\r\n\t\tif (!$type.isNumber(maxHeight)) {\r\n\t\t\tif (this._parent) {\r\n\t\t\t\tlet parentHeight = this._parent.maxHeight;\r\n\t\t\t\tif (this._parent.layout != \"absolute\" && this.valign != \"none\" && this.valign != undefined) {\r\n\t\t\t\t\tparentHeight = parentHeight - this.pixelMarginTop - this.pixelMarginBottom;\r\n\t\t\t\t}\r\n\t\t\t\treturn parentHeight;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn maxHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Minimum width of the element in pixels.\r\n\t *\r\n\t * Set to `undefined` to remove the limit.\r\n\t *\r\n\t * @param value  Minimum width (px)\r\n\t */\r\n\tpublic set minWidth(value: Optional<number>) {\r\n\t\tthis.setPropertyValue(\"minWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Minimum width (px)\r\n\t */\r\n\tpublic get minWidth(): Optional<number> {\r\n\t\treturn this.getPropertyValue(\"minWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Minimum height for the element in pixels.\r\n\t *\r\n\t * Set to `undefined` to remove the limit.\r\n\t *\r\n\t * @param value  Minimum height (px)\r\n\t */\r\n\tpublic set minHeight(value: Optional<number>) {\r\n\t\tthis.setPropertyValue(\"minHeight\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Minimum height (px)\r\n\t */\r\n\tpublic get minHeight(): Optional<number> {\r\n\t\treturn this.getPropertyValue(\"minHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Element's absolute or relative width.\r\n\t *\r\n\t * The width can either be absolute, set in numeric pixels, or relative, set\r\n\t * in [[Percent]].\r\n\t *\r\n\t * Relative width will be calculated using closest measured ancestor\r\n\t * [[Container]].\r\n\t *\r\n\t * NOTE: `width` is an accessor, which allows setting width in pixels or\r\n\t * percent. It is a sort of a \"shortcut\" for the users. Actual renderer does\r\n\t * not ever use it. It uses either `pixelWidth` or `percentWidth`, so if\r\n\t * you need to add an adapter for width add it for either of the two\r\n\t * properties - whichever suits your requirements.\r\n\t *\r\n\t * @param value  Width (numeric in pixels or relative)\r\n\t */\r\n\tpublic set width(value: number | Percent) {\r\n\r\n\t\tlet changed: boolean = this.setPercentProperty(\"width\", value, true, false, this._positionPrecision, true);\r\n\r\n\t\tif (changed) {\r\n\t\t\tthis.percentWidth = undefined;\r\n\t\t\tthis.relativeWidth = undefined;\r\n\r\n\t\t\tif (value instanceof Percent) {\r\n\t\t\t\tthis.percentWidth = value.percent;\r\n\t\t\t\tif ($type.isNumber(this._pixelWidth)) {\r\n\t\t\t\t\tthis.maxWidth = undefined;\r\n\t\t\t\t}\r\n\t\t\t\tthis._pixelWidth = undefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._pixelWidth = Number(value);\r\n\t\t\t\t//this._measuredWidth = this._pixelWidth;\r\n\t\t\t\tthis.maxWidth = this._pixelWidth;\r\n\t\t\t}\r\n\t\t\tthis.invalidatePosition();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (absolute or relative)\r\n\t */\r\n\tpublic get width(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"width\");\r\n\t}\r\n\r\n\t/**\r\n\t * Element's absolute or relative height.\r\n\t *\r\n\t * The height can either be absolute, set in numeric pixels, or relative, set\r\n\t * in [[Percent]].\r\n\t *\r\n\t * Relative height will be calculated using closest measured ancestor\r\n\t * [[Container]].\r\n\t *\r\n\t * NOTE: `height` is an accessor, which allows setting height in pixels or\r\n\t * percent. It is a sort of a \"shortcut\" for the users. Actual renderer does\r\n\t * not ever use it. It uses either `pixelHeight` or `percentHeight`, so if\r\n\t * you need to add an adapter for height add it for either of the two\r\n\t * properties - whichever suits your requirements.\r\n\t *\r\n\t * @param value  Height (numeric in pixels or relative)\r\n\t */\r\n\tpublic set height(value: number | Percent) {\r\n\r\n\t\tlet changed: boolean = this.setPercentProperty(\"height\", value, true, false, this._positionPrecision, true);\r\n\r\n\t\tif (changed) {\r\n\t\t\tthis.percentHeight = undefined;\r\n\t\t\tthis._relativeHeight = undefined;\r\n\r\n\t\t\tif (value instanceof Percent) {\r\n\t\t\t\tthis.percentHeight = value.percent;\r\n\t\t\t\tif ($type.isNumber(this._pixelHeight)) {\r\n\t\t\t\t\tthis.maxHeight = undefined;\r\n\t\t\t\t}\r\n\t\t\t\tthis._pixelHeight = undefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._pixelHeight = Number(value);\r\n\t\t\t\t//this._measuredHeight = this._pixelHeight;\r\n\t\t\t\tthis.maxHeight = this._pixelHeight; // yes, we reset maxWidth\r\n\t\t\t}\r\n\r\n\t\t\tthis.invalidatePosition();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return height (absolute or relative)\r\n\t */\r\n\tpublic get height(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"height\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's width in pixels, if width was set. For actual width use measuredWidth property.\r\n\t *\r\n\t * @readonly\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get pixelWidth(): number {\r\n\t\tlet width: number;\r\n\t\tif ($type.isNumber(this.percentWidth)) {\r\n\t\t\twidth = this.maxWidth;\r\n\t\t}\r\n\t\telse if ($type.isNumber(this._pixelWidth)) {\r\n\t\t\twidth = this._pixelWidth;\r\n\t\t}\r\n\t\telse {\r\n\t\t\twidth = 0;\r\n\t\t}\r\n\r\n\t\tconst minWidth = this.minWidth;\r\n\r\n\t\tif (minWidth != null && width < minWidth) {\r\n\t\t\twidth = minWidth;\r\n\t\t}\r\n\t\tlet value = $math.round(width, this._positionPrecision, true);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"pixelWidth\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's height in pixels. For actual height use measuredHeight property.\r\n\t *\r\n\t * @readonly\r\n\t * @return Height (px)\r\n\t */\r\n\tpublic get pixelHeight(): number {\r\n\t\tlet height: number;\r\n\t\tif ($type.isNumber(this.percentHeight)) {\r\n\t\t\theight = this.maxHeight;\r\n\t\t}\r\n\t\telse if ($type.isNumber(this._pixelHeight)) {\r\n\t\t\theight = this._pixelHeight;\r\n\t\t}\r\n\t\telse {\r\n\t\t\theight = 0//this._measuredHeightSelf;\r\n\t\t}\r\n\r\n\t\tconst minHeight = this.minHeight;\r\n\r\n\t\tif (minHeight != null && height < minHeight) {\r\n\t\t\theight = minHeight;\r\n\t\t}\r\n\t\tlet value = $math.round(height, this._positionPrecision, true);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"pixelHeight\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Element's relative width in [[Percent]].\r\n\t * @ignore\r\n\t *\r\n\t * @param value  Relative width\r\n\t */\r\n\tpublic set relativeWidth(value: $type.Optional<number>) {\r\n\t\tif (this._relativeWidth != value) {\r\n\t\t\tthis._relativeWidth = value;\r\n\t\t\t//\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Relative width\r\n\t * @ignore\r\n\t */\r\n\tpublic get relativeWidth(): $type.Optional<number> {\r\n\t\tconst relativeWidth = this._relativeWidth;\r\n\r\n\t\tif ($type.isNumber(relativeWidth)) {\r\n\t\t\tif (!this._adapterO) {\r\n\t\t\t\treturn relativeWidth;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this._adapterO.apply(\"relativeWidth\", relativeWidth);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Element's relative height in [[Percent]].\r\n\t *\r\n\t * @param value  Relative height\r\n\t * @ignore\r\n\t */\r\n\tpublic set relativeHeight(value: $type.Optional<number>) {\r\n\t\tif (this._relativeHeight != value) {\r\n\t\t\tthis._relativeHeight = value;\r\n\t\t\t//\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Relative height\r\n\t * @ignore\r\n\t */\r\n\tpublic get relativeHeight(): $type.Optional<number> {\r\n\t\tconst relativeHeight = this._relativeHeight;\r\n\r\n\t\tif ($type.isNumber(relativeHeight)) {\r\n\t\t\tif (!this._adapterO) {\r\n\t\t\t\treturn relativeHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this._adapterO.apply(\"relativeHeight\", relativeHeight);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's measured width in pixels.\r\n\t *\r\n\t * A measured width is actual width of contents plus `paddingRight` and* `paddingLeft`, relative to sprite parent, meaning that\r\n\t * rotation and scale is taken into account.\r\n\t *\r\n\t * @readonly\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get measuredWidth(): number {\r\n\r\n\t\tif (this.disabled || this.__disabled) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn this._measuredWidth;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"measuredWidth\", this._measuredWidth);\r\n\t\t}\r\n\t\t// it's not good to fit to min/max range as then rotations and scale won't be taken into account\r\n\t\t//return this.adapter.apply(\"measuredWidth\", $math.fitToRange(this._measuredWidth, this.minWidth, this.maxWidth));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns elements's measured height in pixels.\r\n\t *\r\n\t * A measured height is actual height of contents plus `paddingTop` and `paddingBottom`, relative to sprite parent, meaning that\r\n\t * rotation and scale taken into account.\r\n\t *\r\n\t * @readonly\r\n\t * @return Height (px)\r\n\t */\r\n\tpublic get measuredHeight(): number {\r\n\r\n\t\tif (this.disabled || this.__disabled) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t// it's not good to fit to min/max range as then rotations and scale won't be taken into account\r\n\t\t//return this.adapter.apply(\"measuredHeight\", $math.fitToRange(this._measuredHeight, this.minHeight, this.maxHeight));\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn this._measuredHeight;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"measuredHeight\", this._measuredHeight);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's measured width plus its left and right margins in\r\n\t * pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Outer width (px)\r\n\t */\r\n\tpublic get outerWidth(): number {\r\n\t\tlet value = this.pixelWidth + this.pixelMarginRight + this.pixelMarginLeft;\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"outerWidth\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's measured height plus its top and bottom margins in\r\n\t * pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Outer height (px)\r\n\t */\r\n\tpublic get outerHeight(): number {\r\n\t\tlet value = this.pixelHeight + this.pixelMarginTop + this.pixelMarginBottom;\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"outerHeight\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's measured inner width in pixels.\r\n\t *\r\n\t * Inner width is actual available space for content, e.g. element's width\r\n\t * minus horizontal padding.\r\n\t *\r\n\t * @readonly\r\n\t * @return Inner width (px)\r\n\t */\r\n\tpublic get innerWidth(): number {\r\n\t\tlet value = Math.max(0, this.pixelWidth - this.pixelPaddingRight - this.pixelPaddingLeft);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"innerWidth\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's measured inner height in pixels.\r\n\t *\r\n\t * Inner height is actual available space for content, e.g. element's height\r\n\t * minus vertical padding.\r\n\t *\r\n\t * @readonly\r\n\t * @return Inner height (px)\r\n\t */\r\n\tpublic get innerHeight(): number {\r\n\t\tlet value = Math.max(0, this.pixelHeight - this.pixelPaddingTop - this.pixelPaddingBottom);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"innerHeight\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's current \"global\" scale.\r\n\t *\r\n\t * Scale values accumulate over hierarchy of elements.\r\n\t *\r\n\t * E.g. if a [[Container]] has `scale = 2` and it's child has a `scale = 2`,\r\n\t * the child's `globalScale` will be 4. (a multitude of `2 x 2`)\r\n\t *\r\n\t * @readonly\r\n\t * @return Global scale\r\n\t */\r\n\tpublic get globalScale(): number {\r\n\t\tlet scale: number = this.scale;\r\n\t\tif (this._parent) {\r\n\t\t\tscale = scale * this._parent.globalScale;\r\n\t\t}\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn scale;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"globalScale\", scale);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Scale of the element.\r\n\t *\r\n\t * The scale is set from 0 (element reduced to nothing) to 1 (default size).\r\n\t * * 2 will mean element is increased twice.\r\n\t * * 0.5 - reduced by 50%.\r\n\t *\r\n\t * Etc.\r\n\t *\r\n\t * @param value  Scale (0-1)\r\n\t */\r\n\tpublic set scale(value: number) {\r\n\t\tvalue = $type.toNumber(value);\r\n\t\tif (value < 0) {\r\n\t\t\tvalue = 0;\r\n\t\t}\r\n\t\tif (value != this.getPropertyValue(\"scale\")) {\r\n\t\t\tthis.setPropertyValue(\"scale\", value, false, true);\r\n\t\t\tthis.handleGlobalScale();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scale (0-1)\r\n\t */\r\n\tpublic get scale(): number {\r\n\t\treturn this.getPropertyValue(\"scale\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets all four margins for the element at once.\r\n\t *\r\n\t * Margins are set in pixels.\r\n\t *\r\n\t * @param top     Top margin\r\n\t * @param right   Right margin\r\n\t * @param bottom  Bottom margin\r\n\t * @param left    Left margin\r\n\t * @return Current element\r\n\t */\r\n\tpublic margin(top: number, right: number, bottom: number, left: number): Sprite {\r\n\t\tthis.marginTop = top;\r\n\t\tthis.marginRight = right;\r\n\t\tthis.marginBottom = bottom;\r\n\t\tthis.marginLeft = left;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Left margin - absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Margin value\r\n\t */\r\n\tpublic set marginLeft(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"marginLeft\", value, true, true, this._positionPrecision, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Margin value\r\n\t */\r\n\tpublic get marginLeft(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"marginLeft\");\r\n\t}\r\n\r\n\t/**\r\n\t * Right margin - absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Margin value\r\n\t */\r\n\tpublic set marginRight(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"marginRight\", value, true, true, this._positionPrecision, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Margin value\r\n\t */\r\n\tpublic get marginRight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"marginRight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Top margin - absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Margin value\r\n\t */\r\n\tpublic set marginTop(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"marginTop\", value, true, true, this._positionPrecision, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Margin value\r\n\t */\r\n\tpublic get marginTop(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"marginTop\");\r\n\t}\r\n\r\n\t/**\r\n\t * Bottom margin - absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Margin value\r\n\t */\r\n\tpublic set marginBottom(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"marginBottom\", value, true, true, this._positionPrecision, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Margin value\r\n\t */\r\n\tpublic get marginBottom(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"marginBottom\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current right margin in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Right margin (px)\r\n\t */\r\n\tpublic get pixelMarginRight(): number {\r\n\t\tlet value = this.getPixelX(this.marginRight);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"pixelMarginRight\", value);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current relative right margin.\r\n\t *\r\n\t * @readonly\r\n\t * @return Relative right margin\r\n\t */\r\n\tpublic get relativeMarginRight(): number {\r\n\t\t// @todo Maybe use [[Percent]]?\r\n\t\tlet value = this.getRelativeX(this.marginRight);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"relativeMarginRight\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current left margin in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Left margin (px)\r\n\t */\r\n\tpublic get pixelMarginLeft(): number {\r\n\t\tlet value = this.getPixelX(this.marginLeft);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"pixelMarginLeft\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current relative left margin.\r\n\t *\r\n\t * @readonly\r\n\t * @return Relative left margin\r\n\t */\r\n\tpublic get relativeMarginLeft(): number {\r\n\t\t//@todo Maybe use [[Percent]]?\r\n\t\tlet value = this.getRelativeX(this.marginLeft);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"relativeMarginLeft\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current top margin in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Top margin (px)\r\n\t */\r\n\tpublic get pixelMarginTop(): number {\r\n\t\tlet value = this.getPixelY(this.marginTop);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"pixelMarginTop\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current relative top margin.\r\n\t *\r\n\t * @readonly\r\n\t * @return Relative top margin\r\n\t */\r\n\tpublic get relativeMarginTop(): number {\r\n\t\t// @todo Maybe use [[Percent]]?\r\n\t\tlet value = this.getRelativeY(this.marginTop);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"relativeMarginTop\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current bottom margin in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Bottom margin (px)\r\n\t */\r\n\tpublic get pixelMarginBottom(): number {\r\n\t\tlet value = this.getPixelY(this.marginBottom);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"pixelMarginBottom\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current relative bottom margin.\r\n\t *\r\n\t * @readonly\r\n\t * @return Relative bottom margin\r\n\t */\r\n\tpublic get relativeMarginBottom(): number {\r\n\t\t// @todo Maybe use [[Percent]]?\r\n\t\tlet value = this.getRelativeY(this.marginBottom);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"relativeMarginBottom\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets padding for the element in pixels.\r\n\t *\r\n\t * @param top     Top padding (px)\r\n\t * @param right   Right padding (px)\r\n\t * @param bottom  Bottom padding (px)\r\n\t * @param left    Left padding (px)\r\n\t * @return Element\r\n\t */\r\n\tpublic padding(top: number, right: number, bottom: number, left: number): Sprite {\r\n\t\tthis.paddingTop = top;\r\n\t\tthis.paddingRight = right;\r\n\t\tthis.paddingBottom = bottom;\r\n\t\tthis.paddingLeft = left;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Left padding - absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Padding value\r\n\t */\r\n\tpublic set paddingLeft(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"paddingLeft\", value, true, true, this._positionPrecision, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Padding value\r\n\t */\r\n\tpublic get paddingLeft(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"paddingLeft\");\r\n\t}\r\n\r\n\t/**\r\n\t * Right padding - absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Padding value\r\n\t */\r\n\tpublic set paddingRight(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"paddingRight\", value, true, true, this._positionPrecision, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Padding value\r\n\t */\r\n\tpublic get paddingRight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"paddingRight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Top padding - absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Padding value\r\n\t */\r\n\tpublic set paddingTop(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"paddingTop\", value, true, true, this._positionPrecision, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Padding value\r\n\t */\r\n\tpublic get paddingTop(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"paddingTop\");\r\n\t}\r\n\r\n\t/**\r\n\t * Bottom padding - absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Padding value\r\n\t */\r\n\tpublic set paddingBottom(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"paddingBottom\", value, true, true, this._positionPrecision, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Padding value\r\n\t */\r\n\tpublic get paddingBottom(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"paddingBottom\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current right padding in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Right padding (px)\r\n\t */\r\n\tpublic get pixelPaddingRight(): number {\r\n\t\treturn this.getPixelX(this.paddingRight);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current relative right padding.\r\n\t *\r\n\t * @readonly\r\n\t * @return Relative right padding\r\n\t */\r\n\tpublic get relativePaddingRight(): number {\r\n\t\t// @todo Maybe use [[Percent]]?\r\n\t\treturn this.getRelativeX(this.paddingRight);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current left padding in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Left padding (px)\r\n\t */\r\n\tpublic get pixelPaddingLeft(): number {\r\n\t\treturn this.getPixelX(this.paddingLeft);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current relative left padding.\r\n\t *\r\n\t * @readonly\r\n\t * @return Relative left padding\r\n\t */\r\n\tpublic get relativePaddingLeft(): number {\r\n\t\t// @todo Maybe use [[Percent]]?\r\n\t\treturn this.getRelativeX(this.paddingLeft);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current top padding in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Top padding (px)\r\n\t */\r\n\tpublic get pixelPaddingTop(): number {\r\n\t\treturn this.getPixelY(this.paddingTop);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current relative top padding.\r\n\t *\r\n\t * @readonly\r\n\t * @return Relative top padding\r\n\t */\r\n\tpublic get relativePaddingTop(): number {\r\n\t\t// @todo Maybe use [[Percent]]?\r\n\t\treturn this.getRelativeY(this.paddingTop);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current bottom padding in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Bottom padding (px)\r\n\t */\r\n\tpublic get pixelPaddingBottom(): number {\r\n\t\treturn this.getPixelY(this.paddingBottom);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current relative bottom padding.\r\n\t *\r\n\t * @readonly\r\n\t * @return Relative bottom padding\r\n\t */\r\n\tpublic get relativePaddingBottom(): number {\r\n\t\t// @todo Maybe use [[Percent]]?\r\n\t\treturn this.getRelativeY(this.paddingBottom);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * APPEARANCE-RELATED PROPERTIES AND RELATED STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Path of Sprite element\r\n\t */\r\n\tpublic set path(value: string) {\r\n\t\tthis.setPath(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setPath(value: string): boolean {\r\n\t\tif (this.setPropertyValue(\"path\", value)) {\r\n\r\n\t\t\tif (this._adapterO) {\r\n\t\t\t\tvalue = this._adapterO.apply(\"path\", value);\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._isPath) {\r\n\t\t\t\tif (!this.element || (this.element.node && !(this.element.node instanceof SVGPathElement))) {\r\n\t\t\t\t\tthis.element = this.paper.add(\"path\");\r\n\t\t\t\t}\r\n\t\t\t\tthis._isPath = true;\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\tthis.element.attr({ \"d\": value });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.element.removeAttr(\"d\");\r\n\t\t\t}\r\n\t\t\tthis.invalidatePosition();\r\n\t\t\t// otherwise is 0x0\r\n\t\t\tif (!this.inited) {\r\n\t\t\t\tthis.events.once(\"inited\", this.validatePosition, this, false);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Path of a Sprite element\r\n\t */\r\n\tpublic get path(): string {\r\n\t\treturn this.getPropertyValue(\"path\");\r\n\t}\r\n\r\n\t/**\r\n\t * [[ColorModifier]] that can be used to modify color and pattern of the\r\n\t * element's fill, e.g. create gradients.\r\n\t *\r\n\t * @param value  Fill color modifiier\r\n\t */\r\n\tpublic set fillModifier(value: ColorModifier) {\r\n\t\tif (this.setPropertyValue(\"fillModifier\", value)) {\r\n\t\t\tthis.setFill(this.fill);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Fill color modifier\r\n\t */\r\n\tpublic get fillModifier(): ColorModifier {\r\n\t\treturn this.getPropertyValue(\"fillModifier\");\r\n\t}\r\n\r\n\t/**\r\n\t * [[ColorModifier]] that can be used to modify color and pattern of the\r\n\t * element's stroke (outline), e.g. create gradients.\r\n\t *\r\n\t * @param value  Stroke color modifier\r\n\t */\r\n\tpublic set strokeModifier(value: ColorModifier) {\r\n\t\tthis.setPropertyValue(\"strokeModifier\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Stroke color modifier\r\n\t */\r\n\tpublic get strokeModifier(): ColorModifier {\r\n\t\treturn this.getPropertyValue(\"strokeModifier\");\r\n\t}\r\n\r\n\t/**\r\n\t * Element's fill opacity.\r\n\t *\r\n\t * Opacity ranges from 0 (fully transparent) to 1 (fully opaque).\r\n\t *\r\n\t * @param value  Opacity (0-1)\r\n\t */\r\n\tpublic set fillOpacity(value: number) {\r\n\t\tvalue = $math.toNumberRange(value, 0, 1);\r\n\t\tif (this.setPropertyValue(\"fillOpacity\", value)) {\r\n\t\t\tthis.setSVGAttribute({ \"fill-opacity\": value });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Opacity (0-9)\r\n\t */\r\n\tpublic get fillOpacity(): number {\r\n\t\treturn this.getPropertyValue(\"fillOpacity\");\r\n\t}\r\n\r\n\t/**\r\n\t * Element's fill color or pattern.\r\n\t *\r\n\t * @param value  Fill\r\n\t */\r\n\tpublic set fill(value: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>) {\r\n\t\tthis.setFill(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets actual `fill` property on the SVG element, including applicable color\r\n\t * modifiers.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Fill\r\n\t */\r\n\tprotected setFill(value: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>): void {\r\n\t\tif (!$type.isObject(value) || \"r\" in value) {\r\n\t\t\tvalue = toColor(value);\r\n\t\t}\r\n\r\n\t\tif (this.setColorProperty(\"fill\", value) || this.fillModifier) {\r\n\t\t\t// this can not go into next if, as value is turned to Gradient\r\n\t\t\tif (value instanceof Color) {\r\n\t\t\t\tif (this.fillModifier) {\r\n\t\t\t\t\tvalue = this.fillModifier.modify(value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.realFill = value;\r\n\r\n\t\t\t// todo: review this place when some Color type will be added\r\n\t\t\tif (value instanceof Color) {\r\n\t\t\t\tthis.setSVGAttribute({ \"fill\": value.toString() });\r\n\t\t\t}\r\n\t\t\telse if (!$type.hasValue(value)) {\r\n\t\t\t\tthis.removeSVGAttribute(\"fill\");\r\n\t\t\t}\r\n\t\t\telse if (<any>value instanceof Pattern || <any>value instanceof LinearGradient || <any>value instanceof RadialGradient) {\r\n\t\t\t\tlet fill = value;\r\n\t\t\t\tfill.paper = this.paper;\r\n\t\t\t\tthis.setSVGAttribute({ \"fill\": \"url(\\\"\" + $utils.getBaseURI() + fill.id + \"\\\")\" });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Fill\r\n\t */\r\n\tpublic get fill(): $type.Optional<Color | Pattern | LinearGradient | RadialGradient> {\r\n\t\treturn this.getPropertyValue(\"fill\");\r\n\t}\r\n\r\n\t/**\r\n\t * Element's opacity.\r\n\t *\r\n\t * Opacity setting can range from 0 (fully transparent) to 1 (fully opaque).\r\n\t *\r\n\t * ATTENTION: It is highly not recommended to use `opacity` directly on the\r\n\t * element. The charts use `opacity` to hide/show elements, so your setting\r\n\t * might be lost if element is hidden and then later shown.\r\n\t *\r\n\t * Instead use methods `hide()` and `show()` to completely toggle off and on\r\n\t * the element.\r\n\t *\r\n\t * Or, use properties `fillOpacity` and `strokeOpacity`, if you need to make\r\n\t * the element semi-transparent.\r\n\t *\r\n\t * @param value Opacity (0-1)\r\n\t */\r\n\tpublic set opacity(value: number) {\r\n\t\tvalue = $math.toNumberRange(value, 0, 1);\r\n\t\tif (this.setPropertyValue(\"opacity\", value)) {\r\n\t\t\tthis.setSVGAttribute({ \"opacity\": value });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Opacity (0-1)\r\n\t */\r\n\tpublic get opacity(): number {\r\n\t\treturn this.getPropertyValue(\"opacity\");\r\n\t}\r\n\r\n\t/**\r\n\t * Element's stroke (outline) color or pattern.\r\n\t *\r\n\t * @param value  Stroke setting\r\n\t */\r\n\tpublic set stroke(value: Color | Pattern | LinearGradient | RadialGradient) {\r\n\t\tthis.setStroke(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets actual `stroke` property on the SVG element, including applicable\r\n\t * color modifiers.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Stroke setting\r\n\t */\r\n\tprotected setStroke(value: Color | Pattern | LinearGradient | RadialGradient) {\r\n\t\tif (!$type.isObject(value) || \"r\" in value) {\r\n\t\t\tvalue = toColor(value);\r\n\t\t}\r\n\r\n\t\tif (this.setColorProperty(\"stroke\", value) || this.strokeModifier) {\r\n\r\n\t\t\t// this can not go into next if, as value is turned to Gradient\r\n\t\t\tif (value instanceof Color) {\r\n\t\t\t\tif (this.strokeModifier) {\r\n\t\t\t\t\tvalue = this.strokeModifier.modify(value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.realStroke = value;\r\n\r\n\t\t\tif (value instanceof Color) {\r\n\t\t\t\tif (value.hex == \"none\") {\r\n\t\t\t\t\tthis.removeSVGAttribute(\"stroke\");\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.setSVGAttribute({ \"stroke\": value.toString() });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (!$type.hasValue(value)) {\r\n\t\t\t\tthis.removeSVGAttribute(\"stroke\");\r\n\t\t\t}\r\n\t\t\telse if (<any>value instanceof Pattern || <any>value instanceof LinearGradient || <any>value instanceof RadialGradient) {\r\n\t\t\t\tlet stroke = value;\r\n\t\t\t\tstroke.paper = this.paper;\r\n\t\t\t\tthis.setSVGAttribute({ \"stroke\": \"url(\\\"\" + $utils.getBaseURI() + stroke.id + \"\\\")\" });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Stroke setting\r\n\t */\r\n\tpublic get stroke(): Color | Pattern | LinearGradient | RadialGradient {\r\n\t\treturn this.getPropertyValue(\"stroke\");\r\n\t}\r\n\r\n\t/**\r\n\t * Stroke (outline) opacity.\r\n\t *\r\n\t * The values may range from 0 (fully transparent) to 1 (fully opaque).\r\n\t *\r\n\t * @param value  Opacity (0-1)\r\n\t */\r\n\tpublic set strokeOpacity(value: number) {\r\n\t\tvalue = $math.toNumberRange(value, 0, 1);\r\n\t\tif (this.setPropertyValue(\"strokeOpacity\", value)) {\r\n\t\t\tthis.setSVGAttribute({ \"stroke-opacity\": value });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Opacity (0-1)\r\n\t */\r\n\tpublic get strokeOpacity(): number {\r\n\t\treturn this.getPropertyValue(\"strokeOpacity\");\r\n\t}\r\n\r\n\t/**\r\n\t * Controls if the element's stroke (outline) should remain keep constant\r\n\t * thicnkess and do not scale when the whole element is resized.\r\n\t *\r\n\t * @param value  Do not scale stroke (outline)\r\n\t */\r\n\tpublic set nonScalingStroke(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.setPropertyValue(\"nonScalingStroke\", value)) {\r\n\t\t\tthis.strokeWidth = this.strokeWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Do not scale stroke (outline)\r\n\t */\r\n\tpublic get nonScalingStroke(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonScalingStroke\");\r\n\t}\r\n\r\n\t/**\r\n\t * Controls if element should keep constant size and not scale even if there is\r\n\t * space available, or it does not fit.\r\n\t *\r\n\t * @param value  Is element scaleable?\r\n\t */\r\n\tpublic set nonScaling(value: boolean) {\r\n\t\t// @todo Description (review)\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tthis.setPropertyValue(\"nonScaling\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Is element scaleable?\r\n\t */\r\n\tpublic get nonScaling(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonScaling\");\r\n\t}\r\n\r\n\t/**\r\n\t * Stroke (outline) thickness in pixels.\r\n\t *\r\n\t * @param value  Thickness (px)\r\n\t */\r\n\tpublic set strokeWidth(value: number) {\r\n\t\tvalue = $type.toNumber(value);\r\n\t\tthis.setPropertyValue(\"strokeWidth\", value, true);\r\n\r\n\t\tif (this.nonScalingStroke) {\r\n\t\t\tif (!$type.isNumber(value)) {\r\n\t\t\t\tvalue = 1;\r\n\t\t\t}\r\n\t\t\tvalue = value / this.globalScale;\r\n\t\t}\r\n\t\tthis.setSVGAttribute({ \"stroke-width\": value });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Thickness (px)\r\n\t */\r\n\tpublic get strokeWidth(): number {\r\n\t\treturn this.getPropertyValue(\"strokeWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * A `stroke-dasharray` for the stroke (outline).\r\n\t *\r\n\t * \"Dasharray\" allows setting rules to make lines dashed, dotted, etc.\r\n\t *\r\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray} for more info on `stroke-dasharray`\r\n\t * @param value  `stroke-dasharray`\r\n\t */\r\n\tpublic set strokeDasharray(value: string) {\r\n\t\tvalue = $type.toText(value);\r\n\t\tif (this.setPropertyValue(\"strokeDasharray\", value)) {\r\n\t\t\tthis.setSVGAttribute({ \"stroke-dasharray\": value });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return `stroke-dasharray`\r\n\t */\r\n\tpublic get strokeDasharray(): string {\r\n\t\treturn this.getPropertyValue(\"strokeDasharray\");\r\n\t}\r\n\r\n\t/**\r\n\t * A `stroke-dashoffset` for the stroke (outline).\r\n\t *\r\n\t * \"Dashoffset\" allows setting the start position of the dashes if\r\n\t * `strokeDasharray` is used.\r\n\t *\r\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dashoffset} for more info on `stroke-dashoffset`\r\n\t * @param value  `stroke-dashoffset`\r\n\t */\r\n\tpublic set strokeDashoffset(value: number) {\r\n\t\tvalue = $type.toNumber(value);\r\n\t\tif (this.setPropertyValue(\"strokeDashoffset\", value)) {\r\n\t\t\tthis.setSVGAttribute({ \"stroke-dashoffset\": value });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return `stroke-dashoffset`\r\n\t */\r\n\tpublic get strokeDashoffset(): number {\r\n\t\treturn this.getPropertyValue(\"strokeDashoffset\");\r\n\t}\r\n\r\n\t/**\r\n\t * A `stroke-linecap` to indicate how line ends are drawn.\r\n\t *\r\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes#Stroke} for more info on `stroke-linecap`\r\n\t * @param value  `stroke-linecap`\r\n\t */\r\n\tpublic set strokeLinecap(value: \"butt\" | \"square\" | \"round\") {\r\n\t\tif (this.setPropertyValue(\"strokeLinecap\", value)) {\r\n\t\t\tthis.setSVGAttribute({ \"stroke-linecap\": value });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return `stroke-linecap`\r\n\t */\r\n\tpublic get strokeLinecap(): \"butt\" | \"square\" | \"round\" {\r\n\t\treturn this.getPropertyValue(\"strokeLinecap\");\r\n\t}\r\n\r\n\t/**\r\n\t * A `stroke-linejoin` to indicate how line ends are drawn.\r\n\t *\r\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes#Stroke} for more info on `stroke-linejoin`\r\n\t * @param value  `stroke-linejoin`\r\n\t */\r\n\tpublic set strokeLinejoin(value: \"miter\" | \"round\" | \"bevel\") {\r\n\t\tif (this.setPropertyValue(\"strokeLinejoin\", value)) {\r\n\t\t\tthis.setSVGAttribute({ \"stroke-linejoin\": value });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return `stroke-linejoin`\r\n\t */\r\n\tpublic get strokeLinejoin(): \"miter\" | \"round\" | \"bevel\" {\r\n\t\treturn this.getPropertyValue(\"strokeLinejoin\");\r\n\t}\r\n\r\n\t/**\r\n\t * An SVG-specific `shape-rendering` value.\r\n\t *\r\n\t * `shape-rendering` controls how vector graphics are drawn and rendered.\r\n\t *\r\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering} for more information about `shape-rendering`\r\n\t * @default \"auto\"\r\n\t * @param value  'shape-rendering' value\r\n\t */\r\n\tpublic set shapeRendering(value: ShapeRendering) {\r\n\t\tvalue = <ShapeRendering>$type.toText(value);\r\n\t\tif (this.setPropertyValue(\"shapeRendering\", value)) {\r\n\t\t\tthis.setSVGAttribute({ \"shape-rendering\": value });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return 'shape-rendering' value\r\n\t */\r\n\tpublic get shapeRendering(): ShapeRendering {\r\n\t\treturn this.getPropertyValue(\"shapeRendering\");\r\n\t}\r\n\r\n\t/**\r\n\t * Controls if SVG vectors should be drawn with \"pixel\" precision, producing\r\n\t * perfectly crisp lines on retina displays.\r\n\t *\r\n\t * Setting this to `true` might improve visual quality, but may have a\r\n\t * negative effect on performance.\r\n\t *\r\n\t * Different elements use different default setting for `pixelPerfect`.\r\n\t *\r\n\t * We recommend leaving this at their default settings, unless there's a\r\n\t * specific need.\r\n\t *\r\n\t * @param value  Use pixel perfect?\r\n\t */\r\n\tpublic set pixelPerfect(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (value) {\r\n\t\t\tthis._positionPrecision = options.pixelPerfectPrecision;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._positionPrecision = 3;\r\n\t\t}\r\n\r\n\t\tthis.setPropertyValue(\"pixelPerfect\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use pixel perfect?\r\n\t */\r\n\tpublic get pixelPerfect(): boolean {\r\n\t\treturn this.getPropertyValue(\"pixelPerfect\");\r\n\t}\r\n\r\n\t/**\r\n\t * An RTL (right-to-left) setting.\r\n\t *\r\n\t * RTL may affect alignment, text, and other visual properties.\r\n\t *\r\n\t * If you set this on a top-level chart object, it will be used for all\r\n\t * child elements, e.g. labels, unless they have their own `rtl` setting\r\n\t * set directly on them.\r\n\t *\r\n\t * @param value  `true` for to use RTL\r\n\t */\r\n\tpublic set rtl(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.isBaseSprite) {\r\n\t\t\tthis.topParent.rtl = value;\r\n\t\t}\r\n\t\tthis._rtl = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return RTL?\r\n\t */\r\n\tpublic get rtl(): boolean {\r\n\t\tif ($type.hasValue(this._rtl)) {\r\n\t\t\treturn this._rtl;\r\n\t\t}\r\n\t\telse if (this._topParent) {\r\n\t\t\treturn this._topParent.rtl;\r\n\t\t}\r\n\t\t//this.rtl = false;\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * VISIBILITY AND ORDER PROPERTIES AND RELATED STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n \t * Reveals hidden element.\r\n \t *\r\n \t * Has no effect if element is already visible.\r\n \t *\r\n \t * If `duration` is not specified, it will use default.\r\n \t *\r\n \t * @param duration  Fade in duration (ms)\r\n \t * @return Animation object if such object was created\r\n \t */\r\n\tpublic show(duration?: number): $type.Optional<Animation> {\r\n\t\treturn this.showReal(duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Performs actual operations to reveal this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param duration Fade in duration (ms)\r\n\t * @return Fade in duration (ms)\r\n\t */\r\n\tprotected showReal(duration?: number): $type.Optional<Animation> {\r\n\t\tif (this.preventShow) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet transition: $type.Optional<Animation>;\r\n\r\n\t\tconst properties = this.defaultState.properties;\r\n\r\n\t\tif (!this.disabled && (this.isHidden || !this.visible || this.isHiding || (properties.opacity != null && this.opacity < properties.opacity && !this.isShowing)) && !this.isDisposed()) {\r\n\r\n\t\t\t// helps to avoid flicker, as show might change opacity or visibility but item might be at invalid state/position\r\n\t\t\tif (this.invalid) {\r\n\t\t\t\tthis.validate();\r\n\t\t\t}\r\n\r\n\t\t\tif (this.positionInvalid) {\r\n\t\t\t\tthis.validatePosition();\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = this.defaultState.transitionDuration;\r\n\t\t\t}\r\n\r\n\t\t\tif (this._hideAnimation) {\r\n\t\t\t\tthis._hideAnimation.kill();\r\n\t\t\t\tthis._hideAnimation = undefined;\r\n\t\t\t}\r\n\r\n\t\t\t// Cancel hide handler just in case it was there\r\n\t\t\tif (this._showHideDisposer) {\r\n\t\t\t\tthis.removeDispose(this._showHideDisposer);\r\n\t\t\t}\r\n\r\n\t\t\tthis._isHidden = false;\r\n\t\t\tthis.isHiding = false;\r\n\t\t\tthis.isShowing = true;\r\n\r\n\t\t\t// Apply current state\r\n\t\t\ttransition = this.applyCurrentState(duration);\r\n\r\n\t\t\tif (transition && !transition.isFinished()) {\r\n\r\n\t\t\t\tthis._showHideDisposer = transition.events.on(\"animationended\", () => {\r\n\t\t\t\t\tthis.isShowing = false;\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis._disposers.push(this._showHideDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.isShowing = false;\r\n\t\t\t}\r\n\t\t\t// Make it visible\r\n\t\t\tlet visible = this.defaultState.properties.visible;\r\n\t\t\tif (!$type.hasValue(visible)) {\r\n\t\t\t\tvisible = true;\r\n\t\t\t}\r\n\t\t\tthis.visible = visible;\r\n\r\n\t\t\t// Unhide from screen readers\r\n\t\t\tthis.readerHidden = false;\r\n\r\n\t\t\t// Dispatch \"show\" event\r\n\t\t\tthis.dispatchImmediately(\"shown\");\r\n\t\t}\r\n\r\n\t\treturn transition;\r\n\t}\r\n\r\n\t/**\r\n\t * Initiates hiding of Sprite.\r\n\t * When called it will fade out the the Sprite to transparency, then make it\r\n\t * invisible.\r\n\t * @param duration Duration in millisecons\r\n\t */\r\n\r\n\t/**\r\n\t * Hides the element, by applying `hidden` state.\r\n\t *\r\n\t * Has no effect if element is already hidden.\r\n \t *\r\n \t * If `duration` is not specified, it will use default.\r\n \t *\r\n \t * While element is fading out, its `isHiding` property will resolve to\r\n \t * `true`.\r\n \t *\r\n \t * When element is hidden, its `visible` property will resolve to `false`.\r\n\t *\r\n\t * @param duration  Fade out duration (ms)\r\n\t * @return hide Animation object if such object was created\r\n\t */\r\n\tpublic hide(duration?: number): $type.Optional<Animation> {\r\n\t\treturn this.hideReal(duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Hides actual SVG elements and handles hiding animations.\r\n\t *\r\n\t * @param duration  Fade out duration (ms)\r\n\t * @return Fade out duration (ms)\r\n\t * @ignore\r\n\t */\r\n\tprotected hideReal(duration?: number): $type.Optional<Animation> {\r\n\t\tlet transition: $type.Optional<Animation>;\r\n\r\n\t\tif (!this.isHiding && this.visible && !this.isDisposed()) {\r\n\t\t\t// added to solve 51375\r\n\t\t\tif (this.tooltip && this.tooltip.currentSprite == this) {\r\n\t\t\t\tthis.hideTooltip(0);\r\n\t\t\t}\r\n\r\n\t\t\tif (this._hideAnimation) {\r\n\t\t\t\tthis._hideAnimation.kill();\r\n\t\t\t\tthis._hideAnimation = undefined;\r\n\t\t\t}\r\n\r\n\t\t\tthis.isShowing = false;\r\n\r\n\t\t\t// Cancel hide handler just in case it was there\r\n\t\t\tif (this._showHideDisposer) {\r\n\t\t\t\tthis.removeDispose(this._showHideDisposer);\r\n\t\t\t}\r\n\r\n\t\t\t// Get state\r\n\t\t\tlet hiddenState = this.hiddenState;\r\n\r\n\t\t\t// Transition to \"hidden\" state, provided Sprite has one set\r\n\t\t\tif (hiddenState) {\r\n\t\t\t\t// Yes, we have a \"hidden\" state\r\n\t\t\t\t// `setState` will return an `Animation` object which we can set\r\n\t\t\t\t// events on\r\n\t\t\t\ttransition = this.setState(hiddenState, duration, undefined);\r\n\r\n\t\t\t\tif (transition && !transition.isFinished()) {\r\n\t\t\t\t\tthis._hideAnimation = transition;\r\n\t\t\t\t\tthis._showHideDisposer = transition.events.on(\"animationended\", () => {\r\n\t\t\t\t\t\tthis.isHiding = false;\r\n\t\t\t\t\t\tthis._isHidden = true;\r\n\t\t\t\t\t\tif (hiddenState.properties.visible == false) {\r\n\t\t\t\t\t\t\tthis.visible = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this);\r\n\r\n\t\t\t\t\tthis._disposers.push(this._showHideDisposer);\r\n\r\n\t\t\t\t\t// Thrown everything into `_disposers` just in case Sprite gets\r\n\t\t\t\t\t// destroyed in the meantime\r\n\t\t\t\t\tthis._disposers.push(transition);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.isHiding = false;\r\n\t\t\t\t\tthis._isHidden = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// No hidden state, let's just set `visible` and call it a day\r\n\t\t\t\tthis.visible = false;\r\n\t\t\t\tthis.isHiding = false;\r\n\t\t\t\tthis._isHidden = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Hide from screen readers\r\n\t\t\tthis.readerHidden = true;\r\n\r\n\t\t\t// Dispach \"hidden\" event\r\n\t\t\tthis.dispatchImmediately(\"hidden\");\r\n\t\t\tthis.invalidate(); // hide it at once to avoid flickers // validate() causes SO\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(duration)) {\r\n\t\t\tduration = this.hiddenState.transitionDuration;\r\n\t\t}\r\n\r\n\t\treturn transition;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if element is current visible (`true`) or hidden (`false`).\r\n\t *\r\n\t * @param value Visible?\r\n\t */\r\n\tpublic set visible(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tthis.setVisibility(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Visible?\r\n\t */\r\n\tpublic get visible(): boolean {\r\n\t\treturn this.getVisibility();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns visibility value\r\n\t * @ignore\r\n\t */\r\n\tprotected getVisibility(): boolean {\r\n\t\tlet value = this.getPropertyValue(\"visible\");\r\n\t\tif (!$type.hasValue(value)) {\r\n\t\t\tvalue = true;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets `visibility` property:\r\n\t *\r\n\t * * `true` - visible\r\n\t * * `false` - hidden\r\n\t *\r\n\t * @param value  true - visible, false - hidden\r\n\t * @return Current visibility\r\n\t */\r\n\tpublic setVisibility(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"visible\", value)) {\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.group.removeAttr(\"visibility\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.group.attr({ \"visibility\": \"hidden\" });\r\n\t\t\t}\r\n\t\t\t//this.invalidatePosition();\r\n\r\n\t\t\tif (this.events.isEnabled(\"visibilitychanged\")) {\r\n\t\t\t\tconst event: AMEvent<this, ISpriteEvents>[\"visibilitychanged\"] = {\r\n\t\t\t\t\ttype: \"visibilitychanged\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tvisible: value\r\n\t\t\t\t};\r\n\t\t\t\tthis.events.dispatchImmediately(\"visibilitychanged\", event);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A \"zIndex\" of the element.\r\n\t *\r\n\t * \"zIndex\" determines the order of how elements are placed over each other.\r\n\t *\r\n\t * Higher \"zIndex\" will mean the element will be draw on top of elements\r\n\t * with lower \"zIndexes\".\r\n\t *\r\n\t * @param value  zIndex\r\n\t */\r\n\tpublic set zIndex(value: number) {\r\n\t\tvalue = $type.toNumber(value);\r\n\t\tif (this.setPropertyValue(\"zIndex\", value)) {\r\n\t\t\tthis.dispatch(\"zIndexChanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return zIndex\r\n\t */\r\n\tpublic get zIndex(): number {\r\n\t\treturn this.getPropertyValue(\"zIndex\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves the element to the very top in element order, so that it appears\r\n\t * in front of other elements.\r\n\t */\r\n\tpublic toFront(): void {\r\n\t\tlet parent = this._parent;\r\n\t\tif (parent && parent.children.indexOf(this) != parent.children.length - 1) {\r\n\t\t\tparent.children.moveValue(this, parent.children.length - 1);\r\n\t\t\tthis.dispatch(\"zIndexChanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Moves the element to the very bottom in the element order, so that it\r\n\t * appears behind other elements.\r\n\t */\r\n\tpublic toBack(): void {\r\n\t\tlet parent = this._parent;\r\n\t\tif (parent && parent.children.indexOf(this) != 0) {\r\n\t\t\tparent.children.moveValue(this, 0);\r\n\t\t\tthis.dispatch(\"zIndexChanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A custom class name to set on the element.\r\n\t *\r\n\t * If set, the value will be added to element's `class` attribute.\r\n\t *\r\n\t * @since 4.9.11\r\n\t * @param  value  Class name\r\n\t */\r\n\tpublic set userClassName(value: string) {\r\n\t\tif (this.setPropertyValue(\"userClassName\", value)) {\r\n\t\t\tif (!value && this.userClassName) {\r\n\t\t\t\tthis.group.removeClass(this.userClassName);\r\n\t\t\t}\r\n\t\t\tthis.setClassName();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Class name\r\n\t */\r\n\tpublic get userClassName(): string {\r\n\t\treturn this.getPropertyValue(\"userClassName\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TOOLTIP-RELATED PROPERTIES STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * A [[Tooltip]] object to be used when displayed rollover information for\r\n\t * the element.\r\n\t *\r\n\t * @param tooltip  Tooltip\r\n\t */\r\n\tpublic set tooltip(tooltip: $type.Optional<Tooltip>) {\r\n\t\tif (this._tooltip) {\r\n\t\t\t//this._tooltip.dispose();\r\n\t\t\tthis.removeDispose(this._tooltip);\r\n\t\t}\r\n\r\n\t\tthis._tooltip = tooltip;\r\n\r\n\t\tif (tooltip) {\r\n\t\t\ttooltip.parent = this.tooltipContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tooltip\r\n\t */\r\n\tpublic get tooltip(): $type.Optional<Tooltip> {\r\n\t\tif (this._tooltip) {\r\n\t\t\treturn this._tooltip;\r\n\t\t}\r\n\t\telse if (this.virtualParent) {\r\n\t\t\treturn this.virtualParent.tooltip;\r\n\t\t}\r\n\t\telse if (this._parent) {\r\n\t\t\treturn this._parent.tooltip;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[DataItem]] to use when populating content for the element's\r\n\t * [[Tooltip]].\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t * @see {@link DataItem}\r\n\t * @param value  Tooltip data item\r\n\t */\r\n\tpublic set tooltipDataItem(value: DataItem) {\r\n\t\t// important: do not dispose tooltip dataItem, as it is some actual data item from data!\r\n\t\tthis._tooltipDataItem = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tooltip data item\r\n\t */\r\n\tpublic get tooltipDataItem(): DataItem {\r\n\t\tconst tooltipDataItem = this._tooltipDataItem;\r\n\r\n\t\tif (tooltipDataItem) {\r\n\t\t\treturn tooltipDataItem;\r\n\r\n\t\t} else {\r\n\t\t\treturn this.dataItem;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Sprite]] or sprite template to use when getting colors for tooltip. If a template is set,\r\n\t * tooltip will look for a clone in tooltipDataItem.sprites. If no clone is found, then template colors will be used.\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t * @see {@link Sprite}\r\n\t * @param sprite Sprite\r\n\t */\r\n\tpublic set tooltipColorSource(sprite: $type.Optional<Sprite>) {\r\n\t\tthis._tooltipColorSource = sprite;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tooltip color source\r\n\t */\r\n\tpublic get tooltipColorSource(): $type.Optional<Sprite> {\r\n\t\treturn this._tooltipColorSource;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the element's [[Tooltip]].\r\n\t *\r\n\t * A tooltip will be populated using text templates in either `tooltipHTML` or\r\n\t * `tooltipText` as well as data in `tooltipDataItem`.\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t * @param optional point (sprite-related) to which tooltip must point.\r\n\t * @return returns true if the tooltip was shown and false if it wasn't (no text was found)\r\n\t */\r\n\tpublic showTooltip(point?: IPoint): boolean {\r\n\r\n\t\tif (this.showTooltipOn == \"always\" && !this._tooltip && this.tooltip) {\r\n\t\t\tthis._tooltip = this.tooltip.clone();\r\n\t\t}\r\n\r\n\t\tif (!point && this.tooltipPosition == \"pointer\" && this.isHover) {\r\n\t\t\tpoint = $utils.documentPointToSvg(getInteraction().lastPointer.point, this.svgContainer.SVGContainer, this.svgContainer.cssScale);\r\n\t\t}\r\n\r\n\t\t// do not show if hidden\r\n\t\tlet sprite: Sprite = this;\r\n\t\twhile (sprite != undefined) {\r\n\t\t\tif (!sprite.visible || sprite.disabled || sprite.__disabled) {\r\n\t\t\t\tif (this._tooltip && this._tooltip.visible) {\r\n\t\t\t\t\tthis._tooltip.hide(0);\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tsprite = sprite.parent;\r\n\t\t}\r\n\r\n\t\tif ($type.hasValue(this.tooltipText) || $type.hasValue(this.tooltipHTML)) {\r\n\t\t\tlet tooltip = this.tooltip;\r\n\t\t\tlet tooltipDataItem = this.tooltipDataItem;\r\n\r\n\t\t\tif (tooltip) {\r\n\r\n\t\t\t\ttooltip.targetSprite = this;\r\n\r\n\t\t\t\tlet colorSource: Sprite = this;\r\n\t\t\t\tlet tooltipColorSource = this.tooltipColorSource;\r\n\t\t\t\tif ((tooltip.getStrokeFromObject || tooltip.getFillFromObject) && tooltipColorSource) {\r\n\t\t\t\t\tif (tooltipColorSource.isTemplate) {\r\n\t\t\t\t\t\tif (tooltipDataItem) {\r\n\t\t\t\t\t\t\t$array.eachContinue(tooltipDataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\tif (sprite.clonedFrom == tooltipColorSource) {\r\n\t\t\t\t\t\t\t\t\tcolorSource = sprite;\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcolorSource = tooltipColorSource;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif (tooltip.getStrokeFromObject) {\r\n\t\t\t\t\tlet stroke = this.stroke;\r\n\t\t\t\t\tlet source: Sprite = colorSource;\r\n\r\n\t\t\t\t\twhile (source.parent != undefined) {\r\n\t\t\t\t\t\tstroke = source.stroke;\r\n\t\t\t\t\t\tif (stroke == undefined) {\r\n\t\t\t\t\t\t\tsource = source.parent;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (stroke != undefined) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (stroke instanceof Color) {\r\n\t\t\t\t\t\ttooltip.background.animate({ property: \"stroke\", to: stroke }, tooltip.animationDuration);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttooltip.background.stroke = stroke;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Set data item\r\n\t\t\t\ttooltip.dataItem = tooltipDataItem;\r\n\t\t\t\ttooltip.label.populateStringFrom = this;\r\n\r\n\t\t\t\tif (tooltip.getFillFromObject) {\r\n\r\n\t\t\t\t\tlet fill = this.fill;\r\n\r\n\t\t\t\t\tlet source: Sprite = colorSource;\r\n\r\n\t\t\t\t\twhile (source.parent != undefined) {\r\n\t\t\t\t\t\tfill = source.fill;\r\n\t\t\t\t\t\tif (fill == undefined || (fill instanceof Color && fill.rgb == undefined)) {\r\n\t\t\t\t\t\t\tsource = source.parent;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (fill != undefined) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (fill == undefined) {\r\n\t\t\t\t\t\tfill = color(\"#000000\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (fill instanceof Color) {\r\n\t\t\t\t\t\tif (!tooltip.visible) {\r\n\t\t\t\t\t\t\ttooltip.background.fill = fill;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\ttooltip.background.animate({ property: \"fill\", to: fill }, tooltip.animationDuration);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttooltip.background.fill = fill;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (tooltip.autoTextColor && fill instanceof Color) {\r\n\t\t\t\t\t\ttooltip.label.fill = fill.alternative;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Apply tooltip text\r\n\t\t\t\tlet text = \"\";\r\n\t\t\t\tif (this.tooltipHTML) {\r\n\t\t\t\t\ttooltip.html = this.tooltipHTML;\r\n\t\t\t\t\ttext = this.tooltipHTML;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.tooltipText) {\r\n\t\t\t\t\ttooltip.text = this.tooltipText;\r\n\t\t\t\t\ttext = this.tooltipText;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.updateTooltipPosition(point)) {\r\n\r\n\t\t\t\t\t// Set accessibility option\r\n\t\t\t\t\ttooltip.readerDescribedBy = this.uidAttr();\r\n\r\n\t\t\t\t\t// make label to render to be able to check currentText\r\n\t\t\t\t\tif (tooltip.label.invalid) {\r\n\t\t\t\t\t\ttooltip.label.validate();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (text != undefined && text != \"\" && tooltip.label.currentText != \"\") {\r\n\r\n\t\t\t\t\t\t//@todo: think of how to solve this better\r\n\t\t\t\t\t\tif (tooltip && !tooltip.parent) {\r\n\t\t\t\t\t\t\ttooltip.parent = this.tooltipContainer;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Reveal tooltip\r\n\t\t\t\t\t\t// showing it in 1 ms helps to avoid strange flickering in IE\r\n\t\t\t\t\t\tlet duration = tooltip.defaultState.transitionDuration;\r\n\t\t\t\t\t\tif (duration <= 0) {\r\n\t\t\t\t\t\t\tduration = 1;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttooltip.show(duration);\r\n\t\t\t\t\t\ttooltip.currentSprite = this;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.hideTooltip(0);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.hideTooltip(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateTooltipPosition(point?: IPoint): boolean {\r\n\t\tif (this.tooltipPosition == \"pointer\") {\r\n\r\n\t\t\tif (this._interactionDisposer) {\r\n\t\t\t\tthis._interactionDisposer.dispose();\r\n\t\t\t}\r\n\r\n\t\t\tthis._interactionDisposer = getInteraction().body.events.on(\"track\", (ev) => {\r\n\t\t\t\treturn this.pointTooltipTo($utils.documentPointToSvg(ev.point, this.svgContainer.SVGContainer, this.svgContainer.cssScale), true);\r\n\t\t\t});\r\n\t\t\tif (point) {\r\n\t\t\t\treturn this.pointTooltipTo(point, true);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Point to the X/Y of this Sprite\r\n\t\t\tlet globalPoint = $utils.spritePointToSvg({\r\n\t\t\t\t\"x\": this.getTooltipX(),\r\n\t\t\t\t\"y\": this.getTooltipY()\r\n\t\t\t}, this);\r\n\t\t\treturn this.pointTooltipTo(globalPoint);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the point the [[Tooltip]] should point to.\r\n\t *\r\n\t * @param point      Coordinates to point to\r\n\t * @param instantly  Move instantly without animation\r\n\t */\r\n\tprotected pointTooltipTo(point: IPoint, instantly?: boolean): boolean {\r\n\t\tlet tooltip = this.tooltip;\r\n\t\tif (tooltip && this.topParent) {\r\n\r\n\t\t\tif (tooltip.showInViewport) {\r\n\t\t\t\ttooltip.pointTo(point, instantly);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tif ($math.isInRectangle(point, { x: 0, y: 0, width: this.topParent.maxWidth, height: this.topParent.maxHeight })) {\r\n\t\t\t\ttooltip.pointTo(point, instantly);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides element's [[Tooltip]].\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t */\r\n\tpublic hideTooltip(duration?: number): void {\r\n\r\n\t\tif (this.showTooltipOn == \"always\") {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet tooltip = this.tooltip;\r\n\t\tif (tooltip) {\r\n\t\t\tif (tooltip.targetSprite == this) {\r\n\t\t\t\ttooltip.targetSprite = undefined;\r\n\t\t\t}\r\n\t\t\ttooltip.hide(duration);\r\n\t\t\tif (this._interactionDisposer) {\r\n\t\t\t\tthis._interactionDisposer.dispose();\r\n\t\t\t\tthis._interactionDisposer = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * An HTML template to be used to populate [[Tooltip]] contents.\r\n\t *\r\n\t * If element has `tooltipDataItem` or `dataItem` set, this will be parsed\r\n\t * for any data values to be replaced with the values from respective data\r\n\t * items.\r\n\t *\r\n\t * @param value Tooltip HTML content template\r\n\t */\r\n\tpublic set tooltipHTML(value: string) {\r\n\t\tvalue = $type.toText(value);\r\n\t\tthis.hoverable = true;\r\n\t\tif (this.setPropertyValue(\"tooltipHTML\", value)) {\r\n\t\t\tif (this.tooltip) {\r\n\t\t\t\tif (this.tooltip.visible) {\r\n\t\t\t\t\tthis.showTooltip();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tooltip HTML content template\r\n\t */\r\n\tpublic get tooltipHTML(): string {\r\n\t\treturn this.getPropertyValue(\"tooltipHTML\");\r\n\t}\r\n\r\n\t/**\r\n\t * A text template to be used to populate Tooltip's contents.\r\n\t *\r\n\t * If element has `tooltipDataItem` or `dataItem` set, this will be parsed\r\n\t * for any data values to be replaced with the values from respective data\r\n\t * items.\r\n\t *\r\n\t * This template will also be parsed for any special formatting tags.\r\n\t *\r\n\t * @param value Tooltip content template\r\n\t * @see {@link TextFormatter}\r\n\t */\r\n\tpublic set tooltipText(value: string) {\r\n\t\tvalue = $type.toText(value);\r\n\t\tif (value) {\r\n\t\t\tthis.hoverable = true;\r\n\t\t}\r\n\t\tif (this.setPropertyValue(\"tooltipText\", value)) {\r\n\t\t\tif (this.tooltip) {\r\n\t\t\t\tif (this.tooltip.visible) {\r\n\t\t\t\t\tthis.showTooltip();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tooltip content template\r\n\t */\r\n\tpublic get tooltipText(): string {\r\n\t\treturn this.getPropertyValue(\"tooltipText\");\r\n\t}\r\n\r\n\t/**\r\n\t * A container reference that should be used to place element's\r\n\t * [[Tooltip]] in.\r\n\t *\r\n\t * Will use parent's container if does not have one set.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Container\r\n\t * @todo Dispose of the old _tooltipContainer ?\r\n\t */\r\n\tpublic set tooltipContainer(value: $type.Optional<Container>) {\r\n\t\tthis._tooltipContainer = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Container\r\n\t */\r\n\tpublic get tooltipContainer(): $type.Optional<Container> {\r\n\t\tif (this._tooltipContainer) {\r\n\t\t\treturn this._tooltipContainer;\r\n\t\t}\r\n\t\telse if (this._parent) {\r\n\t\t\treturn this._parent.tooltipContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate the [[Tooltip]] should be shown at.\r\n\t *\r\n\t * @param value  Tooltip X (px)\r\n\t */\r\n\tpublic set tooltipX(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"tooltipX\", value) && this.tooltip) {\r\n\t\t\tthis.tooltip.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tooltip X (px)\r\n\t */\r\n\tpublic get tooltipX(): number | Percent {\r\n\t\treturn this.getTooltipX();\r\n\t}\r\n\r\n\t/**\r\n\t * DEPRECATION NOTICE: This setting is deprecated in favor of a more flexible\r\n\t * setting: `showTooltipOn`. Please use `showTooltipOn = \"always\"` instead.\r\n\t *\r\n\t * Indicates if this element should display a tooltip permanently.\r\n\t *\r\n\t * Useful, if you want to show permanent tooltips on some items.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.5.4\r\n\t * @deprecated Use `showTooltipOn = \"always\"` instead\r\n\t * @param  value  Always show tooltip?\r\n\t */\r\n\tpublic set alwaysShowTooltip(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (value) {\r\n\t\t\tthis.showTooltipOn = \"always\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Always show tooltip?\r\n\t */\r\n\tpublic get alwaysShowTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"showTooltipOn\") == \"always\";\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates when tooltip needs to be shown on this element:\r\n\t *\r\n\t * * `\"hover\"` (default) - Tooltip will be shown when element is hovered on.\r\n\t * * `\"hit\"` - Tooltip will be shown when element is clicked/tapped. Tooltip will be hidden when clicked/tapped anywhere else.\r\n\t * * `\"always\"` - Tooltip will be shown on the element permanently.\r\n\t *\r\n\t * For example, if you would like to show tooltips on all of the columns of\r\n\t * a [[ColumnSeries]]:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.columns.template.showTooltipOn = \"always\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.columns.template.showTooltipOn = \"always\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"columns\": {\r\n\t *       \"showTooltipOn\": \"always\"\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * It can even be set to display on a selected columns via `propertyFields`:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.columns.template.propertyFields.showTooltipOn = \"tooltip\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.columns.template.propertyFields.showTooltipOn = \"tooltip\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"columns\": {\r\n\t *       \"propertyFields\": {\r\n\t *         \"showTooltipOn\": \"tooltip\"\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default \"hover\"\r\n\t * @since 4.7.9\r\n\t * @param  value  When to show tooltip\r\n\t */\r\n\tpublic set showTooltipOn(value: \"hover\" | \"hit\" | \"always\") {\r\n\t\tif (this.setPropertyValue(\"showTooltipOn\", value)) {\r\n\t\t\tif (value == \"hit\") {\r\n\t\t\t\tthis.clickable = true;\r\n\t\t\t}\r\n\t\t\tif (this.tooltip) {\r\n\t\t\t\tif (value == \"always\") {\r\n\t\t\t\t\tthis.showTooltip();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.handleAlwaysShowTooltip();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return When to show tooltip\r\n\t */\r\n\tpublic get showTooltipOn(): \"hover\" | \"hit\" | \"always\" {\r\n\t\treturn this.getPropertyValue(\"showTooltipOn\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if [[Tooltip]] should follow the mouse or touch pointer or stay\r\n\t * at the fixed position.\r\n\t *\r\n\t * @param value  Position\r\n\t */\r\n\tpublic set tooltipPosition(value: \"fixed\" | \"pointer\") {\r\n\t\tthis.setPropertyValue(\"tooltipPosition\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * Position\r\n\t */\r\n\tpublic get tooltipPosition(): \"fixed\" | \"pointer\" {\r\n\t\treturn this.getPropertyValue(\"tooltipPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate the [[Tooltip]] should be shown at.\r\n\t *\r\n\t * @param value  Tooltip Y (px)\r\n\t */\r\n\tpublic set tooltipY(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"tooltipY\", value) && this.tooltip) {\r\n\t\t\tthis.tooltip.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tooltip Y (px)\r\n\t */\r\n\tpublic get tooltipY(): number | Percent {\r\n\t\treturn this.getTooltipY();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns Tooltip X coordinate if it's set, or middle of the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return X (px)\r\n\t */\r\n\tpublic getTooltipX(): number {\r\n\r\n\t\tlet x = this.getPropertyValue(\"tooltipX\");\r\n\r\n\t\tif (!$type.hasValue(x)) {\r\n\t\t\tx = percent(50);\r\n\t\t}\r\n\r\n\t\tlet value: number;\r\n\t\tif ($type.isNumber(x)) {\r\n\t\t\tvalue = x;\r\n\t\t}\r\n\r\n\t\tif (x instanceof Percent) {\r\n\t\t\tvalue = this.maxLeftSelf + this._measuredWidthSelf * x.value - this.pixelPaddingLeft - this.ex; // overflow is know only for measured items, so this is not always good\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns Tooltip Y coordinate if it's set, or middle of the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Y (px)\r\n\t */\r\n\tpublic getTooltipY(): number {\r\n\t\tlet y = this.getPropertyValue(\"tooltipY\");\r\n\r\n\t\tif (!$type.hasValue(y)) {\r\n\t\t\ty = percent(50);\r\n\t\t}\r\n\r\n\t\tlet value: number;\r\n\t\tif ($type.isNumber(y)) {\r\n\t\t\tvalue = y;\r\n\t\t}\r\n\r\n\t\tif (y instanceof Percent) {\r\n\t\t\tvalue = this.maxTopSelf + this._measuredHeightSelf * y.value - this.pixelPaddingTop - this.ey;  // overflow is know only for measured items, so this is not always good\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Displays a modal or console message with error, and halts any further\r\n\t * processing of this item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param e Error\r\n\t * @todo Implement from applying further actions to this item\r\n\t */\r\n\tpublic raiseCriticalError(e: Error, closable?: boolean) {\r\n\r\n\t\tif (this.svgContainer) {\r\n\t\t\tif (!this._adapterO) {\r\n\t\t\t\tthis.modal.content = e.message;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.modal.content = this._adapterO.apply(\"criticalError\", e).message;\r\n\t\t\t}\r\n\r\n\t\t\tif (!closable) {\r\n\t\t\t\tthis.disabled = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.modal.closable = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (!options.suppressErrors) {\r\n\t\t\t\tthis.modal.open();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (options.verbose) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Tooltip color source\r\n\t\t\tif ($type.hasValue(config.tooltipColorSource) && $type.isString(config.tooltipColorSource) && this.map.hasKey(config.tooltipColorSource)) {\r\n\t\t\t\tconfig.tooltipColorSource = this.map.getKey(config.tooltipColorSource);\r\n\t\t\t}\r\n\r\n\t\t\t// Cursor styles\r\n\t\t\tif ($type.hasValue(config.cursorOverStyle) && $type.isString(config.cursorOverStyle)) {\r\n\t\t\t\tconfig.cursorOverStyle = this.getCursorStyle(config.cursorOverStyle);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.cursorDowntyle) && $type.isString(config.cursorDowntyle)) {\r\n\t\t\t\tconfig.cursorDowntyle = this.getCursorStyle(config.cursorDowntyle);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.cursorOptions)) {\r\n\t\t\t\tif ($type.hasValue(config.cursorOptions.overStyle) && $type.isString(config.cursorOptions.overStyle)) {\r\n\t\t\t\t\tconfig.cursorOptions.overStyle = this.getCursorStyle(config.cursorOptions.overStyle);\r\n\t\t\t\t}\r\n\t\t\t\tif ($type.hasValue(config.cursorOptions.downStyle) && $type.isString(config.cursorOptions.downStyle)) {\r\n\t\t\t\t\tconfig.cursorOptions.downStyle = this.getCursorStyle(config.cursorOptions.downStyle);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t\tthis.processDelayedMap();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts string name of the cursor into actual [[MouseCursorStyle]].\r\n\t *\r\n\t * @param style  Cursor type\r\n\t * @return Cursor definition\r\n\t */\r\n\tprivate getCursorStyle(style: string): MouseCursorStyle {\r\n\t\tswitch (style) {\r\n\t\t\tcase \"grab\":\r\n\t\t\t\treturn MouseCursorStyle.grab;\r\n\t\t\tcase \"grabbing\":\r\n\t\t\t\treturn MouseCursorStyle.grabbing;\r\n\t\t\tcase \"pointer\":\r\n\t\t\t\treturn MouseCursorStyle.pointer;\r\n\t\t\tcase \"horizontalResize\":\r\n\t\t\t\treturn MouseCursorStyle.horizontalResize;\r\n\t\t\tcase \"verticalResize\":\r\n\t\t\t\treturn MouseCursorStyle.verticalResize;\r\n\t\t\tdefault:\r\n\t\t\t\treturn MouseCursorStyle.default;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"tooltipColorSource\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"tooltipColorSource\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * If `sprite.hide()` is called, we set isHidden to true when sprite is hidden.\r\n\t * This was added becaus hidden state might have visibility set to true and so\r\n\t * there would not be possible to find out if a sprite is technically hidden or not.\r\n\t */\r\n\tpublic get isHidden(): boolean {\r\n\t\tif (this._isHidden) {\r\n\t\t\treturn this._isHidden;\r\n\t\t}\r\n\t\telse if (this._parent) {\r\n\t\t\treturn this._parent.isHidden;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * If this is set to `true`, Sprite, when inited will be instantly hidden\r\n\t * (\"hidden\" state applied) and then shown (\"default\" state applied).\r\n\t *\r\n\t * If your \"default\" state's `transitionDuration > 0` this will result in\r\n\t * initial animation from \"hidden\" state to \"default\" state.\r\n\t *\r\n\t * If you need a Sprite which has `showOnInit = true` not to be shown\r\n\t * initially, set `sprite.hidden = true`. Setting `sprite.visible = false`\r\n\t * will not prevent the animation and the sprite will be shown.\r\n\t *\r\n\t * @param value show on init?\r\n\t */\r\n\tpublic set showOnInit(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tthis.setShowOnInit(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setShowOnInit(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"showOnInit\", value)) {\r\n\t\t\tif (!this.isTemplate) {\r\n\t\t\t\tif (value && !this.inited && !this.hidden) {\r\n\t\t\t\t\tthis._showOnInitDisposer = new MultiDisposer([\r\n\t\t\t\t\t\tregistry.events.once(\"enterframe\", this.hideInitially, this),\r\n\t\t\t\t\t\tthis.events.once(\"beforevalidated\", this.hideInitially, this, false),\r\n\t\t\t\t\t\tthis.events.on(\"inited\", this.appear, this, false)\r\n\t\t\t\t\t])\r\n\r\n\t\t\t\t\tthis._disposers.push(this._showOnInitDisposer);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (this._showOnInitDisposer) {\r\n\t\t\t\t\t\tthis._showOnInitDisposer.dispose();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected hideInitially() {\r\n\t\tif (!this.isDisposed()) {\r\n\t\t\tthis.appeared = false;\r\n\t\t\t//if (!this.hidden && !this._isHidden) { // not good for series, as on enterframe it doesn't have data items yet.\r\n\t\t\tif (!this.inited) {\r\n\t\t\t\tthis.hide(0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides the chart instantly and then shows it. If defaultState.transitionDuration > 0, this will result an animation in which properties of hidden state will animate to properties of visible state.\r\n\t */\r\n\tpublic appear() {\r\n\t\tthis.appeared = false;\r\n\t\tif (!this.hidden && !this.isHidden) {\r\n\t\t\tthis.hide(0);\r\n\t\t}\r\n\t\tif (!this.hidden) {\r\n\r\n\t\t\tlet animation = this.show();\r\n\r\n\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\tthis.addDisposer(animation.events.on(\"animationended\", () => {\r\n\t\t\t\t\tthis.appeared = true;\r\n\t\t\t\t\tthis.dispatch(\"appeared\");\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.appeared = true;\r\n\t\t\t\tthis.dispatch(\"appeared\");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.appeared = true;\r\n\t\t\tthis.dispatch(\"appeared\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Show on init?\r\n\t */\r\n\tpublic get showOnInit(): boolean {\r\n\t\treturn this.getPropertyValue(\"showOnInit\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * If a sprite has `showOnInit = true`, it will animate from \"hidden\" to\r\n\t * \"default\" state when initialized. To prevent this but keep\r\n\t * `showOnInit = true`, you can set `sprite.hidden = true`.\r\n\t *\r\n\t * @param value initially hidden?\r\n\t */\r\n\tpublic set hidden(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tthis.setPropertyValue(\"hidden\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Is initially hidden?\r\n\t */\r\n\tpublic get hidden(): boolean {\r\n\t\treturn this.getPropertyValue(\"hidden\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\t\treturn this._bbox;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of plugins (objects that implement [[IPlugin]] interface) attached\r\n\t * to this object.\r\n\t *\r\n\t * @since 4.2.2\r\n\t * @return List of plugins\r\n\t */\r\n\tpublic get plugins(): List<IPlugin> {\r\n\t\tif (!this._plugins) {\r\n\t\t\tthis._plugins = new List<IPlugin>();\r\n\t\t\tthis._disposers.push(this._plugins.events.on(\"inserted\", (ev) => {\r\n\t\t\t\tev.newValue.target = this;\r\n\t\t\t\tev.newValue.init();\r\n\t\t\t}));\r\n\t\t\tthis._disposers.push(new ListDisposer(this._plugins));\r\n\t\t}\r\n\t\treturn this._plugins;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Called during the System.update method\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _systemUpdate(skippedSprites: Array<Sprite>) {\r\n\t\tthis.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Called during the System.update method\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _systemCheckIfValidate(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Called during the System.validatePositions method\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _systemValidatePositions() {\r\n\t\tthis.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Called during the System.validateLayouts method\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _systemValidateLayouts() {\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Sprite\"] = Sprite;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}