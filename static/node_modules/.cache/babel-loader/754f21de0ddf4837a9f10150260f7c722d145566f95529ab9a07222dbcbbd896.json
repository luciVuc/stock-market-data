{"ast":null,"code":"/**\r\n * Pattern module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { BaseObject } from \"../../Base\";\nimport { getGhostPaper } from \"../Paper\";\nimport { List, ListDisposer } from \"../../utils/List\";\nimport { Animation, AnimationDisposer } from \"../../utils/Animation\";\nimport { registry } from \"../../Registry\";\nimport { InterfaceColorSet } from \"../../utils/InterfaceColorSet\";\nimport * as $iter from \"../../utils/Iterator\";\nimport * as $object from \"../../utils/Object\";\nimport * as $type from \"../../utils/Type\";\n;\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Base class to define patterns.\r\n */\nvar Pattern = /** @class */function (_super) {\n  __extends(Pattern, _super);\n  //public propertyValues = new Dictionary<PatternProperties, any>();\n  /**\r\n   * Constructor\r\n   */\n  function Pattern() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * List of elements the pattern consists of.\r\n     */\n    _this._elements = new List();\n    /**\r\n     * A storage for Filter property/value pairs.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link PatternProperties}\r\n     */\n    _this.properties = {};\n    _this.className = \"Pattern\";\n    // Set defaults\n    _this.width = 10;\n    _this.height = 10;\n    _this.x = 0;\n    _this.y = 0;\n    _this.patternUnits = \"userSpaceOnUse\";\n    var interfaceColors = new InterfaceColorSet();\n    _this.backgroundFill = interfaceColors.getFor(\"background\");\n    _this.backgroundOpacity = 0;\n    _this.fillOpacity = 1;\n    _this.fill = interfaceColors.getFor(\"alternativeBackground\");\n    _this.stroke = interfaceColors.getFor(\"alternativeBackground\");\n    _this.strokeOpacity = 1;\n    _this.strokeWidth = 1;\n    _this.shapeRendering = \"crispEdges\";\n    _this.rotation = 0;\n    // Create main group to store pattern elements inelements\n    _this.element = _this.paper.addGroup(\"pattern\");\n    _this.id = \"pattern-\" + registry.getUniqueId();\n    _this.element.attr({\n      \"id\": _this.id\n    });\n    _this._disposers.push(_this.element);\n    // Make elements disposable\n    _this._disposers.push(new ListDisposer(_this._elements));\n    // Request again to trigger getter/setter code\n    _this.patternUnits = _this.patternUnits;\n    _this.width = _this.width;\n    _this.height = _this.height;\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Draws the pattern.\r\n   */\n  Pattern.prototype.draw = function () {\n    var _this = this;\n    var patternElement = this.element;\n    if (patternElement) {\n      patternElement.removeChildNodes();\n      var background = this.paper.add(\"rect\");\n      background.attr({\n        \"width\": this.width,\n        \"height\": this.height,\n        \"shape-rendering\": \"crispEdges\",\n        \"fill\": this.backgroundFill.hex,\n        \"fill-opacity\": this.backgroundOpacity,\n        \"stroke\": this.backgroundFill.hex,\n        \"stroke-opacity\": 0\n      });\n      patternElement.add(background);\n      patternElement.attr({\n        \"x\": this.x,\n        \"y\": this.y,\n        \"width\": this.width,\n        \"height\": this.height,\n        \"stroke\": this.stroke.hex,\n        \"fill\": this.fill.hex,\n        \"fill-opacity\": this.fillOpacity,\n        \"stroke-opacity\": this.strokeOpacity,\n        \"stroke-width\": this.strokeWidth,\n        \"shape-rendering\": this.shapeRendering,\n        \"patternUnits\": this.patternUnits,\n        \"stroke-dasharray\": this.strokeDasharray\n      });\n      $iter.each(this._elements.iterator(), function (element) {\n        element.rotation = _this.rotation;\n        element.rotationX = _this.properties[\"rotationX\"];\n        element.rotationY = _this.properties[\"rotationY\"];\n        _this.element.add(element);\n      });\n    }\n  };\n  /**\r\n   * Animate pattern properties.\r\n   *\r\n   * @see {@link Animation}\r\n   * @param animationOptions  Animation options\r\n   * @param duration          Duration (ms)\r\n   * @param easing            Easing function\r\n   * @return Animation instance\r\n   */\n  Pattern.prototype.animate = function (animationOptions, duration, easing) {\n    return new Animation(this, animationOptions, duration, easing).start();\n  };\n  /**\r\n   * Adds an element to the pattern.\r\n   *\r\n   * @param element  Element\r\n   */\n  Pattern.prototype.addElement = function (element) {\n    this._elements.push(element);\n    this._disposers.push(element);\n  };\n  /**\r\n   * Remove an element from the pattern.\r\n   *\r\n   * @param element  Element\r\n   */\n  Pattern.prototype.removeElement = function (element) {\n    this._elements.removeValue(element);\n    this.removeDispose(element);\n  };\n  Object.defineProperty(Pattern.prototype, \"elements\", {\n    /**\r\n     * Returns the list of SVG elements comprising the pattern.\r\n     *\r\n     * @return Pattern elements\r\n     */\n    get: function () {\n      return this._elements;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"fillOpacity\", {\n    /**\r\n     * @return Opacity (0-1)\r\n     */\n    get: function () {\n      return this.properties[\"fillOpacity\"];\n    },\n    /**\r\n     * Pattern fill opacity. (0-1)\r\n     *\r\n     * @param value  Opacity (0-1)\r\n     */\n    set: function (value) {\n      this.properties[\"fillOpacity\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"fill\", {\n    /**\r\n     * @return Fill color\r\n     */\n    get: function () {\n      return this.properties[\"fill\"];\n    },\n    /**\r\n     * Fill color of the pattern.\r\n     *\r\n     * @param value  Fill color\r\n     */\n    set: function (value) {\n      this.properties[\"fill\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"backgroundFill\", {\n    /**\r\n     * @return Background color\r\n     */\n    get: function () {\n      return this.properties[\"backgroundFill\"];\n    },\n    /**\r\n     * Pattern background fill color.\r\n     *\r\n     * @param value  Background color\r\n     */\n    set: function (value) {\n      this.properties[\"backgroundFill\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"backgroundOpacity\", {\n    /**\r\n     * @return Background opacity (0-1)\r\n     */\n    get: function () {\n      return this.properties[\"backgroundOpacity\"];\n    },\n    /**\r\n     * Pattern backgorund opacity. (0-1)\r\n     *\r\n     * @param value  Background opacity (0-1)\r\n     */\n    set: function (value) {\n      this.properties[\"backgroundOpacity\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"stroke\", {\n    /**\r\n     * @return Color\r\n     */\n    get: function () {\n      return this.properties[\"stroke\"];\n    },\n    /**\r\n     * Pattern stroke (border) color.\r\n     *\r\n     * @param value  Color\r\n     */\n    set: function (value) {\n      this.properties[\"stroke\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"strokeOpacity\", {\n    /**\r\n     * @return Opacity (0-1)\r\n     */\n    get: function () {\n      return this.properties[\"strokeOpacity\"];\n    },\n    /**\r\n     * Pattern stroke opacity. (0-1)\r\n     *\r\n     * @param value  Opacity (0-1)\r\n     */\n    set: function (value) {\n      this.properties[\"strokeOpacity\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"strokeWidth\", {\n    /**\r\n     * @return Stroke thickness (px)\r\n     */\n    get: function () {\n      return this.properties[\"strokeWidth\"];\n    },\n    /**\r\n     * Pattern stroke thickness in pixels.\r\n     *\r\n     * @param value  Stroke thickness (px)\r\n     */\n    set: function (value) {\n      this.properties[\"strokeWidth\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"shapeRendering\", {\n    get: function () {\n      return this.properties[\"shapeRendering\"];\n    },\n    /**\r\n     * Shape rendering\r\n     * @param value [description]\r\n     */\n    set: function (value) {\n      this.properties[\"shapeRendering\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"rotation\", {\n    /**\r\n     * @return Rotation\r\n     */\n    get: function () {\n      return this.properties[\"rotation\"];\n    },\n    /**\r\n     * Pattern rotation in degrees.\r\n     *\r\n     * @param value  Rotation\r\n     */\n    set: function (value) {\n      this.properties[\"rotation\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"patternUnits\", {\n    /**\r\n     * @return Units\r\n     */\n    get: function () {\n      return this.properties[\"patternUnits\"];\n    },\n    /**\r\n     * Pattern measuring units.\r\n     *\r\n     * Available options: \"userSpaceOnUse\" | \"objectBoundingBox\".\r\n     *\r\n     * @param value  Units\r\n     */\n    set: function (value) {\n      this.properties[\"patternUnits\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"width\", {\n    /**\r\n     * @return Width (px)\r\n     */\n    get: function () {\n      return this.properties[\"width\"];\n    },\n    /**\r\n     * Pattern width in pixels.\r\n     *\r\n     * @param value  Width (px)\r\n     */\n    set: function (value) {\n      this.properties[\"width\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"height\", {\n    /**\r\n     * @return Height (px)\r\n     */\n    get: function () {\n      return this.properties[\"height\"];\n    },\n    /**\r\n     * Pattern height in pixels.\r\n     *\r\n     * @param value Height (px)\r\n     */\n    set: function (value) {\n      this.properties[\"height\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"x\", {\n    /**\r\n     * @return X (px)\r\n     */\n    get: function () {\n      return this.properties[\"x\"];\n    },\n    /**\r\n     * X position. (pixels)\r\n     *\r\n     * @param value X (px)\r\n     */\n    set: function (value) {\n      this.properties[\"x\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"y\", {\n    /**\r\n     * @return Y (px)\r\n     */\n    get: function () {\n      return this.properties[\"y\"];\n    },\n    /**\r\n     * Y position (px).\r\n     *\r\n     * @param value Y (px)\r\n     */\n    set: function (value) {\n      this.properties[\"y\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"paper\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Paper\r\n     */\n    get: function () {\n      if (this._paper) {\n        return this._paper;\n      }\n      return getGhostPaper();\n    },\n    /**\r\n     * [[Paper]] instance to draw pattern in.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param paper  Paper\r\n     */\n    set: function (paper) {\n      if (this._paper != paper) {\n        this._paper = paper;\n        this.draw();\n        paper.appendDef(this.element);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies properties from another Pattern instance.\r\n   *\r\n   * @param source  Source pattern\r\n   */\n  Pattern.prototype.copyFrom = function (source) {\n    var _this = this;\n    _super.prototype.copyFrom.call(this, source);\n    $object.each(source.properties, function (key, value) {\n      _this[key] = value;\n    });\n  };\n  Object.defineProperty(Pattern.prototype, \"animations\", {\n    /**\r\n     * A list of animations currently running on the patter.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Animation list\r\n     */\n    get: function () {\n      if (!this._animations) {\n        this._animations = [];\n        this._disposers.push(new AnimationDisposer(this._animations));\n      }\n      return this._animations;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"strokeDasharray\", {\n    /**\r\n     * @return `stroke-dasharray`\r\n     */\n    get: function () {\n      return this.properties[\"strokeDashArray\"];\n    },\n    /**\r\n     * A `stroke-dasharray` for the stroke (outline).\r\n     *\r\n     * \"Dasharray\" allows setting rules to make lines dashed, dotted, etc.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray} for more info on `stroke-dasharray`\r\n     * @param value  `stroke-dasharray`\r\n     */\n    set: function (value) {\n      this.properties[\"strokeDashArray\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n  Pattern.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up series\n      if ($type.hasValue(config.elements) && $type.isArray(config.elements)) {\n        for (var i = 0, len = config.elements.length; i < len; i++) {\n          var element = config.elements[i];\n          if ($type.hasValue(element[\"type\"])) {\n            var sprite = this.createEntryInstance(element);\n            if (sprite instanceof BaseObject) {\n              sprite.config = element;\n            }\n            this.addElement($type.hasValue(element[\"typeProperty\"]) ? sprite[element[\"typeProperty\"]] : sprite.element);\n          }\n        }\n      }\n    }\n    _super.prototype.processConfig.call(this, config);\n  };\n  return Pattern;\n}(BaseObject);\nexport { Pattern };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Pattern\"] = Pattern;","map":{"version":3,"mappings":"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","names":["BaseObject","getGhostPaper","List","ListDisposer","Animation","AnimationDisposer","registry","InterfaceColorSet","$iter","$object","$type","__extends","_super","_this","className","width","height","x","y","patternUnits","interfaceColors","backgroundFill","getFor","backgroundOpacity","fillOpacity","fill","stroke","strokeOpacity","strokeWidth","shapeRendering","rotation","element","paper","addGroup","id","getUniqueId","attr","_disposers","push","_elements","applyTheme","Pattern","patternElement","removeChildNodes","background","add","hex","strokeDasharray","each","iterator","rotationX","properties","rotationY","animationOptions","duration","easing","start","removeValue","removeDispose","Object","value","draw","_paper","appendDef","source","copyFrom","key","_animations","config","hasValue","elements","isArray","i","len","length","sprite","createEntryInstance","addElement","processConfig","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\core\\rendering\\fills\\Pattern.ts"],"sourcesContent":["/**\r\n * Pattern module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../../Base\";\r\nimport { Group } from \"../Group\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { Paper, getGhostPaper } from \"../Paper\";\r\nimport { ShapeRendering } from \"../../defs/ShapeRendering\";\r\nimport { List, ListDisposer } from \"../../utils/List\";\r\nimport { Animation, IAnimatable, IAnimationOptions, AnimationDisposer } from \"../../utils/Animation\";\r\nimport { registry } from \"../../Registry\";\r\nimport { Color } from \"../../utils/Color\";\r\nimport { InterfaceColorSet } from \"../../utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../utils/Iterator\";\r\nimport * as $object from \"../../utils/Object\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available units to measure patterns.\r\n */\r\nexport type PatternUnits = \"userSpaceOnUse\" | \"objectBoundingBox\";\r\n\r\n/**\r\n * Defines properties for [[Pattern]].\r\n */\r\nexport interface PatternProperties {\r\n\tx: number;\r\n\ty: number;\r\n\twidth: number;\r\n\theight: number;\r\n\tbackgroundOpacity: number;\r\n\tbackgroundFill: Color;\r\n\tfillOpacity: number;\r\n\tfill: Color;\r\n\tstroke: Color;\r\n\tstrokeOpacity: number;\r\n\tstrokeWidth: number;\r\n\tshapeRendering: ShapeRendering;\r\n\trotation: number;\r\n\trotationX: number;\r\n\trotationY: number;\r\n\tpatternUnits: PatternUnits;\r\n\tstrokeDashArray:string;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define patterns.\r\n */\r\nexport class Pattern extends BaseObject implements IAnimatable {\r\n\r\n\t/**\r\n\t * List of available animations currently running on a pattern.\r\n\t */\r\n\tprotected _animations: $type.Optional<Array<Animation>>;\r\n\r\n\t/**\r\n\t * An SVG `<group>` element to put sub-elements into.\r\n\t */\r\n\tpublic element: Group;\r\n\r\n\t/**\r\n\t * Reference to [[Paper]] instance.\r\n\t */\r\n\tprotected _paper: $type.Optional<Paper>;\r\n\r\n\t/**\r\n\t * List of elements the pattern consists of.\r\n\t */\r\n\tprotected _elements: List<AMElement> = new List<AMElement>();\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: PatternProperties;\r\n\r\n\t/**\r\n\t * A storage for Filter property/value pairs.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @see {@link PatternProperties}\r\n\t */\r\n\tpublic properties: this[\"_properties\"] = <any>{};\r\n\t//public propertyValues = new Dictionary<PatternProperties, any>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Pattern\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.width = 10;\r\n\t\tthis.height = 10;\r\n\t\tthis.x = 0;\r\n\t\tthis.y = 0;\r\n\t\tthis.patternUnits = \"userSpaceOnUse\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.backgroundFill = interfaceColors.getFor(\"background\");\r\n\t\tthis.backgroundOpacity = 0;\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.strokeWidth = 1;\r\n\t\tthis.shapeRendering = \"crispEdges\";\r\n\t\tthis.rotation = 0;\r\n\r\n\t\t// Create main group to store pattern elements inelements\r\n\t\tthis.element = this.paper.addGroup(\"pattern\");\r\n\t\tthis.id = \"pattern-\" + registry.getUniqueId();\r\n\t\tthis.element.attr({ \"id\": this.id });\r\n\t\tthis._disposers.push(this.element);\r\n\r\n\t\t// Make elements disposable\r\n\t\tthis._disposers.push(new ListDisposer(this._elements));\r\n\r\n\t\t// Request again to trigger getter/setter code\r\n\t\tthis.patternUnits = this.patternUnits;\r\n\t\tthis.width = this.width;\r\n\t\tthis.height = this.height;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the pattern.\r\n\t */\r\n\tprotected draw(): void {\r\n\r\n\t\tlet patternElement: Group = this.element;\r\n\t\tif (patternElement) {\r\n\r\n\t\t\tpatternElement.removeChildNodes();\r\n\r\n\t\t\tlet background = this.paper.add(\"rect\");\r\n\t\t\tbackground.attr({ \"width\": this.width, \"height\": this.height, \"shape-rendering\": \"crispEdges\", \"fill\": this.backgroundFill.hex, \"fill-opacity\": this.backgroundOpacity, \"stroke\": this.backgroundFill.hex, \"stroke-opacity\": 0 });\r\n\t\t\tpatternElement.add(background);\r\n\r\n\t\t\tpatternElement.attr({ \"x\": this.x, \"y\": this.y, \"width\": this.width, \"height\": this.height, \"stroke\": this.stroke.hex, \"fill\": this.fill.hex, \"fill-opacity\": this.fillOpacity, \"stroke-opacity\": this.strokeOpacity, \"stroke-width\": this.strokeWidth, \"shape-rendering\": this.shapeRendering, \"patternUnits\": this.patternUnits, \"stroke-dasharray\":this.strokeDasharray });\r\n\r\n\t\t\t$iter.each(this._elements.iterator(), (element) => {\r\n\t\t\t\telement.rotation = this.rotation;\r\n\t\t\t\telement.rotationX = this.properties[\"rotationX\"];\r\n\t\t\t\telement.rotationY = this.properties[\"rotationY\"];\r\n\t\t\t\tthis.element.add(element);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Animate pattern properties.\r\n\t *\r\n\t * @see {@link Animation}\r\n\t * @param animationOptions  Animation options\r\n\t * @param duration          Duration (ms)\r\n\t * @param easing            Easing function\r\n\t * @return Animation instance\r\n\t */\r\n\tpublic animate(animationOptions: IAnimationOptions[] | IAnimationOptions, duration: number, easing?: (value: number) => number): Animation {\r\n\t\treturn new Animation(this, animationOptions, duration, easing).start();\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an element to the pattern.\r\n\t *\r\n\t * @param element  Element\r\n\t */\r\n\tpublic addElement(element: AMElement): void {\r\n\t\tthis._elements.push(element);\r\n\t\tthis._disposers.push(element);\r\n\t}\r\n\r\n\t/**\r\n\t * Remove an element from the pattern.\r\n\t *\r\n\t * @param element  Element\r\n\t */\r\n\tpublic removeElement(element: AMElement): void {\r\n\t\tthis._elements.removeValue(element);\r\n\t\tthis.removeDispose(element);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the list of SVG elements comprising the pattern.\r\n\t *\r\n\t * @return Pattern elements\r\n\t */\r\n\tpublic get elements(): List<AMElement> {\r\n\t\treturn this._elements;\r\n\t}\r\n\r\n\t/**\r\n\t * Pattern fill opacity. (0-1)\r\n\t *\r\n\t * @param value  Opacity (0-1)\r\n\t */\r\n\tpublic set fillOpacity(value: number) {\r\n\t\tthis.properties[\"fillOpacity\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Opacity (0-1)\r\n\t */\r\n\tpublic get fillOpacity(): number {\r\n\t\treturn this.properties[\"fillOpacity\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Fill color of the pattern.\r\n\t *\r\n\t * @param value  Fill color\r\n\t */\r\n\tpublic set fill(value: Color) {\r\n\t\tthis.properties[\"fill\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Fill color\r\n\t */\r\n\tpublic get fill(): Color {\r\n\t\treturn this.properties[\"fill\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Pattern background fill color.\r\n\t *\r\n\t * @param value  Background color\r\n\t */\r\n\tpublic set backgroundFill(value: Color) {\r\n\t\tthis.properties[\"backgroundFill\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Background color\r\n\t */\r\n\tpublic get backgroundFill(): Color {\r\n\t\treturn this.properties[\"backgroundFill\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Pattern backgorund opacity. (0-1)\r\n\t *\r\n\t * @param value  Background opacity (0-1)\r\n\t */\r\n\tpublic set backgroundOpacity(value: number) {\r\n\t\tthis.properties[\"backgroundOpacity\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Background opacity (0-1)\r\n\t */\r\n\tpublic get backgroundOpacity(): number {\r\n\t\treturn this.properties[\"backgroundOpacity\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Pattern stroke (border) color.\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set stroke(value: Color) {\r\n\t\tthis.properties[\"stroke\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get stroke(): Color {\r\n\t\treturn this.properties[\"stroke\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Pattern stroke opacity. (0-1)\r\n\t *\r\n\t * @param value  Opacity (0-1)\r\n\t */\r\n\tpublic set strokeOpacity(value: number) {\r\n\t\tthis.properties[\"strokeOpacity\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Opacity (0-1)\r\n\t */\r\n\tpublic get strokeOpacity(): number {\r\n\t\treturn this.properties[\"strokeOpacity\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Pattern stroke thickness in pixels.\r\n\t *\r\n\t * @param value  Stroke thickness (px)\r\n\t */\r\n\tpublic set strokeWidth(value: number) {\r\n\t\tthis.properties[\"strokeWidth\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Stroke thickness (px)\r\n\t */\r\n\tpublic get strokeWidth(): number {\r\n\t\treturn this.properties[\"strokeWidth\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Shape rendering\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set shapeRendering(value: ShapeRendering) {\r\n\t\tthis.properties[\"shapeRendering\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\tpublic get shapeRendering(): ShapeRendering {\r\n\t\treturn this.properties[\"shapeRendering\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Pattern rotation in degrees.\r\n\t *\r\n\t * @param value  Rotation\r\n\t */\r\n\tpublic set rotation(value: number) {\r\n\t\tthis.properties[\"rotation\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Rotation\r\n\t */\r\n\tpublic get rotation(): number {\r\n\t\treturn this.properties[\"rotation\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Pattern measuring units.\r\n\t *\r\n\t * Available options: \"userSpaceOnUse\" | \"objectBoundingBox\".\r\n\t *\r\n\t * @param value  Units\r\n\t */\r\n\tpublic set patternUnits(value: \"userSpaceOnUse\" | \"objectBoundingBox\") {\r\n\t\tthis.properties[\"patternUnits\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Units\r\n\t */\r\n\tpublic get patternUnits(): \"userSpaceOnUse\" | \"objectBoundingBox\" {\r\n\t\treturn this.properties[\"patternUnits\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Pattern width in pixels.\r\n\t *\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set width(value: number) {\r\n\t\tthis.properties[\"width\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get width(): number {\r\n\t\treturn this.properties[\"width\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Pattern height in pixels.\r\n\t *\r\n\t * @param value Height (px)\r\n\t */\r\n\tpublic set height(value: number) {\r\n\t\tthis.properties[\"height\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Height (px)\r\n\t */\r\n\tpublic get height(): number {\r\n\t\treturn this.properties[\"height\"];\r\n\t}\r\n\r\n\t/**\r\n\t * X position. (pixels)\r\n\t *\r\n\t * @param value X (px)\r\n\t */\r\n\tpublic set x(value: number) {\r\n\t\tthis.properties[\"x\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return X (px)\r\n\t */\r\n\tpublic get x(): number {\r\n\t\treturn this.properties[\"x\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Y position (px).\r\n\t *\r\n\t * @param value Y (px)\r\n\t */\r\n\tpublic set y(value: number) {\r\n\t\tthis.properties[\"y\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y (px)\r\n\t */\r\n\tpublic get y(): number {\r\n\t\treturn this.properties[\"y\"];\r\n\t}\r\n\r\n\t/**\r\n\t * [[Paper]] instance to draw pattern in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param paper  Paper\r\n\t */\r\n\tpublic set paper(paper: Paper) {\r\n\t\tif (this._paper != paper) {\r\n\t\t\tthis._paper = paper;\r\n\t\t\tthis.draw();\r\n\t\t\tpaper.appendDef(this.element);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Paper\r\n\t */\r\n\tpublic get paper(): Paper {\r\n\t\tif (this._paper) {\r\n\t\t\treturn this._paper;\r\n\t\t}\r\n\t\treturn getGhostPaper();\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from another Pattern instance.\r\n\t *\r\n\t * @param source  Source pattern\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\t$object.each(source.properties, (key, value) => {\r\n\t\t\t(<any>this)[key] = value;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A list of animations currently running on the patter.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Animation list\r\n\t */\r\n\tpublic get animations(): Array<Animation> {\r\n\t\tif (!this._animations) {\r\n\t\t\tthis._animations = [];\r\n\t\t\tthis._disposers.push(new AnimationDisposer(this._animations));\r\n\t\t}\r\n\t\treturn this._animations;\r\n\t}\r\n\r\n\t/**\r\n\t * A `stroke-dasharray` for the stroke (outline).\r\n\t *\r\n\t * \"Dasharray\" allows setting rules to make lines dashed, dotted, etc.\r\n\t *\r\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray} for more info on `stroke-dasharray`\r\n\t * @param value  `stroke-dasharray`\r\n\t */\r\n\tpublic set strokeDasharray(value: string) {\r\n\t\tthis.properties[\"strokeDashArray\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return `stroke-dasharray`\r\n\t */\r\n\tpublic get strokeDasharray(): string {\r\n\t\treturn this.properties[\"strokeDashArray\"];\r\n\t}\t\t\r\n\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.elements) && $type.isArray(config.elements)) {\r\n\t\t\t\tfor (let i = 0, len = config.elements.length; i < len; i++) {\r\n\t\t\t\t\tlet element = config.elements[i];\r\n\t\t\t\t\tif ($type.hasValue(element[\"type\"])) {\r\n\t\t\t\t\t\tlet sprite = this.createEntryInstance(element);\r\n\t\t\t\t\t\tif (sprite instanceof BaseObject) {\r\n\t\t\t\t\t\t\tsprite.config = element;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.addElement(\r\n\t\t\t\t\t\t\t$type.hasValue(element[\"typeProperty\"])\r\n\t\t\t\t\t\t\t? sprite[element[\"typeProperty\"]]\r\n\t\t\t\t\t\t\t: sprite.element\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Pattern\"] = Pattern;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}