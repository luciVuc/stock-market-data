{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Pattern } from \"./Pattern\";\n/**\r\n * Picture pattern.\r\n *\r\n * @since 5.2.15\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\r\n */\nvar PicturePattern = /** @class */function (_super) {\n  __extends(PicturePattern, _super);\n  function PicturePattern() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    Object.defineProperty(_this, \"_image\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n  Object.defineProperty(PicturePattern.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n      this._clear = true;\n      if (this.isDirty(\"src\")) {\n        this._load();\n      }\n    }\n  });\n  Object.defineProperty(PicturePattern.prototype, \"_draw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._draw.call(this);\n      var image = this._image;\n      if (image) {\n        var patternWidth = this.get(\"width\", 100);\n        var patternHeight = this.get(\"height\", 100);\n        // Fit\n        var fit = this.get(\"fit\", \"image\");\n        var width = 0;\n        var height = 0;\n        if (fit == \"pattern\") {\n          width = patternWidth;\n          height = patternHeight;\n        } else {\n          width = image.width;\n          height = image.height;\n          if (fit == \"image\") {\n            this.set(\"width\", width);\n            this.set(\"height\", height);\n          }\n        }\n        // Position\n        var centered = this.get(\"centered\", true);\n        var x = 0;\n        var y = 0;\n        if (centered) {\n          x = patternWidth / 2 - width / 2;\n          y = patternHeight / 2 - height / 2;\n        }\n        this._display.image(image, width, height, x, y);\n      }\n    }\n  });\n  Object.defineProperty(PicturePattern.prototype, \"_load\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n      var src = this.get(\"src\");\n      if (src) {\n        var image_1 = new Image();\n        //image.crossOrigin = \"Anonymous\";\n        image_1.src = src;\n        image_1.decode().then(function () {\n          _this._image = image_1;\n          _this._draw();\n          if (_this.events.isEnabled(\"loaded\")) {\n            _this.events.dispatch(\"loaded\", {\n              type: \"loaded\",\n              target: _this\n            });\n          }\n        }).catch(function (_error) {\n          // TODO: maybe raise error?\n        });\n      }\n    }\n  });\n  Object.defineProperty(PicturePattern, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"PicturePattern\"\n  });\n  Object.defineProperty(PicturePattern, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Pattern.classNames.concat([PicturePattern.className])\n  });\n  return PicturePattern;\n}(Pattern);\nexport { PicturePattern };","map":{"version":3,"mappings":";AAAA,SAASA,OAAO,QAA2D,WAAW;AA2CtF;;;;;;;AAOA;EAAoCC;EAApC;IAAA;IAQCC;;;;;;;EAqED;;;;;WAnEC;MACCC,iBAAMC,cAAc,WAAE;MAEtB,IAAI,CAACC,MAAM,GAAG,IAAI;MAElB,IAAI,IAAI,CAACC,OAAO,CAAC,KAAK,CAAC,EAAE;QACxB,IAAI,CAACC,KAAK,EAAE;;IAEd;;;;;;WAEA;MACCJ,iBAAMK,KAAK,WAAE;MAEb,IAAMC,KAAK,GAAG,IAAI,CAACC,MAAM;MACzB,IAAID,KAAK,EAAE;QAEV,IAAME,YAAY,GAAG,IAAI,CAACC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC;QAC3C,IAAMC,aAAa,GAAG,IAAI,CAACD,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC;QAE7C;QACA,IAAME,GAAG,GAAG,IAAI,CAACF,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC;QACpC,IAAIG,KAAK,GAAG,CAAC;QACb,IAAIC,MAAM,GAAG,CAAC;QACd,IAAIF,GAAG,IAAI,SAAS,EAAE;UACrBC,KAAK,GAAGJ,YAAY;UACpBK,MAAM,GAAGH,aAAa;SACtB,MACI;UACJE,KAAK,GAAGN,KAAK,CAACM,KAAK;UACnBC,MAAM,GAAGP,KAAK,CAACO,MAAM;UACrB,IAAIF,GAAG,IAAI,OAAO,EAAE;YACnB,IAAI,CAACG,GAAG,CAAC,OAAO,EAAEF,KAAK,CAAC;YACxB,IAAI,CAACE,GAAG,CAAC,QAAQ,EAAED,MAAM,CAAC;;;QAI5B;QACA,IAAME,QAAQ,GAAG,IAAI,CAACN,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC;QAC3C,IAAIO,CAAC,GAAG,CAAC;QACT,IAAIC,CAAC,GAAG,CAAC;QACT,IAAIF,QAAQ,EAAE;UACbC,CAAC,GAAGR,YAAY,GAAG,CAAC,GAAGI,KAAK,GAAG,CAAC;UAChCK,CAAC,GAAGP,aAAa,GAAG,CAAC,GAAGG,MAAM,GAAG,CAAC;;QAEnC,IAAI,CAACK,QAAQ,CAACZ,KAAK,CAACA,KAAK,EAAEM,KAAK,EAAEC,MAAM,EAAEG,CAAC,EAAEC,CAAC,CAAC;;IAGjD;;;;;;WAEA;MAAA;MACC,IAAME,GAAG,GAAG,IAAI,CAACV,GAAG,CAAC,KAAK,CAAC;MAC3B,IAAIU,GAAG,EAAE;QACR,IAAMC,OAAK,GAAG,IAAIC,KAAK,EAAE;QACzB;QACAD,OAAK,CAACD,GAAG,GAAGA,GAAI;QAChBC,OAAK,CAACE,MAAM,EAAE,CAACC,IAAI,CAAC;UACnBC,KAAI,CAACjB,MAAM,GAAGa,OAAK;UACnBI,KAAI,CAACnB,KAAK,EAAE;UACZ,IAAImB,KAAI,CAACC,MAAM,CAACC,SAAS,CAAC,QAAQ,CAAC,EAAE;YACpCF,KAAI,CAACC,MAAM,CAACE,QAAQ,CAAC,QAAQ,EAAE;cAAEC,IAAI,EAAE,QAAQ;cAAEC,MAAM,EAAEL;YAAI,CAAE,CAAC;;QAElE,CAAC,CAAC,CAACM,KAAK,CAAC,UAACC,MAAW;UACpB;QAAA,CACA,CAAC;;IAEJ;;EAtEAhC;;;;WAAkC;;EAClCA;;;;WAA0CF,OAAO,CAACmC,UAAU,CAACC,MAAM,CAAC,CAACC,cAAc,CAACC,SAAS,CAAC;;EAuE/F,qBAAC;CAAA,CA7EmCtC,OAAO;SAA9BqC,cAAc","names":["Pattern","__extends","Object","_super","_beforeChanged","_clear","isDirty","_load","_draw","image","_image","patternWidth","get","patternHeight","fit","width","height","set","centered","x","y","_display","src","image_1","Image","decode","then","_this","events","isEnabled","dispatch","type","target","catch","_error","classNames","concat","PicturePattern","className"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\core\\render\\patterns\\PicturePattern.ts"],"sourcesContent":["import { Pattern, IPatternSettings, IPatternPrivate, IPatternEvents } from \"./Pattern\";\n\nexport interface IPicturePatternSettings extends IPatternSettings {\n\n\t/**\n\t * A source URI of the image.\n\t *\n\t * Can be relative or absolute URL, or data-uri.\n\t */\n\tsrc?: string;\n\n\t/**\n\t * How pattern should be sized:\n\t *\n\t * * `\"image\"` (default) - pattern will be sized to actual image dimensions.\n\t * * `\"pattern\"` - image will sized to image dimensions.\n\t * * `\"none\"` - image will be placed in the pattern, regardless of either dimensions.\n\t * \n\t * @default \"image\"\n\t */\n\tfit?: \"image\" | \"pattern\" | \"none\";\n\n\t/**\n\t * Center images.\n\t *\n\t * @default true\n\t */\n\tcentered?: boolean;\n\n}\n\nexport interface IPicturePatternPrivate extends IPatternPrivate {\n}\n\nexport interface IPicturePatternEvents extends IPatternEvents {\n\n\t/**\n\t * Invoked when related image is loaded.\n\t */\n\tloaded: {};\n\n}\n\n/**\n * Picture pattern.\n *\n * @since 5.2.15\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class PicturePattern extends Pattern {\n\tdeclare public _settings: IPicturePatternSettings;\n\tdeclare public _privateSettings: IPicturePatternPrivate;\n\tdeclare public _events: IPicturePatternEvents;\n\n\tpublic static className: string = \"PicturePattern\";\n\tpublic static classNames: Array<string> = Pattern.classNames.concat([PicturePattern.className]);\n\n\tpublic _image: HTMLImageElement | undefined;\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tthis._clear = true;\n\n\t\tif (this.isDirty(\"src\")) {\n\t\t\tthis._load();\n\t\t}\n\t}\n\n\tprotected _draw() {\n\t\tsuper._draw();\n\n\t\tconst image = this._image;\n\t\tif (image) {\n\n\t\t\tconst patternWidth = this.get(\"width\", 100);\n\t\t\tconst patternHeight = this.get(\"height\", 100);\n\n\t\t\t// Fit\n\t\t\tconst fit = this.get(\"fit\", \"image\");\n\t\t\tlet width = 0;\n\t\t\tlet height = 0;\n\t\t\tif (fit == \"pattern\") {\n\t\t\t\twidth = patternWidth;\n\t\t\t\theight = patternHeight;\n\t\t\t}\n\t\t\telse {\n\t\t\t\twidth = image.width;\n\t\t\t\theight = image.height;\n\t\t\t\tif (fit == \"image\") {\n\t\t\t\t\tthis.set(\"width\", width);\n\t\t\t\t\tthis.set(\"height\", height);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Position\n\t\t\tconst centered = this.get(\"centered\", true);\n\t\t\tlet x = 0;\n\t\t\tlet y = 0;\n\t\t\tif (centered) {\n\t\t\t\tx = patternWidth / 2 - width / 2;\n\t\t\t\ty = patternHeight / 2 - height / 2;\n\t\t\t}\n\t\t\tthis._display.image(image, width, height, x, y);\n\t\t}\n\n\t}\n\n\tprotected _load() {\n\t\tconst src = this.get(\"src\");\n\t\tif (src) {\n\t\t\tconst image = new Image();\n\t\t\t//image.crossOrigin = \"Anonymous\";\n\t\t\timage.src = src!;\n\t\t\timage.decode().then(() => {\n\t\t\t\tthis._image = image;\n\t\t\t\tthis._draw();\n\t\t\t\tif (this.events.isEnabled(\"loaded\")) {\n\t\t\t\t\tthis.events.dispatch(\"loaded\", { type: \"loaded\", target: this });\n\t\t\t\t}\n\t\t\t}).catch((_error: any) => {\n\t\t\t\t// TODO: maybe raise error?\n\t\t\t});\n\t\t}\n\t}\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}