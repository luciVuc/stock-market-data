{"ast":null,"code":"/**\r\n * Module that defines everything related to building Funnel slices.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../../core/Container\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { registry } from \"../../core/Registry\";\nimport { percent } from \"../../core/utils/Percent\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Class used to create [[FunnelSlice]] elements.\r\n *\r\n * @see {@link IFunnelSliceEvents} for a list of available events\r\n * @see {@link IFunnelSliceAdapters} for a list of available adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\nvar FunnelSlice = /** @class */function (_super) {\n  __extends(FunnelSlice, _super);\n  /**\r\n   * Constructor\r\n   */\n  function FunnelSlice() {\n    var _this = _super.call(this) || this;\n    _this.slice = _this.createChild(Sprite);\n    _this.slice.shouldClone = false;\n    _this.slice.setElement(_this.paper.add(\"path\"));\n    _this.slice.isMeasured = false;\n    _this.orientation = \"vertical\";\n    _this.bottomWidth = percent(100);\n    _this.topWidth = percent(100);\n    _this.isMeasured = false;\n    _this.width = 10;\n    _this.height = 10;\n    _this.expandDistance = 0;\n    _this.className = \"FunnelSlice\";\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   */\n  FunnelSlice.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    var pt = this.pixelPaddingTop;\n    var pb = this.pixelPaddingBottom;\n    var pr = this.pixelPaddingRight;\n    var pl = this.pixelPaddingLeft;\n    var w = this.pixelWidth - pr - pl;\n    var h = this.pixelHeight - pt - pb;\n    var ed = this.expandDistance;\n    var path = \"\";\n    if (this.orientation == \"vertical\") {\n      var tw = $utils.relativeToValue(this.topWidth, w);\n      var bw = $utils.relativeToValue(this.bottomWidth, w);\n      var tl = {\n        x: (w - tw) / 2 + pl,\n        y: pt\n      };\n      var tr = {\n        x: (w + tw) / 2 + pl,\n        y: pt\n      };\n      var br = {\n        x: (w + bw) / 2 + pl,\n        y: pt + h\n      };\n      var bl = {\n        x: (w - bw) / 2 + pl,\n        y: pt + h\n      };\n      var cpr = {\n        x: tr.x + (br.x - tr.x) / 2 + ed * h,\n        y: tr.y + 0.5 * h\n      };\n      var cpl = {\n        x: tl.x + (bl.x - tl.x) / 2 - ed * h,\n        y: tl.y + 0.5 * h\n      };\n      var qp1 = $path.lineTo(br);\n      var qp2 = $path.lineTo(tl);\n      if (ed != 0) {\n        qp1 = $path.quadraticCurveTo(br, cpr);\n        qp2 = $path.quadraticCurveTo(tl, cpl);\n      }\n      path = $path.moveTo(tl) + $path.lineTo(tr) + qp1 + $path.lineTo(bl) + qp2;\n      this.tickPoint = {\n        x: tr.x + (br.x - tr.x) / 2,\n        y: tr.y + (br.y - tr.y) / 2\n      };\n    } else {\n      var tw = $utils.relativeToValue(this.topWidth, h);\n      var bw = $utils.relativeToValue(this.bottomWidth, h);\n      var tt = {\n        x: pl,\n        y: (h - tw) / 2 + pt\n      };\n      var tb = {\n        x: pl,\n        y: (h + tw) / 2 + pt\n      };\n      var bt = {\n        x: pl + w,\n        y: (h - bw) / 2 + pt\n      };\n      var bb = {\n        x: pl + w,\n        y: (h + bw) / 2 + pt\n      };\n      var cpr = {\n        y: tt.y + (bt.y - tt.y) / 2 - ed * w,\n        x: tt.x + 0.5 * w\n      };\n      var cpl = {\n        y: tb.y + (bb.y - tb.y) / 2 + ed * w,\n        x: tb.x + 0.5 * w\n      };\n      var qp1 = $path.lineTo(bt);\n      var qp2 = $path.lineTo(tb);\n      if (ed != 0) {\n        qp1 = $path.quadraticCurveTo(bt, cpr);\n        qp2 = $path.quadraticCurveTo(tb, cpl);\n      }\n      path = $path.moveTo(tb) + $path.lineTo(tt) + qp1 + $path.lineTo(bb) + qp2;\n      this.tickPoint = {\n        y: tb.y + (bb.y - tb.y) / 2,\n        x: tb.x + (bb.x - tb.x) / 2\n      };\n    }\n    this.slice.path = path;\n    this.invalidateLayout();\n  };\n  FunnelSlice.prototype.getPoint = function (locationX, locationY) {\n    var pt = this.pixelPaddingTop;\n    var pb = this.pixelPaddingBottom;\n    var pr = this.pixelPaddingRight;\n    var pl = this.pixelPaddingLeft;\n    var w = this.pixelWidth - pr - pl;\n    var h = this.pixelHeight - pt - pb;\n    if (this.orientation == \"vertical\") {\n      var tw = $utils.relativeToValue(this.topWidth, w);\n      var bw = $utils.relativeToValue(this.bottomWidth, w);\n      var tl = {\n        x: (w - tw) / 2 + pl,\n        y: pt\n      };\n      var tr = {\n        x: (w + tw) / 2 + pl,\n        y: pt\n      };\n      var br = {\n        x: (w + bw) / 2 + pl,\n        y: pt + h\n      };\n      var bl = {\n        x: (w - bw) / 2 + pl,\n        y: pt + h\n      };\n      var mlx = tl.x + (bl.x - tl.x) * locationY;\n      var mrx = tr.x + (br.x - tr.x) * locationY;\n      return {\n        x: mlx + (mrx - mlx) * locationX,\n        y: tr.y + (br.y - tr.y) * locationY\n      };\n    } else {\n      var tw = $utils.relativeToValue(this.topWidth, h);\n      var bw = $utils.relativeToValue(this.bottomWidth, h);\n      var tt = {\n        x: pl,\n        y: (h - tw) / 2 + pt\n      };\n      var tb = {\n        x: pl,\n        y: (h + tw) / 2 + pt\n      };\n      var bt = {\n        x: pl + w,\n        y: (h - bw) / 2 + pt\n      };\n      var bb = {\n        x: pl + w,\n        y: (h + bw) / 2 + pt\n      };\n      var mty = tt.y + (bt.y - tt.y) * locationX;\n      var mby = tb.y + (bb.y - tb.y) * locationX;\n      return {\n        y: mty + (mby - mty) * locationY,\n        x: tt.x + (bt.x - tt.x) * locationX\n      };\n    }\n  };\n  Object.defineProperty(FunnelSlice.prototype, \"bottomWidth\", {\n    /**\r\n     * @return bottom width\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"bottomWidth\");\n    },\n    /**\r\n     * Bottom width in pixels or percent.\r\n     *\r\n     * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n     * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n     * becomes read-only as it will be automatically reset by series.\r\n     *\r\n     * @param value  Bottom width\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"bottomWidth\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FunnelSlice.prototype, \"topWidth\", {\n    /**\r\n     * @return Top width\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"topWidth\");\n    },\n    /**\r\n     * Top width in pixels or percent.\r\n     *\r\n     * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n     * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n     * becomes read-only as it will be automatically reset by series.\r\n     *\r\n     * @param value  Top width\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"topWidth\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FunnelSlice.prototype, \"orientation\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"orientation\");\n    },\n    /**\r\n     * Orientation of the funnel slice: \"horizontal\" or \"vertical\".\r\n     *\r\n     * IMPORTANT: this setting might be used to set orintation if you use slice\r\n     * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n     * becomes read-only as it will be automatically reset by series.\r\n     *\r\n     * @param value  Orientation\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"orientation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FunnelSlice.prototype, \"expandDistance\", {\n    /**\r\n     * @return expandDistance\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"expandDistance\");\n    },\n    /**\r\n     * A relative distance slice's sides should be bent to. It's relative to the\r\n     * height of the slice.\r\n     *\r\n     * Zero (default) will mean the sides will be perfectly straight.\r\n     *\r\n     * Positive value will make them bend outwards, resulting in \"puffed\" slices.\r\n     *\r\n     * Negative values will make them bend inwards.\r\n     *\r\n     * @default 0\r\n     * @param {number}\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"expandDistance\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all parameters from another [[Sprite]].\r\n   *\r\n   * @param source Source Sprite\r\n   */\n  FunnelSlice.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    if (this.slice) {\n      this.slice.copyFrom(source.slice);\n    }\n  };\n  return FunnelSlice;\n}(Container);\nexport { FunnelSlice };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"FunnelSlice\"] = FunnelSlice;","map":{"version":3,"mappings":"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","names":["Container","Sprite","registry","percent","$utils","$path","__extends","_super","_this","slice","createChild","shouldClone","setElement","paper","add","isMeasured","orientation","bottomWidth","topWidth","width","height","expandDistance","className","applyTheme","FunnelSlice","draw","pt","pixelPaddingTop","pb","pixelPaddingBottom","pr","pixelPaddingRight","pl","pixelPaddingLeft","w","pixelWidth","h","pixelHeight","ed","path","tw","relativeToValue","bw","tl","x","y","tr","br","bl","cpr","cpl","qp1","lineTo","qp2","quadraticCurveTo","moveTo","tickPoint","tt","tb","bt","bb","invalidateLayout","locationX","locationY","mlx","mrx","mty","mby","Object","getPropertyValue","value","setPercentProperty","setPropertyValue","source","copyFrom","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\elements\\FunnelSlice.ts"],"sourcesContent":["/**\r\n * Module that defines everything related to building Funnel slices.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FunnelSlice]].\r\n */\r\nexport interface IFunnelSliceProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Width of the top edge of the slice.\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Width of the bottom edge of the slice.\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * A relative distance slice's sides should be bent to.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\texpandDistance?: number;\r\n\r\n\t/**\r\n\t * Orientation of the slice.\r\n\t */\r\n\torientation?: Orientation;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelSlice]].\r\n */\r\nexport interface IFunnelSliceEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelSlice]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelSliceAdapters extends IContainerAdapters, IFunnelSliceProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to create [[FunnelSlice]] elements.\r\n *\r\n * @see {@link IFunnelSliceEvents} for a list of available events\r\n * @see {@link IFunnelSliceAdapters} for a list of available adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class FunnelSlice extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelSliceProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelSliceAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelSliceEvents;\r\n\r\n\t/**\r\n\t * Main slice element.\r\n\t */\r\n\tpublic slice: Sprite;\r\n\r\n\t/**\r\n\t * Am anchor point the slice tick line is pointing to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @readonly\r\n\t */\r\n\tpublic tickPoint: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.slice = this.createChild(Sprite);\r\n\t\tthis.slice.shouldClone = false;\r\n\t\tthis.slice.setElement(this.paper.add(\"path\"));\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tthis.orientation = \"vertical\";\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.width = 10;\r\n\t\tthis.height = 10;\r\n\r\n\t\tthis.expandDistance = 0;\r\n\r\n\t\tthis.className = \"FunnelSlice\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet pt = this.pixelPaddingTop;\r\n\t\tlet pb = this.pixelPaddingBottom;\r\n\t\tlet pr = this.pixelPaddingRight;\r\n\t\tlet pl = this.pixelPaddingLeft;\r\n\r\n\t\tlet w = this.pixelWidth - pr - pl;\r\n\t\tlet h = this.pixelHeight - pt - pb;\r\n\r\n\t\tlet ed = this.expandDistance;\r\n\r\n\t\tlet path = \"\";\r\n\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, w);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, w);\r\n\r\n\t\t\tlet tl = { x: (w - tw) / 2 + pl, y: pt };\r\n\t\t\tlet tr = { x: (w + tw) / 2 + pl, y: pt };\r\n\r\n\t\t\tlet br = { x: (w + bw) / 2 + pl, y: pt + h };\r\n\t\t\tlet bl = { x: (w - bw) / 2 + pl, y: pt + h };\r\n\r\n\t\t\tlet cpr = { x: tr.x + (br.x - tr.x) / 2 + ed * h, y: tr.y + 0.5 * h };\r\n\t\t\tlet cpl = { x: tl.x + (bl.x - tl.x) / 2 - ed * h, y: tl.y + 0.5 * h };\r\n\r\n\t\t\tlet qp1 = $path.lineTo(br);\r\n\t\t\tlet qp2 = $path.lineTo(tl);\r\n\r\n\t\t\tif(ed != 0){\r\n\t\t\t\tqp1 = $path.quadraticCurveTo(br, cpr);\r\n\t\t\t\tqp2 = $path.quadraticCurveTo(tl, cpl);\r\n\t\t\t}\r\n\r\n\t\t\tpath = $path.moveTo(tl) + $path.lineTo(tr) + qp1 + $path.lineTo(bl) + qp2;\r\n\r\n\t\t\tthis.tickPoint = { x: tr.x + (br.x - tr.x) / 2, y: tr.y + (br.y - tr.y) / 2 };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, h);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, h);\r\n\r\n\t\t\tlet tt = { x: pl, y: (h - tw) / 2 + pt };\r\n\t\t\tlet tb = { x: pl, y: (h + tw) / 2 + pt };\r\n\r\n\t\t\tlet bt = { x: pl + w, y: (h - bw) / 2 + pt };\r\n\t\t\tlet bb = { x: pl + w, y: (h + bw) / 2 + pt };\r\n\r\n\t\t\tlet cpr = { y: tt.y + (bt.y - tt.y) / 2 - ed * w, x: tt.x + 0.5 * w };\r\n\t\t\tlet cpl = { y: tb.y + (bb.y - tb.y) / 2 + ed * w, x: tb.x + 0.5 * w };\r\n\r\n\t\t\tlet qp1 = $path.lineTo(bt);\r\n\t\t\tlet qp2 = $path.lineTo(tb);\r\n\t\t\tif(ed != 0){\r\n\t\t\t\tqp1 = $path.quadraticCurveTo(bt, cpr);\r\n\t\t\t\tqp2 = $path.quadraticCurveTo(tb, cpl);\r\n\t\t\t}\r\n\r\n\t\t\tpath = $path.moveTo(tb) + $path.lineTo(tt) + qp1 + $path.lineTo(bb) + qp2;\r\n\r\n\t\t\tthis.tickPoint = { y: tb.y + (bb.y - tb.y) / 2, x: tb.x + (bb.x - tb.x) / 2 };\r\n\t\t}\r\n\r\n\t\tthis.slice.path = path;\r\n\t\tthis.invalidateLayout();\r\n\t}\r\n\r\n\r\n\tgetPoint(locationX:number, locationY:number):IPoint{\r\n\r\n\t\tlet pt = this.pixelPaddingTop;\r\n\t\tlet pb = this.pixelPaddingBottom;\r\n\t\tlet pr = this.pixelPaddingRight;\r\n\t\tlet pl = this.pixelPaddingLeft;\r\n\r\n\t\tlet w = this.pixelWidth - pr - pl;\r\n\t\tlet h = this.pixelHeight - pt - pb;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, w);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, w);\r\n\r\n\t\t\tlet tl = { x: (w - tw) / 2 + pl, y: pt };\r\n\t\t\tlet tr = { x: (w + tw) / 2 + pl, y: pt };\r\n\r\n\t\t\tlet br = { x: (w + bw) / 2 + pl, y: pt + h };\r\n\t\t\tlet bl = { x: (w - bw) / 2 + pl, y: pt + h };\r\n\r\n\t\t\tlet mlx = tl.x + (bl.x - tl.x) * locationY;\r\n\t\t\tlet mrx = tr.x + (br.x - tr.x) * locationY;\r\n\r\n\t\t\treturn { x: mlx + (mrx - mlx) * locationX, y: tr.y + (br.y - tr.y) * locationY };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, h);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, h);\r\n\r\n\t\t\tlet tt = { x: pl, y: (h - tw) / 2 + pt };\r\n\t\t\tlet tb = { x: pl, y: (h + tw) / 2 + pt };\r\n\r\n\t\t\tlet bt = { x: pl + w, y: (h - bw) / 2 + pt };\r\n\t\t\tlet bb = { x: pl + w, y: (h + bw) / 2 + pt };\r\n\r\n\t\t\tlet mty = tt.y + (bt.y - tt.y) * locationX;\r\n\t\t\tlet mby = tb.y + (bb.y - tb.y) * locationX;\r\n\r\n\t\t\treturn { y: mty + (mby - mty) * locationY, x: tt.x + (bt.x - tt.x) * locationX };\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent.\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Bottom width\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"bottomWidth\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return bottom width\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Top width in pixels or percent.\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Top width\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"topWidth\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Top width\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the funnel slice: \"horizontal\" or \"vertical\".\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set orintation if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative distance slice's sides should be bent to. It's relative to the\r\n\t * height of the slice.\r\n\t *\r\n\t * Zero (default) will mean the sides will be perfectly straight.\r\n\t *\r\n\t * Positive value will make them bend outwards, resulting in \"puffed\" slices.\r\n\t *\r\n\t * Negative values will make them bend inwards.\r\n\t *\r\n\t * @default 0\r\n\t * @param {number}\r\n\t */\r\n\tpublic set expandDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"expandDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return expandDistance\r\n\t */\r\n\tpublic get expandDistance(): number {\r\n\t\treturn this.getPropertyValue(\"expandDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Sprite]].\r\n\t *\r\n\t * @param source Source Sprite\r\n\t */\r\n\tpublic copyFrom(source :this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.slice) {\r\n\t\t\tthis.slice.copyFrom(source.slice);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelSlice\"] = FunnelSlice;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}