{"ast":null,"code":"/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { AxisRenderer } from \"./AxisRenderer\";\nimport { AxisBullet } from \"./AxisBullet\";\nimport { WavedLine } from \"../../core/elements/WavedLine\";\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\nimport { registry } from \"../../core/Registry\";\nimport { percent, Percent } from \"../../core/utils/Percent\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * A renderer for horizontal axis.\r\n *\r\n * @see {@link IAxisRendererEvents} for a list of available events\r\n * @see {@link IAxisRendererAdapters} for a list of available Adapters\r\n */\nvar AxisRendererX = /** @class */function (_super) {\n  __extends(AxisRendererX, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Related axis\r\n   */\n  function AxisRendererX() {\n    var _this = _super.call(this) || this;\n    _this.className = \"AxisRendererX\";\n    _this.minGridDistance = 120;\n    _this.opposite = false;\n    _this.rotation = 0;\n    _this.width = percent(100);\n    _this.labels.template.horizontalCenter = \"middle\";\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n  * @ignore\r\n  */\n  AxisRendererX.prototype.setAxis = function (axis) {\n    _super.prototype.setAxis.call(this, axis);\n    axis.layout = \"vertical\";\n  };\n  /**\r\n   * @ignore\r\n   */\n  AxisRendererX.prototype.updateGridContainer = function () {\n    var axis = this.axis;\n    if (axis) {\n      var gridContainer = this.gridContainer;\n      gridContainer.x = axis.pixelX;\n      gridContainer.width = axis.axisLength;\n    }\n  };\n  /**\r\n   * Called when rendered is attached to an Axis, as well as a property of\r\n   * Axis that might affect the appearance is updated.\r\n   *\r\n   * E.g. `axis.opposite`, `axis.inside`, etc.\r\n   *\r\n   * This method is called **before** draw, so that any related setting\r\n   * changed in this method can be changed.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRendererX.prototype.processRenderer = function () {\n    _super.prototype.processRenderer.call(this);\n    // can not do this in init, as axis is set later\n    var axis = this.axis;\n    if (axis) {\n      if (!(axis.width instanceof Percent)) {\n        axis.width = percent(100);\n      }\n      // @todo Is thi sneeded?\n      $utils.used(this.line);\n      var title = axis.title;\n      title.rotation = 0;\n      title.align = \"center\";\n      if (this.opposite) {\n        this.line.toFront();\n        title.toBack();\n      } else {\n        title.toFront();\n        this.toBack();\n        this.line.toBack();\n      }\n    }\n  };\n  /**\r\n   * Updates some of the Axis tooltip's visual properties, related to\r\n   * rendering of the Axis.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRendererX.prototype.updateTooltip = function () {\n    var axis = this.axis;\n    if (axis) {\n      var bigNum = 1000;\n      var bbx = this.line.pixelX;\n      var bby = this.line.pixelY;\n      var bbw = this.axisLength;\n      var bbh = bigNum;\n      // top\n      if (this.opposite) {\n        if (!this.inside) {\n          bby = -bigNum;\n          bbh = bigNum;\n        }\n      }\n      // bottom\n      else {\n        if (this.inside) {\n          bby = -bigNum;\n          bbh = bigNum;\n        }\n      }\n      this.axis.updateTooltip(\"vertical\", {\n        x: bbx,\n        y: bby,\n        width: bbw,\n        height: bbh\n      });\n    }\n  };\n  /**\r\n   * Updates and positions a label element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param label        Label element\r\n   * @param position     Starting position\r\n   * @param endPosition  Ending position\r\n   */\n  AxisRendererX.prototype.updateLabelElement = function (label, position, endPosition, location) {\n    if (!$type.hasValue(location)) {\n      location = label.location;\n    }\n    position = position + (endPosition - position) * location;\n    var point = this.positionToPoint(position);\n    label.isMeasured = !label.inside;\n    var deltaY = 0;\n    var verticalCenter;\n    var maxHeight = this.gridContainer.maxHeight;\n    if (this.opposite) {\n      if (label.inside) {\n        verticalCenter = \"top\";\n        if (label.valign == \"bottom\") {\n          deltaY = maxHeight;\n          verticalCenter = \"bottom\";\n        }\n        if (label.valign == \"middle\") {\n          deltaY = maxHeight / 2;\n          verticalCenter = \"middle\";\n        }\n      } else {\n        verticalCenter = \"bottom\";\n      }\n      point.y = deltaY;\n    } else {\n      if (label.inside) {\n        verticalCenter = \"bottom\";\n        if (label.valign == \"top\") {\n          deltaY = -maxHeight;\n          verticalCenter = \"top\";\n        }\n        if (label.valign == \"middle\") {\n          deltaY = -maxHeight / 2;\n          verticalCenter = \"middle\";\n        }\n      } else {\n        verticalCenter = \"top\";\n      }\n      point.y += deltaY;\n    }\n    if (label.rotation == 0) {\n      // Apply fuzzy logic to verticalCenter only if labels are not rotated\n      label.verticalCenter = verticalCenter;\n    }\n    this.positionItem(label, point);\n    this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\n  };\n  Object.defineProperty(AxisRendererX.prototype, \"axisLength\", {\n    /**\r\n     * Returns actual length of the Axis, in pixels.\r\n     *\r\n     * @return Length (px)\r\n     */\n    get: function () {\n      var axis = this.axis;\n      return axis.measuredWidth - axis.pixelPaddingRight - axis.pixelPaddingLeft || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position on axis to point coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @param position2  Position (0-1) Position on the second axis\r\n   * @return Point\r\n   */\n  AxisRendererX.prototype.positionToPoint = function (position, position2) {\n    return {\n      x: this.positionToCoordinate(position),\n      y: 0\n    };\n  };\n  /**\r\n   * Converts a point at specific coordinates to a relative position (0-1)\r\n   * on the axis.\r\n   *\r\n   * @param point  Point\r\n   * @return Position (0-1)\r\n   */\n  AxisRendererX.prototype.pointToPosition = function (point) {\n    return this.coordinateToPosition(point.x, point.y);\n  };\n  /**\r\n   * [getPositionRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param startPosition  Starting position\r\n   * @param endPosition    End position\r\n   * @return SVG path\r\n   */\n  AxisRendererX.prototype.getPositionRangePath = function (startPosition, endPosition) {\n    var x1 = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\n    var x2 = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\n    var w = Math.abs(x2 - x1);\n    var h = this.getHeight();\n    var x = Math.min(x1, x2);\n    var y = 0;\n    return $path.rectToPath({\n      x: x,\n      y: y,\n      width: w,\n      height: h\n    }, true);\n  };\n  /**\r\n   * Updates and positions an axis break element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Break element\r\n   */\n  AxisRendererX.prototype.updateBreakElement = function (axisBreak) {\n    _super.prototype.updateBreakElement.call(this, axisBreak);\n    var startLine = axisBreak.startLine;\n    var endLine = axisBreak.endLine;\n    var fillShape = axisBreak.fillShape;\n    var startPoint = axisBreak.startPoint;\n    var endPoint = axisBreak.endPoint;\n    var y1 = axisBreak.pixelMarginLeft;\n    var y2 = this.getHeight() - axisBreak.pixelMarginTop - axisBreak.pixelMarginBottom;\n    startPoint.x = $math.fitToRange(startPoint.x, -1, this.axisLength + 1);\n    endPoint.x = $math.fitToRange(endPoint.x, -1, this.axisLength + 1);\n    if (startPoint.x == endPoint.x && (startPoint.x < 0 || startPoint.x > this.axisLength)) {\n      axisBreak.fillShape.__disabled = true;\n    } else {\n      axisBreak.fillShape.__disabled = false;\n    }\n    startLine.y = y1;\n    startLine.width = 0;\n    startLine.height = y2;\n    endLine.y = y1;\n    endLine.width = 0;\n    endLine.height = y2;\n    fillShape.height = y2;\n    fillShape.width = Math.abs(endPoint.x - startPoint.x);\n    fillShape.y = y1;\n    fillShape.x = startPoint.x;\n  };\n  /**\r\n   * Updates and positions a grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param grid         Grid element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n  AxisRendererX.prototype.updateGridElement = function (grid, position, endPosition) {\n    position = position + (endPosition - position) * grid.location;\n    var point = this.positionToPoint(position);\n    //point.x = $utils.spritePointToSprite({x:point.x, y:0}, this, this.gridContainer).x;\n    grid.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: 0,\n      y: this.getHeight()\n    });\n    this.positionItem(grid, point);\n    this.toggleVisibility(grid, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions a tick element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param tick         Tick element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n  AxisRendererX.prototype.updateTickElement = function (tick, position, endPosition) {\n    position = position + (endPosition - position) * tick.location;\n    var point = this.positionToPoint(position);\n    var tickLength = tick.length;\n    point.y = $utils.spritePointToSprite({\n      x: 0,\n      y: this.line.pixelY\n    }, this.line.parent, this.gridContainer).y;\n    if (this.opposite) {\n      tickLength *= tick.inside ? 1 : -1;\n    } else {\n      tickLength *= tick.inside ? -1 : 1;\n    }\n    tick.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: 0,\n      y: tickLength\n    });\n    this.positionItem(tick, point);\n    this.toggleVisibility(tick, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions the axis line element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRendererX.prototype.updateAxisLine = function () {\n    this.line.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: this.axisLength,\n      y: 0\n    });\n  };\n  /**\r\n   * Updates and positions the base grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRendererX.prototype.updateBaseGridElement = function () {\n    _super.prototype.updateBaseGridElement.call(this);\n    var axis = this.axis;\n    var h = this.getHeight();\n    var w = this.axisLength;\n    var baseGrid = this.baseGrid;\n    var x = axis.basePoint.x;\n    if (x < -0.2 || x > w + 0.2) {\n      baseGrid.hide(0);\n    } else {\n      var y = $utils.spritePointToSprite({\n        x: 0,\n        y: 0\n      }, this.gridContainer, baseGrid.parent).y;\n      baseGrid.path = $path.moveTo({\n        x: 0,\n        y: 0\n      }) + $path.lineTo({\n        x: 0,\n        y: h\n      });\n      baseGrid.moveTo({\n        x: x,\n        y: y\n      });\n      baseGrid.show(0);\n    }\n  };\n  /**\r\n   * Creates visual elements for and axis break.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Axis break\r\n   */\n  AxisRendererX.prototype.createBreakSprites = function (axisBreak) {\n    axisBreak.startLine = new WavedLine();\n    axisBreak.endLine = new WavedLine();\n    var wavedRectangle = new WavedRectangle();\n    wavedRectangle.setWavedSides(false, true, false, true);\n    axisBreak.fillShape = wavedRectangle;\n  };\n  /**\r\n   * @ignore\r\n   */\n  AxisRendererX.prototype.toAxisPosition = function (value) {\n    var inversedPosition = value;\n    var axis = this.axis;\n    if (axis) {\n      var relativePositionSprite = axis.relativePositionSprite;\n      var x = axis.pixelX;\n      if (relativePositionSprite) {\n        x = $utils.spritePointToSprite({\n          x: this.pixelX,\n          y: 0\n        }, this.parent, relativePositionSprite).x;\n      } else {\n        relativePositionSprite = axis.parent;\n      }\n      if (relativePositionSprite) {\n        var relativeX = x / relativePositionSprite.innerWidth;\n        var relativeWidth = axis.axisLength / relativePositionSprite.innerWidth;\n        return (inversedPosition - relativeX) / relativeWidth;\n      }\n    }\n    return value;\n  };\n  /**\r\n   * Updates and positions axis bullets.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param bullet       AxisBullet element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n  AxisRendererX.prototype.updateBullet = function (bullet, position, endPosition) {\n    var location = 0.5;\n    if (bullet instanceof AxisBullet) {\n      location = bullet.location;\n    }\n    position = position + (endPosition - position) * location;\n    var point = this.positionToPoint(position);\n    point.y = $utils.spritePointToSprite({\n      x: 0,\n      y: this.line.pixelY\n    }, this.line.parent, this.gridContainer).y;\n    this.positionItem(bullet, point);\n    this.toggleVisibility(bullet, position, 0, 1);\n  };\n  return AxisRendererX;\n}(AxisRenderer);\nexport { AxisRendererX };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"AxisRendererX\"] = AxisRendererX;\n/**\r\n * Add default responsive rules\r\n */\n/**\r\n * Put labels inside plot area.\r\n * Disable first and last labels.\r\n */\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.heightXS,\n  state: function (target, stateId) {\n    if (target instanceof AxisRendererX) {\n      var state = target.states.create(stateId);\n      state.properties.inside = true;\n      state.properties.maxLabelPosition = 0.9;\n      state.properties.minLabelPosition = 0.1;\n      return state;\n    }\n    return null;\n  }\n});\n/**\r\n * Disable labels altogather on very small charts\r\n */\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.heightXXS,\n  state: function (target, stateId) {\n    if (target instanceof AxisRendererX) {\n      var state = target.states.create(stateId);\n      state.properties.disabled = true;\n      return state;\n    }\n    return null;\n  }\n});","map":{"version":3,"mappings":"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","names":["AxisRenderer","AxisBullet","WavedLine","WavedRectangle","registry","percent","Percent","$math","$path","$utils","$type","defaultRules","ResponsiveBreakpoints","__extends","_super","_this","className","minGridDistance","opposite","rotation","width","labels","template","horizontalCenter","applyTheme","AxisRendererX","axis","setAxis","layout","gridContainer","x","pixelX","axisLength","processRenderer","used","line","title","align","toFront","toBack","bigNum","bbx","bby","pixelY","bbw","bbh","inside","updateTooltip","y","height","label","position","endPosition","location","hasValue","point","positionToPoint","isMeasured","deltaY","verticalCenter","maxHeight","valign","positionItem","toggleVisibility","minLabelPosition","maxLabelPosition","Object","measuredWidth","pixelPaddingRight","pixelPaddingLeft","position2","positionToCoordinate","coordinateToPosition","startPosition","x1","fitToRange","x2","w","Math","abs","h","getHeight","min","rectToPath","axisBreak","updateBreakElement","startLine","endLine","fillShape","startPoint","endPoint","y1","pixelMarginLeft","y2","pixelMarginTop","pixelMarginBottom","__disabled","grid","path","moveTo","lineTo","tick","tickLength","length","spritePointToSprite","parent","updateBaseGridElement","baseGrid","basePoint","hide","show","wavedRectangle","setWavedSides","value","inversedPosition","relativePositionSprite","relativeX","innerWidth","relativeWidth","bullet","registeredClasses","push","relevant","heightXS","state","target","stateId","states","create","properties","heightXXS","disabled"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\axes\\AxisRendererX.ts"],"sourcesContent":["/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Axis } from \"./Axis\";\r\nimport { Grid } from \"./Grid\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { VerticalCenter } from \"../../core/defs/VerticalCenter\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX]].\r\n */\r\nexport interface IAxisRendererXProperties extends IAxisRendererProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX]].\r\n */\r\nexport interface IAxisRendererXEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererXAdapters extends IAxisRendererAdapters, IAxisRendererXProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for horizontal axis.\r\n *\r\n * @see {@link IAxisRendererEvents} for a list of available events\r\n * @see {@link IAxisRendererAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererXProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererXAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererXEvents;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"AxisRendererX\";\r\n\r\n\t\tthis.minGridDistance = 120;\r\n\r\n\t\tthis.opposite = false;\r\n\r\n\t\tthis.rotation = 0;\r\n\r\n\t\tthis.width = percent(100);\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.layout = \"vertical\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateGridContainer() {\r\n\t\tlet axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\tlet gridContainer = this.gridContainer;\r\n\t\t\tgridContainer.x = axis.pixelX;\r\n\t\t\tgridContainer.width = axis.axisLength;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Called when rendered is attached to an Axis, as well as a property of\r\n\t * Axis that might affect the appearance is updated.\r\n\t *\r\n\t * E.g. `axis.opposite`, `axis.inside`, etc.\r\n\t *\r\n\t * This method is called **before** draw, so that any related setting\r\n\t * changed in this method can be changed.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processRenderer(): void {\r\n\t\tsuper.processRenderer();\r\n\r\n\t\t// can not do this in init, as axis is set later\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tif (axis) {\r\n\t\t\tif (!(axis.width instanceof Percent)) {\r\n\t\t\t\taxis.width = percent(100);\r\n\t\t\t}\r\n\r\n\t\t\t// @todo Is thi sneeded?\r\n\t\t\t$utils.used(this.line);\r\n\r\n\t\t\tlet title: Label = axis.title;\r\n\t\t\ttitle.rotation = 0;\r\n\t\t\ttitle.align = \"center\";\r\n\r\n\t\t\tif (this.opposite) {\r\n\t\t\t\tthis.line.toFront();\r\n\t\t\t\ttitle.toBack();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttitle.toFront();\r\n\t\t\t\tthis.toBack();\r\n\t\t\t\tthis.line.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip() {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\tlet bigNum: number = 1000;\r\n\t\t\tlet bbx: number = this.line.pixelX;\r\n\t\t\tlet bby: number = this.line.pixelY;\r\n\t\t\tlet bbw: number = this.axisLength;\r\n\r\n\t\t\tlet bbh: number = bigNum;\r\n\r\n\t\t\t// top\r\n\t\t\tif (this.opposite) {\r\n\t\t\t\tif (!this.inside) {\r\n\t\t\t\t\tbby = - bigNum;\r\n\t\t\t\t\tbbh = bigNum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// bottom\r\n\t\t\telse {\r\n\t\t\t\tif (this.inside) {\r\n\t\t\t\t\tbby = - bigNum;\r\n\t\t\t\t\tbbh = bigNum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.axis.updateTooltip(\"vertical\", { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: AxisLabel, position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlabel.isMeasured = !label.inside;\r\n\r\n\t\tlet deltaY = 0;\r\n\t\tlet verticalCenter: VerticalCenter;\r\n\t\tlet maxHeight = this.gridContainer.maxHeight;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (label.inside) {\r\n\t\t\t\tverticalCenter = \"top\";\r\n\t\t\t\tif (label.valign == \"bottom\") {\r\n\t\t\t\t\tdeltaY = maxHeight;\r\n\t\t\t\t\tverticalCenter = \"bottom\";\r\n\t\t\t\t}\r\n\t\t\t\tif (label.valign == \"middle\") {\r\n\t\t\t\t\tdeltaY = maxHeight / 2;\r\n\t\t\t\t\tverticalCenter = \"middle\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tverticalCenter = \"bottom\";\r\n\t\t\t}\r\n\r\n\t\t\tpoint.y = deltaY;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (label.inside) {\r\n\t\t\t\tverticalCenter = \"bottom\";\r\n\t\t\t\tif (label.valign == \"top\") {\r\n\t\t\t\t\tdeltaY = -maxHeight;\r\n\t\t\t\t\tverticalCenter = \"top\";\r\n\t\t\t\t}\r\n\t\t\t\tif (label.valign == \"middle\") {\r\n\t\t\t\t\tdeltaY = -maxHeight / 2;\r\n\t\t\t\t\tverticalCenter = \"middle\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tverticalCenter = \"top\";\r\n\t\t\t}\r\n\r\n\t\t\tpoint.y += deltaY;\r\n\t\t}\r\n\r\n\t\tif (label.rotation == 0) {\r\n\t\t\t// Apply fuzzy logic to verticalCenter only if labels are not rotated\r\n\t\t\tlabel.verticalCenter = verticalCenter;\r\n\t\t}\r\n\r\n\t\tthis.positionItem(label, point);\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\tlet axis = this.axis;\r\n\t\treturn (axis.measuredWidth - axis.pixelPaddingRight - axis.pixelPaddingLeft) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @param position2  Position (0-1) Position on the second axis\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?: number): IPoint {\r\n\t\treturn { x: this.positionToCoordinate(position), y: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\treturn this.coordinateToPosition(point.x, point.y);\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet x1: number = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\r\n\t\tlet x2: number = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\r\n\r\n\t\tlet w: number = Math.abs(x2 - x1);\r\n\t\tlet h: number = this.getHeight();\r\n\t\tlet x: number = Math.min(x1, x2);\r\n\t\tlet y: number = 0;\r\n\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: x,\r\n\t\t\ty: y,\r\n\t\t\twidth: w,\r\n\t\t\theight: h\r\n\t\t}, true);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak): void {\r\n\t\tsuper.updateBreakElement(axisBreak);\r\n\r\n\t\tlet startLine = axisBreak.startLine;\r\n\t\tlet endLine = axisBreak.endLine;\r\n\t\tlet fillShape = axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tlet y1: number = axisBreak.pixelMarginLeft;\r\n\t\tlet y2: number = this.getHeight() - axisBreak.pixelMarginTop - axisBreak.pixelMarginBottom;\r\n\r\n\t\tstartPoint.x = $math.fitToRange(startPoint.x, -1, this.axisLength + 1);\r\n\t\tendPoint.x = $math.fitToRange(endPoint.x, -1, this.axisLength + 1);\r\n\r\n\t\tif (startPoint.x == endPoint.x && (startPoint.x < 0 || startPoint.x > this.axisLength)) {\r\n\t\t\taxisBreak.fillShape.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxisBreak.fillShape.__disabled = false;\r\n\t\t}\r\n\r\n\t\tstartLine.y = y1;\r\n\t\tstartLine.width = 0;\r\n\t\tstartLine.height = y2;\r\n\r\n\t\tendLine.y = y1;\r\n\t\tendLine.width = 0;\r\n\t\tendLine.height = y2;\r\n\r\n\t\tfillShape.height = y2;\r\n\t\tfillShape.width = Math.abs(endPoint.x - startPoint.x);\r\n\t\tfillShape.y = y1;\r\n\t\tfillShape.x = startPoint.x;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\t//point.x = $utils.spritePointToSprite({x:point.x, y:0}, this, this.gridContainer).x;\r\n\r\n\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.getHeight() });\r\n\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlet tickLength = tick.length;\r\n\r\n\t\tpoint.y = $utils.spritePointToSprite({ x: 0, y: this.line.pixelY }, this.line.parent, this.gridContainer).y;\r\n\r\n\t\tif (this.opposite) {\r\n\t\t\ttickLength *= (tick.inside ? 1 : -1);\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttickLength *= (tick.inside ? -1 : 1);\r\n\t\t}\r\n\r\n\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: tickLength });\r\n\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine(): void {\r\n\t\tthis.line.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.axisLength, y: 0 });\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet h: number = this.getHeight();\r\n\t\tlet w: number = this.axisLength;\r\n\t\tlet baseGrid: Sprite = this.baseGrid;\r\n\r\n\t\tlet x: number = axis.basePoint.x;\r\n\t\tif (x < -0.2 || x > w + 0.2) {\r\n\t\t\tbaseGrid.hide(0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet y = $utils.spritePointToSprite({ x: 0, y: 0 }, this.gridContainer, baseGrid.parent).y;\r\n\t\t\tbaseGrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: h });\r\n\t\t\tbaseGrid.moveTo({ x: x, y: y });\r\n\t\t\tbaseGrid.show(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedLine();\r\n\t\taxisBreak.endLine = new WavedLine();\r\n\t\tlet wavedRectangle: WavedRectangle = new WavedRectangle();\r\n\t\twavedRectangle.setWavedSides(false, true, false, true);\r\n\t\taxisBreak.fillShape = wavedRectangle;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic toAxisPosition(value: number): number {\r\n\t\tlet inversedPosition = value;\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tif (axis) {\r\n\t\t\tlet relativePositionSprite = axis.relativePositionSprite;\r\n\r\n\t\t\tlet x = axis.pixelX;\r\n\t\t\tif (relativePositionSprite) {\r\n\t\t\t\tx = $utils.spritePointToSprite({ x: this.pixelX, y: 0 }, this.parent, relativePositionSprite).x;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trelativePositionSprite = axis.parent;\r\n\t\t\t}\r\n\r\n\t\t\tif(relativePositionSprite){\r\n\t\t\t\tlet relativeX = x / relativePositionSprite.innerWidth;\r\n\t\t\t\tlet relativeWidth = axis.axisLength / relativePositionSprite.innerWidth;\r\n\r\n\t\t\t\treturn (inversedPosition - relativeX) / relativeWidth;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions axis bullets.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tpoint.y = $utils.spritePointToSprite({ x: 0, y: this.line.pixelY }, this.line.parent, this.gridContainer).y;\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX\"] = AxisRendererX;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Put labels inside plot area.\r\n * Disable first and last labels.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof AxisRendererX) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.inside = true;\r\n\t\t\tstate.properties.maxLabelPosition = 0.9;\r\n\t\t\tstate.properties.minLabelPosition = 0.1;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Disable labels altogather on very small charts\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof AxisRendererX) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});"]},"metadata":{},"sourceType":"module","externalDependencies":[]}