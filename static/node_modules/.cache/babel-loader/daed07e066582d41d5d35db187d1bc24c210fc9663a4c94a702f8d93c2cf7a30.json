{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lucian\\\\Documents\\\\DEV\\\\nodejs\\\\stock-market-api\\\\dev\\\\static\\\\src\\\\components\\\\HighChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Highcharts\n} = window;\nexport class DataPoint {\n  constructor(_ref) {\n    let {\n      timestamp,\n      open,\n      high,\n      low,\n      close,\n      volume\n    } = _ref;\n    this.timestamp = void 0;\n    this.close = void 0;\n    this.high = void 0;\n    this.low = void 0;\n    this.open = void 0;\n    this.volume = void 0;\n    this.timestamp = parseInt(timestamp.toString());\n    this.open = Number(open.toFixed(2));\n    this.close = Number(close.toFixed(2));\n    this.high = Number(high.toFixed(2));\n    this.low = Number(low.toFixed(2));\n    this.volume = parseInt(volume.toString());\n  }\n  getCandlestickData() {\n    return [this.timestamp, this.open, this.high, this.low, this.close];\n  }\n  getVolumeData() {\n    return [this.timestamp, this.volume];\n  }\n}\n\n// export class Candlestick {\n//   timestamp: number;\n//   close: number;\n//   high: number;\n//   low: number;\n//   open: number;\n\n//   constructor({ timestamp, open, close, high, low }: TCandleStick) {\n//     this.timestamp = parseInt(timestamp.toString());\n//     this.open = parseFloat(open.toString());\n//     this.close = parseFloat(close.toString());\n//     this.high = parseFloat(high.toString());\n//     this.low = parseFloat(low.toString());\n//   }\n// }\n\n// export class VolumeBar {\n//   timestamp: number;\n//   volume: number;\n\n//   constructor({ timestamp, volume }: TVolume) {\n//     this.timestamp = parseInt(timestamp.toString());\n//     this.volume = parseFloat(volume.toString());\n//   }\n// }\n\nconst parseDataPoints = dataPoints => {\n  const candles = [];\n  const volumes = [];\n  for (let point, len = dataPoints.length, i = 0; i < len; i++) {\n    point = new DataPoint(dataPoints[i]);\n    candles.push(point.getCandlestickData());\n    volumes.push(point.getVolumeData());\n  }\n  return {\n    candles,\n    volumes\n  };\n};\nexport function CandleStickChart(_ref2) {\n  _s();\n  let {\n    chartData\n  } = _ref2;\n  const {\n    dataPoints,\n    symbol\n  } = chartData;\n  const divRef = useRef();\n  // const [chart, setChart] = useState<CandleStickChartElement>();\n\n  useEffect(() => {\n    // new CandleStickChartElement(divRef?.current, dataPoints).draw();\n    if (dataPoints && divRef !== null && divRef !== void 0 && divRef.current) {\n      // split the data set into candles and volumes\n      // const candles = dataPoints.reduce((arr, point) => {\n      //   arr.push([\n      //     point.timestamp,\n      //     Number(point.open.toFixed(2)),\n      //     Number(point.high.toFixed(2)),\n      //     Number(point.low.toFixed(2)),\n      //     Number(point.close.toFixed(2))\n      //   ]);\n      //   return arr;\n      // }, [] as any[]);\n      // const volumes = dataPoints.reduce((arr, point) => {\n      //   arr.push([\n      //     point.timestamp,\n      //     point.volume\n      //   ]);\n      //   return arr;\n      // }, [] as any[]);;\n\n      const {\n        candles,\n        volumes\n      } = parseDataPoints(dataPoints);\n      const chart = Highcharts.stockChart(divRef === null || divRef === void 0 ? void 0 : divRef.current, {\n        yAxis: [{\n          labels: {\n            align: 'left'\n          },\n          height: '80%',\n          resize: {\n            enabled: true\n          }\n        }, {\n          labels: {\n            align: 'left'\n          },\n          top: '80%',\n          height: '20%',\n          offset: 0\n        }],\n        tooltip: {\n          shape: 'square',\n          headerShape: 'callout',\n          borderWidth: 0,\n          shadow: false,\n          positioner: (width, height, point) => {\n            // var chart = this.chart,\n            let position;\n            if (point.isHeader) {\n              position = {\n                x: Math.max(\n                // Left side limit\n                chart.plotLeft, Math.min(point.plotX + chart.plotLeft - width / 2,\n                // Right side limit\n                chart.chartWidth - width - chart.marginRight)),\n                y: point.plotY\n              };\n            } else {\n              position = {\n                x: point.series.chart.plotLeft,\n                y: point.series.yAxis.top - chart.plotTop\n              };\n            }\n            return position;\n          }\n        },\n        series: [{\n          type: 'candlestick',\n          id: `${symbol}-ohlc`,\n          name: `${symbol} Stock Price`,\n          data: candles\n        }, {\n          type: 'column',\n          id: `${symbol}-volume`,\n          name: `${symbol} Volume`,\n          data: volumes,\n          yAxis: 1\n        }],\n        responsive: {\n          rules: [{\n            condition: {\n              maxWidth: 800\n            },\n            chartOptions: {\n              rangeSelector: {\n                inputEnabled: false\n              }\n            }\n          }]\n        }\n      });\n    }\n  }, [dataPoints, symbol]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    ref: divRef,\n    style: {\n      width: '100%',\n      height: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 11\n  }, this);\n}\n_s(CandleStickChart, \"HI2rmkDStaXKpoO1B+Q8/ihvhA0=\");\n_c = CandleStickChart;\nexport default CandleStickChart;\nvar _c;\n$RefreshReg$(_c, \"CandleStickChart\");","map":{"version":3,"names":["React","useEffect","useRef","Highcharts","window","DataPoint","constructor","timestamp","open","high","low","close","volume","parseInt","toString","Number","toFixed","getCandlestickData","getVolumeData","parseDataPoints","dataPoints","candles","volumes","point","len","length","i","push","CandleStickChart","chartData","symbol","divRef","current","chart","stockChart","yAxis","labels","align","height","resize","enabled","top","offset","tooltip","shape","headerShape","borderWidth","shadow","positioner","width","position","isHeader","x","Math","max","plotLeft","min","plotX","chartWidth","marginRight","y","plotY","series","plotTop","type","id","name","data","responsive","rules","condition","maxWidth","chartOptions","rangeSelector","inputEnabled"],"sources":["C:/Users/Lucian/Documents/DEV/nodejs/stock-market-api/dev/static/src/components/HighChart.tsx"],"sourcesContent":["import React, { LegacyRef, useEffect, useRef } from 'react';\r\n\r\nconst { Highcharts } = window as any;\r\n\r\nexport interface ICandleStickChartProps {\r\n  chartData: IChart;\r\n}\r\n\r\nexport class DataPoint implements IDataPoint {\r\n    timestamp: number;\r\n    close: number;\r\n    high: number;\r\n    low: number;\r\n    open: number;\r\n    volume: number;\r\n  \r\n    constructor({ timestamp, open, high, low, close, volume }: IDataPoint) {\r\n      this.timestamp = parseInt(timestamp.toString());\r\n      this.open = Number(open.toFixed(2));\r\n      this.close = Number(close.toFixed(2));\r\n      this.high = Number(high.toFixed(2));\r\n      this.low = Number(low.toFixed(2));\r\n      this.volume = parseInt(volume.toString());\r\n    }\r\n\r\n    getCandlestickData() {\r\n      return [ this.timestamp, this.open, this.high, this.low, this.close ];\r\n    }\r\n\r\n    getVolumeData() {\r\n      return [ this.timestamp, this.volume ];\r\n    }\r\n  }\r\n  \r\n\r\n// export class Candlestick {\r\n//   timestamp: number;\r\n//   close: number;\r\n//   high: number;\r\n//   low: number;\r\n//   open: number;\r\n\r\n//   constructor({ timestamp, open, close, high, low }: TCandleStick) {\r\n//     this.timestamp = parseInt(timestamp.toString());\r\n//     this.open = parseFloat(open.toString());\r\n//     this.close = parseFloat(close.toString());\r\n//     this.high = parseFloat(high.toString());\r\n//     this.low = parseFloat(low.toString());\r\n//   }\r\n// }\r\n\r\n// export class VolumeBar {\r\n//   timestamp: number;\r\n//   volume: number;\r\n\r\n//   constructor({ timestamp, volume }: TVolume) {\r\n//     this.timestamp = parseInt(timestamp.toString());\r\n//     this.volume = parseFloat(volume.toString());\r\n//   }\r\n// }\r\n\r\n\r\nconst parseDataPoints = (dataPoints: IDataPoint[]) => {\r\n  const candles = [];\r\n  const volumes = [];\r\n\r\n  for (let point: DataPoint, len = dataPoints.length, i = 0; i < len; i++) {\r\n    point = new DataPoint(dataPoints[i]);\r\n    candles.push(point.getCandlestickData());\r\n    volumes.push(point.getVolumeData());\r\n  }\r\n  return { candles, volumes };\r\n};\r\n\r\nexport function CandleStickChart({chartData}: ICandleStickChartProps) {\r\n  const { dataPoints, symbol } = chartData;\r\n  const divRef = useRef<LegacyRef<HTMLDivElement>>() as any;\r\n  // const [chart, setChart] = useState<CandleStickChartElement>();\r\n\r\n  useEffect(() => {\r\n    // new CandleStickChartElement(divRef?.current, dataPoints).draw();\r\n    if (dataPoints && divRef?.current) {\r\n      // split the data set into candles and volumes\r\n      // const candles = dataPoints.reduce((arr, point) => {\r\n      //   arr.push([\r\n      //     point.timestamp,\r\n      //     Number(point.open.toFixed(2)),\r\n      //     Number(point.high.toFixed(2)),\r\n      //     Number(point.low.toFixed(2)),\r\n      //     Number(point.close.toFixed(2))\r\n      //   ]);\r\n      //   return arr;\r\n      // }, [] as any[]);\r\n      // const volumes = dataPoints.reduce((arr, point) => {\r\n      //   arr.push([\r\n      //     point.timestamp,\r\n      //     point.volume\r\n      //   ]);\r\n      //   return arr;\r\n      // }, [] as any[]);;\r\n\r\n\r\n      const { candles, volumes } =  parseDataPoints(dataPoints);\r\n\r\n      const chart = Highcharts.stockChart(divRef?.current, {\r\n        yAxis: [{\r\n            labels: {\r\n                align: 'left'\r\n            },\r\n            height: '80%',\r\n            resize: {\r\n                enabled: true\r\n            }\r\n        }, {\r\n            labels: {\r\n                align: 'left'\r\n            },\r\n            top: '80%',\r\n            height: '20%',\r\n            offset: 0\r\n        }],\r\n        tooltip: {\r\n            shape: 'square',\r\n            headerShape: 'callout',\r\n            borderWidth: 0,\r\n            shadow: false,\r\n            positioner: (width: number, height: number, point: any) => {\r\n                // var chart = this.chart,\r\n                let position;\r\n\r\n                if (point.isHeader) {\r\n                    position = {\r\n                        x: Math.max(\r\n                            // Left side limit\r\n                            chart.plotLeft,\r\n                            Math.min(\r\n                                point.plotX + chart.plotLeft - width / 2,\r\n                                // Right side limit\r\n                                chart.chartWidth - width - chart.marginRight\r\n                            )\r\n                        ),\r\n                        y: point.plotY\r\n                    };\r\n                } else {\r\n                    position = {\r\n                        x: point.series.chart.plotLeft,\r\n                        y: point.series.yAxis.top - chart.plotTop\r\n                    };\r\n                }\r\n\r\n                return position;\r\n            }\r\n        },\r\n        series: [{\r\n            type: 'candlestick',\r\n            id: `${symbol}-ohlc`,\r\n            name: `${symbol} Stock Price`,\r\n            data: candles\r\n        }, {\r\n            type: 'column',\r\n            id: `${symbol}-volume`,\r\n            name: `${symbol} Volume`,\r\n            data: volumes,\r\n            yAxis: 1\r\n        }],\r\n        responsive: {\r\n            rules: [{\r\n                condition: {\r\n                    maxWidth: 800\r\n                },\r\n                chartOptions: {\r\n                    rangeSelector: {\r\n                        inputEnabled: false\r\n                    }\r\n                }\r\n            }]\r\n        }\r\n    });\r\n\r\n    }\r\n  }, [dataPoints, symbol]);\r\n\r\n  return (<div className=\"chart-container\" ref={divRef} style={{ width: '100%', height: '100%'}}></div>);\r\n}\r\nexport default CandleStickChart;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}