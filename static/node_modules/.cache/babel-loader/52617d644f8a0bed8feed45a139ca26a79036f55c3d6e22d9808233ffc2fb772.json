{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { extent as d3Extent, min, max } from \"d3-array\";\nimport { head, last, isDefined, isNotDefined, clearCanvas, shallowEqual, identity, noop, functor, getLogger } from \"./utils\";\n\n/* eslint-disable no-unused-vars */\nimport { mouseBasedZoomAnchor, lastVisibleItemBasedZoomAnchor, rightDomainBasedZoomAnchor } from \"./utils/zoomBehavior\";\n/* eslint-enable no-unused-vars */\n\nimport { getNewChartConfig, getChartConfigWithUpdatedYScales, getCurrentCharts, getCurrentItem } from \"./utils/ChartDataUtil\";\nimport EventCapture from \"./EventCapture\";\nimport CanvasContainer from \"./CanvasContainer\";\nimport evaluator from \"./scale/evaluator\";\nvar log = getLogger(\"ChartCanvas\");\nvar CANDIDATES_FOR_RESET = [\"seriesName\"];\nfunction shouldResetChart(thisProps, nextProps) {\n  return !CANDIDATES_FOR_RESET.every(function (key) {\n    var result = shallowEqual(thisProps[key], nextProps[key]);\n    // console.log(key, result);\n    return result;\n  });\n}\nfunction getCursorStyle() {\n  var tooltipStyle = \"\\n\\t.react-stockcharts-grabbing-cursor {\\n\\t\\tpointer-events: all;\\n\\t\\tcursor: -moz-grabbing;\\n\\t\\tcursor: -webkit-grabbing;\\n\\t\\tcursor: grabbing;\\n\\t}\\n\\t.react-stockcharts-crosshair-cursor {\\n\\t\\tpointer-events: all;\\n\\t\\tcursor: crosshair;\\n\\t}\\n\\t.react-stockcharts-tooltip-hover {\\n\\t\\tpointer-events: all;\\n\\t\\tcursor: pointer;\\n\\t}\\n\\t.react-stockcharts-avoid-interaction {\\n\\t\\tpointer-events: none;\\n\\t}\\n\\t.react-stockcharts-enable-interaction {\\n\\t\\tpointer-events: all;\\n\\t}\\n\\t.react-stockcharts-tooltip {\\n\\t\\tpointer-events: all;\\n\\t\\tcursor: pointer;\\n\\t}\\n\\t.react-stockcharts-default-cursor {\\n\\t\\tcursor: default;\\n\\t}\\n\\t.react-stockcharts-move-cursor {\\n\\t\\tcursor: move;\\n\\t}\\n\\t.react-stockcharts-pointer-cursor {\\n\\t\\tcursor: pointer;\\n\\t}\\n\\t.react-stockcharts-ns-resize-cursor {\\n\\t\\tcursor: ns-resize;\\n\\t}\\n\\t.react-stockcharts-ew-resize-cursor {\\n\\t\\tcursor: ew-resize;\\n\\t}\";\n  return React.createElement(\"style\", {\n    type: \"text/css\"\n  }, tooltipStyle);\n}\nfunction getDimensions(props) {\n  return {\n    height: props.height - props.margin.top - props.margin.bottom,\n    width: props.width - props.margin.left - props.margin.right\n  };\n}\nfunction getXScaleDirection(flipXScale) {\n  return flipXScale ? -1 : 1;\n}\nfunction calculateFullData(props) {\n  var fullData = props.data,\n    plotFull = props.plotFull,\n    xScale = props.xScale,\n    clamp = props.clamp,\n    pointsPerPxThreshold = props.pointsPerPxThreshold,\n    flipXScale = props.flipXScale;\n  var xAccessor = props.xAccessor,\n    displayXAccessor = props.displayXAccessor,\n    minPointsPerPxThreshold = props.minPointsPerPxThreshold;\n  var useWholeData = isDefined(plotFull) ? plotFull : xAccessor === identity;\n  var _evaluator = evaluator({\n      xScale: xScale,\n      useWholeData: useWholeData,\n      clamp: clamp,\n      pointsPerPxThreshold: pointsPerPxThreshold,\n      minPointsPerPxThreshold: minPointsPerPxThreshold,\n      flipXScale: flipXScale\n    }),\n    filterData = _evaluator.filterData;\n  return {\n    xAccessor: xAccessor,\n    displayXAccessor: displayXAccessor || xAccessor,\n    xScale: xScale.copy(),\n    fullData: fullData,\n    filterData: filterData\n  };\n}\nfunction resetChart(props) {\n  var firstCalculation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!firstCalculation) log(\"CHART RESET\");\n  }\n  var state = calculateState(props);\n  var xAccessor = state.xAccessor,\n    displayXAccessor = state.displayXAccessor,\n    fullData = state.fullData;\n  var initialPlotData = state.plotData,\n    xScale = state.xScale;\n  var postCalculator = props.postCalculator,\n    children = props.children;\n  var plotData = postCalculator(initialPlotData);\n  var dimensions = getDimensions(props);\n  var chartConfig = getChartConfigWithUpdatedYScales(getNewChartConfig(dimensions, children), {\n    plotData: plotData,\n    xAccessor: xAccessor,\n    displayXAccessor: displayXAccessor,\n    fullData: fullData\n  }, xScale.domain());\n  return _extends({}, state, {\n    xScale: xScale,\n    plotData: plotData,\n    chartConfig: chartConfig\n  });\n}\nfunction updateChart(newState, initialXScale, props, lastItemWasVisible, initialChartConfig) {\n  var fullData = newState.fullData,\n    xScale = newState.xScale,\n    xAccessor = newState.xAccessor,\n    displayXAccessor = newState.displayXAccessor,\n    filterData = newState.filterData;\n  var lastItem = last(fullData);\n  var _initialXScale$domain = initialXScale.domain(),\n    _initialXScale$domain2 = _slicedToArray(_initialXScale$domain, 2),\n    start = _initialXScale$domain2[0],\n    end = _initialXScale$domain2[1];\n  if (process.env.NODE_ENV !== \"production\") {\n    log(\"TRIVIAL CHANGE\");\n  }\n  var postCalculator = props.postCalculator,\n    children = props.children,\n    padding = props.padding,\n    flipXScale = props.flipXScale;\n  var maintainPointsPerPixelOnResize = props.maintainPointsPerPixelOnResize;\n  var direction = getXScaleDirection(flipXScale);\n  var dimensions = getDimensions(props);\n  var updatedXScale = setXRange(xScale, dimensions, padding, direction);\n\n  // console.log(\"lastItemWasVisible =\", lastItemWasVisible, end, xAccessor(lastItem), end >= xAccessor(lastItem));\n  var initialPlotData = void 0;\n  if (!lastItemWasVisible || end >= xAccessor(lastItem)) {\n    // resize comes here...\n    var _initialXScale$range = initialXScale.range(),\n      _initialXScale$range2 = _slicedToArray(_initialXScale$range, 2),\n      rangeStart = _initialXScale$range2[0],\n      rangeEnd = _initialXScale$range2[1];\n    var _updatedXScale$range = updatedXScale.range(),\n      _updatedXScale$range2 = _slicedToArray(_updatedXScale$range, 2),\n      newRangeStart = _updatedXScale$range2[0],\n      newRangeEnd = _updatedXScale$range2[1];\n    var newDomainExtent = (newRangeEnd - newRangeStart) / (rangeEnd - rangeStart) * (end - start);\n    var newStart = maintainPointsPerPixelOnResize ? end - newDomainExtent : start;\n    var lastItemX = initialXScale(xAccessor(lastItem));\n    // console.log(\"pointsPerPixel => \", newStart, start, end, updatedXScale(end));\n    var response = filterData(fullData, [newStart, end], xAccessor, updatedXScale, {\n      fallbackStart: start,\n      fallbackEnd: {\n        lastItem: lastItem,\n        lastItemX: lastItemX\n      }\n    });\n    initialPlotData = response.plotData;\n    updatedXScale.domain(response.domain);\n    // console.log(\"HERE!!!!!\", start, end);\n  } else if (lastItemWasVisible && end < xAccessor(lastItem)) {\n    // this is when a new item is added and last item was visible\n    // so slide over and show the new item also\n\n    // get plotData between [xAccessor(l) - (end - start), xAccessor(l)] and DO change the domain\n    var dx = initialXScale(xAccessor(lastItem)) - initialXScale.range()[1];\n    var _initialXScale$range$ = initialXScale.range().map(function (x) {\n        return x + dx;\n      }).map(initialXScale.invert),\n      _initialXScale$range$2 = _slicedToArray(_initialXScale$range$, 2),\n      _newStart = _initialXScale$range$2[0],\n      newEnd = _initialXScale$range$2[1];\n    var _response = filterData(fullData, [_newStart, newEnd], xAccessor, updatedXScale);\n    initialPlotData = _response.plotData;\n    updatedXScale.domain(_response.domain); // if last item was visible, then shift\n  }\n  // plotData = getDataOfLength(fullData, showingInterval, plotData.length)\n  var plotData = postCalculator(initialPlotData);\n  var chartConfig = getChartConfigWithUpdatedYScales(getNewChartConfig(dimensions, children, initialChartConfig), {\n    plotData: plotData,\n    xAccessor: xAccessor,\n    displayXAccessor: displayXAccessor,\n    fullData: fullData\n  }, updatedXScale.domain());\n  return {\n    xScale: updatedXScale,\n    xAccessor: xAccessor,\n    chartConfig: chartConfig,\n    plotData: plotData,\n    fullData: fullData,\n    filterData: filterData\n  };\n}\nfunction calculateState(props) {\n  var inputXAccesor = props.xAccessor,\n    xExtentsProp = props.xExtents,\n    data = props.data,\n    padding = props.padding,\n    flipXScale = props.flipXScale;\n  if (process.env.NODE_ENV !== \"production\" && isDefined(props.xScale.invert)) {\n    for (var i = 1; i < data.length; i++) {\n      var prev = data[i - 1];\n      var curr = data[i];\n      if (inputXAccesor(prev) > inputXAccesor(curr)) {\n        throw new Error(\"'data' is not sorted on 'xAccessor', send 'data' sorted in ascending order of 'xAccessor'\");\n      }\n    }\n  }\n  var direction = getXScaleDirection(flipXScale);\n  var dimensions = getDimensions(props);\n  var extent = typeof xExtentsProp === \"function\" ? xExtentsProp(data) : d3Extent(xExtentsProp.map(function (d) {\n    return functor(d);\n  }).map(function (each) {\n    return each(data, inputXAccesor);\n  }));\n  var _calculateFullData = calculateFullData(props),\n    xAccessor = _calculateFullData.xAccessor,\n    displayXAccessor = _calculateFullData.displayXAccessor,\n    xScale = _calculateFullData.xScale,\n    fullData = _calculateFullData.fullData,\n    filterData = _calculateFullData.filterData;\n  var updatedXScale = setXRange(xScale, dimensions, padding, direction);\n  var _filterData = filterData(fullData, extent, inputXAccesor, updatedXScale),\n    plotData = _filterData.plotData,\n    domain = _filterData.domain;\n  if (process.env.NODE_ENV !== \"production\" && plotData.length <= 1) {\n    throw new Error(\"Showing \" + plotData.length + \" datapoints, review the 'xExtents' prop of ChartCanvas\");\n  }\n  return {\n    plotData: plotData,\n    xScale: updatedXScale.domain(domain),\n    xAccessor: xAccessor,\n    displayXAccessor: displayXAccessor,\n    fullData: fullData,\n    filterData: filterData\n  };\n}\nfunction setXRange(xScale, dimensions, padding) {\n  var direction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  if (xScale.rangeRoundPoints) {\n    if (isNaN(padding)) throw new Error(\"padding has to be a number for ordinal scale\");\n    xScale.rangeRoundPoints([0, dimensions.width], padding);\n  } else if (xScale.padding) {\n    if (isNaN(padding)) throw new Error(\"padding has to be a number for ordinal scale\");\n    xScale.range([0, dimensions.width]);\n    xScale.padding(padding / 2);\n  } else {\n    var _ref = isNaN(padding) ? padding : {\n        left: padding,\n        right: padding\n      },\n      left = _ref.left,\n      right = _ref.right;\n    if (direction > 0) {\n      xScale.range([left, dimensions.width - right]);\n    } else {\n      xScale.range([dimensions.width - right, left]);\n    }\n  }\n  return xScale;\n}\nfunction pinchCoordinates(pinch) {\n  var touch1Pos = pinch.touch1Pos,\n    touch2Pos = pinch.touch2Pos;\n  return {\n    topLeft: [Math.min(touch1Pos[0], touch2Pos[0]), Math.min(touch1Pos[1], touch2Pos[1])],\n    bottomRight: [Math.max(touch1Pos[0], touch2Pos[0]), Math.max(touch1Pos[1], touch2Pos[1])]\n  };\n}\nvar ChartCanvas = function (_Component) {\n  _inherits(ChartCanvas, _Component);\n  function ChartCanvas() {\n    _classCallCheck(this, ChartCanvas);\n    var _this = _possibleConstructorReturn(this, (ChartCanvas.__proto__ || Object.getPrototypeOf(ChartCanvas)).call(this));\n    _this.getDataInfo = _this.getDataInfo.bind(_this);\n    _this.getCanvasContexts = _this.getCanvasContexts.bind(_this);\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\n    _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);\n    _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);\n    _this.handleZoom = _this.handleZoom.bind(_this);\n    _this.handlePinchZoom = _this.handlePinchZoom.bind(_this);\n    _this.handlePinchZoomEnd = _this.handlePinchZoomEnd.bind(_this);\n    _this.handlePan = _this.handlePan.bind(_this);\n    _this.handlePanEnd = _this.handlePanEnd.bind(_this);\n    _this.handleClick = _this.handleClick.bind(_this);\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\n    _this.handleDoubleClick = _this.handleDoubleClick.bind(_this);\n    _this.handleContextMenu = _this.handleContextMenu.bind(_this);\n    _this.handleDragStart = _this.handleDragStart.bind(_this);\n    _this.handleDrag = _this.handleDrag.bind(_this);\n    _this.handleDragEnd = _this.handleDragEnd.bind(_this);\n    _this.panHelper = _this.panHelper.bind(_this);\n    _this.pinchZoomHelper = _this.pinchZoomHelper.bind(_this);\n    _this.xAxisZoom = _this.xAxisZoom.bind(_this);\n    _this.yAxisZoom = _this.yAxisZoom.bind(_this);\n    _this.resetYDomain = _this.resetYDomain.bind(_this);\n    _this.calculateStateForDomain = _this.calculateStateForDomain.bind(_this);\n    _this.generateSubscriptionId = _this.generateSubscriptionId.bind(_this);\n    _this.draw = _this.draw.bind(_this);\n    _this.redraw = _this.redraw.bind(_this);\n    _this.getAllPanConditions = _this.getAllPanConditions.bind(_this);\n    _this.subscriptions = [];\n    _this.subscribe = _this.subscribe.bind(_this);\n    _this.unsubscribe = _this.unsubscribe.bind(_this);\n    _this.amIOnTop = _this.amIOnTop.bind(_this);\n    _this.saveEventCaptureNode = _this.saveEventCaptureNode.bind(_this);\n    _this.saveCanvasContainerNode = _this.saveCanvasContainerNode.bind(_this);\n    _this.setCursorClass = _this.setCursorClass.bind(_this);\n    _this.getMutableState = _this.getMutableState.bind(_this);\n    // this.canvasDrawCallbackList = [];\n    _this.interactiveState = [];\n    _this.panInProgress = false;\n    _this.state = {};\n    _this.mutableState = {};\n    _this.lastSubscriptionId = 0;\n    return _this;\n  }\n  _createClass(ChartCanvas, [{\n    key: \"saveEventCaptureNode\",\n    value: function saveEventCaptureNode(node) {\n      this.eventCaptureNode = node;\n    }\n  }, {\n    key: \"saveCanvasContainerNode\",\n    value: function saveCanvasContainerNode(node) {\n      this.canvasContainerNode = node;\n    }\n  }, {\n    key: \"getMutableState\",\n    value: function getMutableState() {\n      return this.mutableState;\n    }\n  }, {\n    key: \"getDataInfo\",\n    value: function getDataInfo() {\n      return _extends({}, this.state, {\n        fullData: this.fullData\n      });\n    }\n  }, {\n    key: \"getCanvasContexts\",\n    value: function getCanvasContexts() {\n      if (this.canvasContainerNode) {\n        return this.canvasContainerNode.getCanvasContexts();\n      }\n    }\n  }, {\n    key: \"generateSubscriptionId\",\n    value: function generateSubscriptionId() {\n      this.lastSubscriptionId++;\n      return this.lastSubscriptionId;\n    }\n  }, {\n    key: \"clearBothCanvas\",\n    value: function clearBothCanvas() {\n      var canvases = this.getCanvasContexts();\n      if (canvases && canvases.axes) {\n        clearCanvas([canvases.axes,\n        // canvases.hover,\n        canvases.mouseCoord], this.props.ratio);\n      }\n    }\n  }, {\n    key: \"clearMouseCanvas\",\n    value: function clearMouseCanvas() {\n      var canvases = this.getCanvasContexts();\n      if (canvases && canvases.mouseCoord) {\n        clearCanvas([canvases.mouseCoord], this.props.ratio);\n      }\n    }\n  }, {\n    key: \"clearThreeCanvas\",\n    value: function clearThreeCanvas() {\n      var canvases = this.getCanvasContexts();\n      if (canvases && canvases.axes) {\n        clearCanvas([canvases.axes,\n        // canvases.hover,\n        canvases.mouseCoord, canvases.bg], this.props.ratio);\n      }\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(id, rest) {\n      var _rest$getPanCondition = rest.getPanConditions,\n        getPanConditions = _rest$getPanCondition === undefined ? functor({\n          draggable: false,\n          panEnabled: true\n        }) : _rest$getPanCondition;\n      this.subscriptions = this.subscriptions.concat(_extends({\n        id: id\n      }, rest, {\n        getPanConditions: getPanConditions\n      }));\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(id) {\n      this.subscriptions = this.subscriptions.filter(function (each) {\n        return each.id !== id;\n      });\n    }\n  }, {\n    key: \"getAllPanConditions\",\n    value: function getAllPanConditions() {\n      return this.subscriptions.map(function (each) {\n        return each.getPanConditions();\n      });\n    }\n  }, {\n    key: \"setCursorClass\",\n    value: function setCursorClass(className) {\n      if (this.eventCaptureNode != null) {\n        this.eventCaptureNode.setCursorClass(className);\n      }\n    }\n  }, {\n    key: \"amIOnTop\",\n    value: function amIOnTop(id) {\n      var dragableComponents = this.subscriptions.filter(function (each) {\n        return each.getPanConditions().draggable;\n      });\n      return dragableComponents.length > 0 && last(dragableComponents).id === id;\n    }\n  }, {\n    key: \"handleContextMenu\",\n    value: function handleContextMenu(mouseXY, e) {\n      var _state = this.state,\n        xAccessor = _state.xAccessor,\n        chartConfig = _state.chartConfig,\n        plotData = _state.plotData,\n        xScale = _state.xScale;\n      var currentCharts = getCurrentCharts(chartConfig, mouseXY);\n      var currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n      this.triggerEvent(\"contextmenu\", {\n        mouseXY: mouseXY,\n        currentItem: currentItem,\n        currentCharts: currentCharts\n      }, e);\n    }\n  }, {\n    key: \"calculateStateForDomain\",\n    value: function calculateStateForDomain(newDomain) {\n      var _state2 = this.state,\n        xAccessor = _state2.xAccessor,\n        displayXAccessor = _state2.displayXAccessor,\n        initialXScale = _state2.xScale,\n        initialChartConfig = _state2.chartConfig,\n        initialPlotData = _state2.plotData;\n      var filterData = this.state.filterData;\n      var fullData = this.fullData;\n      var postCalculator = this.props.postCalculator;\n      var _filterData2 = filterData(fullData, newDomain, xAccessor, initialXScale, {\n          currentPlotData: initialPlotData,\n          currentDomain: initialXScale.domain()\n        }),\n        beforePlotData = _filterData2.plotData,\n        domain = _filterData2.domain;\n      var plotData = postCalculator(beforePlotData);\n      var updatedScale = initialXScale.copy().domain(domain);\n      var chartConfig = getChartConfigWithUpdatedYScales(initialChartConfig, {\n        plotData: plotData,\n        xAccessor: xAccessor,\n        displayXAccessor: displayXAccessor,\n        fullData: fullData\n      }, updatedScale.domain());\n      return {\n        xScale: updatedScale,\n        plotData: plotData,\n        chartConfig: chartConfig\n      };\n    }\n  }, {\n    key: \"pinchZoomHelper\",\n    value: function pinchZoomHelper(initialPinch, finalPinch) {\n      var initialPinchXScale = initialPinch.xScale;\n      var _state3 = this.state,\n        initialXScale = _state3.xScale,\n        initialChartConfig = _state3.chartConfig,\n        initialPlotData = _state3.plotData,\n        xAccessor = _state3.xAccessor,\n        displayXAccessor = _state3.displayXAccessor;\n      var filterData = this.state.filterData;\n      var fullData = this.fullData;\n      var postCalculator = this.props.postCalculator;\n      var _pinchCoordinates = pinchCoordinates(initialPinch),\n        iTL = _pinchCoordinates.topLeft,\n        iBR = _pinchCoordinates.bottomRight;\n      var _pinchCoordinates2 = pinchCoordinates(finalPinch),\n        fTL = _pinchCoordinates2.topLeft,\n        fBR = _pinchCoordinates2.bottomRight;\n      var e = initialPinchXScale.range()[1];\n      var xDash = Math.round(-(iBR[0] * fTL[0] - iTL[0] * fBR[0]) / (iTL[0] - iBR[0]));\n      var yDash = Math.round(e + ((e - iBR[0]) * (e - fTL[0]) - (e - iTL[0]) * (e - fBR[0])) / (e - iTL[0] - (e - iBR[0])));\n      var x = Math.round(-xDash * iTL[0] / (-xDash + fTL[0]));\n      var y = Math.round(e - (yDash - e) * (e - iTL[0]) / (yDash + (e - fTL[0])));\n      var newDomain = [x, y].map(initialPinchXScale.invert);\n      // var domainR = initial.right + right;\n\n      var _filterData3 = filterData(fullData, newDomain, xAccessor, initialPinchXScale, {\n          currentPlotData: initialPlotData,\n          currentDomain: initialXScale.domain()\n        }),\n        beforePlotData = _filterData3.plotData,\n        domain = _filterData3.domain;\n      var plotData = postCalculator(beforePlotData);\n      var updatedScale = initialXScale.copy().domain(domain);\n      var mouseXY = finalPinch.touch1Pos;\n      var chartConfig = getChartConfigWithUpdatedYScales(initialChartConfig, {\n        plotData: plotData,\n        xAccessor: xAccessor,\n        displayXAccessor: displayXAccessor,\n        fullData: fullData\n      }, updatedScale.domain());\n      var currentItem = getCurrentItem(updatedScale, xAccessor, mouseXY, plotData);\n      return {\n        chartConfig: chartConfig,\n        xScale: updatedScale,\n        plotData: plotData,\n        mouseXY: mouseXY,\n        currentItem: currentItem\n      };\n    }\n  }, {\n    key: \"cancelDrag\",\n    value: function cancelDrag() {\n      this.eventCaptureNode.cancelDrag();\n      this.triggerEvent(\"dragcancel\");\n    }\n  }, {\n    key: \"handlePinchZoom\",\n    value: function handlePinchZoom(initialPinch, finalPinch, e) {\n      var _this2 = this;\n      if (!this.waitingForPinchZoomAnimationFrame) {\n        this.waitingForPinchZoomAnimationFrame = true;\n        var state = this.pinchZoomHelper(initialPinch, finalPinch);\n        this.triggerEvent(\"pinchzoom\", state, e);\n        this.finalPinch = finalPinch;\n        requestAnimationFrame(function () {\n          _this2.clearBothCanvas();\n          _this2.draw({\n            trigger: \"pinchzoom\"\n          });\n          _this2.waitingForPinchZoomAnimationFrame = false;\n        });\n      }\n    }\n  }, {\n    key: \"handlePinchZoomEnd\",\n    value: function handlePinchZoomEnd(initialPinch, e) {\n      var xAccessor = this.state.xAccessor;\n      if (this.finalPinch) {\n        var state = this.pinchZoomHelper(initialPinch, this.finalPinch);\n        var xScale = state.xScale;\n        this.triggerEvent(\"pinchzoom\", state, e);\n        this.finalPinch = null;\n        this.clearThreeCanvas();\n        var fullData = this.fullData;\n        var firstItem = head(fullData);\n        var start = head(xScale.domain());\n        var end = xAccessor(firstItem);\n        var onLoadMore = this.props.onLoadMore;\n        this.setState(state, function () {\n          if (start < end) {\n            onLoadMore(start, end);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"handleZoom\",\n    value: function handleZoom(zoomDirection, mouseXY, e) {\n      if (this.panInProgress) return;\n      // console.log(\"zoomDirection \", zoomDirection, \" mouseXY \", mouseXY);\n      var _state4 = this.state,\n        xAccessor = _state4.xAccessor,\n        initialXScale = _state4.xScale,\n        initialPlotData = _state4.plotData;\n      var _props = this.props,\n        zoomMultiplier = _props.zoomMultiplier,\n        zoomAnchor = _props.zoomAnchor;\n      var fullData = this.fullData;\n      var item = zoomAnchor({\n        xScale: initialXScale,\n        xAccessor: xAccessor,\n        mouseXY: mouseXY,\n        plotData: initialPlotData,\n        fullData: fullData\n      });\n      var cx = initialXScale(item);\n      var c = zoomDirection > 0 ? 1 * zoomMultiplier : 1 / zoomMultiplier;\n      var newDomain = initialXScale.range().map(function (x) {\n        return cx + (x - cx) * c;\n      }).map(initialXScale.invert);\n      var _calculateStateForDom = this.calculateStateForDomain(newDomain),\n        xScale = _calculateStateForDom.xScale,\n        plotData = _calculateStateForDom.plotData,\n        chartConfig = _calculateStateForDom.chartConfig;\n      var currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n      var currentCharts = getCurrentCharts(chartConfig, mouseXY);\n      this.clearThreeCanvas();\n      var firstItem = head(fullData);\n      var start = head(xScale.domain());\n      var end = xAccessor(firstItem);\n      var onLoadMore = this.props.onLoadMore;\n      this.mutableState = {\n        mouseXY: mouseXY,\n        currentItem: currentItem,\n        currentCharts: currentCharts\n      };\n      this.triggerEvent(\"zoom\", {\n        xScale: xScale,\n        plotData: plotData,\n        chartConfig: chartConfig,\n        mouseXY: mouseXY,\n        currentCharts: currentCharts,\n        currentItem: currentItem,\n        show: true\n      }, e);\n      this.setState({\n        xScale: xScale,\n        plotData: plotData,\n        chartConfig: chartConfig\n      }, function () {\n        if (start < end) {\n          onLoadMore(start, end);\n        }\n      });\n    }\n  }, {\n    key: \"xAxisZoom\",\n    value: function xAxisZoom(newDomain) {\n      var _calculateStateForDom2 = this.calculateStateForDomain(newDomain),\n        xScale = _calculateStateForDom2.xScale,\n        plotData = _calculateStateForDom2.plotData,\n        chartConfig = _calculateStateForDom2.chartConfig;\n      this.clearThreeCanvas();\n      var xAccessor = this.state.xAccessor;\n      var fullData = this.fullData;\n      var firstItem = head(fullData);\n      var start = head(xScale.domain());\n      var end = xAccessor(firstItem);\n      var onLoadMore = this.props.onLoadMore;\n      this.setState({\n        xScale: xScale,\n        plotData: plotData,\n        chartConfig: chartConfig\n      }, function () {\n        if (start < end) onLoadMore(start, end);\n      });\n    }\n  }, {\n    key: \"yAxisZoom\",\n    value: function yAxisZoom(chartId, newDomain) {\n      this.clearThreeCanvas();\n      var initialChartConfig = this.state.chartConfig;\n      var chartConfig = initialChartConfig.map(function (each) {\n        if (each.id === chartId) {\n          var yScale = each.yScale;\n          return _extends({}, each, {\n            yScale: yScale.copy().domain(newDomain),\n            yPanEnabled: true\n          });\n        } else {\n          return each;\n        }\n      });\n      this.setState({\n        chartConfig: chartConfig\n      });\n    }\n  }, {\n    key: \"triggerEvent\",\n    value: function triggerEvent(type, props, e) {\n      var _this3 = this;\n\n      // console.log(\"triggering ->\", type);\n\n      this.subscriptions.forEach(function (each) {\n        var state = _extends({}, _this3.state, {\n          fullData: _this3.fullData,\n          subscriptions: _this3.subscriptions\n        });\n        each.listener(type, props, state, e);\n      });\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(props) {\n      this.subscriptions.forEach(function (each) {\n        if (isDefined(each.draw)) each.draw(props);\n      });\n    }\n  }, {\n    key: \"redraw\",\n    value: function redraw() {\n      this.clearThreeCanvas();\n      this.draw({\n        force: true\n      });\n    }\n  }, {\n    key: \"panHelper\",\n    value: function panHelper(mouseXY, initialXScale, _ref2, chartsToPan) {\n      var dx = _ref2.dx,\n        dy = _ref2.dy;\n      var _state5 = this.state,\n        xAccessor = _state5.xAccessor,\n        displayXAccessor = _state5.displayXAccessor,\n        initialChartConfig = _state5.chartConfig;\n      var filterData = this.state.filterData;\n      var fullData = this.fullData;\n      var postCalculator = this.props.postCalculator;\n\n      // console.log(dx, dy);\n\n      if (isNotDefined(initialXScale.invert)) throw new Error(\"xScale provided does not have an invert() method.\" + \"You are likely using an ordinal scale. This scale does not support zoom, pan\");\n      var newDomain = initialXScale.range().map(function (x) {\n        return x - dx;\n      }).map(initialXScale.invert);\n      var _filterData4 = filterData(fullData, newDomain, xAccessor, initialXScale, {\n          currentPlotData: this.hackyWayToStopPanBeyondBounds__plotData,\n          currentDomain: this.hackyWayToStopPanBeyondBounds__domain\n        }),\n        beforePlotData = _filterData4.plotData,\n        domain = _filterData4.domain;\n      var updatedScale = initialXScale.copy().domain(domain);\n      var plotData = postCalculator(beforePlotData);\n      // console.log(last(plotData));\n\n      var currentItem = getCurrentItem(updatedScale, xAccessor, mouseXY, plotData);\n      var chartConfig = getChartConfigWithUpdatedYScales(initialChartConfig, {\n        plotData: plotData,\n        xAccessor: xAccessor,\n        displayXAccessor: displayXAccessor,\n        fullData: fullData\n      }, updatedScale.domain(), dy, chartsToPan);\n      var currentCharts = getCurrentCharts(chartConfig, mouseXY);\n\n      // console.log(initialXScale.domain(), newDomain, updatedScale.domain());\n      return {\n        xScale: updatedScale,\n        plotData: plotData,\n        chartConfig: chartConfig,\n        mouseXY: mouseXY,\n        currentCharts: currentCharts,\n        currentItem: currentItem\n      };\n    }\n  }, {\n    key: \"handlePan\",\n    value: function handlePan(mousePosition, panStartXScale, dxdy, chartsToPan, e) {\n      var _this4 = this;\n      if (!this.waitingForPanAnimationFrame) {\n        this.waitingForPanAnimationFrame = true;\n        this.hackyWayToStopPanBeyondBounds__plotData = this.hackyWayToStopPanBeyondBounds__plotData || this.state.plotData;\n        this.hackyWayToStopPanBeyondBounds__domain = this.hackyWayToStopPanBeyondBounds__domain || this.state.xScale.domain();\n        var state = this.panHelper(mousePosition, panStartXScale, dxdy, chartsToPan);\n        this.hackyWayToStopPanBeyondBounds__plotData = state.plotData;\n        this.hackyWayToStopPanBeyondBounds__domain = state.xScale.domain();\n        this.panInProgress = true;\n        // console.log(panStartXScale.domain(), state.xScale.domain());\n\n        this.triggerEvent(\"pan\", state, e);\n        this.mutableState = {\n          mouseXY: state.mouseXY,\n          currentItem: state.currentItem,\n          currentCharts: state.currentCharts\n        };\n        requestAnimationFrame(function () {\n          _this4.waitingForPanAnimationFrame = false;\n          _this4.clearBothCanvas();\n          _this4.draw({\n            trigger: \"pan\"\n          });\n        });\n      }\n    }\n  }, {\n    key: \"handlePanEnd\",\n    value: function handlePanEnd(mousePosition, panStartXScale, dxdy, chartsToPan, e) {\n      var _this5 = this;\n      var state = this.panHelper(mousePosition, panStartXScale, dxdy, chartsToPan);\n      // console.log(this.canvasDrawCallbackList.map(d => d.type));\n      this.hackyWayToStopPanBeyondBounds__plotData = null;\n      this.hackyWayToStopPanBeyondBounds__domain = null;\n      this.panInProgress = false;\n\n      // console.log(\"PANEND\", panEnd++);\n      var xScale = state.xScale,\n        plotData = state.plotData,\n        chartConfig = state.chartConfig;\n      this.triggerEvent(\"panend\", state, e);\n      requestAnimationFrame(function () {\n        var xAccessor = _this5.state.xAccessor;\n        var fullData = _this5.fullData;\n        var firstItem = head(fullData);\n        var start = head(xScale.domain());\n        var end = xAccessor(firstItem);\n        // console.log(start, end, start < end ? \"Load more\" : \"I have it\");\n\n        var onLoadMore = _this5.props.onLoadMore;\n        _this5.clearThreeCanvas();\n        _this5.setState({\n          xScale: xScale,\n          plotData: plotData,\n          chartConfig: chartConfig\n        }, function () {\n          if (start < end) onLoadMore(start, end);\n        });\n      });\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(mousePosition, currentCharts, e) {\n      this.triggerEvent(\"mousedown\", this.mutableState, e);\n    }\n  }, {\n    key: \"handleMouseEnter\",\n    value: function handleMouseEnter(e) {\n      this.triggerEvent(\"mouseenter\", {\n        show: true\n      }, e);\n    }\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(mouseXY, inputType, e) {\n      var _this6 = this;\n      if (!this.waitingForMouseMoveAnimationFrame) {\n        this.waitingForMouseMoveAnimationFrame = true;\n        var _state6 = this.state,\n          chartConfig = _state6.chartConfig,\n          plotData = _state6.plotData,\n          xScale = _state6.xScale,\n          xAccessor = _state6.xAccessor;\n        var currentCharts = getCurrentCharts(chartConfig, mouseXY);\n        var currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n        this.triggerEvent(\"mousemove\", {\n          show: true,\n          mouseXY: mouseXY,\n          // prevMouseXY is used in interactive components\n          prevMouseXY: this.prevMouseXY,\n          currentItem: currentItem,\n          currentCharts: currentCharts\n        }, e);\n        this.prevMouseXY = mouseXY;\n        this.mutableState = {\n          mouseXY: mouseXY,\n          currentItem: currentItem,\n          currentCharts: currentCharts\n        };\n        requestAnimationFrame(function () {\n          _this6.clearMouseCanvas();\n          _this6.draw({\n            trigger: \"mousemove\"\n          });\n          _this6.waitingForMouseMoveAnimationFrame = false;\n        });\n      }\n    }\n  }, {\n    key: \"handleMouseLeave\",\n    value: function handleMouseLeave(e) {\n      this.triggerEvent(\"mouseleave\", {\n        show: false\n      }, e);\n      this.clearMouseCanvas();\n      this.draw({\n        trigger: \"mouseleave\"\n      });\n    }\n  }, {\n    key: \"handleDragStart\",\n    value: function handleDragStart(_ref3, e) {\n      var startPos = _ref3.startPos;\n      this.triggerEvent(\"dragstart\", {\n        startPos: startPos\n      }, e);\n    }\n  }, {\n    key: \"handleDrag\",\n    value: function handleDrag(_ref4, e) {\n      var _this7 = this;\n      var startPos = _ref4.startPos,\n        mouseXY = _ref4.mouseXY;\n      var _state7 = this.state,\n        chartConfig = _state7.chartConfig,\n        plotData = _state7.plotData,\n        xScale = _state7.xScale,\n        xAccessor = _state7.xAccessor;\n      var currentCharts = getCurrentCharts(chartConfig, mouseXY);\n      var currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n      this.triggerEvent(\"drag\", {\n        startPos: startPos,\n        mouseXY: mouseXY,\n        currentItem: currentItem,\n        currentCharts: currentCharts\n      }, e);\n      this.mutableState = {\n        mouseXY: mouseXY,\n        currentItem: currentItem,\n        currentCharts: currentCharts\n      };\n      requestAnimationFrame(function () {\n        _this7.clearMouseCanvas();\n        _this7.draw({\n          trigger: \"drag\"\n        });\n      });\n    }\n  }, {\n    key: \"handleDragEnd\",\n    value: function handleDragEnd(_ref5, e) {\n      var _this8 = this;\n      var mouseXY = _ref5.mouseXY;\n      this.triggerEvent(\"dragend\", {\n        mouseXY: mouseXY\n      }, e);\n      requestAnimationFrame(function () {\n        _this8.clearMouseCanvas();\n        _this8.draw({\n          trigger: \"dragend\"\n        });\n      });\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(mousePosition, e) {\n      var _this9 = this;\n      this.triggerEvent(\"click\", this.mutableState, e);\n      requestAnimationFrame(function () {\n        _this9.clearMouseCanvas();\n        _this9.draw({\n          trigger: \"click\"\n        });\n      });\n    }\n  }, {\n    key: \"handleDoubleClick\",\n    value: function handleDoubleClick(mousePosition, e) {\n      this.triggerEvent(\"dblclick\", {}, e);\n    }\n  }, {\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      var dimensions = getDimensions(this.props);\n      return {\n        fullData: this.fullData,\n        plotData: this.state.plotData,\n        width: dimensions.width,\n        height: dimensions.height,\n        chartConfig: this.state.chartConfig,\n        xScale: this.state.xScale,\n        xAccessor: this.state.xAccessor,\n        displayXAccessor: this.state.displayXAccessor,\n        chartCanvasType: this.props.type,\n        margin: this.props.margin,\n        ratio: this.props.ratio,\n        xAxisZoom: this.xAxisZoom,\n        yAxisZoom: this.yAxisZoom,\n        getCanvasContexts: this.getCanvasContexts,\n        redraw: this.redraw,\n        subscribe: this.subscribe,\n        unsubscribe: this.unsubscribe,\n        generateSubscriptionId: this.generateSubscriptionId,\n        getMutableState: this.getMutableState,\n        amIOnTop: this.amIOnTop,\n        setCursorClass: this.setCursorClass\n      };\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _resetChart = resetChart(this.props, true),\n        fullData = _resetChart.fullData,\n        state = _objectWithoutProperties(_resetChart, [\"fullData\"]);\n      this.setState(state);\n      this.fullData = fullData;\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var reset = shouldResetChart(this.props, nextProps);\n      var interaction = isInteractionEnabled(this.state.xScale, this.state.xAccessor, this.state.plotData);\n      var initialChartConfig = this.state.chartConfig;\n      var newState = void 0;\n      if (!interaction || reset || !shallowEqual(this.props.xExtents, nextProps.xExtents)) {\n        if (process.env.NODE_ENV !== \"production\") {\n          if (!interaction) log(\"RESET CHART, changes to a non interactive chart\");else if (reset) log(\"RESET CHART, one or more of these props changed\", CANDIDATES_FOR_RESET);else log(\"xExtents changed\");\n        }\n        // do reset\n        newState = resetChart(nextProps);\n        this.mutableState = {};\n      } else {\n        var _state$xScale$domain = this.state.xScale.domain(),\n          _state$xScale$domain2 = _slicedToArray(_state$xScale$domain, 2),\n          start = _state$xScale$domain2[0],\n          end = _state$xScale$domain2[1];\n        var prevLastItem = last(this.fullData);\n        var calculatedState = calculateFullData(nextProps);\n        var xAccessor = calculatedState.xAccessor;\n        var lastItemWasVisible = xAccessor(prevLastItem) <= end && xAccessor(prevLastItem) >= start;\n        if (process.env.NODE_ENV !== \"production\") {\n          if (this.props.data !== nextProps.data) log(\"data is changed but seriesName did not, change the seriesName if you wish to reset the chart and lastItemWasVisible = \", lastItemWasVisible);else log(\"Trivial change, may be width/height or type changed, but that does not matter\");\n        }\n        newState = updateChart(calculatedState, this.state.xScale, nextProps, lastItemWasVisible, initialChartConfig);\n      }\n      var _newState = newState,\n        fullData = _newState.fullData,\n        state = _objectWithoutProperties(_newState, [\"fullData\"]);\n      if (this.panInProgress) {\n        if (process.env.NODE_ENV !== \"production\") {\n          log(\"Pan is in progress\");\n        }\n      } else {\n        /*\n        if (!reset) {\n        \tstate.chartConfig\n        \t\t.forEach((each) => {\n        \t\t\t// const sourceChartConfig = initialChartConfig.filter(d => d.id === each.id);\n        \t\t\tconst prevChartConfig = find(initialChartConfig, d => d.id === each.id);\n        \t\t\tif (isDefined(prevChartConfig) && prevChartConfig.yPanEnabled) {\n        \t\t\t\teach.yScale.domain(prevChartConfig.yScale.domain());\n        \t\t\t\teach.yPanEnabled = prevChartConfig.yPanEnabled;\n        \t\t\t}\n        \t\t});\n        }\n        */\n        this.clearThreeCanvas();\n        this.setState(state);\n      }\n      this.fullData = fullData;\n    }\n    /*\n    componentDidUpdate(prevProps, prevState) {\n    \tconsole.error(this.state.chartConfig, this.state.chartConfig.map(d => d.yScale.domain()));\n    }\n    */\n  }, {\n    key: \"resetYDomain\",\n    value: function resetYDomain(chartId) {\n      var chartConfig = this.state.chartConfig;\n      var changed = false;\n      var newChartConfig = chartConfig.map(function (each) {\n        if ((isNotDefined(chartId) || each.id === chartId) && !shallowEqual(each.yScale.domain(), each.realYDomain)) {\n          changed = true;\n          return _extends({}, each, {\n            yScale: each.yScale.domain(each.realYDomain),\n            yPanEnabled: false\n          });\n        }\n        return each;\n      });\n      if (changed) {\n        this.clearThreeCanvas();\n        this.setState({\n          chartConfig: newChartConfig\n        });\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      // console.log(\"Happneing.....\", !this.panInProgress)\n      return !this.panInProgress;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props2 = this.props,\n        type = _props2.type,\n        height = _props2.height,\n        width = _props2.width,\n        margin = _props2.margin,\n        className = _props2.className,\n        zIndex = _props2.zIndex,\n        defaultFocus = _props2.defaultFocus,\n        ratio = _props2.ratio,\n        mouseMoveEvent = _props2.mouseMoveEvent,\n        panEvent = _props2.panEvent,\n        zoomEvent = _props2.zoomEvent;\n      var _props3 = this.props,\n        useCrossHairStyleCursor = _props3.useCrossHairStyleCursor,\n        onSelect = _props3.onSelect;\n      var _state8 = this.state,\n        plotData = _state8.plotData,\n        xScale = _state8.xScale,\n        xAccessor = _state8.xAccessor,\n        chartConfig = _state8.chartConfig;\n      var dimensions = getDimensions(this.props);\n      var interaction = isInteractionEnabled(xScale, xAccessor, plotData);\n      var cursorStyle = useCrossHairStyleCursor && interaction;\n      var cursor = getCursorStyle();\n      return React.createElement(\"div\", {\n        style: {\n          position: \"relative\",\n          width: width,\n          height: height\n        },\n        className: className,\n        onClick: onSelect\n      }, React.createElement(CanvasContainer, {\n        ref: this.saveCanvasContainerNode,\n        type: type,\n        ratio: ratio,\n        width: width,\n        height: height,\n        zIndex: zIndex\n      }), React.createElement(\"svg\", {\n        className: className,\n        width: width,\n        height: height,\n        style: {\n          position: \"absolute\",\n          zIndex: zIndex + 5\n        }\n      }, cursor, React.createElement(\"defs\", null, React.createElement(\"clipPath\", {\n        id: \"chart-area-clip\"\n      }, React.createElement(\"rect\", {\n        x: \"0\",\n        y: \"0\",\n        width: dimensions.width,\n        height: dimensions.height\n      })), chartConfig.map(function (each, idx) {\n        return React.createElement(\"clipPath\", {\n          key: idx,\n          id: \"chart-area-clip-\" + each.id\n        }, React.createElement(\"rect\", {\n          x: \"0\",\n          y: \"0\",\n          width: each.width,\n          height: each.height\n        }));\n      })), React.createElement(\"g\", {\n        transform: \"translate(\" + (margin.left + 0.5) + \", \" + (margin.top + 0.5) + \")\"\n      }, React.createElement(EventCapture, {\n        ref: this.saveEventCaptureNode,\n        useCrossHairStyleCursor: cursorStyle,\n        mouseMove: mouseMoveEvent && interaction,\n        zoom: zoomEvent && interaction,\n        pan: panEvent && interaction,\n        width: dimensions.width,\n        height: dimensions.height,\n        chartConfig: chartConfig,\n        xScale: xScale,\n        xAccessor: xAccessor,\n        focus: defaultFocus,\n        disableInteraction: this.props.disableInteraction,\n        getAllPanConditions: this.getAllPanConditions,\n        onContextMenu: this.handleContextMenu,\n        onClick: this.handleClick,\n        onDoubleClick: this.handleDoubleClick,\n        onMouseDown: this.handleMouseDown,\n        onMouseMove: this.handleMouseMove,\n        onMouseEnter: this.handleMouseEnter,\n        onMouseLeave: this.handleMouseLeave,\n        onDragStart: this.handleDragStart,\n        onDrag: this.handleDrag,\n        onDragComplete: this.handleDragEnd,\n        onZoom: this.handleZoom,\n        onPinchZoom: this.handlePinchZoom,\n        onPinchZoomEnd: this.handlePinchZoomEnd,\n        onPan: this.handlePan,\n        onPanEnd: this.handlePanEnd\n      }), React.createElement(\"g\", {\n        className: \"react-stockcharts-avoid-interaction\"\n      }, this.props.children))));\n    }\n  }]);\n  return ChartCanvas;\n}(Component);\nfunction isInteractionEnabled(xScale, xAccessor, data) {\n  var interaction = !isNaN(xScale(xAccessor(head(data)))) && isDefined(xScale.invert);\n  return interaction;\n}\nChartCanvas.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  margin: PropTypes.object,\n  ratio: PropTypes.number.isRequired,\n  // interval: PropTypes.oneOf([\"D\", \"W\", \"M\"]), // ,\"m1\", \"m5\", \"m15\", \"W\", \"M\"\n  type: PropTypes.oneOf([\"svg\", \"hybrid\"]),\n  pointsPerPxThreshold: PropTypes.number,\n  minPointsPerPxThreshold: PropTypes.number,\n  data: PropTypes.array.isRequired,\n  // initialDisplay: PropTypes.number,\n  xAccessor: PropTypes.func,\n  xExtents: PropTypes.oneOfType([PropTypes.array, PropTypes.func]),\n  zoomAnchor: PropTypes.func,\n  className: PropTypes.string,\n  seriesName: PropTypes.string.isRequired,\n  zIndex: PropTypes.number,\n  children: PropTypes.node.isRequired,\n  xScale: PropTypes.func.isRequired,\n  postCalculator: PropTypes.func,\n  flipXScale: PropTypes.bool,\n  useCrossHairStyleCursor: PropTypes.bool,\n  padding: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    left: PropTypes.number,\n    right: PropTypes.number\n  })]),\n  defaultFocus: PropTypes.bool,\n  zoomMultiplier: PropTypes.number,\n  onLoadMore: PropTypes.func,\n  displayXAccessor: function displayXAccessor(props, propName /* , componentName */) {\n    if (isNotDefined(props[propName])) {\n      console.warn(\"`displayXAccessor` is not defined,\" + \" will use the value from `xAccessor` as `displayXAccessor`.\" + \" This might be ok if you do not use a discontinuous scale\" + \" but if you do, provide a `displayXAccessor` prop to `ChartCanvas`\");\n    } else if (typeof props[propName] !== \"function\") {\n      return new Error(\"displayXAccessor has to be a function\");\n    }\n  },\n  mouseMoveEvent: PropTypes.bool,\n  panEvent: PropTypes.bool,\n  clamp: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]),\n  zoomEvent: PropTypes.bool,\n  onSelect: PropTypes.func,\n  maintainPointsPerPixelOnResize: PropTypes.bool,\n  disableInteraction: PropTypes.bool\n};\nChartCanvas.defaultProps = {\n  margin: {\n    top: 20,\n    right: 30,\n    bottom: 30,\n    left: 80\n  },\n  type: \"hybrid\",\n  pointsPerPxThreshold: 2,\n  minPointsPerPxThreshold: 1 / 100,\n  className: \"react-stockchart\",\n  zIndex: 1,\n  xExtents: [min, max],\n  postCalculator: identity,\n  padding: 0,\n  xAccessor: identity,\n  flipXScale: false,\n  useCrossHairStyleCursor: true,\n  defaultFocus: true,\n  onLoadMore: noop,\n  onSelect: noop,\n  mouseMoveEvent: true,\n  panEvent: true,\n  zoomEvent: true,\n  zoomMultiplier: 1.1,\n  clamp: false,\n  zoomAnchor: mouseBasedZoomAnchor,\n  maintainPointsPerPixelOnResize: true,\n  // ratio: 2,\n  disableInteraction: false\n};\nChartCanvas.childContextTypes = {\n  plotData: PropTypes.array,\n  fullData: PropTypes.array,\n  chartConfig: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    origin: PropTypes.arrayOf(PropTypes.number).isRequired,\n    padding: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n      top: PropTypes.number,\n      bottom: PropTypes.number\n    })]),\n    yExtents: PropTypes.arrayOf(PropTypes.func),\n    yExtentsProvider: PropTypes.func,\n    yScale: PropTypes.func.isRequired,\n    mouseCoordinates: PropTypes.shape({\n      at: PropTypes.string,\n      format: PropTypes.func\n    }),\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired\n  })).isRequired,\n  xScale: PropTypes.func.isRequired,\n  xAccessor: PropTypes.func.isRequired,\n  displayXAccessor: PropTypes.func.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  chartCanvasType: PropTypes.oneOf([\"svg\", \"hybrid\"]).isRequired,\n  margin: PropTypes.object.isRequired,\n  ratio: PropTypes.number.isRequired,\n  getCanvasContexts: PropTypes.func,\n  xAxisZoom: PropTypes.func,\n  yAxisZoom: PropTypes.func,\n  amIOnTop: PropTypes.func,\n  redraw: PropTypes.func,\n  subscribe: PropTypes.func,\n  unsubscribe: PropTypes.func,\n  setCursorClass: PropTypes.func,\n  generateSubscriptionId: PropTypes.func,\n  getMutableState: PropTypes.func\n};\nChartCanvas.ohlcv = function (d) {\n  return {\n    date: d.date,\n    open: d.open,\n    high: d.high,\n    low: d.low,\n    close: d.close,\n    volume: d.volume\n  };\n};\nexport default ChartCanvas;","map":{"version":3,"mappings":"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","names":["React","Component","PropTypes","extent","d3Extent","min","max","head","last","isDefined","isNotDefined","clearCanvas","shallowEqual","identity","noop","functor","getLogger","mouseBasedZoomAnchor","lastVisibleItemBasedZoomAnchor","rightDomainBasedZoomAnchor","getNewChartConfig","getChartConfigWithUpdatedYScales","getCurrentCharts","getCurrentItem","EventCapture","CanvasContainer","evaluator","log","CANDIDATES_FOR_RESET","shouldResetChart","thisProps","nextProps","every","result","key","getCursorStyle","tooltipStyle","type","getDimensions","props","height","margin","top","bottom","width","left","right","getXScaleDirection","flipXScale","calculateFullData","fullData","data","plotFull","xScale","clamp","pointsPerPxThreshold","xAccessor","displayXAccessor","minPointsPerPxThreshold","useWholeData","filterData","copy","resetChart","firstCalculation","process","env","NODE_ENV","state","calculateState","initialPlotData","plotData","postCalculator","children","dimensions","chartConfig","domain","updateChart","newState","initialXScale","lastItemWasVisible","initialChartConfig","lastItem","_initialXScale$domain2","start","end","padding","maintainPointsPerPixelOnResize","direction","updatedXScale","setXRange","range","_initialXScale$range2","rangeStart","rangeEnd","_updatedXScale$range2","newRangeStart","newRangeEnd","newDomainExtent","newStart","lastItemX","response","fallbackStart","fallbackEnd","dx","map","x","invert","_initialXScale$range$2","newEnd","inputXAccesor","xExtentsProp","xExtents","i","length","prev","curr","Error","d","each","rangeRoundPoints","isNaN","pinchCoordinates","pinch","touch1Pos","touch2Pos","topLeft","Math","bottomRight","ChartCanvas","_classCallCheck","_this","getDataInfo","bind","getCanvasContexts","handleMouseMove","handleMouseEnter","handleMouseLeave","handleZoom","handlePinchZoom","handlePinchZoomEnd","handlePan","handlePanEnd","handleClick","handleMouseDown","handleDoubleClick","handleContextMenu","handleDragStart","handleDrag","handleDragEnd","panHelper","pinchZoomHelper","xAxisZoom","yAxisZoom","resetYDomain","calculateStateForDomain","generateSubscriptionId","draw","redraw","getAllPanConditions","subscriptions","subscribe","unsubscribe","amIOnTop","saveEventCaptureNode","saveCanvasContainerNode","setCursorClass","getMutableState","interactiveState","panInProgress","mutableState","lastSubscriptionId","node","eventCaptureNode","canvasContainerNode","canvases","axes","mouseCoord","ratio","bg","id","rest","getPanConditions","draggable","panEnabled","concat","filter","className","dragableComponents","mouseXY","e","currentCharts","currentItem","triggerEvent","newDomain","currentPlotData","currentDomain","beforePlotData","updatedScale","initialPinch","finalPinch","initialPinchXScale","iTL","iBR","fTL","fBR","xDash","round","yDash","y","cancelDrag","waitingForPinchZoomAnimationFrame","requestAnimationFrame","_this2","clearBothCanvas","trigger","clearThreeCanvas","firstItem","onLoadMore","setState","zoomDirection","zoomMultiplier","zoomAnchor","item","cx","c","show","chartId","yScale","yPanEnabled","forEach","_this3","listener","force","chartsToPan","dy","hackyWayToStopPanBeyondBounds__plotData","hackyWayToStopPanBeyondBounds__domain","mousePosition","panStartXScale","dxdy","waitingForPanAnimationFrame","_this4","_this5","inputType","waitingForMouseMoveAnimationFrame","prevMouseXY","_this6","clearMouseCanvas","startPos","_this7","_this8","_this9","chartCanvasType","reset","interaction","isInteractionEnabled","_state$xScale$domain2","prevLastItem","calculatedState","changed","newChartConfig","realYDomain","zIndex","defaultFocus","mouseMoveEvent","panEvent","zoomEvent","useCrossHairStyleCursor","onSelect","cursorStyle","cursor","style","position","onClick","ref","idx","transform","mouseMove","zoom","pan","focus","disableInteraction","onContextMenu","onDoubleClick","onMouseDown","onMouseMove","onMouseEnter","onMouseLeave","onDragStart","onDrag","onDragComplete","onZoom","onPinchZoom","onPinchZoomEnd","onPan","onPanEnd","propTypes","number","isRequired","object","oneOf","array","func","oneOfType","string","seriesName","bool","shape","propName","console","warn","defaultProps","childContextTypes","arrayOf","origin","yExtents","yExtentsProvider","mouseCoordinates","at","format","ohlcv","date","open","high","low","close","volume"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\lib\\ChartCanvas.js"],"sourcesContent":["\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { extent as d3Extent, min, max } from \"d3-array\";\n\nimport {\n\thead,\n\tlast,\n\tisDefined,\n\tisNotDefined,\n\tclearCanvas,\n\tshallowEqual,\n\tidentity,\n\tnoop,\n\tfunctor,\n\tgetLogger,\n} from \"./utils\";\n\n/* eslint-disable no-unused-vars */\nimport {\n\tmouseBasedZoomAnchor,\n\tlastVisibleItemBasedZoomAnchor,\n\trightDomainBasedZoomAnchor,\n} from \"./utils/zoomBehavior\";\n/* eslint-enable no-unused-vars */\n\nimport { getNewChartConfig, getChartConfigWithUpdatedYScales, getCurrentCharts, getCurrentItem } from \"./utils/ChartDataUtil\";\n\nimport EventCapture from \"./EventCapture\";\n\nimport CanvasContainer from \"./CanvasContainer\";\nimport evaluator from \"./scale/evaluator\";\n\nconst log = getLogger(\"ChartCanvas\");\n\nconst CANDIDATES_FOR_RESET = [\n\t\"seriesName\",\n\t/* \"data\",*/\n\t/* \"xAccessor\",*/\n];\n\nfunction shouldResetChart(thisProps, nextProps) {\n\treturn !CANDIDATES_FOR_RESET.every(key => {\n\t\tconst result = shallowEqual(thisProps[key], nextProps[key]);\n\t\t// console.log(key, result);\n\t\treturn result;\n\t});\n}\n\nfunction getCursorStyle() {\n\tconst tooltipStyle = `\n\t.react-stockcharts-grabbing-cursor {\n\t\tpointer-events: all;\n\t\tcursor: -moz-grabbing;\n\t\tcursor: -webkit-grabbing;\n\t\tcursor: grabbing;\n\t}\n\t.react-stockcharts-crosshair-cursor {\n\t\tpointer-events: all;\n\t\tcursor: crosshair;\n\t}\n\t.react-stockcharts-tooltip-hover {\n\t\tpointer-events: all;\n\t\tcursor: pointer;\n\t}\n\t.react-stockcharts-avoid-interaction {\n\t\tpointer-events: none;\n\t}\n\t.react-stockcharts-enable-interaction {\n\t\tpointer-events: all;\n\t}\n\t.react-stockcharts-tooltip {\n\t\tpointer-events: all;\n\t\tcursor: pointer;\n\t}\n\t.react-stockcharts-default-cursor {\n\t\tcursor: default;\n\t}\n\t.react-stockcharts-move-cursor {\n\t\tcursor: move;\n\t}\n\t.react-stockcharts-pointer-cursor {\n\t\tcursor: pointer;\n\t}\n\t.react-stockcharts-ns-resize-cursor {\n\t\tcursor: ns-resize;\n\t}\n\t.react-stockcharts-ew-resize-cursor {\n\t\tcursor: ew-resize;\n\t}`;\n\treturn (<style type=\"text/css\">{tooltipStyle}</style>);\n}\n\nfunction getDimensions(props) {\n\treturn {\n\t\theight: props.height - props.margin.top - props.margin.bottom,\n\t\twidth: props.width - props.margin.left - props.margin.right,\n\t};\n}\n\nfunction getXScaleDirection(flipXScale) {\n\treturn flipXScale ? -1 : 1;\n}\n\nfunction calculateFullData(props) {\n\tconst { data: fullData, plotFull, xScale, clamp, pointsPerPxThreshold, flipXScale } = props;\n\tconst { xAccessor, displayXAccessor, minPointsPerPxThreshold } = props;\n\n\tconst useWholeData = isDefined(plotFull)\n\t\t? plotFull\n\t\t: xAccessor === identity;\n\n\tconst { filterData } = evaluator({\n\t\txScale,\n\t\tuseWholeData,\n\t\tclamp,\n\t\tpointsPerPxThreshold,\n\t\tminPointsPerPxThreshold,\n\t\tflipXScale,\n\t});\n\n\treturn {\n\t\txAccessor,\n\t\tdisplayXAccessor: displayXAccessor || xAccessor,\n\t\txScale: xScale.copy(),\n\t\tfullData,\n\t\tfilterData\n\t};\n}\nfunction resetChart(props, firstCalculation = false) {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tif (!firstCalculation) log(\"CHART RESET\");\n\t}\n\n\tconst state = calculateState(props);\n\tconst { xAccessor, displayXAccessor, fullData } = state;\n\tconst { plotData: initialPlotData, xScale } = state;\n\tconst { postCalculator, children } = props;\n\n\tconst plotData = postCalculator(initialPlotData);\n\n\tconst dimensions = getDimensions(props);\n\tconst chartConfig = getChartConfigWithUpdatedYScales(\n\t\tgetNewChartConfig(dimensions, children),\n\t\t{ plotData, xAccessor, displayXAccessor, fullData },\n\t\txScale.domain()\n\t);\n\n\treturn {\n\t\t...state,\n\t\txScale,\n\t\tplotData,\n\t\tchartConfig,\n\t};\n}\n\nfunction updateChart(\n\tnewState,\n\tinitialXScale,\n\tprops,\n\tlastItemWasVisible,\n\tinitialChartConfig,\n) {\n\n\tconst { fullData, xScale, xAccessor, displayXAccessor, filterData } = newState;\n\n\tconst lastItem = last(fullData);\n\tconst [start, end] = initialXScale.domain();\n\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tlog(\"TRIVIAL CHANGE\");\n\t}\n\n\tconst { postCalculator, children, padding, flipXScale } = props;\n\tconst { maintainPointsPerPixelOnResize } = props;\n\tconst direction = getXScaleDirection(flipXScale);\n\tconst dimensions = getDimensions(props);\n\n\tconst updatedXScale = setXRange(xScale, dimensions, padding, direction);\n\n\t// console.log(\"lastItemWasVisible =\", lastItemWasVisible, end, xAccessor(lastItem), end >= xAccessor(lastItem));\n\tlet initialPlotData;\n\tif (!lastItemWasVisible || end >= xAccessor(lastItem)) {\n\t\t// resize comes here...\n\t\t// get plotData between [start, end] and do not change the domain\n\t\tconst [rangeStart, rangeEnd] = initialXScale.range();\n\t\tconst [newRangeStart, newRangeEnd] = updatedXScale.range();\n\t\tconst newDomainExtent = ((newRangeEnd - newRangeStart) / (rangeEnd - rangeStart)) * (end - start);\n\t\tconst newStart = maintainPointsPerPixelOnResize\n\t\t\t? end - newDomainExtent\n\t\t\t: start;\n\n\t\tconst lastItemX = initialXScale(xAccessor(lastItem));\n\t\t// console.log(\"pointsPerPixel => \", newStart, start, end, updatedXScale(end));\n\t\tconst response = filterData(\n\t\t\tfullData, [newStart, end], xAccessor, updatedXScale,\n\t\t\t{ fallbackStart: start, fallbackEnd: { lastItem, lastItemX } }\n\t\t);\n\t\tinitialPlotData = response.plotData;\n\t\tupdatedXScale.domain(response.domain);\n\t\t// console.log(\"HERE!!!!!\", start, end);\n\t} else if (lastItemWasVisible\n\t\t\t&& end < xAccessor(lastItem)) {\n\t\t// this is when a new item is added and last item was visible\n\t\t// so slide over and show the new item also\n\n\t\t// get plotData between [xAccessor(l) - (end - start), xAccessor(l)] and DO change the domain\n\t\tconst dx = initialXScale(xAccessor(lastItem)) - initialXScale.range()[1];\n\t\tconst [newStart, newEnd] = initialXScale.range().map(x => x + dx).map(initialXScale.invert);\n\n\n\t\tconst response = filterData(fullData, [newStart, newEnd], xAccessor, updatedXScale);\n\t\tinitialPlotData = response.plotData;\n\t\tupdatedXScale.domain(response.domain);\t\t// if last item was visible, then shift\n\t}\n\t// plotData = getDataOfLength(fullData, showingInterval, plotData.length)\n\tconst plotData = postCalculator(initialPlotData);\n\tconst chartConfig = getChartConfigWithUpdatedYScales(\n\t\tgetNewChartConfig(dimensions, children, initialChartConfig),\n\t\t{ plotData, xAccessor, displayXAccessor, fullData },\n\t\tupdatedXScale.domain()\n\t);\n\n\treturn {\n\t\txScale: updatedXScale,\n\t\txAccessor,\n\t\tchartConfig,\n\t\tplotData,\n\t\tfullData,\n\t\tfilterData,\n\t};\n}\n\nfunction calculateState(props) {\n\n\tconst {\n\t\txAccessor: inputXAccesor, xExtents: xExtentsProp, data, padding, flipXScale\n\t} = props;\n\n\tif (process.env.NODE_ENV !== \"production\" && isDefined(props.xScale.invert)) {\n\t\tfor (let i = 1; i < data.length; i++) {\n\t\t\tconst prev = data[i - 1];\n\t\t\tconst curr = data[i];\n\t\t\tif (inputXAccesor(prev) > inputXAccesor(curr)) {\n\t\t\t\tthrow new Error(\"'data' is not sorted on 'xAccessor', send 'data' sorted in ascending order of 'xAccessor'\");\n\t\t\t}\n\t\t}\n\t}\n\n\tconst direction = getXScaleDirection(flipXScale);\n\tconst dimensions = getDimensions(props);\n\n\tconst extent = typeof xExtentsProp === \"function\"\n\t\t? xExtentsProp(data)\n\t\t: d3Extent(xExtentsProp.map(d => functor(d)).map(each => each(data, inputXAccesor)));\n\n\tconst { xAccessor, displayXAccessor, xScale, fullData, filterData } = calculateFullData(props);\n\tconst updatedXScale = setXRange(xScale, dimensions, padding, direction);\n\n\tconst { plotData, domain } = filterData(fullData, extent, inputXAccesor, updatedXScale);\n\n\tif (process.env.NODE_ENV !== \"production\" && plotData.length <= 1) {\n\t\tthrow new Error(`Showing ${plotData.length} datapoints, review the 'xExtents' prop of ChartCanvas`);\n\t}\n\treturn {\n\t\tplotData,\n\t\txScale: updatedXScale.domain(domain),\n\t\txAccessor,\n\t\tdisplayXAccessor,\n\t\tfullData,\n\t\tfilterData,\n\t};\n}\n\nfunction setXRange(xScale, dimensions, padding, direction = 1) {\n\tif (xScale.rangeRoundPoints) {\n\t\tif (isNaN(padding)) throw new Error(\"padding has to be a number for ordinal scale\");\n\t\txScale.rangeRoundPoints([0, dimensions.width], padding);\n\t} else if (xScale.padding) {\n\t\tif (isNaN(padding)) throw new Error(\"padding has to be a number for ordinal scale\");\n\t\txScale.range([0, dimensions.width]);\n\t\txScale.padding(padding / 2);\n\t} else {\n\t\tconst { left, right } = isNaN(padding)\n\t\t\t? padding\n\t\t\t: { left: padding, right: padding };\n\t\tif (direction > 0) {\n\t\t\txScale.range([left, dimensions.width - right]);\n\t\t} else {\n\t\t\txScale.range([dimensions.width - right, left]);\n\t\t}\n\t}\n\treturn xScale;\n}\n\nfunction pinchCoordinates(pinch) {\n\tconst { touch1Pos, touch2Pos } = pinch;\n\n\treturn {\n\t\ttopLeft: [Math.min(touch1Pos[0], touch2Pos[0]), Math.min(touch1Pos[1], touch2Pos[1])],\n\t\tbottomRight: [Math.max(touch1Pos[0], touch2Pos[0]), Math.max(touch1Pos[1], touch2Pos[1])]\n\t};\n}\n\n\nclass ChartCanvas extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.getDataInfo = this.getDataInfo.bind(this);\n\t\tthis.getCanvasContexts = this.getCanvasContexts.bind(this);\n\n\t\tthis.handleMouseMove = this.handleMouseMove.bind(this);\n\t\tthis.handleMouseEnter = this.handleMouseEnter.bind(this);\n\t\tthis.handleMouseLeave = this.handleMouseLeave.bind(this);\n\t\tthis.handleZoom = this.handleZoom.bind(this);\n\t\tthis.handlePinchZoom = this.handlePinchZoom.bind(this);\n\t\tthis.handlePinchZoomEnd = this.handlePinchZoomEnd.bind(this);\n\t\tthis.handlePan = this.handlePan.bind(this);\n\t\tthis.handlePanEnd = this.handlePanEnd.bind(this);\n\t\tthis.handleClick = this.handleClick.bind(this);\n\t\tthis.handleMouseDown = this.handleMouseDown.bind(this);\n\t\tthis.handleDoubleClick = this.handleDoubleClick.bind(this);\n\t\tthis.handleContextMenu = this.handleContextMenu.bind(this);\n\t\tthis.handleDragStart = this.handleDragStart.bind(this);\n\t\tthis.handleDrag = this.handleDrag.bind(this);\n\t\tthis.handleDragEnd = this.handleDragEnd.bind(this);\n\n\t\tthis.panHelper = this.panHelper.bind(this);\n\t\tthis.pinchZoomHelper = this.pinchZoomHelper.bind(this);\n\t\tthis.xAxisZoom = this.xAxisZoom.bind(this);\n\t\tthis.yAxisZoom = this.yAxisZoom.bind(this);\n\t\tthis.resetYDomain = this.resetYDomain.bind(this);\n\t\tthis.calculateStateForDomain = this.calculateStateForDomain.bind(this);\n\t\tthis.generateSubscriptionId = this.generateSubscriptionId.bind(this);\n\t\tthis.draw = this.draw.bind(this);\n\t\tthis.redraw = this.redraw.bind(this);\n\t\tthis.getAllPanConditions = this.getAllPanConditions.bind(this);\n\n\t\tthis.subscriptions = [];\n\t\tthis.subscribe = this.subscribe.bind(this);\n\t\tthis.unsubscribe = this.unsubscribe.bind(this);\n\t\tthis.amIOnTop = this.amIOnTop.bind(this);\n\t\tthis.saveEventCaptureNode = this.saveEventCaptureNode.bind(this);\n\t\tthis.saveCanvasContainerNode = this.saveCanvasContainerNode.bind(this);\n\t\tthis.setCursorClass = this.setCursorClass.bind(this);\n\t\tthis.getMutableState = this.getMutableState.bind(this);\n\t\t// this.canvasDrawCallbackList = [];\n\t\tthis.interactiveState = [];\n\t\tthis.panInProgress = false;\n\n\t\tthis.state = {};\n\t\tthis.mutableState = {};\n\t\tthis.lastSubscriptionId = 0;\n\t}\n\tsaveEventCaptureNode(node) {\n\t\tthis.eventCaptureNode = node;\n\t}\n\tsaveCanvasContainerNode(node) {\n\t\tthis.canvasContainerNode = node;\n\t}\n\tgetMutableState() {\n\t\treturn this.mutableState;\n\t}\n\tgetDataInfo() {\n\t\treturn {\n\t\t\t...this.state,\n\t\t\tfullData: this.fullData,\n\t\t};\n\t}\n\tgetCanvasContexts() {\n\t\tif (this.canvasContainerNode) {\n\t\t\treturn this.canvasContainerNode.getCanvasContexts();\n\t\t}\n\t}\n\tgenerateSubscriptionId() {\n\t\tthis.lastSubscriptionId++;\n\t\treturn this.lastSubscriptionId;\n\t}\n\tclearBothCanvas() {\n\t\tconst canvases = this.getCanvasContexts();\n\t\tif (canvases && canvases.axes) {\n\t\t\tclearCanvas([\n\t\t\t\tcanvases.axes,\n\t\t\t\t// canvases.hover,\n\t\t\t\tcanvases.mouseCoord\n\t\t\t], this.props.ratio);\n\t\t}\n\t}\n\tclearMouseCanvas() {\n\t\tconst canvases = this.getCanvasContexts();\n\t\tif (canvases && canvases.mouseCoord) {\n\t\t\tclearCanvas([\n\t\t\t\tcanvases.mouseCoord,\n\t\t\t\t// canvases.hover,\n\t\t\t], this.props.ratio);\n\t\t}\n\t}\n\tclearThreeCanvas() {\n\t\tconst canvases = this.getCanvasContexts();\n\t\tif (canvases && canvases.axes) {\n\t\t\tclearCanvas([\n\t\t\t\tcanvases.axes,\n\t\t\t\t// canvases.hover,\n\t\t\t\tcanvases.mouseCoord,\n\t\t\t\tcanvases.bg\n\t\t\t], this.props.ratio);\n\t\t}\n\t}\n\tsubscribe(id, rest) {\n\t\tconst { getPanConditions = functor({\n\t\t\tdraggable: false,\n\t\t\tpanEnabled: true,\n\t\t}) } = rest;\n\t\tthis.subscriptions = this.subscriptions.concat({\n\t\t\tid,\n\t\t\t...rest,\n\t\t\tgetPanConditions,\n\t\t});\n\t}\n\tunsubscribe(id) {\n\t\tthis.subscriptions = this.subscriptions.filter(each => each.id !== id);\n\t}\n\tgetAllPanConditions() {\n\t\treturn this.subscriptions\n\t\t\t.map(each => each.getPanConditions());\n\t}\n\tsetCursorClass(className) {\n\t\tif (this.eventCaptureNode != null) {\n\t\t\tthis.eventCaptureNode.setCursorClass(className);\n\t\t}\n\t}\n\tamIOnTop(id) {\n\t\tconst dragableComponents = this.subscriptions\n\t\t\t.filter(each => each.getPanConditions().draggable);\n\n\t\treturn dragableComponents.length > 0\n\t\t\t&& last(dragableComponents).id === id;\n\t}\n\thandleContextMenu(mouseXY, e) {\n\t\tconst { xAccessor, chartConfig, plotData, xScale } = this.state;\n\n\t\tconst currentCharts = getCurrentCharts(chartConfig, mouseXY);\n\t\tconst currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n\n\t\tthis.triggerEvent(\"contextmenu\", {\n\t\t\tmouseXY,\n\t\t\tcurrentItem,\n\t\t\tcurrentCharts,\n\t\t}, e);\n\t}\n\tcalculateStateForDomain(newDomain) {\n\t\tconst {\n\t\t\txAccessor,\n\t\t\tdisplayXAccessor,\n\t\t\txScale: initialXScale,\n\t\t\tchartConfig: initialChartConfig,\n\t\t\tplotData: initialPlotData\n\t\t} = this.state;\n\t\tconst { filterData } = this.state;\n\t\tconst { fullData } = this;\n\t\tconst { postCalculator } = this.props;\n\n\t\tconst { plotData: beforePlotData, domain } = filterData(\n\t\t\tfullData,\n\t\t\tnewDomain,\n\t\t\txAccessor,\n\t\t\tinitialXScale,\n\t\t\t{\n\t\t\t\tcurrentPlotData: initialPlotData,\n\t\t\t\tcurrentDomain: initialXScale.domain()\n\t\t\t}\n\t\t);\n\n\t\tconst plotData = postCalculator(beforePlotData);\n\t\tconst updatedScale = initialXScale.copy().domain(domain);\n\t\tconst chartConfig = getChartConfigWithUpdatedYScales(\n\t\t\tinitialChartConfig,\n\t\t\t{ plotData, xAccessor, displayXAccessor, fullData },\n\t\t\tupdatedScale.domain()\n\t\t);\n\n\t\treturn {\n\t\t\txScale: updatedScale,\n\t\t\tplotData,\n\t\t\tchartConfig,\n\t\t};\n\t}\n\tpinchZoomHelper(initialPinch, finalPinch) {\n\t\tconst { xScale: initialPinchXScale } = initialPinch;\n\n\t\tconst {\n\t\t\txScale: initialXScale,\n\t\t\tchartConfig: initialChartConfig,\n\t\t\tplotData: initialPlotData,\n\t\t\txAccessor,\n\t\t\tdisplayXAccessor,\n\t\t} = this.state;\n\t\tconst { filterData } = this.state;\n\t\tconst { fullData } = this;\n\t\tconst { postCalculator } = this.props;\n\n\t\tconst { topLeft: iTL, bottomRight: iBR } = pinchCoordinates(initialPinch);\n\t\tconst { topLeft: fTL, bottomRight: fBR } = pinchCoordinates(finalPinch);\n\n\t\tconst e = initialPinchXScale.range()[1];\n\n\t\tconst xDash = Math.round(-(iBR[0] * fTL[0] - iTL[0] * fBR[0]) / (iTL[0] - iBR[0]));\n\t\tconst yDash = Math.round(e + ((e - iBR[0]) * (e - fTL[0]) - (e - iTL[0]) * (e - fBR[0])) / ((e - iTL[0]) - (e - iBR[0])));\n\n\t\tconst x = Math.round(-xDash * iTL[0] / (-xDash + fTL[0]));\n\t\tconst y = Math.round(e - (yDash - e) * (e - iTL[0]) / (yDash + (e - fTL[0])));\n\n\t\tconst newDomain = [x, y].map(initialPinchXScale.invert);\n\t\t// var domainR = initial.right + right;\n\n\t\tconst { plotData: beforePlotData, domain } = filterData(\n\t\t\tfullData,\n\t\t\tnewDomain,\n\t\t\txAccessor,\n\t\t\tinitialPinchXScale,\n\t\t\t{\n\t\t\t\tcurrentPlotData: initialPlotData,\n\t\t\t\tcurrentDomain: initialXScale.domain()\n\t\t\t}\n\t\t);\n\n\t\tconst plotData = postCalculator(beforePlotData);\n\t\tconst updatedScale = initialXScale.copy().domain(domain);\n\n\t\tconst mouseXY = finalPinch.touch1Pos;\n\t\tconst chartConfig = getChartConfigWithUpdatedYScales(\n\t\t\tinitialChartConfig,\n\t\t\t{ plotData, xAccessor, displayXAccessor, fullData },\n\t\t\tupdatedScale.domain()\n\t\t);\n\t\tconst currentItem = getCurrentItem(updatedScale, xAccessor, mouseXY, plotData);\n\n\t\treturn {\n\t\t\tchartConfig,\n\t\t\txScale: updatedScale,\n\t\t\tplotData,\n\t\t\tmouseXY,\n\t\t\tcurrentItem,\n\t\t};\n\t}\n\tcancelDrag() {\n\t\tthis.eventCaptureNode.cancelDrag();\n\t\tthis.triggerEvent(\"dragcancel\");\n\t}\n\thandlePinchZoom(initialPinch, finalPinch, e) {\n\t\tif (!this.waitingForPinchZoomAnimationFrame) {\n\t\t\tthis.waitingForPinchZoomAnimationFrame = true;\n\t\t\tconst state = this.pinchZoomHelper(initialPinch, finalPinch);\n\n\t\t\tthis.triggerEvent(\"pinchzoom\", state, e);\n\n\t\t\tthis.finalPinch = finalPinch;\n\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tthis.clearBothCanvas();\n\t\t\t\tthis.draw({ trigger: \"pinchzoom\" });\n\t\t\t\tthis.waitingForPinchZoomAnimationFrame = false;\n\t\t\t});\n\t\t}\n\t}\n\thandlePinchZoomEnd(initialPinch, e) {\n\t\tconst { xAccessor } = this.state;\n\n\t\tif (this.finalPinch) {\n\t\t\tconst state = this.pinchZoomHelper(initialPinch, this.finalPinch);\n\t\t\tconst { xScale } = state;\n\t\t\tthis.triggerEvent(\"pinchzoom\", state, e);\n\n\t\t\tthis.finalPinch = null;\n\n\t\t\tthis.clearThreeCanvas();\n\n\t\t\tconst { fullData } = this;\n\t\t\tconst firstItem = head(fullData);\n\n\t\t\tconst start = head(xScale.domain());\n\t\t\tconst end = xAccessor(firstItem);\n\t\t\tconst { onLoadMore } = this.props;\n\n\t\t\tthis.setState(state, () => {\n\t\t\t\tif (start < end) {\n\t\t\t\t\tonLoadMore(start, end);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\thandleZoom(zoomDirection, mouseXY, e) {\n\t\tif (this.panInProgress)\n\t\t\treturn;\n\t\t// console.log(\"zoomDirection \", zoomDirection, \" mouseXY \", mouseXY);\n\t\tconst { xAccessor, xScale: initialXScale, plotData: initialPlotData } = this.state;\n\t\tconst { zoomMultiplier, zoomAnchor } = this.props;\n\t\tconst { fullData } = this;\n\t\tconst item = zoomAnchor({\n\t\t\txScale: initialXScale,\n\t\t\txAccessor,\n\t\t\tmouseXY,\n\t\t\tplotData: initialPlotData,\n\t\t\tfullData,\n\t\t});\n\n\t\tconst cx = initialXScale(item);\n\t\tconst c = zoomDirection > 0 ? 1 * zoomMultiplier : 1 / zoomMultiplier;\n\t\tconst newDomain = initialXScale.range().map(x => cx + (x - cx) * c).map(initialXScale.invert);\n\n\t\tconst { xScale, plotData, chartConfig } = this.calculateStateForDomain(newDomain);\n\n\t\tconst currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n\t\tconst currentCharts = getCurrentCharts(chartConfig, mouseXY);\n\n\t\tthis.clearThreeCanvas();\n\n\t\tconst firstItem = head(fullData);\n\n\t\tconst start = head(xScale.domain());\n\t\tconst end = xAccessor(firstItem);\n\t\tconst { onLoadMore } = this.props;\n\n\t\tthis.mutableState = {\n\t\t\tmouseXY: mouseXY,\n\t\t\tcurrentItem: currentItem,\n\t\t\tcurrentCharts: currentCharts,\n\t\t};\n\n\t\tthis.triggerEvent(\"zoom\", {\n\t\t\txScale,\n\t\t\tplotData,\n\t\t\tchartConfig,\n\t\t\tmouseXY,\n\t\t\tcurrentCharts,\n\t\t\tcurrentItem,\n\t\t\tshow: true,\n\t\t}, e);\n\n\t\tthis.setState({\n\t\t\txScale,\n\t\t\tplotData,\n\t\t\tchartConfig,\n\t\t}, () => {\n\t\t\tif (start < end) {\n\t\t\t\tonLoadMore(start, end);\n\t\t\t}\n\t\t});\n\t}\n\txAxisZoom(newDomain) {\n\t\tconst { xScale, plotData, chartConfig } = this.calculateStateForDomain(newDomain);\n\t\tthis.clearThreeCanvas();\n\n\t\tconst { xAccessor } = this.state;\n\t\tconst { fullData } = this;\n\t\tconst firstItem = head(fullData);\n\t\tconst start = head(xScale.domain());\n\t\tconst end = xAccessor(firstItem);\n\t\tconst { onLoadMore } = this.props;\n\n\t\tthis.setState({\n\t\t\txScale,\n\t\t\tplotData,\n\t\t\tchartConfig,\n\t\t}, () => {\n\t\t\tif (start < end) onLoadMore(start, end);\n\t\t});\n\t}\n\tyAxisZoom(chartId, newDomain) {\n\t\tthis.clearThreeCanvas();\n\t\tconst { chartConfig: initialChartConfig } = this.state;\n\t\tconst chartConfig = initialChartConfig\n\t\t\t.map(each => {\n\t\t\t\tif (each.id === chartId) {\n\t\t\t\t\tconst { yScale } = each;\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...each,\n\t\t\t\t\t\tyScale: yScale.copy().domain(newDomain),\n\t\t\t\t\t\tyPanEnabled: true,\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\treturn each;\n\t\t\t\t}\n\t\t\t});\n\n\t\tthis.setState({\n\t\t\tchartConfig,\n\t\t});\n\t}\n\ttriggerEvent(type, props, e) {\n\t\t// console.log(\"triggering ->\", type);\n\n\t\tthis.subscriptions.forEach(each => {\n\t\t\tconst state = {\n\t\t\t\t...this.state,\n\t\t\t\tfullData: this.fullData,\n\t\t\t\tsubscriptions: this.subscriptions,\n\t\t\t};\n\t\t\teach.listener(type, props, state, e);\n\t\t});\n\t}\n\tdraw(props) {\n\t\tthis.subscriptions.forEach(each => {\n\t\t\tif (isDefined(each.draw))\n\t\t\t\teach.draw(props);\n\t\t});\n\t}\n\tredraw() {\n\t\tthis.clearThreeCanvas();\n\t\tthis.draw({ force: true });\n\t}\n\tpanHelper(mouseXY, initialXScale, { dx, dy }, chartsToPan) {\n\t\tconst { xAccessor, displayXAccessor, chartConfig: initialChartConfig } = this.state;\n\t\tconst { filterData } = this.state;\n\t\tconst { fullData } = this;\n\t\tconst { postCalculator } = this.props;\n\n\t\t// console.log(dx, dy);\n\t\tif (isNotDefined(initialXScale.invert))\n\t\t\tthrow new Error(\"xScale provided does not have an invert() method.\"\n\t\t\t\t+ \"You are likely using an ordinal scale. This scale does not support zoom, pan\");\n\n\t\tconst newDomain = initialXScale.range().map(x => x - dx).map(initialXScale.invert);\n\n\t\tconst { plotData: beforePlotData, domain } = filterData(\n\t\t\tfullData,\n\t\t\tnewDomain,\n\t\t\txAccessor,\n\t\t\tinitialXScale,\n\t\t\t{\n\t\t\t\tcurrentPlotData: this.hackyWayToStopPanBeyondBounds__plotData,\n\t\t\t\tcurrentDomain: this.hackyWayToStopPanBeyondBounds__domain\n\t\t\t}\n\t\t);\n\n\t\tconst updatedScale = initialXScale.copy().domain(domain);\n\t\tconst plotData = postCalculator(beforePlotData);\n\t\t// console.log(last(plotData));\n\n\t\tconst currentItem = getCurrentItem(updatedScale, xAccessor, mouseXY, plotData);\n\t\tconst chartConfig = getChartConfigWithUpdatedYScales(\n\t\t\tinitialChartConfig,\n\t\t\t{ plotData, xAccessor, displayXAccessor, fullData },\n\t\t\tupdatedScale.domain(),\n\t\t\tdy,\n\t\t\tchartsToPan\n\t\t);\n\t\tconst currentCharts = getCurrentCharts(chartConfig, mouseXY);\n\n\t\t// console.log(initialXScale.domain(), newDomain, updatedScale.domain());\n\t\treturn {\n\t\t\txScale: updatedScale,\n\t\t\tplotData,\n\t\t\tchartConfig,\n\t\t\tmouseXY,\n\t\t\tcurrentCharts,\n\t\t\tcurrentItem,\n\t\t};\n\t}\n\thandlePan(mousePosition, panStartXScale, dxdy, chartsToPan, e) {\n\t\tif (!this.waitingForPanAnimationFrame) {\n\t\t\tthis.waitingForPanAnimationFrame = true;\n\n\t\t\tthis.hackyWayToStopPanBeyondBounds__plotData = this.hackyWayToStopPanBeyondBounds__plotData || this.state.plotData;\n\t\t\tthis.hackyWayToStopPanBeyondBounds__domain = this.hackyWayToStopPanBeyondBounds__domain || this.state.xScale.domain();\n\n\t\t\tconst state = this.panHelper(mousePosition, panStartXScale, dxdy, chartsToPan);\n\n\t\t\tthis.hackyWayToStopPanBeyondBounds__plotData = state.plotData;\n\t\t\tthis.hackyWayToStopPanBeyondBounds__domain = state.xScale.domain();\n\n\t\t\tthis.panInProgress = true;\n\t\t\t// console.log(panStartXScale.domain(), state.xScale.domain());\n\n\t\t\tthis.triggerEvent(\"pan\", state, e);\n\n\t\t\tthis.mutableState = {\n\t\t\t\tmouseXY: state.mouseXY,\n\t\t\t\tcurrentItem: state.currentItem,\n\t\t\t\tcurrentCharts: state.currentCharts,\n\t\t\t};\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tthis.waitingForPanAnimationFrame = false;\n\t\t\t\tthis.clearBothCanvas();\n\t\t\t\tthis.draw({ trigger: \"pan\" });\n\t\t\t});\n\t\t}\n\t}\n\thandlePanEnd(mousePosition, panStartXScale, dxdy, chartsToPan, e) {\n\t\tconst state = this.panHelper(mousePosition, panStartXScale, dxdy, chartsToPan);\n\t\t// console.log(this.canvasDrawCallbackList.map(d => d.type));\n\t\tthis.hackyWayToStopPanBeyondBounds__plotData = null;\n\t\tthis.hackyWayToStopPanBeyondBounds__domain = null;\n\n\t\tthis.panInProgress = false;\n\n\t\t// console.log(\"PANEND\", panEnd++);\n\t\tconst {\n\t\t\txScale,\n\t\t\tplotData,\n\t\t\tchartConfig,\n\t\t} = state;\n\n\t\tthis.triggerEvent(\"panend\", state, e);\n\n\t\trequestAnimationFrame(() => {\n\t\t\tconst { xAccessor } = this.state;\n\t\t\tconst { fullData } = this;\n\n\t\t\tconst firstItem = head(fullData);\n\t\t\tconst start = head(xScale.domain());\n\t\t\tconst end = xAccessor(firstItem);\n\t\t\t// console.log(start, end, start < end ? \"Load more\" : \"I have it\");\n\n\t\t\tconst { onLoadMore } = this.props;\n\n\t\t\tthis.clearThreeCanvas();\n\n\t\t\tthis.setState({\n\t\t\t\txScale,\n\t\t\t\tplotData,\n\t\t\t\tchartConfig,\n\t\t\t}, () => {\n\t\t\t\tif (start < end) onLoadMore(start, end);\n\t\t\t});\n\t\t});\n\t}\n\thandleMouseDown(mousePosition, currentCharts, e) {\n\t\tthis.triggerEvent(\"mousedown\", this.mutableState, e);\n\t}\n\thandleMouseEnter(e) {\n\t\tthis.triggerEvent(\"mouseenter\", {\n\t\t\tshow: true,\n\t\t}, e);\n\t}\n\thandleMouseMove(mouseXY, inputType, e) {\n\t\tif (!this.waitingForMouseMoveAnimationFrame) {\n\t\t\tthis.waitingForMouseMoveAnimationFrame = true;\n\n\t\t\tconst { chartConfig, plotData, xScale, xAccessor } = this.state;\n\t\t\tconst currentCharts = getCurrentCharts(chartConfig, mouseXY);\n\t\t\tconst currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n\t\t\tthis.triggerEvent(\"mousemove\", {\n\t\t\t\tshow: true,\n\t\t\t\tmouseXY,\n\t\t\t\t// prevMouseXY is used in interactive components\n\t\t\t\tprevMouseXY: this.prevMouseXY,\n\t\t\t\tcurrentItem,\n\t\t\t\tcurrentCharts,\n\t\t\t}, e);\n\n\t\t\tthis.prevMouseXY = mouseXY;\n\t\t\tthis.mutableState = {\n\t\t\t\tmouseXY,\n\t\t\t\tcurrentItem,\n\t\t\t\tcurrentCharts,\n\t\t\t};\n\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tthis.clearMouseCanvas();\n\t\t\t\tthis.draw({ trigger: \"mousemove\" });\n\t\t\t\tthis.waitingForMouseMoveAnimationFrame = false;\n\t\t\t});\n\t\t}\n\t}\n\thandleMouseLeave(e) {\n\t\tthis.triggerEvent(\"mouseleave\", { show: false }, e);\n\t\tthis.clearMouseCanvas();\n\t\tthis.draw({ trigger: \"mouseleave\" });\n\t}\n\thandleDragStart({ startPos }, e) {\n\t\tthis.triggerEvent(\"dragstart\", { startPos }, e);\n\t}\n\thandleDrag({ startPos, mouseXY }, e) {\n\t\tconst { chartConfig, plotData, xScale, xAccessor } = this.state;\n\t\tconst currentCharts = getCurrentCharts(chartConfig, mouseXY);\n\t\tconst currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n\n\t\tthis.triggerEvent(\"drag\", {\n\t\t\tstartPos,\n\t\t\tmouseXY,\n\t\t\tcurrentItem,\n\t\t\tcurrentCharts,\n\t\t}, e);\n\n\t\tthis.mutableState = {\n\t\t\tmouseXY,\n\t\t\tcurrentItem,\n\t\t\tcurrentCharts,\n\t\t};\n\n\t\trequestAnimationFrame(() => {\n\t\t\tthis.clearMouseCanvas();\n\t\t\tthis.draw({ trigger: \"drag\" });\n\t\t});\n\t}\n\thandleDragEnd({ mouseXY }, e) {\n\t\tthis.triggerEvent(\"dragend\", { mouseXY }, e);\n\n\t\trequestAnimationFrame(() => {\n\t\t\tthis.clearMouseCanvas();\n\t\t\tthis.draw({ trigger: \"dragend\" });\n\t\t});\n\t}\n\thandleClick(mousePosition, e) {\n\t\tthis.triggerEvent(\"click\", this.mutableState, e);\n\n\t\trequestAnimationFrame(() => {\n\t\t\tthis.clearMouseCanvas();\n\t\t\tthis.draw({ trigger: \"click\" });\n\t\t});\n\t}\n\thandleDoubleClick(mousePosition, e) {\n\t\tthis.triggerEvent(\"dblclick\", {}, e);\n\t}\n\tgetChildContext() {\n\t\tconst dimensions = getDimensions(this.props);\n\t\treturn {\n\t\t\tfullData: this.fullData,\n\t\t\tplotData: this.state.plotData,\n\t\t\twidth: dimensions.width,\n\t\t\theight: dimensions.height,\n\t\t\tchartConfig: this.state.chartConfig,\n\t\t\txScale: this.state.xScale,\n\t\t\txAccessor: this.state.xAccessor,\n\t\t\tdisplayXAccessor: this.state.displayXAccessor,\n\t\t\tchartCanvasType: this.props.type,\n\t\t\tmargin: this.props.margin,\n\t\t\tratio: this.props.ratio,\n\t\t\txAxisZoom: this.xAxisZoom,\n\t\t\tyAxisZoom: this.yAxisZoom,\n\t\t\tgetCanvasContexts: this.getCanvasContexts,\n\t\t\tredraw: this.redraw,\n\t\t\tsubscribe: this.subscribe,\n\t\t\tunsubscribe: this.unsubscribe,\n\t\t\tgenerateSubscriptionId: this.generateSubscriptionId,\n\t\t\tgetMutableState: this.getMutableState,\n\t\t\tamIOnTop: this.amIOnTop,\n\t\t\tsetCursorClass: this.setCursorClass,\n\t\t};\n\t}\n\tcomponentWillMount() {\n\t\tconst { fullData, ...state } = resetChart(this.props, true);\n\t\tthis.setState(state);\n\t\tthis.fullData = fullData;\n\t}\n\tcomponentWillReceiveProps(nextProps) {\n\t\tconst reset = shouldResetChart(this.props, nextProps);\n\n\t\tconst interaction = isInteractionEnabled(this.state.xScale, this.state.xAccessor, this.state.plotData);\n\t\tconst { chartConfig: initialChartConfig } = this.state;\n\n\t\tlet newState;\n\t\tif (!interaction || reset || !shallowEqual(this.props.xExtents, nextProps.xExtents)) {\n\t\t\tif (process.env.NODE_ENV !== \"production\") {\n\t\t\t\tif (!interaction)\n\t\t\t\t\tlog(\"RESET CHART, changes to a non interactive chart\");\n\t\t\t\telse if (reset)\n\t\t\t\t\tlog(\"RESET CHART, one or more of these props changed\", CANDIDATES_FOR_RESET);\n\t\t\t\telse\n\t\t\t\t\tlog(\"xExtents changed\");\n\t\t\t}\n\t\t\t// do reset\n\t\t\tnewState = resetChart(nextProps);\n\t\t\tthis.mutableState = {};\n\t\t} else {\n\n\t\t\tconst [start, end] = this.state.xScale.domain();\n\t\t\tconst prevLastItem = last(this.fullData);\n\n\t\t\tconst calculatedState = calculateFullData(nextProps);\n\t\t\tconst { xAccessor } = calculatedState;\n\t\t\tconst lastItemWasVisible = xAccessor(prevLastItem) <= end && xAccessor(prevLastItem) >= start;\n\n\t\t\tif (process.env.NODE_ENV !== \"production\") {\n\t\t\t\tif (this.props.data !== nextProps.data)\n\t\t\t\t\tlog(\"data is changed but seriesName did not, change the seriesName if you wish to reset the chart and lastItemWasVisible = \", lastItemWasVisible);\n\t\t\t\telse\n\t\t\t\t\tlog(\"Trivial change, may be width/height or type changed, but that does not matter\");\n\t\t\t}\n\n\t\t\tnewState = updateChart(\n\t\t\t\tcalculatedState,\n\t\t\t\tthis.state.xScale,\n\t\t\t\tnextProps,\n\t\t\t\tlastItemWasVisible,\n\t\t\t\tinitialChartConfig,\n\t\t\t);\n\t\t}\n\n\t\tconst { fullData, ...state } = newState;\n\n\t\tif (this.panInProgress) {\n\t\t\tif (process.env.NODE_ENV !== \"production\") {\n\t\t\t\tlog(\"Pan is in progress\");\n\t\t\t}\n\t\t} else {\n\t\t\t/*\n\t\t\tif (!reset) {\n\t\t\t\tstate.chartConfig\n\t\t\t\t\t.forEach((each) => {\n\t\t\t\t\t\t// const sourceChartConfig = initialChartConfig.filter(d => d.id === each.id);\n\t\t\t\t\t\tconst prevChartConfig = find(initialChartConfig, d => d.id === each.id);\n\t\t\t\t\t\tif (isDefined(prevChartConfig) && prevChartConfig.yPanEnabled) {\n\t\t\t\t\t\t\teach.yScale.domain(prevChartConfig.yScale.domain());\n\t\t\t\t\t\t\teach.yPanEnabled = prevChartConfig.yPanEnabled;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t}\n\t\t\t*/\n\t\t\tthis.clearThreeCanvas();\n\n\t\t\tthis.setState(state);\n\t\t}\n\t\tthis.fullData = fullData;\n\t}\n\t/*\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tconsole.error(this.state.chartConfig, this.state.chartConfig.map(d => d.yScale.domain()));\n\t}\n\t*/\n\tresetYDomain(chartId) {\n\t\tconst { chartConfig } = this.state;\n\t\tlet changed = false;\n\t\tconst newChartConfig = chartConfig\n\t\t\t.map(each => {\n\t\t\t\tif ((isNotDefined(chartId) || each.id === chartId)\n\t\t\t\t\t\t&& !shallowEqual(each.yScale.domain(), each.realYDomain)) {\n\t\t\t\t\tchanged = true;\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...each,\n\t\t\t\t\t\tyScale: each.yScale.domain(each.realYDomain),\n\t\t\t\t\t\tyPanEnabled: false,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn each;\n\t\t\t});\n\n\t\tif (changed) {\n\t\t\tthis.clearThreeCanvas();\n\t\t\tthis.setState({\n\t\t\t\tchartConfig: newChartConfig\n\t\t\t});\n\t\t}\n\t}\n\tshouldComponentUpdate() {\n\t\t// console.log(\"Happneing.....\", !this.panInProgress)\n\t\treturn !this.panInProgress;\n\t}\n\trender() {\n\n\t\tconst { type, height, width, margin, className, zIndex, defaultFocus, ratio, mouseMoveEvent, panEvent, zoomEvent } = this.props;\n\t\tconst { useCrossHairStyleCursor, onSelect } = this.props;\n\n\t\tconst { plotData, xScale, xAccessor, chartConfig } = this.state;\n\t\tconst dimensions = getDimensions(this.props);\n\n\t\tconst interaction = isInteractionEnabled(xScale, xAccessor, plotData);\n\n\t\tconst cursorStyle = useCrossHairStyleCursor && interaction;\n\t\tconst cursor = getCursorStyle();\n\t\treturn (\n\t\t\t<div style={{ position: \"relative\", width, height }} className={className} onClick={onSelect}>\n\t\t\t\t<CanvasContainer ref={this.saveCanvasContainerNode}\n\t\t\t\t\ttype={type}\n\t\t\t\t\tratio={ratio}\n\t\t\t\t\twidth={width} height={height} zIndex={zIndex}/>\n\t\t\t\t<svg className={className} width={width} height={height} style={{ position: \"absolute\", zIndex: (zIndex + 5) }}>\n\t\t\t\t\t{cursor}\n\t\t\t\t\t<defs>\n\t\t\t\t\t\t<clipPath id=\"chart-area-clip\">\n\t\t\t\t\t\t\t<rect x=\"0\" y=\"0\" width={dimensions.width} height={dimensions.height} />\n\t\t\t\t\t\t</clipPath>\n\t\t\t\t\t\t{chartConfig\n\t\t\t\t\t\t\t.map((each, idx) => <clipPath key={idx} id={`chart-area-clip-${each.id}`}>\n\t\t\t\t\t\t\t\t<rect x=\"0\" y=\"0\" width={each.width} height={each.height} />\n\t\t\t\t\t\t\t</clipPath>)}\n\t\t\t\t\t</defs>\n\t\t\t\t\t<g transform={`translate(${margin.left + 0.5}, ${margin.top + 0.5})`}>\n\t\t\t\t\t\t<EventCapture\n\t\t\t\t\t\t\tref={this.saveEventCaptureNode}\n\t\t\t\t\t\t\tuseCrossHairStyleCursor={cursorStyle}\n\t\t\t\t\t\t\tmouseMove={mouseMoveEvent && interaction}\n\t\t\t\t\t\t\tzoom={zoomEvent && interaction}\n\t\t\t\t\t\t\tpan={panEvent && interaction}\n\n\t\t\t\t\t\t\twidth={dimensions.width}\n\t\t\t\t\t\t\theight={dimensions.height}\n\t\t\t\t\t\t\tchartConfig={chartConfig}\n\t\t\t\t\t\t\txScale={xScale}\n\t\t\t\t\t\t\txAccessor={xAccessor}\n\t\t\t\t\t\t\tfocus={defaultFocus}\n\t\t\t\t\t\t\tdisableInteraction={this.props.disableInteraction}\n\n\t\t\t\t\t\t\tgetAllPanConditions={this.getAllPanConditions}\n\t\t\t\t\t\t\tonContextMenu={this.handleContextMenu}\n\t\t\t\t\t\t\tonClick={this.handleClick}\n\t\t\t\t\t\t\tonDoubleClick={this.handleDoubleClick}\n\t\t\t\t\t\t\tonMouseDown={this.handleMouseDown}\n\t\t\t\t\t\t\tonMouseMove={this.handleMouseMove}\n\t\t\t\t\t\t\tonMouseEnter={this.handleMouseEnter}\n\t\t\t\t\t\t\tonMouseLeave={this.handleMouseLeave}\n\n\t\t\t\t\t\t\tonDragStart={this.handleDragStart}\n\t\t\t\t\t\t\tonDrag={this.handleDrag}\n\t\t\t\t\t\t\tonDragComplete={this.handleDragEnd}\n\n\t\t\t\t\t\t\tonZoom={this.handleZoom}\n\t\t\t\t\t\t\tonPinchZoom={this.handlePinchZoom}\n\t\t\t\t\t\t\tonPinchZoomEnd={this.handlePinchZoomEnd}\n\t\t\t\t\t\t\tonPan={this.handlePan}\n\t\t\t\t\t\t\tonPanEnd={this.handlePanEnd}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t<g className=\"react-stockcharts-avoid-interaction\">\n\t\t\t\t\t\t\t{this.props.children}\n\t\t\t\t\t\t</g>\n\t\t\t\t\t</g>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nfunction isInteractionEnabled(xScale, xAccessor, data) {\n\tconst interaction = !isNaN(xScale(xAccessor(head(data)))) && isDefined(xScale.invert);\n\treturn interaction;\n}\n\nChartCanvas.propTypes = {\n\twidth: PropTypes.number.isRequired,\n\theight: PropTypes.number.isRequired,\n\tmargin: PropTypes.object,\n\tratio: PropTypes.number.isRequired,\n\t// interval: PropTypes.oneOf([\"D\", \"W\", \"M\"]), // ,\"m1\", \"m5\", \"m15\", \"W\", \"M\"\n\ttype: PropTypes.oneOf([\"svg\", \"hybrid\"]),\n\tpointsPerPxThreshold: PropTypes.number,\n\tminPointsPerPxThreshold: PropTypes.number,\n\tdata: PropTypes.array.isRequired,\n\t// initialDisplay: PropTypes.number,\n\txAccessor: PropTypes.func,\n\txExtents: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.func\n\t]),\n\tzoomAnchor: PropTypes.func,\n\n\tclassName: PropTypes.string,\n\tseriesName: PropTypes.string.isRequired,\n\tzIndex: PropTypes.number,\n\tchildren: PropTypes.node.isRequired,\n\txScale: PropTypes.func.isRequired,\n\tpostCalculator: PropTypes.func,\n\tflipXScale: PropTypes.bool,\n\tuseCrossHairStyleCursor: PropTypes.bool,\n\tpadding: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.shape({\n\t\t\tleft: PropTypes.number,\n\t\t\tright: PropTypes.number,\n\t\t})\n\t]),\n\tdefaultFocus: PropTypes.bool,\n\tzoomMultiplier: PropTypes.number,\n\tonLoadMore: PropTypes.func,\n\tdisplayXAccessor: function(props, propName/* , componentName */) {\n\t\tif (isNotDefined(props[propName])) {\n\t\t\tconsole.warn(\"`displayXAccessor` is not defined,\"\n\t\t\t\t+ \" will use the value from `xAccessor` as `displayXAccessor`.\"\n\t\t\t\t+ \" This might be ok if you do not use a discontinuous scale\"\n\t\t\t\t+ \" but if you do, provide a `displayXAccessor` prop to `ChartCanvas`\");\n\t\t} else if (typeof props[propName] !== \"function\") {\n\t\t\treturn new Error(\"displayXAccessor has to be a function\");\n\t\t}\n\t},\n\tmouseMoveEvent: PropTypes.bool,\n\tpanEvent: PropTypes.bool,\n\tclamp: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]),\n\tzoomEvent: PropTypes.bool,\n\tonSelect: PropTypes.func,\n\tmaintainPointsPerPixelOnResize: PropTypes.bool,\n\tdisableInteraction: PropTypes.bool,\n};\n\nChartCanvas.defaultProps = {\n\tmargin: { top: 20, right: 30, bottom: 30, left: 80 },\n\ttype: \"hybrid\",\n\tpointsPerPxThreshold: 2,\n\tminPointsPerPxThreshold: 1 / 100,\n\tclassName: \"react-stockchart\",\n\tzIndex: 1,\n\txExtents: [min, max],\n\tpostCalculator: identity,\n\tpadding: 0,\n\txAccessor: identity,\n\tflipXScale: false,\n\tuseCrossHairStyleCursor: true,\n\tdefaultFocus: true,\n\tonLoadMore: noop,\n\tonSelect: noop,\n\tmouseMoveEvent: true,\n\tpanEvent: true,\n\tzoomEvent: true,\n\tzoomMultiplier: 1.1,\n\tclamp: false,\n\tzoomAnchor: mouseBasedZoomAnchor,\n\tmaintainPointsPerPixelOnResize: true,\n\t// ratio: 2,\n\tdisableInteraction: false,\n};\n\nChartCanvas.childContextTypes = {\n\tplotData: PropTypes.array,\n\tfullData: PropTypes.array,\n\tchartConfig: PropTypes.arrayOf(\n\t\tPropTypes.shape({\n\t\t\tid: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n\t\t\torigin: PropTypes.arrayOf(PropTypes.number).isRequired,\n\t\t\tpadding: PropTypes.oneOfType([\n\t\t\t\tPropTypes.number,\n\t\t\t\tPropTypes.shape({\n\t\t\t\t\ttop: PropTypes.number,\n\t\t\t\t\tbottom: PropTypes.number,\n\t\t\t\t})\n\t\t\t]),\n\t\t\tyExtents: PropTypes.arrayOf(PropTypes.func),\n\t\t\tyExtentsProvider: PropTypes.func,\n\t\t\tyScale: PropTypes.func.isRequired,\n\t\t\tmouseCoordinates: PropTypes.shape({\n\t\t\t\tat: PropTypes.string,\n\t\t\t\tformat: PropTypes.func\n\t\t\t}),\n\t\t\twidth: PropTypes.number.isRequired,\n\t\t\theight: PropTypes.number.isRequired,\n\t\t})\n\t).isRequired,\n\txScale: PropTypes.func.isRequired,\n\txAccessor: PropTypes.func.isRequired,\n\tdisplayXAccessor: PropTypes.func.isRequired,\n\twidth: PropTypes.number.isRequired,\n\theight: PropTypes.number.isRequired,\n\tchartCanvasType: PropTypes.oneOf([\"svg\", \"hybrid\"]).isRequired,\n\tmargin: PropTypes.object.isRequired,\n\tratio: PropTypes.number.isRequired,\n\tgetCanvasContexts: PropTypes.func,\n\txAxisZoom: PropTypes.func,\n\tyAxisZoom: PropTypes.func,\n\tamIOnTop: PropTypes.func,\n\tredraw: PropTypes.func,\n\tsubscribe: PropTypes.func,\n\tunsubscribe: PropTypes.func,\n\tsetCursorClass: PropTypes.func,\n\tgenerateSubscriptionId: PropTypes.func,\n\tgetMutableState: PropTypes.func,\n};\n\nChartCanvas.ohlcv = d => ({ date: d.date, open: d.open, high: d.high, low: d.low, close: d.close, volume: d.volume });\n\nexport default ChartCanvas;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}