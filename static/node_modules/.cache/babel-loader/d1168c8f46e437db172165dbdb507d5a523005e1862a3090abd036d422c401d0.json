{"ast":null,"code":"/**\r\n * Defines Pie Chart Series.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\nimport { Slice } from \"../../core/elements/Slice\";\n//import { Slice3D } from \"../../core/elements/3D/Slice3D\";\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\nimport { PieTick } from \"../elements/PieTick\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport { Percent, percent } from \"../../core/utils/Percent\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo: sequenced?\n/**\r\n * Defines a [[DataItem]] for [[PieSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar PieSeriesDataItem = /** @class */function (_super) {\n  __extends(PieSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function PieSeriesDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"PieSeriesDataItem\";\n    _this.values.radiusValue = {};\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(PieSeriesDataItem.prototype, \"radiusValue\", {\n    /**\r\n     * @return Radius\r\n     */\n    get: function () {\n      return this.values.radiusValue.value;\n    },\n    /**\r\n     * Slice's radius, if other than default.\r\n     *\r\n     * @param value  Radius\r\n     */\n    set: function (value) {\n      this.setValue(\"radiusValue\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Hide the data item (and corresponding visual elements).\r\n   *\r\n   * @param duration  Duration (ms)\r\n   * @param delay     Delay hiding (ms)\r\n   * @param toValue   Target value for animation\r\n   * @param fields    Fields to animate while hiding\r\n   */\n  PieSeriesDataItem.prototype.hide = function (duration, delay, toValue, fields) {\n    return _super.prototype.hide.call(this, duration, delay, 0, [\"value\", \"radiusValue\"]);\n  };\n  /**\r\n   * Show hidden data item (and corresponding visual elements).\r\n   *\r\n   * @param duration  Duration (ms)\r\n   * @param delay     Delay hiding (ms)\r\n   * @param fields    Fields to animate while hiding\r\n   */\n  PieSeriesDataItem.prototype.show = function (duration, delay, fields) {\n    return _super.prototype.show.call(this, duration, delay, [\"value\", \"radiusValue\"]);\n  };\n  return PieSeriesDataItem;\n}(PercentSeriesDataItem);\nexport { PieSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines [[Series]] for a slice series on a Pie chart.\r\n *\r\n * @see {@link IPieSeriesEvents} for a list of available Events\r\n * @see {@link IPieSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\nvar PieSeries = /** @class */function (_super) {\n  __extends(PieSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n  function PieSeries() {\n    var _this = _super.call(this) || this;\n    _this.className = \"PieSeries\";\n    _this.alignLabels = true;\n    //this.startAngle = -90;\n    //this.endAngle = 270;\n    _this.layout = \"none\";\n    _this.labels.template.radius = percent(5);\n    _this.addDisposer(_this.labels.template.events.on(\"enabled\", _this.invalidate, _this, false));\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * creates slice\r\n   */\n  PieSeries.prototype.createSlice = function () {\n    return new Slice();\n  };\n  /**\r\n   * creates tick\r\n   */\n  PieSeries.prototype.createTick = function () {\n    return new PieTick();\n  };\n  /**\r\n   * creates label\r\n   */\n  PieSeries.prototype.createLabel = function () {\n    return new AxisLabelCircular();\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n  PieSeries.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Pie Slice Series\");\n    }\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n  PieSeries.prototype.createDataItem = function () {\n    return new PieSeriesDataItem();\n  };\n  /**\r\n   * Inits slice.\r\n   *\r\n   * @param slice to init\r\n   */\n  PieSeries.prototype.initSlice = function (slice) {\n    slice.isMeasured = false;\n    slice.defaultState.properties.scale = 1;\n    slice.observe(\"scale\", this.handleSliceScale, this);\n    slice.observe([\"dx\", \"dy\", \"x\", \"y\", \"shiftRadius\"], this.handleSliceMove, this);\n    slice.tooltipText = \"{category}: {value.percent.formatNumber('#.#p')} ({value.value})\";\n    var hoverState = slice.states.create(\"hover\");\n    hoverState.properties.scale = 1.05;\n    var defaultState = slice.defaultState;\n    defaultState.properties.shiftRadius = 0;\n    slice.togglable = true;\n    slice.events.on(\"toggled\", function (event) {\n      event.target.hideTooltip();\n      // The following takes care of removing hover on subsequent click of\n      // a slice\n      if (event.target.interactions.lastHitPointer && event.target.interactions.lastHitPointer.touch && !event.target.isActive) {\n        event.target.isHover = false;\n      }\n    });\n    var activeState = slice.states.create(\"active\");\n    activeState.properties.shiftRadius = 0.10;\n  };\n  /**\r\n   * (Re)validates the whole series, effectively causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  PieSeries.prototype.validate = function () {\n    this._leftItems = [];\n    this._rightItems = [];\n    this._currentStartAngle = this.startAngle;\n    this._arcRect = $math.getArcRect(this.startAngle, this.endAngle);\n    this._maxRadiusPercent = 0;\n    for (var i = this.startIndex; i < this.endIndex; i++) {\n      var dataItem = this.dataItems.getIndex(i);\n      var radiusValuePercent = dataItem.values.radiusValue.percent;\n      if (radiusValuePercent > this._maxRadiusPercent) {\n        this._maxRadiusPercent = radiusValuePercent;\n      }\n    }\n    _super.prototype.validate.call(this);\n    if (this.alignLabels) {\n      if (this.startAngle > this.endAngle) {\n        this._rightItems.reverse();\n      } else {\n        this._leftItems.reverse();\n      }\n      this._rightItems.sort(function (a, b) {\n        var aAngle = (a.slice.middleAngle + 360) % 360;\n        var bAngle = (b.slice.middleAngle + 360) % 360;\n        if (aAngle > 270) {\n          aAngle -= 360;\n        }\n        if (bAngle > 270) {\n          bAngle -= 360;\n        }\n        if (aAngle < bAngle) {\n          return -1;\n        } else if (aAngle > bAngle) {\n          return 1;\n        } else {\n          return 0;\n        }\n      });\n      this._leftItems.sort(function (a, b) {\n        var aAngle = (a.slice.middleAngle + 360) % 360;\n        var bAngle = (b.slice.middleAngle + 360) % 360;\n        if (aAngle < bAngle) {\n          return 1;\n        } else if (aAngle > bAngle) {\n          return -1;\n        } else {\n          return 0;\n        }\n      });\n      this.arrangeLabels(this._rightItems);\n      this.arrangeLabels2(this._rightItems);\n      this.arrangeLabels(this._leftItems);\n      this.arrangeLabels2(this._leftItems);\n    }\n  };\n  /**\r\n   * Validates data item's element, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n  PieSeries.prototype.validateDataElement = function (dataItem) {\n    if (this.pixelRadius > 0) {\n      if (this.ignoreZeroValues && (dataItem.value == 0 || dataItem.value == null)) {\n        dataItem.__disabled = true;\n      } else {\n        dataItem.__disabled = false;\n      }\n      // SLICE\n      var slice = dataItem.slice;\n      slice.radius = this.pixelRadius;\n      if ($type.isNumber(dataItem.radiusValue)) {\n        slice.radius = this.pixelInnerRadius + (this.pixelRadius - this.pixelInnerRadius) * dataItem.values.radiusValue.percent / this._maxRadiusPercent;\n      }\n      if (!(slice.innerRadius instanceof Percent)) {\n        slice.innerRadius = this.pixelInnerRadius;\n      }\n      slice.startAngle = this._currentStartAngle;\n      slice.arc = Math.abs(dataItem.values.value.percent) * (this.endAngle - this.startAngle) / 100;\n      // LABEL\n      if (!this.labels.template.disabled) {\n        var label = dataItem.label;\n        var tick = dataItem.tick;\n        tick.slice = slice;\n        tick.label = label;\n        var normalizedMiddleAngle = (slice.middleAngle + 360) % 360; // force angle to be 0 - 360;\n        var point = void 0;\n        if (this.alignLabels) {\n          var labelRadius = label.pixelRadius(slice.radius);\n          var x = tick.length + labelRadius;\n          label.dx = 0;\n          label.dy = 0;\n          label.verticalCenter = \"middle\";\n          var arcRect = this._arcRect;\n          // right half\n          if (normalizedMiddleAngle > 270 || normalizedMiddleAngle <= 90) {\n            x += (arcRect.width + arcRect.x) * this.pixelRadius;\n            label.horizontalCenter = \"left\";\n            this._rightItems.push(dataItem);\n          }\n          // left half\n          else {\n            x -= arcRect.x * this.pixelRadius;\n            label.horizontalCenter = \"right\";\n            this._leftItems.push(dataItem);\n            x *= -1;\n          }\n          var distance = slice.radius + tick.length + labelRadius;\n          point = {\n            x: x,\n            y: slice.iy * distance\n          };\n          label.moveTo(point);\n        } else {\n          var depth = slice[\"depth\"];\n          if (!$type.isNumber(depth)) {\n            depth = 0;\n          }\n          label.fixPosition(slice.middleAngle, slice.radius, slice.radiusY, 0, -depth);\n        }\n      }\n      this._currentStartAngle += slice.arc;\n      // do this at the end, otherwise bullets won't be positioned properly\n      _super.prototype.validateDataElement.call(this, dataItem);\n    }\n  };\n  Object.defineProperty(PieSeries.prototype, \"radius\", {\n    /**\r\n     * @return Radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n    /**\r\n     * Outer radius for the series' slices in pixels or [[Percent]].\r\n     *\r\n     * @param value  Radius\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"radius\", value, true, false, 10, false)) {\n        this.invalidateDataItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PieSeries.prototype, \"pixelRadius\", {\n    /**\r\n     * @return Radius\r\n     * @ignore\r\n     */\n    get: function () {\n      return this._pixelRadius;\n    },\n    /**\r\n     * @ignore\r\n     */\n    set: function (value) {\n      if (this._pixelRadius != value) {\n        this._pixelRadius = value;\n        this.invalidateDataItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PieSeries.prototype, \"pixelInnerRadius\", {\n    /**\r\n     * @return Pixel inner radius\r\n     * @ignore\r\n     */\n    get: function () {\n      return this._pixelInnerRadius;\n    },\n    /**\r\n     * @ignore\r\n     */\n    set: function (value) {\n      if (this._pixelInnerRadius != value) {\n        this._pixelInnerRadius = value;\n        this.invalidateDataItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PieSeries.prototype, \"innerRadius\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n    /**\r\n     * Inner radius for the series' slices in pixels.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Redo so that users can set it\r\n     * @param value  Radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PieSeries.prototype, \"startAngle\", {\n    /**\r\n     * @return Angle\r\n     */\n    get: function () {\n      var startAngle = this.getPropertyValue(\"startAngle\");\n      if ($type.isNumber(startAngle)) {\n        return startAngle;\n      } else {\n        return this._startAngleInternal;\n      }\n    },\n    /**\r\n     * Start angle for the series' slices in degrees. (0-360)\r\n     *\r\n     * @param value  Angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PieSeries.prototype, \"endAngle\", {\n    /**\r\n     * @return Angle\r\n     */\n    get: function () {\n      var endAngle = this.getPropertyValue(\"endAngle\");\n      if ($type.isNumber(endAngle)) {\n        return endAngle;\n      } else {\n        return this._endAngleInternal;\n      }\n    },\n    /**\r\n     * End angle for the series' slices in degrees. (0-360)\r\n     *\r\n     * @param value  Angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Positions series bullet.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param bullet  Bullet\r\n   */\n  PieSeries.prototype.positionBullet = function (bullet) {\n    _super.prototype.positionBullet.call(this, bullet);\n    var dataItem = bullet.dataItem;\n    var slice = dataItem.slice;\n    var locationX = bullet.locationX;\n    if (!$type.isNumber(locationX)) {\n      locationX = 0.5;\n    }\n    var locationY = bullet.locationY;\n    if (!$type.isNumber(locationY)) {\n      locationY = 1;\n    }\n    var angle = slice.startAngle + slice.arc * locationX;\n    bullet.x = locationY * slice.radius * $math.cos(angle);\n    bullet.y = locationY * slice.radiusY * $math.sin(angle);\n  };\n  /**\r\n   * Repositions bullet and labels when slice moves.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n  PieSeries.prototype.handleSliceMove = function (event) {\n    if (!this.alignLabels) {\n      var slice = event.target;\n      var dataItem = slice.dataItem;\n      // moving textelement, as label dx and dy are already employed for aligning\n      //@labeltodo\n      if (dataItem) {\n        var label = dataItem.label;\n        if (label) {\n          label.dx = label.fdx + slice.dx + slice.pixelX;\n          label.dy = label.fdy + slice.dy + slice.pixelY;\n        }\n      }\n    }\n  };\n  Object.defineProperty(PieSeries.prototype, \"bbox\", {\n    /**\r\n     * Returns bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function () {\n      if (this.definedBBox) {\n        return this.definedBBox;\n      }\n      var chart = this.chart;\n      if (chart) {\n        return $math.getArcRect(chart.startAngle, chart.endAngle, this.pixelRadius);\n      }\n      return $math.getArcRect(this.startAngle, this.endAngle, this.pixelRadius);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PieSeries;\n}(PercentSeries);\nexport { PieSeries };\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"PieSeries\"] = PieSeries;\nregistry.registeredClasses[\"PieSeriesDataItem\"] = PieSeriesDataItem;","map":{"version":3,"mappings":"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","names":["PercentSeries","PercentSeriesDataItem","Slice","AxisLabelCircular","PieTick","registry","$math","$type","Percent","percent","__extends","_super","_this","className","values","radiusValue","applyTheme","Object","PieSeriesDataItem","value","setValue","duration","delay","toValue","fields","hide","show","alignLabels","layout","labels","template","radius","addDisposer","events","on","invalidate","PieSeries","applyInternalDefaults","hasValue","readerTitle","language","translate","slice","isMeasured","defaultState","properties","scale","observe","handleSliceScale","handleSliceMove","tooltipText","hoverState","states","create","shiftRadius","togglable","event","target","hideTooltip","interactions","lastHitPointer","touch","isActive","isHover","activeState","_leftItems","_rightItems","_currentStartAngle","startAngle","_arcRect","getArcRect","endAngle","_maxRadiusPercent","i","startIndex","endIndex","dataItem","dataItems","getIndex","radiusValuePercent","validate","reverse","sort","a","b","aAngle","middleAngle","bAngle","arrangeLabels","arrangeLabels2","pixelRadius","ignoreZeroValues","__disabled","isNumber","pixelInnerRadius","innerRadius","arc","Math","abs","disabled","label","tick","normalizedMiddleAngle","point","labelRadius","x","length","dx","dy","verticalCenter","arcRect","width","horizontalCenter","push","distance","y","iy","moveTo","depth","fixPosition","radiusY","validateDataElement","getPropertyValue","setPercentProperty","invalidateDataItems","_pixelRadius","_pixelInnerRadius","_startAngleInternal","setPropertyValue","normalizeAngle","_endAngleInternal","bullet","positionBullet","locationX","locationY","angle","cos","sin","fdx","pixelX","fdy","pixelY","definedBBox","chart","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\series\\PieSeries.ts"],"sourcesContent":["/**\r\n * Defines Pie Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPercentSeriesAdapters, IPercentSeriesDataFields, IPercentSeriesEvents, IPercentSeriesProperties, PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\r\nimport { ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\n//import { Slice3D } from \"../../core/elements/3D/Slice3D\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { PieTick } from \"../elements/PieTick\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { PieChart } from \"../types/PieChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeriesDataItem extends PercentSeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t */\r\n\tpublic _slice: Slice;\r\n\r\n\t/**\r\n\t * A reference to a slice label element.\r\n\t */\r\n\tpublic _label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * A reference to a slice tick element.\r\n\t */\r\n\tpublic _tick: PieTick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeriesDataItem\";\r\n\r\n\t\tthis.values.radiusValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice's radius, if other than default.\r\n\t *\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radiusValue(value: number) {\r\n\t\tthis.setValue(\"radiusValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radiusValue(): number {\r\n\t\treturn this.values.radiusValue.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param delay     Delay hiding (ms)\r\n\t * @param toValue   Target value for animation\r\n\t * @param fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\treturn super.hide(duration, delay, 0, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding visual elements).\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param delay     Delay hiding (ms)\r\n\t * @param fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\treturn super.show(duration, delay, [\"value\", \"radiusValue\"]);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesDataFields extends IPercentSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds item's radius value.\r\n\t */\r\n\tradiusValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesProperties extends IPercentSeriesProperties {\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t */\r\n\tendAngle?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesEvents extends IPercentSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeriesAdapters extends IPercentSeriesAdapters, IPieSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a Pie chart.\r\n *\r\n * @see {@link IPieSeriesEvents} for a list of available Events\r\n * @see {@link IPieSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries extends PercentSeries {\r\n\r\n\tpublic _slice: Slice;\r\n\r\n\tpublic _tick: PieTick;\r\n\r\n\tpublic _label: AxisLabelCircular;\r\n\r\n\tpublic _chart: PieChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPieSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PieSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds current angle for the next slice to start on.\r\n\t */\r\n\tprotected _currentStartAngle: number;\r\n\r\n\t/**\r\n\t * Data items that fall to the left side of the pie.\r\n\t */\r\n\tprotected _leftItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Data items that fall to the right side of the pie.\r\n\t */\r\n\tprotected _rightItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * [_arcRect description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _arcRect: IRectangle;\r\n\r\n\t/**\r\n\t * [_maxRadiusPercent description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _maxRadiusPercent: number;\r\n\r\n\t/**\r\n\t * [_pixelRadius description]\r\n\t *\r\n\t * @ignore this is set by pie chart, not by user\r\n\t */\r\n\tprotected _pixelRadius: number;\r\n\r\n\t/**\r\n\t * [_pixelInnerRadius description]\r\n\t *\r\n\t * @ignore this is set by pie chart, not by user\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _startAngleInternal: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _endAngleInternal: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PieSeries\";\r\n\r\n\t\tthis.alignLabels = true;\r\n\t\t//this.startAngle = -90;\r\n\t\t//this.endAngle = 270;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.labels.template.radius = percent(5);\r\n\r\n\t\tthis.addDisposer(this.labels.template.events.on(\"enabled\", this.invalidate, this, false));\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice();\r\n\t}\r\n\r\n\t/**\r\n\t * creates tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new PieTick();\r\n\t}\r\n\r\n\t/**\r\n\t * creates label\r\n\t */\r\n\tprotected createLabel(): this[\"_label\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie Slice Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits slice.\r\n\t *\r\n\t * @param slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\", \"shiftRadius\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#p')} ({value.value})\";\r\n\r\n\t\tlet hoverState = slice.states.create(\"hover\");\r\n\t\thoverState.properties.scale = 1.05;\r\n\r\n\t\tlet defaultState = slice.defaultState;\r\n\t\tdefaultState.properties.shiftRadius = 0;\r\n\r\n\t\tslice.togglable = true;\r\n\r\n\t\tslice.events.on(\"toggled\", (event) => {\r\n\t\t\tevent.target.hideTooltip();\r\n\r\n\t\t\t// The following takes care of removing hover on subsequent click of\r\n\t\t\t// a slice\r\n\t\t\tif (event.target.interactions.lastHitPointer\r\n\t\t\t\t&& event.target.interactions.lastHitPointer.touch\r\n\t\t\t\t&& !event.target.isActive) {\r\n\t\t\t\tevent.target.isHover = false;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet activeState = slice.states.create(\"active\");\r\n\t\tactiveState.properties.shiftRadius = 0.10;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tthis._leftItems = [];\r\n\t\tthis._rightItems = [];\r\n\r\n\t\tthis._currentStartAngle = this.startAngle;\r\n\t\tthis._arcRect = $math.getArcRect(this.startAngle, this.endAngle);\r\n\r\n\t\tthis._maxRadiusPercent = 0;\r\n\t\tfor (let i = this.startIndex; i < this.endIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet radiusValuePercent = dataItem.values.radiusValue.percent;\r\n\t\t\tif (radiusValuePercent > this._maxRadiusPercent) {\r\n\t\t\t\tthis._maxRadiusPercent = radiusValuePercent;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tif (this.startAngle > this.endAngle) {\r\n\t\t\t\tthis._rightItems.reverse();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._leftItems.reverse()\r\n\t\t\t}\r\n\r\n\r\n\t\t\tthis._rightItems.sort((a, b) => {\r\n\t\t\t\tlet aAngle = (a.slice.middleAngle + 360) % 360;\r\n\t\t\t\tlet bAngle = (b.slice.middleAngle + 360) % 360;\r\n\r\n\t\t\t\tif (aAngle > 270) {\r\n\t\t\t\t\taAngle -= 360;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (bAngle > 270) {\r\n\t\t\t\t\tbAngle -= 360;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (aAngle < bAngle) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if (aAngle > bAngle) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis._leftItems.sort((a, b) => {\r\n\r\n\t\t\t\tlet aAngle = (a.slice.middleAngle + 360) % 360;\r\n\t\t\t\tlet bAngle = (b.slice.middleAngle + 360) % 360;\r\n\r\n\t\t\t\tif (aAngle < bAngle) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if (aAngle > bAngle) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis.arrangeLabels(this._rightItems);\r\n\t\t\tthis.arrangeLabels2(this._rightItems);\r\n\t\t\tthis.arrangeLabels(this._leftItems);\r\n\t\t\tthis.arrangeLabels2(this._leftItems);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif (this.pixelRadius > 0) {\r\n\r\n\t\t\tif (this.ignoreZeroValues && (dataItem.value == 0 || dataItem.value == null)) {\r\n\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t}\r\n\r\n\t\t\t// SLICE\r\n\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\tslice.radius = this.pixelRadius;\r\n\r\n\t\t\tif ($type.isNumber(dataItem.radiusValue)) {\r\n\t\t\t\tslice.radius = this.pixelInnerRadius + (this.pixelRadius - this.pixelInnerRadius) * dataItem.values.radiusValue.percent / this._maxRadiusPercent;\r\n\t\t\t}\r\n\t\t\tif (!(slice.innerRadius instanceof Percent)) {\r\n\t\t\t\tslice.innerRadius = this.pixelInnerRadius;\r\n\t\t\t}\r\n\t\t\tslice.startAngle = this._currentStartAngle;\r\n\r\n\t\t\tslice.arc = Math.abs(dataItem.values.value.percent) * (this.endAngle - this.startAngle) / 100;\r\n\r\n\t\t\t// LABEL\r\n\t\t\tif (!this.labels.template.disabled) {\r\n\t\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\t\tlet tick = dataItem.tick;\r\n\t\t\t\ttick.slice = slice;\r\n\t\t\t\ttick.label = label;\r\n\r\n\t\t\t\tlet normalizedMiddleAngle: number = (slice.middleAngle + 360) % 360; // force angle to be 0 - 360;\r\n\r\n\t\t\t\tlet point: IPoint;\r\n\r\n\t\t\t\tif (this.alignLabels) {\r\n\t\t\t\t\tlet labelRadius = label.pixelRadius(slice.radius);\r\n\t\t\t\t\tlet x: number = tick.length + labelRadius;\r\n\t\t\t\t\tlabel.dx = 0;\r\n\t\t\t\t\tlabel.dy = 0;\r\n\t\t\t\t\tlabel.verticalCenter = \"middle\";\r\n\t\t\t\t\tlet arcRect = this._arcRect;\r\n\t\t\t\t\t// right half\r\n\t\t\t\t\tif (normalizedMiddleAngle > 270 || normalizedMiddleAngle <= 90) {\r\n\t\t\t\t\t\tx += (arcRect.width + arcRect.x) * this.pixelRadius;\r\n\t\t\t\t\t\tlabel.horizontalCenter = \"left\";\r\n\t\t\t\t\t\tthis._rightItems.push(dataItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// left half\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tx -= arcRect.x * this.pixelRadius;\r\n\t\t\t\t\t\tlabel.horizontalCenter = \"right\";\r\n\t\t\t\t\t\tthis._leftItems.push(dataItem);\r\n\t\t\t\t\t\tx *= -1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet distance = slice.radius + tick.length + labelRadius;\r\n\t\t\t\t\tpoint = { x: x, y: slice.iy * distance };\r\n\t\t\t\t\tlabel.moveTo(point);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet depth = (<any>slice)[\"depth\"];\r\n\t\t\t\t\tif (!$type.isNumber(depth)) {\r\n\t\t\t\t\t\tdepth = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlabel.fixPosition(slice.middleAngle, slice.radius, slice.radiusY, 0, -depth);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._currentStartAngle += slice.arc;\r\n\r\n\t\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels or [[Percent]].\r\n\t *\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, true, false, 10, false)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t * @ignore\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn this._pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set pixelRadius(value: number) {\r\n\t\tif (this._pixelRadius != value) {\r\n\t\t\tthis._pixelRadius = value;\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pixel inner radius\r\n\t * @ignore\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set pixelInnerRadius(value: number) {\r\n\t\tif (this._pixelInnerRadius != value) {\r\n\t\t\tthis._pixelInnerRadius = value;\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\tlet startAngle = this.getPropertyValue(\"startAngle\");\r\n\t\tif ($type.isNumber(startAngle)) {\r\n\t\t\treturn startAngle;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._startAngleInternal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\tlet endAngle = this.getPropertyValue(\"endAngle\");\r\n\t\tif ($type.isNumber(endAngle)) {\r\n\t\t\treturn endAngle;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._endAngleInternal;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: Slice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tlet angle = slice.startAngle + slice.arc * locationX;\r\n\r\n\t\tbullet.x = locationY * slice.radius * $math.cos(angle);\r\n\t\tbullet.y = locationY * slice.radiusY * $math.sin(angle);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Repositions bullet and labels when slice moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSliceMove(event: AMEvent<this[\"_slice\"], ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (!this.alignLabels) {\r\n\r\n\t\t\tlet slice = event.target;\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t\t// moving textelement, as label dx and dy are already employed for aligning\r\n\t\t\t//@labeltodo\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet label = dataItem.label;\r\n\t\t\t\tif (label) {\r\n\t\t\t\t\tlabel.dx = label.fdx + slice.dx + slice.pixelX;\r\n\t\t\t\t\tlabel.dy = label.fdy + slice.dy + slice.pixelY;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\treturn $math.getArcRect(chart.startAngle, chart.endAngle, this.pixelRadius);\r\n\t\t}\r\n\r\n\t\treturn $math.getArcRect(this.startAngle, this.endAngle, this.pixelRadius);\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries\"] = PieSeries;\r\nregistry.registeredClasses[\"PieSeriesDataItem\"] = PieSeriesDataItem;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}