{"ast":null,"code":"/**\r\n * Base class for all Axis\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Component } from \"../../core/Component\";\nimport { Container } from \"../../core/Container\";\nimport { DataItem } from \"../../core/DataItem\";\nimport { AxisBreak } from \"./AxisBreak\";\nimport { Label } from \"../../core/elements/Label\";\nimport { Tooltip } from \"../../core/elements/Tooltip\";\nimport { SortedListTemplate } from \"../../core/utils/SortedList\";\nimport { List, ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $number from \"../../core/utils/Number\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $type from \"../../core/utils/Type\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[Axis]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar AxisDataItem = /** @class */function (_super) {\n  __extends(AxisDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function AxisDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"AxisDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(AxisDataItem.prototype, \"grid\", {\n    /**\r\n     * @return Grid element\r\n     */\n    get: function () {\n      if (!this._grid) {\n        var component_1 = this.component;\n        if (component_1) {\n          var template = void 0;\n          var grid_1;\n          if (this.isRange) {\n            template = component_1.axisRanges.template.grid;\n            if (template.disabled) {\n              return;\n            } else {\n              grid_1 = template.clone();\n            }\n          } else {\n            template = component_1.renderer.grid.template;\n            if (template.disabled) {\n              return;\n            } else {\n              grid_1 = component_1.renderer.grid.create();\n              this._disposers.push(new Disposer(function () {\n                component_1.renderer.grid.removeValue(grid_1);\n              }));\n            }\n          }\n          this.grid = grid_1;\n          grid_1.shouldClone = false;\n          this._disposers.push(grid_1);\n          grid_1.axis = this.component;\n        }\n      }\n      return this._grid;\n    },\n    /**\r\n     * A [[Grid]] element associated with this data item.\r\n     *\r\n     * If there is no grid element associated with data item, a new one is\r\n     * created and returned.\r\n     *\r\n     * @param grid  Grid element\r\n     */\n    set: function (grid) {\n      if (this._grid && this._grid != grid) {\n        $array.remove(this.sprites, this._grid);\n        this._grid.dataItem = undefined;\n      }\n      if (grid) {\n        if (grid.dataItem && grid.dataItem != this) {\n          $array.remove(grid.dataItem.sprites, grid);\n          grid.dataItem.grid = undefined;\n        }\n        this.addSprite(grid);\n      }\n      this._grid = grid;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisDataItem.prototype, \"tick\", {\n    /**\r\n     * @return Tick element\r\n     */\n    get: function () {\n      if (!this._tick) {\n        var component_2 = this.component;\n        if (component_2) {\n          var template = void 0;\n          var tick_1;\n          if (this.isRange) {\n            template = component_2.axisRanges.template.tick;\n            if (template.disabled) {\n              return;\n            } else {\n              tick_1 = template.clone();\n            }\n          } else {\n            template = component_2.renderer.ticks.template;\n            if (template.disabled) {\n              return;\n            } else {\n              tick_1 = component_2.renderer.ticks.create();\n              this._disposers.push(new Disposer(function () {\n                component_2.renderer.ticks.removeValue(tick_1);\n              }));\n            }\n          }\n          this.tick = tick_1;\n          tick_1.axis = this.component;\n          tick_1.shouldClone = false;\n          this._disposers.push(tick_1);\n        }\n      }\n      return this._tick;\n    },\n    /**\r\n     * An [[AxisTick]] element associated with this data item.\r\n     *\r\n     * If there is no tick element associated with data item, a new one is\r\n     * created and returned.\r\n     *\r\n     * @param tick  Tick element\r\n     */\n    set: function (tick) {\n      if (this._tick && this._tick != tick) {\n        $array.remove(this.sprites, this._tick);\n        this._tick.dataItem = undefined;\n      }\n      if (tick) {\n        if (tick.dataItem && tick.dataItem != this) {\n          $array.remove(tick.dataItem.sprites, tick);\n          tick.dataItem.tick = undefined;\n        }\n        this.addSprite(tick);\n      }\n      this._tick = tick;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisDataItem.prototype, \"label\", {\n    /**\r\n     * @return Label element\r\n     */\n    get: function () {\n      if (!this._label) {\n        var component_3 = this.component;\n        if (component_3) {\n          var template = void 0;\n          var label_1;\n          if (this.isRange) {\n            template = component_3.axisRanges.template.label;\n            if (template.disabled) {\n              return;\n            } else {\n              label_1 = template.clone();\n            }\n          } else {\n            template = component_3.renderer.labels.template;\n            if (template.disabled) {\n              return;\n            } else {\n              label_1 = component_3.renderer.labels.create();\n              this._disposers.push(new Disposer(function () {\n                component_3.renderer.labels.removeValue(label_1);\n              }));\n            }\n          }\n          this._disposers.push(label_1);\n          this.label = label_1;\n          label_1.shouldClone = false;\n          label_1.axis = this.component;\n          label_1.virtualParent = component_3;\n        }\n      }\n      return this._label;\n    },\n    /**\r\n     * An [[AxisLabel]] element associated with this data item.\r\n     *\r\n     * If there is no label element associated with data item, a new one is\r\n     * created and returned.\r\n     *\r\n     * @param label Label element\r\n     */\n    set: function (label) {\n      if (this._label && this._label != label) {\n        $array.remove(this.sprites, this._label);\n        this._label.dataItem = undefined;\n      }\n      if (label) {\n        if (label.dataItem && label.dataItem != this) {\n          $array.remove(label.dataItem.sprites, label);\n          label.dataItem.label = undefined;\n        }\n        this.addSprite(label);\n      }\n      this._label = label;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisDataItem.prototype, \"axisFill\", {\n    /**\r\n     * @return Label element\r\n     */\n    get: function () {\n      if (!this._axisFill) {\n        var component_4 = this.component;\n        if (component_4) {\n          var template = void 0;\n          var axisFill_1;\n          if (this.isRange) {\n            template = component_4.axisRanges.template.axisFill;\n            if (!this.isTemplate && template.disabled) {\n              return;\n            } else {\n              axisFill_1 = template.clone();\n            }\n          } else {\n            template = component_4.renderer.axisFills.template;\n            if (template.disabled) {\n              return;\n            } else {\n              axisFill_1 = component_4.renderer.axisFills.create();\n              this._disposers.push(new Disposer(function () {\n                component_4.renderer.axisFills.removeValue(axisFill_1);\n              }));\n            }\n          }\n          this.axisFill = axisFill_1;\n          axisFill_1.shouldClone = false;\n          this._disposers.push(axisFill_1);\n        }\n      }\n      return this._axisFill;\n    },\n    /**\r\n     * An [[AxisFill]] associated element with this data item.\r\n     *\r\n     * If there is no fill element associated with data item, a new one is\r\n     * created and returned.\r\n     *\r\n     * @param label Label element\r\n     */\n    set: function (axisFill) {\n      if (this._axisFill && this._axisFill != axisFill) {\n        $array.remove(this.sprites, this._axisFill);\n        this._axisFill.dataItem = undefined;\n      }\n      if (axisFill) {\n        if (axisFill.dataItem && axisFill.dataItem != this) {\n          $array.remove(axisFill.dataItem.sprites, axisFill);\n          axisFill.dataItem.axisFill = undefined;\n        }\n        axisFill.axis = this.component;\n        this.addSprite(axisFill);\n      }\n      this._axisFill = axisFill;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisDataItem.prototype, \"text\", {\n    /**\r\n     * @return Text label\r\n     */\n    get: function () {\n      return this._text;\n    },\n    /**\r\n     * Text to be used as data item's label.\r\n     *\r\n     * @param text Text label\r\n     */\n    set: function (text) {\n      this._text = text;\n      if (this._label) {\n        // do not use getter, it will create unwanted instances!\n        this._label.text = text;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisDataItem.prototype, \"mask\", {\n    /**\r\n     * Data item's mask.\r\n     *\r\n     * @return Mask\r\n     */\n    get: function () {\n      return this._mask;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisDataItem.prototype, \"contents\", {\n    /**\r\n     * Returns a [[Container]] to place all visual elements, related to data item\r\n     * in.\r\n     *\r\n     * If there is no Container, a new one is created.\r\n     *\r\n     * @return Contents container\r\n     */\n    get: function () {\n      if (!this._contents) {\n        var contents = new Container();\n        this.addSprite(contents);\n        contents.isMeasured = false;\n        this._contents = contents;\n        var component = this.component;\n        if (component) {\n          var mask = component.renderer.createFill(this.component);\n          mask.disabled = false;\n          mask.axis = component;\n          this.addSprite(mask);\n          this._mask = mask;\n          contents.mask = mask;\n        }\n      }\n      return this._contents;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisDataItem.prototype, \"axisBreak\", {\n    /**\r\n     * @return Axis break\r\n     */\n    get: function () {\n      return this._axisBreak;\n    },\n    /**\r\n     * An [[AxisBreak]] this data item falls within.\r\n     *\r\n     * @param axisBreak Axis break\r\n     */\n    set: function (axisBreak) {\n      if (this._axisBreak) {\n        this._axisBreak.dataItems.removeValue(this);\n      }\n      if (axisBreak) {\n        axisBreak.dataItems.push(this);\n      }\n      this._axisBreak = axisBreak;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Re-draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  AxisDataItem.prototype.validate = function () {\n    if (this.component) {\n      this.component.validateDataElement(this);\n    }\n  };\n  /**\r\n   * Appends data item's elements to the parent [[Container]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  AxisDataItem.prototype.appendChildren = function () {\n    if (this.component) {\n      this.component.appendDataItem(this);\n    }\n  };\n  /**\r\n   * Checks if data item has particular property set.\r\n   *\r\n   * @param prop  Property name\r\n   * @return Property set?\r\n   */\n  AxisDataItem.prototype.hasProperty = function (prop) {\n    return prop == \"component\" ? true : _super.prototype.hasProperty.call(this, prop);\n  };\n  /**\r\n   * Copies all parameters from another [[AxisDataItem]].\r\n   *\r\n   * @param source Source AxisDataItem\r\n   */\n  AxisDataItem.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    this.text = source.text;\n    if (source.bullet) {\n      this.bullet = source.bullet.clone();\n    }\n    this.minPosition = source.minPosition;\n    this.maxPosition = source.maxPosition;\n  };\n  /**\r\n   * Sets visibility of the Data Item.\r\n   *\r\n   * @param value Data Item\r\n   */\n  AxisDataItem.prototype.setVisibility = function (value, noChangeValues) {\n    _super.prototype.setVisibility.call(this, value, noChangeValues);\n    if (this._contents) {\n      this._contents.visible = value;\n    }\n  };\n  Object.defineProperty(AxisDataItem.prototype, \"bullet\", {\n    /**\r\n     * @return Bullet\r\n     */\n    get: function () {\n      return this._bullet;\n    },\n    /**\r\n     * Set it to an instance of any [[Sprite]]. It will be displayed as an axis\r\n     * bullet in the middle of the cell, or specific value.\r\n     *\r\n     * If you need position bullet relatively to the cell, use [[AxisBullet]]\r\n     * instead. It has a `location` property which can be used to indicate\r\n     * precise relative location within cell/range.\r\n     *\r\n     * Also, [[AxisBullet]] is a [[Container]] so you can push any other element\r\n     * into it.\r\n     *\r\n     * NOTE: `location` is relative to the parent axis range's scope, i.e.\r\n     * between its `date` and `endDate` for [[DateAxis]], or `value`/`endValue`\r\n     * ([[ValueAxis]]), or `category`/`endCategory` ([[categoryAxis]]).\r\n     *\r\n     * ```TypeScript\r\n     * let range = dateAxis.axisRanges.create();\r\n     * range.date = new Date(2018, 0, 5);\r\n     *\r\n     * let flag = new am4plugins_bullets.FlagBullet();\r\n     * flag.label.text = \"Hello\";\r\n     *\r\n     * range.bullet = flag;\r\n     * ```\r\n     * ```JavaScript\r\n     * var range = dateAxis.axisRanges.create();\r\n     * range.date = new Date(2018, 0, 5);\r\n     *\r\n     * var flag = new am4plugins_bullets.FlagBullet();\r\n     * flag.label.text = \"Hello\";\r\n     *\r\n     * range.bullet = flag;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"xAxes\": [{\r\n     *     \"type\": \"DateAxis\",\r\n     *     // ...\r\n     *     \"axisRanges\": [{\r\n     *       \"date\": new Date(2018, 0, 5),\r\n     *       \"bullet: {\r\n     *         \"type\": \"FlagBullet\",\r\n     *         \"label\": {\r\n     *           \"text\": \"Hello\"\r\n     *         }\r\n     *       }\r\n     *     }]\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @since 4.5.9\r\n     * @param  value  Bullet\r\n     */\n    set: function (value) {\n      if (this._bullet && this._bullet != value) {\n        $array.remove(this.sprites, this._bullet);\n        this._bullet.dataItem = undefined;\n      }\n      this._bullet = value;\n      if (value) {\n        this.addSprite(value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return AxisDataItem;\n}(DataItem);\nexport { AxisDataItem };\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines named positions for data item's location within [[Axis]].\r\n */\nexport var AxisItemLocation;\n(function (AxisItemLocation) {\n  AxisItemLocation[AxisItemLocation[\"Start\"] = 0] = \"Start\";\n  AxisItemLocation[AxisItemLocation[\"Middle\"] = 0.5] = \"Middle\";\n  AxisItemLocation[AxisItemLocation[\"End\"] = 1] = \"End\";\n})(AxisItemLocation || (AxisItemLocation = {}));\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * A base class for all Axis elements.\r\n *\r\n * @see {@link IAxisEvents} for a list of available Events\r\n * @see {@link IAxisAdapters} for a list of available Adapters\r\n */\nvar Axis = /** @class */function (_super) {\n  __extends(Axis, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Axis() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * Number of Grid elements on the axis.\r\n     */\n    _this._gridCount = 10;\n    /**\r\n     * A list of [[XYSeries]] that are using this Axis.\r\n     */\n    _this._series = new List();\n    /**\r\n     * Specifies if axis should be automatically disposed when removing from\r\n     * chart's axis list.\r\n     *\r\n     * @default true\r\n     */\n    _this.autoDispose = true;\n    /**\r\n     * @ignore\r\n     */\n    _this._axisItemCount = 0;\n    if (_this.constructor === Axis) {\n      throw new Error(\"'Axis' cannot be instantiated directly. Please use a specific axis type.\");\n    }\n    _this.hideTooltipWhileZooming = true;\n    _this.minWidth = 0.0001;\n    _this.minHeight = 0.0001;\n    _this.className = \"Axis\";\n    _this.shouldClone = false;\n    _this.setPropertyValue(\"cursorTooltipEnabled\", true);\n    _this.toggleZoomOutButton = true;\n    _this.zoomable = true;\n    var interfaceColors = new InterfaceColorSet();\n    // Create title\n    _this.title = new Label();\n    _this.title.shouldClone = false;\n    _this._disposers.push(_this.title);\n    _this.setPropertyValue(\"startLocation\", 0);\n    _this.setPropertyValue(\"endLocation\", 1);\n    // Data item iterator\n    _this._dataItemsIterator = new $iter.ListIterator(_this.dataItems, function () {\n      return _this.dataItems.create();\n    });\n    _this._dataItemsIterator.createNewItems = true;\n    // Create tooltip\n    var tooltip = new Tooltip();\n    _this._disposers.push(tooltip);\n    tooltip.label.padding(5, 10, 5, 10);\n    tooltip.background.pointerLength = 5;\n    tooltip.fitPointerToBounds = true;\n    tooltip.background.filters.clear();\n    // Set virtual parentfor the tooltip so that it can properly inheirt\n    // formatters from the axis.\n    tooltip.virtualParent = _this;\n    // Create background element for the tooltip\n    var background = tooltip.background;\n    background.cornerRadius = 0;\n    background.fill = interfaceColors.getFor(\"alternativeBackground\");\n    background.stroke = background.fill;\n    background.strokeWidth = 1;\n    background.fillOpacity = 1;\n    tooltip.label.fill = interfaceColors.getFor(\"alternativeText\");\n    _this.tooltip = tooltip;\n    // Accessibility\n    _this.readerHidden = true;\n    _this.events.on(\"rangechangestarted\", function () {\n      _this.series.each(function (series) {\n        if (series.hideTooltipWhileZooming) {\n          series.tooltip.hide();\n          series.tooltip.preventShow = true;\n        }\n      });\n      if (_this.hideTooltipWhileZooming) {\n        _this.tooltip.hide();\n        _this.tooltip.preventShow = true;\n      }\n    }, undefined, false);\n    _this.events.on(\"rangechangeended\", function () {\n      _this.series.each(function (series) {\n        if (series.hideTooltipWhileZooming) {\n          series.tooltip.hide();\n          series.tooltip.preventShow = false;\n        }\n      });\n      if (_this.hideTooltipWhileZooming) {\n        _this.tooltip.hide();\n        _this.tooltip.preventShow = false;\n      }\n    }, undefined, false);\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Holds reference to a function that accepts a DataItem and its index as\r\n   * parameters.\r\n   *\r\n   * It can either return a fill opacity for a fill, or manipulate data item\r\n   * directly, to create various highlighting scenarios.\r\n   *\r\n   * For example, you can set it up to highlight only weekends on a\r\n   * [[DateAxis]].\r\n   */\n  Axis.prototype.fillRule = function (dataItem, index) {\n    if (!$type.isNumber(index)) {\n      index = dataItem.index;\n    }\n    if (index / 2 == Math.round(index / 2)) {\n      dataItem.axisFill.__disabled = true;\n      dataItem.axisFill.opacity = 0;\n    } else {\n      dataItem.axisFill.opacity = 1;\n      dataItem.axisFill.__disabled = false;\n    }\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n  Axis.prototype.createDataItem = function () {\n    return new AxisDataItem();\n  };\n  /**\r\n   * Invalidates layout.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Axis.prototype.invalidateLayout = function () {\n    _super.prototype.invalidateLayout.call(this);\n    // this puts series after axis in invalidation order also makes series update it's data items in case widht/height of a series is not 100%\n    $iter.each(this.series.iterator(), function (series) {\n      series.invalidateLayout();\n    });\n  };\n  /**\r\n   * Invalidates series of this axis.\r\n   */\n  Axis.prototype.invalidateSeries = function () {\n    // this puts series after axis in invalidation order also makes series update it's data items in case widht/height of a series is not 100%\n    $iter.each(this.series.iterator(), function (series) {\n      series.invalidate();\n    });\n  };\n  /**\r\n   * Override to cancel super call for data element validation.\r\n   * @ignore\r\n   */\n  Axis.prototype.validateDataElements = function () {\n    this._axisItemCount = 0;\n    if (this.ghostLabel) {\n      this.renderer.updateLabelElement(this.ghostLabel, this.start, this.end);\n      this.ghostLabel.validate();\n    }\n  };\n  /**\r\n   * Recalculates the number of grid items on the axis.\r\n   */\n  Axis.prototype.updateGridCount = function () {\n    if (this.renderer) {\n      var gridCount = this.axisLength / this.renderer.minGridDistance;\n      if (gridCount != this._gridCount) {\n        this._gridCount = gridCount;\n        this.clearCache();\n      }\n    }\n  };\n  /**\r\n   * Redraws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Axis.prototype.validateLayout = function () {\n    this.axisFullLength = this.axisLength / (this.end - this.start);\n    _super.prototype.validateLayout.call(this);\n    this.updateGridCount();\n    var renderer = this.renderer;\n    if (renderer) {\n      renderer.updateAxisLine();\n      renderer.updateTooltip();\n      renderer.updateBaseGridElement();\n    }\n    if (this._prevLength != this.axisLength) {\n      this.dispatchImmediately(\"lengthchanged\");\n      this._prevLength = this.axisLength;\n    }\n  };\n  /**\r\n   * Initializes Axis' renderer.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Axis.prototype.initRenderer = function () {};\n  /**\r\n   * Adds a data item to the Axis.\r\n   *\r\n   * @param dataItem Data item\r\n   */\n  Axis.prototype.appendDataItem = function (dataItem) {\n    var renderer = this.renderer;\n    var tick = dataItem.tick;\n    if (tick) {\n      if (tick.above) {\n        tick.parent = renderer.bulletsContainer;\n      } else {\n        tick.parent = renderer.gridContainer;\n      }\n    }\n    if (dataItem.label) {\n      dataItem.label.parent = renderer;\n    }\n    var axisFill = dataItem.axisFill;\n    if (axisFill) {\n      if (axisFill.above) {\n        axisFill.parent = renderer.bulletsContainer;\n      } else {\n        axisFill.parent = renderer.gridContainer;\n      }\n    }\n    var grid = dataItem.grid;\n    if (grid) {\n      if (grid.above) {\n        grid.parent = renderer.bulletsContainer;\n      } else {\n        grid.parent = renderer.gridContainer;\n      }\n    }\n    if (dataItem.bullet) {\n      dataItem.bullet.parent = renderer.bulletsContainer;\n    }\n  };\n  /**\r\n   * Redraws Axis' related items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Axis.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n    this.validateLayout();\n    this.renderer.updateGridContainer();\n  };\n  /**\r\n   * Redars Axis ranges.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Axis.prototype.validateAxisRanges = function () {\n    var _this = this;\n    $iter.each(this.axisRanges.iterator(), function (axisRange) {\n      _this.appendDataItem(axisRange);\n      _this.validateDataElement(axisRange);\n      if (axisRange.grid) {\n        axisRange.grid.validate();\n      }\n      if (axisRange.tick) {\n        axisRange.tick.validate();\n      }\n      if (axisRange.axisFill) {\n        axisRange.axisFill.validate();\n      }\n      if (axisRange.label) {\n        axisRange.label.validate();\n      }\n    });\n  };\n  /**\r\n   * Invalidates all axis breaks, so they are redrawn.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Axis.prototype.validateBreaks = function () {\n    if (this._axisBreaks) {\n      $iter.each(this._axisBreaks.iterator(), function (axisBreak) {\n        axisBreak.invalidate();\n      });\n    }\n  };\n  /**\r\n   * Associates an Axis break with this Axis, after it is inserted into\r\n   * `axisBreaks`.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Event\r\n   */\n  Axis.prototype.processBreak = function (event) {\n    var axisBreak = event.newValue;\n    axisBreak.parent = this.renderer.breakContainer;\n    axisBreak.axis = this;\n  };\n  /**\r\n   * Registers a [[XYSeries]] element with this Axis.\r\n   *\r\n   * Returns a [[Disposer]] for all events, added to Series for watching\r\n   * changes in Axis, and vice versa.\r\n   * @ignore\r\n   * @param series  Series\r\n   * @return Event disposer\r\n   */\n  Axis.prototype.registerSeries = function (series) {\n    var _this = this;\n    this.series.moveValue(series);\n    return new MultiDisposer([new Disposer(function () {\n      _this.series.removeValue(series);\n    }), this.events.on(\"lengthchanged\", series.invalidate, series, false), this.events.on(\"lengthchanged\", series.createMask, series, false), this.events.on(\"startchanged\", series.invalidate, series, false), this.events.on(\"endchanged\", series.invalidate, series, false)]);\n  };\n  Object.defineProperty(Axis.prototype, \"renderer\", {\n    /**\r\n     * @return Renderer\r\n     */\n    get: function () {\n      return this._renderer;\n    },\n    /**\r\n     * An [[AxisRenderer]] to be used to render this Axis.\r\n     *\r\n     * Please note that most of the settings, related to Axis' appearance are set\r\n     * via its renderer. Not directly on the Axis.\r\n     *\r\n     * E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * axis.renderer.inside = true;\r\n     * axis.renderer.minLabelPosition = 0.1;\r\n     * axis.renderer.maxLabelPosition = 0.9;\r\n     * ```\r\n     * ```JavaScript\r\n     * axis.renderer.inside = true;\r\n     * axis.renderer.minLabelPosition = 0.1;\r\n     * axis.renderer.maxLabelPosition = 0.9;\r\n     * ```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/} for more info\r\n     * @param renderer  Renderer\r\n     */\n    set: function (renderer) {\n      if (renderer != this._renderer) {\n        this._renderer = renderer;\n        renderer.chart = this.chart;\n        renderer.axis = this;\n        renderer.parent = this;\n        this.title.parent = this; // we add title to axis and set layout in renderer to avoid one extra container, as otherwise axis container would be used for holding renderer only\n        this.initRenderer();\n        this._disposers.push(renderer.gridContainer.events.on(\"maxsizechanged\", this.invalidate, this, false));\n        var ghostLabel_1 = this.renderer.labels.create();\n        this._disposers.push(ghostLabel_1);\n        ghostLabel_1.dataItem = this.dataItems.template.clone(); // just for the adapters not to fail\n        ghostLabel_1.text = \"L\";\n        ghostLabel_1.parent = this.renderer;\n        ghostLabel_1.shouldClone = false;\n        ghostLabel_1.fillOpacity = 0;\n        ghostLabel_1.opacity = 0;\n        ghostLabel_1.strokeOpacity = 0;\n        ghostLabel_1.interactionsEnabled = false;\n        ghostLabel_1.validate();\n        this.ghostLabel = ghostLabel_1;\n        this.events.on(\"beforedatavalidated\", function () {\n          ghostLabel_1.text = \"L\";\n        }, undefined, false);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts a relative position to angle. (for circular axes)\r\n   *\r\n   * @param position Position (0-1)\r\n   * @return Angle\r\n   */\n  Axis.prototype.positionToAngle = function (position) {\n    return this.renderer.positionToAngle(position);\n  };\n  /**\r\n   * Converts pixel coordinates to a relative position. (0-1)\r\n   *\r\n   * @param point  Coorinates (px)\r\n   * @return Position (0-1)\r\n   */\n  Axis.prototype.pointToPosition = function (point) {\n    return this.renderer.pointToPosition(point);\n  };\n  /**\r\n   * Converts relative position to coordinate.\r\n   *\r\n   * @since 4.7.15\r\n   * @param position (0-1)\r\n   * @return coordinate (px)\r\n   */\n  Axis.prototype.positionToCoordinate = function (position) {\n    return this.renderer.positionToCoordinate(position);\n  };\n  /**\r\n   * [getAnyRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param start  [description]\r\n   * @param end    [description]\r\n   * @return [description]\r\n   */\n  Axis.prototype.getAnyRangePath = function (start, end) {\n    return this.renderer.getPositionRangePath(start, end);\n  };\n  /**\r\n   * Converts any positional parameter to a relative position on axis.\r\n   *\r\n   * @todo Description (review)\r\n   * @param value  Pisition\r\n   * @return Position (0-1)\r\n   */\n  Axis.prototype.anyToPosition = function (value) {\n    return 0;\n  };\n  /**\r\n   * Converts any positional parameter to a relative position on axis.\r\n   *\r\n   * @todo Description (review)\r\n   * @param value  Pisition\r\n   * @return Orientation point\r\n   */\n  Axis.prototype.anyToPoint = function (value) {\n    return {\n      x: 0,\n      y: 0,\n      angle: 0\n    };\n  };\n  /**\r\n   * [getPositionRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param startPosition [description]\r\n   * @param endPosition   [description]\r\n   * @return [description]\r\n   */\n  Axis.prototype.getPositionRangePath = function (startPosition, endPosition) {\n    if (this.renderer) {\n      return this.renderer.getPositionRangePath(startPosition, endPosition);\n    }\n    return \"\";\n  };\n  Object.defineProperty(Axis.prototype, \"axisLength\", {\n    /**\r\n     * Actual axis length in pixels.\r\n     *\r\n     * @return Axis length (px)\r\n     */\n    get: function () {\n      if (this.renderer) {\n        return this.renderer.axisLength;\n      }\n      return 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Axis.prototype, \"cursorTooltipEnabled\", {\n    /**\r\n     * @return Display tooltip?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"cursorTooltipEnabled\");\n    },\n    /**\r\n     * Indicates if axis should display a tooltip for chart's cursor.\r\n     *\r\n     * @param value Display tooltip?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"cursorTooltipEnabled\", value)) {\n        if (value && this.renderer) {\n          this.renderer.updateTooltip();\n        } else if (this.tooltip) {\n          this.tooltip.hide(0);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Axis.prototype, \"toggleZoomOutButton\", {\n    /**\r\n     * @return Toggle zoom out button?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"toggleZoomOutButton\");\n    },\n    /**\r\n     * Normally, when axis is zoomed in, a zoom out button is shown by a chart,\r\n     * and vice versa: when axis is zoomed out completely, zoom out button is\r\n     * hidden.\r\n     *\r\n     * Setting this to `false` will disable this behavior. Zooming in our out\r\n     * this axis will not reveal or hide zoom out button.\r\n     *\r\n     * @default true\r\n     * @since 4.6.2\r\n     * @param  value  Toggle zoom out button?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"toggleZoomOutButton\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Hides element's [[Tooltip]].\r\n   *\r\n   * @see {@link Tooltip}\r\n   */\n  Axis.prototype.hideTooltip = function (duration) {\n    _super.prototype.hideTooltip.call(this, duration);\n    this._tooltipPosition = undefined;\n  };\n  /**\r\n   * Shows Axis tooltip at specific relative position within Axis. (0-1)\r\n   *\r\n   * @param position Position (0-1)\r\n   * @param local or global position\r\n   */\n  Axis.prototype.showTooltipAtPosition = function (position, local) {\n    var tooltip = this._tooltip;\n    if (!tooltip || this.dataItems.length <= 0) {\n      this._tooltipPosition = undefined;\n    } else {\n      if (!local) {\n        position = this.toAxisPosition(position);\n      }\n      if (!$type.isNumber(position) || position < this.start || position > this.end) {\n        tooltip.hide(0);\n        this._tooltipPosition = undefined;\n        return;\n      }\n      var renderer = this.renderer;\n      //@todo: think of how to solve this better\n      if (!tooltip.parent) {\n        tooltip.parent = this.tooltipContainer;\n      }\n      var tooltipLocation = renderer.tooltipLocation;\n      var startPosition = this.getCellStartPosition(position);\n      var endPosition = this.getCellEndPosition(position);\n      if (this.tooltipPosition == \"fixed\") {\n        position = startPosition + (endPosition - startPosition) * tooltipLocation;\n      }\n      position = $math.fitToRange(position, this.start, this.end);\n      if (this._tooltipPosition != position) {\n        this._tooltipPosition = position;\n        var tooltipLocation2 = renderer.tooltipLocation2;\n        var startPoint = renderer.positionToPoint(startPosition, tooltipLocation2);\n        var endPoint = renderer.positionToPoint(endPosition, tooltipLocation2);\n        // save values so cursor could use them\n        this.currentItemStartPoint = startPoint;\n        this.currentItemEndPoint = endPoint;\n        if (renderer.fullWidthTooltip) {\n          tooltip.width = endPoint.x - startPoint.x;\n          tooltip.height = endPoint.y - startPoint.y;\n        }\n        var point = renderer.positionToPoint(position, tooltipLocation2);\n        var globalPoint = $utils.spritePointToSvg(point, this.renderer.line);\n        tooltip.text = this.getTooltipText(position);\n        if (tooltip.text) {\n          tooltip.delayedPointTo(globalPoint);\n          tooltip.show();\n        }\n      }\n      if (!this.cursorTooltipEnabled || this.tooltip.disabled) {\n        tooltip.hide(0);\n      }\n    }\n  };\n  /**\r\n   * Converts relative position (0-1) to Axis position with zoom level and\r\n   * inversed taken into account.\r\n   *\r\n   * @param position Global position (0-1)\r\n   * @return Position within Axis (0-1)\r\n   */\n  Axis.prototype.toAxisPosition = function (position) {\n    position = this.renderer.toAxisPosition(position);\n    if (position == undefined) {\n      return;\n    }\n    position = position * (this.end - this.start);\n    if (this.renderer.inversed) {\n      position = this.end - position;\n    } else {\n      position = this.start + position;\n    }\n    return position;\n  };\n  /**\r\n   * Converts position on the axis with zoom level and\r\n   * inversed taken into account to global position.\r\n   *\r\n   * @param position Axis position (0-1)\r\n   * @return Global position (0-1)\r\n   */\n  Axis.prototype.toGlobalPosition = function (position) {\n    if (this.renderer.inversed) {\n      position = this.end - position;\n    } else {\n      position = position - this.start;\n    }\n    return position / (this.end - this.start);\n  };\n  /**\r\n   * Returns text to be used for cursor's Axis tooltip.\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position  Position coordinate (px)\r\n   * @return Label text\r\n   */\n  Axis.prototype.getTooltipText = function (position) {\n    return;\n  };\n  /**\r\n   * Updates Axis' tooltip's position and possibly size, and pointer (stem)\r\n   * place.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param pointerOrientation  Pointer (stem) orientation\r\n   * @param boundingRectangle   A rectangle for tooltip to fit within\r\n   */\n  Axis.prototype.updateTooltip = function (pointerOrientation, boundingRectangle) {\n    var tooltip = this._tooltip;\n    if (tooltip) {\n      tooltip.fixDoc = false;\n      tooltip.pointerOrientation = pointerOrientation;\n      tooltip.setBounds($utils.spriteRectToSvg(boundingRectangle, this.renderer.line));\n    }\n  };\n  /**\r\n   * [roundPosition description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param position  Relative position\r\n   * @param location  Location on axis\r\n   * @return Rounded position\r\n   */\n  Axis.prototype.roundPosition = function (position, location, axisLocation) {\n    return position;\n  };\n  /**\r\n   * [getCellStartPosition description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param position [description]\r\n   * @return [description]\r\n   */\n  Axis.prototype.getCellStartPosition = function (position) {\n    return position;\n  };\n  /**\r\n   * [getCellEndPosition description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param position [description]\r\n   * @return [description]\r\n   */\n  Axis.prototype.getCellEndPosition = function (position) {\n    return position;\n  };\n  Object.defineProperty(Axis.prototype, \"axisRanges\", {\n    /**\r\n     * A list of axis ranges for this Axis.\r\n     *\r\n     * @return Axis ranges\r\n     */\n    get: function () {\n      if (!this._axisRanges) {\n        var dataItem = this.createDataItem();\n        dataItem.isRange = true;\n        dataItem.axisFill = this.renderer.axisFills.template.clone();\n        dataItem.grid = this.renderer.grid.template.clone();\n        dataItem.tick = this.renderer.ticks.template.clone();\n        dataItem.label = this.renderer.labels.template.clone();\n        dataItem.isTemplate = true;\n        dataItem.component = this;\n        dataItem.axisFill.disabled = false;\n        dataItem.tick.disabled = false;\n        dataItem.grid.disabled = false;\n        dataItem.label.disabled = false;\n        this._axisRanges = new ListTemplate(dataItem);\n        this._axisRanges.events.on(\"inserted\", this.processAxisRange, this, false);\n        this._disposers.push(new ListDisposer(this._axisRanges));\n        this._disposers.push(this._axisRanges.template);\n      }\n      return this._axisRanges;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Decorates an axis range after it has been added to the axis range list.\r\n   *\r\n   * @param event Event\r\n   */\n  Axis.prototype.processAxisRange = function (event) {\n    var axisRange = event.newValue;\n    axisRange.component = this;\n    axisRange.isRange = true;\n  };\n  Object.defineProperty(Axis.prototype, \"axisBreaks\", {\n    /**\r\n     * A list of axis breaks on this Axis.\r\n     *\r\n     * @return Axis breaks.\r\n     */\n    get: function () {\n      if (!this._axisBreaks) {\n        this._axisBreaks = new SortedListTemplate(this.createAxisBreak(), function (a, b) {\n          return $number.order(a.adjustedStartValue, b.adjustedStartValue);\n        });\n        this._axisBreaks.events.on(\"inserted\", this.processBreak, this, false);\n        this._disposers.push(new ListDisposer(this._axisBreaks));\n        this._disposers.push(this._axisBreaks.template);\n      }\n      return this._axisBreaks;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates a new axis break.\r\n   *\r\n   * @return Axis break\r\n   */\n  Axis.prototype.createAxisBreak = function () {\n    return new AxisBreak();\n  };\n  Object.defineProperty(Axis.prototype, \"series\", {\n    /**\r\n     * A list of Series currently associated with this Axis.\r\n     *\r\n     * @return Series\r\n     */\n    get: function () {\n      if (!this._series) {\n        this._series = new List();\n      }\n      return this._series;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes Series' data items.\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Axis.prototype.processSeriesDataItems = function () {};\n  /**\r\n   * Processes Series' single data item.\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem Data item\r\n   */\n  Axis.prototype.processSeriesDataItem = function (dataItem, axisLetter) {};\n  /**\r\n   * Post-processes Serie's data items.\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Axis.prototype.postProcessSeriesDataItems = function (series) {};\n  /**\r\n   * Post-processes Serie's single data item.\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem Data item\r\n   */\n  Axis.prototype.postProcessSeriesDataItem = function (dataItem) {};\n  //\n  /**\r\n   * Updates Axis based on all Series that might influence it.\r\n   *\r\n   * Called by Series after Series data is validated.\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Axis.prototype.updateAxisBySeries = function () {};\n  /**\r\n   * Hides unused data items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Axis.prototype.hideUnusedDataItems = function () {\n    var _this = this;\n    // hide all unused\n    var dataItemsIterator = this._dataItemsIterator;\n    dataItemsIterator.createNewItems = false;\n    $iter.each(dataItemsIterator.iterator(), function (dataItem) {\n      _this.validateDataElement(dataItem); // solves shrinking\n      dataItem.__disabled = true;\n    });\n    dataItemsIterator.clear();\n    dataItemsIterator.createNewItems = true;\n  };\n  /**\r\n   * Returns a Series' data item that corresponds to specific position on Axis.\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param series    Series\r\n   * @param position  Position (0-1)\r\n   * @param findNearest  Should axis try to find nearest tooltip if there is no data item at exact position\r\n   * @return Data item\r\n   */\n  Axis.prototype.getSeriesDataItem = function (series, position, findNearest) {\n    return;\n  };\n  /**\r\n   * Returns an angle that corresponds to specific position on axis.\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   * @param dataItem  Data item\r\n   * @param key       ???\r\n   * @param location  Location\r\n   * @param stackKey  ???\r\n   * @return Angle\r\n   */\n  Axis.prototype.getAngle = function (dataItem, key, location, stackKey, range) {\n    return;\n  };\n  /**\r\n   * [getX description]\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   * @param dataItem [description]\r\n   * @param key      [description]\r\n   * @param location [description]\r\n   * @param stackKey [description]\r\n   * @return [description]\r\n   */\n  Axis.prototype.getX = function (dataItem, key, location, stackKey, range) {\n    return;\n  };\n  /**\r\n   * [getX description]\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   * @param dataItem [description]\r\n   * @param key      [description]\r\n   * @param location [description]\r\n   * @param stackKey [description]\r\n   * @return [description]\r\n   */\n  Axis.prototype.getPositionX = function (dataItem, key, location, stackKey, range) {\n    return;\n  };\n  /**\r\n   * [getY description]\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   * @param dataItem [description]\r\n   * @param key      [description]\r\n   * @param location [description]\r\n   * @param stackKey [description]\r\n   * @return [description]\r\n   */\n  Axis.prototype.getY = function (dataItem, key, location, stackKey, range) {\n    return;\n  };\n  /**\r\n   * [getY description]\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   * @param dataItem [description]\r\n   * @param key      [description]\r\n   * @param location [description]\r\n   * @param stackKey [description]\r\n   * @return [description]\r\n   */\n  Axis.prototype.getPositionY = function (dataItem, key, location, stackKey, range) {\n    return;\n  };\n  Object.defineProperty(Axis.prototype, \"basePoint\", {\n    /**\r\n     * Coordinates of the actual axis start.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Base point coordinates\r\n     */\n    get: function () {\n      return {\n        x: 0,\n        y: 0\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * [dataChangeUpdate description]\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n  Axis.prototype.dataChangeUpdate = function () {};\n  /**\r\n   * [dataChangeUpdate description]\r\n   *\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n  Axis.prototype.seriesDataChangeUpdate = function (series) {};\n  /**\r\n   * Removes axis breaks that fall between `min` and `max` (???)\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   * @param min  Start value\r\n   * @param max  End value\r\n   * @return Spread o\r\n   */\n  Axis.prototype.adjustDifference = function (min, max) {\n    var difference = max - min;\n    if ($type.isNumber(difference)) {\n      if (this._axisBreaks) {\n        $iter.eachContinue(this._axisBreaks.iterator(), function (axisBreak) {\n          var startValue = axisBreak.adjustedStartValue;\n          var endValue = axisBreak.adjustedEndValue;\n          if ($type.isNumber(startValue) && $type.isNumber(endValue)) {\n            // breaks are sorted, we don't need go further anymore\n            if (startValue > max) {\n              return false;\n            }\n            if (endValue >= min) {\n              if ($type.isNumber(startValue) && $type.isNumber(endValue)) {\n                var breakSize = axisBreak.breakSize;\n                var intersection = $math.intersection({\n                  start: startValue,\n                  end: endValue\n                }, {\n                  start: min,\n                  end: max\n                });\n                if (intersection) {\n                  difference -= (intersection.end - intersection.start) * (1 - breakSize);\n                }\n              }\n            }\n            return true;\n          }\n        });\n      }\n      return difference;\n    }\n  };\n  /**\r\n   * Checks if specific value falls within a break.\r\n   *\r\n   * Returns [[AxisBreak]] the value falls into.\r\n   *\r\n   * @param value  Value to check\r\n   * @return Axis break\r\n   */\n  Axis.prototype.isInBreak = function (value) {\n    if (this._axisBreaks) {\n      return $iter.find(this._axisBreaks.iterator(), function (axisBreak) {\n        return value >= axisBreak.adjustedStartValue && value <= axisBreak.adjustedEndValue;\n      });\n    }\n  };\n  /**\r\n   * [fixAxisBreaks description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n  Axis.prototype.fixAxisBreaks = function () {\n    var _this = this;\n    if (this._axisBreaks) {\n      var axisBreaks = this._axisBreaks;\n      if (axisBreaks.length > 0) {\n        // first make sure that startValue is <= end value\n        // This needs to make a copy of axisBreaks because it mutates the list while traversing\n        // TODO very inefficient\n        $array.each($iter.toArray(axisBreaks.iterator()), function (axisBreak) {\n          var startValue = $math.min(axisBreak.startValue, axisBreak.endValue);\n          var endValue = $math.max(axisBreak.startValue, axisBreak.endValue);\n          axisBreak.adjustedStartValue = startValue;\n          axisBreak.adjustedEndValue = endValue;\n          _this._axisBreaks.update(axisBreak);\n        });\n        var firstAxisBreak = axisBreaks.first;\n        var previousEndValue_1 = Math.min(firstAxisBreak.startValue, firstAxisBreak.endValue);\n        // process breaks\n        // TODO does this need to call axisBreaks.update ?\n        $iter.each(axisBreaks.iterator(), function (axisBreak) {\n          var startValue = axisBreak.adjustedStartValue;\n          var endValue = axisBreak.adjustedEndValue;\n          // breaks can't overlap\n          // if break starts before previous break ends\n          if (startValue < previousEndValue_1) {\n            startValue = previousEndValue_1;\n            if (endValue < previousEndValue_1) {\n              endValue = previousEndValue_1;\n            }\n          }\n          axisBreak.adjustedStartValue = startValue;\n          axisBreak.adjustedEndValue = endValue;\n        });\n      }\n    }\n  };\n  Object.defineProperty(Axis.prototype, \"startIndex\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return [description]\r\n     */\n    get: function () {\n      return 0;\n    },\n    /**\r\n     * We need start/end indexes of axes to be 0 - `dataItems.length`.\r\n     *\r\n     * Yes, also for category axis, this helps to avoid jumping of categories\r\n     * while scrolling and does not do a lot of extra work as we use\r\n     * protected `_startIndex` and `_endIndex` when working with items.\r\n     *\r\n     * @hidden\r\n     */\n    /**\r\n     * [startIndex description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param value [description]\r\n     */\n    set: function (value) {},\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Axis.prototype, \"endIndex\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this.dataItems.length;\n    },\n    /**\r\n     * [endIndex description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param value [description]\r\n     */\n    set: function (value) {},\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a formatted label based on position.\r\n   *\r\n   * Individual axis types should override this method to generate a label\r\n   * that is relevant to axis type.\r\n   *\r\n   * Please note that `position` represents position within axis which may be\r\n   * zoomed and not correspond to Cursor's `position`.\r\n   *\r\n   * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n   * @param position  Relative position on axis (0-1)\r\n   * @return Position label\r\n   */\n  Axis.prototype.getPositionLabel = function (position) {\n    return Math.round(position * 100) + \"%x\";\n  };\n  Object.defineProperty(Axis.prototype, \"chart\", {\n    /**\r\n     * @return Chart\r\n     */\n    get: function () {\n      return this._chart;\n    },\n    /**\r\n     * A Chart this Axis belongs to.\r\n     *\r\n     * @param value  Chart\r\n     */\n    set: function (value) {\n      this._chart = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates a data item for a Series range.\r\n   *\r\n   * @param series  Target Series\r\n   * @return Range data item\r\n   */\n  Axis.prototype.createSeriesRange = function (series) {\n    var range = this.axisRanges.create();\n    range.component = this;\n    range.axisFill = this.renderer.axisFills.template.clone();\n    range.axisFill.disabled = false;\n    range.axisFill.fillOpacity = 0;\n    range.grid = this.renderer.grid.template.clone();\n    range.grid.disabled = true;\n    range.tick = this.renderer.ticks.template.clone();\n    range.tick.disabled = true;\n    range.label = this.renderer.labels.template.clone();\n    range.label.disabled = true;\n    range.addDisposer(new Disposer(function () {\n      series.axisRanges.removeValue(range);\n    }));\n    series.axisRanges.push(range);\n    return range;\n  };\n  /**\r\n   * Copies all properties and related data from a different instance of Axis.\r\n   *\r\n   * @param source Source Axis\r\n   */\n  Axis.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    if (this.renderer) {\n      this.renderer.copyFrom(source.renderer);\n    } else {\n      if (source.renderer) {\n        this.renderer = source.renderer.clone();\n        this._disposers.push(this.renderer);\n      }\n    }\n    if (source.title) {\n      if (!this.title) {\n        this.title = source.title.clone();\n        this.title.parent = this;\n      } else {\n        this.title.copyFrom(source.title);\n      }\n      this._disposers.push(this.title);\n    }\n  };\n  /**\r\n   * Resets internal iterator.\r\n   */\n  Axis.prototype.resetIterators = function () {\n    this._dataItemsIterator.reset();\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n  Axis.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up axis ranges\n      if ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\n        for (var i = 0, len = config.axisRanges.length; i < len; i++) {\n          var range = config.axisRanges[i];\n          // If `series` is set, we know it's a series range\n          if ($type.hasValue(range[\"series\"])) {\n            if ($type.isString(range[\"series\"])) {\n              if (this.map.hasKey(range[\"series\"])) {\n                //range[\"series\"] = this.map.getKey(range[\"series\"]);\n                config.axisRanges[i] = this.createSeriesRange(this.map.getKey(range[\"series\"]));\n                delete range[\"series\"];\n                config.axisRanges[i].config = range;\n              }\n            }\n          }\n        }\n      }\n    }\n    _super.prototype.processConfig.call(this, config);\n  };\n  /**\r\n   * Ordering function used in JSON setup.\r\n   *\r\n   * @param a  Item A\r\n   * @param b  Item B\r\n   * @return Order\r\n   */\n  Axis.prototype.configOrder = function (a, b) {\n    if (a == b) {\n      return 0;\n    }\n    // last\n    else if (a == \"title\") {\n      return 1;\n    } else if (b == \"title\") {\n      return -1;\n    }\n    // first\n    else if (a == \"component\") {\n      return -1;\n    } else if (b == \"component\") {\n      return 1;\n    } else {\n      return _super.prototype.configOrder.call(this, a, b);\n    }\n  };\n  Object.defineProperty(Axis.prototype, \"startLocation\", {\n    /**\r\n     * @return Location (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startLocation\");\n    },\n    /**\r\n     * Axis start location. Works on Date/Category axis, doesn't work on Value axis.\r\n     *\r\n     * * 0 - Full first cell is shown.\r\n     * * 0.5 - Half of first cell is shown.\r\n     * * 1 - None of the first cell is visible. (you probably don't want that)\r\n     *\r\n     * @param value Location (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startLocation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Axis.prototype, \"endLocation\", {\n    /**\r\n     * @return Location (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endLocation\");\n    },\n    /**\r\n     * Axis end location. Works on Date/Category axis, doesn't work on Value axis.\r\n     *\r\n     * * 0 - None of the last cell is shown. (don't do that)\r\n     * * 0.5 - Half of the last cell is shown.\r\n     * * 1 - Full last cell is shown.\r\n     *\r\n     * @param value Location (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endLocation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Axis.prototype.setDisabled = function (value) {\n    var changed = _super.prototype.setDisabled.call(this, value);\n    if (this.renderer) {\n      this.renderer.gridContainer.disabled = value;\n    }\n    return changed;\n  };\n  Object.defineProperty(Axis.prototype, \"title\", {\n    /**\r\n     * @return Title label\r\n     */\n    get: function () {\n      return this._title;\n    },\n    /**\r\n     * A reference to a [[Label]] element which serves as a title to the axis.\r\n     *\r\n     * When axis is created it aleready has an element, so you can just modify\r\n     * it.\r\n     *\r\n     * Or you can replace it with your own instance of `Label`.\r\n     *\r\n     * @param  value  Title label\r\n     */\n    set: function (value) {\n      if (this._title && this._title != value) {\n        this._title.dispose();\n      }\n      if (value) {\n        this._title = value;\n        value.parent = this;\n        value.shouldClone = false;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Axis.prototype, \"hideTooltipWhileZooming\", {\n    /**\r\n     * @return Hide tooltip while zooming?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"hideTooltipWhileZooming\");\n    },\n    /**\r\n     * Indicates if axis' tooltip should be hidden while axis range is animating\r\n     * (zooming)\r\n     *\r\n     * @default true\r\n     * @since 4.7.16\r\n     * @param  value  Hide tooltip while zooming?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"hideTooltipWhileZooming\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Axis.prototype, \"zoomable\", {\n    /**\r\n     * @return Zoomable?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"zoomable\");\n    },\n    /**\r\n     * Should the axis be zoomed with scrollbar/cursor?\r\n     *\r\n     * @default true\r\n     * @since 4.9.28\r\n     * @param  value  Zoomable?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"zoomable\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Axis;\n}(Component);\nexport { Axis };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Axis\"] = Axis;\nregistry.registeredClasses[\"AxisDataItem\"] = AxisDataItem;\n/**\r\n * Add default responsive rules\r\n */\n/**\r\n * Disable axis tooltips.\r\n */\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.maybeXS,\n  state: function (target, stateId) {\n    if (target instanceof Axis && target.tooltip) {\n      var state = target.states.create(stateId);\n      state.properties.cursorTooltipEnabled = false;\n      return state;\n    }\n    return null;\n  }\n});","map":{"version":3,"mappings":"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","names":["Component","Container","DataItem","AxisBreak","Label","Tooltip","SortedListTemplate","List","ListTemplate","ListDisposer","Disposer","MultiDisposer","registry","InterfaceColorSet","$iter","$math","$utils","$number","$array","$type","defaultRules","ResponsiveBreakpoints","__extends","_super","_this","className","applyTheme","Object","AxisDataItem","_grid","component_1","component","template","grid_1","isRange","axisRanges","grid","disabled","clone","renderer","create","_disposers","push","removeValue","shouldClone","axis","remove","sprites","dataItem","undefined","addSprite","_tick","component_2","tick_1","tick","ticks","_label","component_3","label_1","label","labels","virtualParent","_axisFill","component_4","axisFill_1","axisFill","isTemplate","axisFills","_text","text","_mask","_contents","contents","isMeasured","mask","createFill","_axisBreak","axisBreak","dataItems","validateDataElement","appendDataItem","prop","hasProperty","source","copyFrom","bullet","minPosition","maxPosition","value","noChangeValues","setVisibility","visible","_bullet","AxisItemLocation","constructor","Axis","Error","hideTooltipWhileZooming","minWidth","minHeight","setPropertyValue","toggleZoomOutButton","zoomable","interfaceColors","title","_dataItemsIterator","ListIterator","createNewItems","tooltip","padding","background","pointerLength","fitPointerToBounds","filters","clear","cornerRadius","fill","getFor","stroke","strokeWidth","fillOpacity","readerHidden","events","on","series","each","hide","preventShow","index","isNumber","Math","round","__disabled","opacity","invalidateLayout","iterator","invalidate","_axisItemCount","ghostLabel","updateLabelElement","start","end","validate","gridCount","axisLength","minGridDistance","_gridCount","clearCache","axisFullLength","validateLayout","updateGridCount","updateAxisLine","updateTooltip","updateBaseGridElement","_prevLength","dispatchImmediately","above","parent","bulletsContainer","gridContainer","updateGridContainer","axisRange","_axisBreaks","event","newValue","breakContainer","moveValue","createMask","_renderer","chart","initRenderer","ghostLabel_1","strokeOpacity","interactionsEnabled","position","positionToAngle","point","pointToPosition","positionToCoordinate","getPositionRangePath","x","y","angle","startPosition","endPosition","getPropertyValue","duration","hideTooltip","_tooltipPosition","local","_tooltip","length","toAxisPosition","tooltipContainer","tooltipLocation","getCellStartPosition","getCellEndPosition","tooltipPosition","fitToRange","tooltipLocation2","startPoint","positionToPoint","endPoint","currentItemStartPoint","currentItemEndPoint","fullWidthTooltip","width","height","globalPoint","spritePointToSvg","line","getTooltipText","delayedPointTo","show","cursorTooltipEnabled","inversed","pointerOrientation","boundingRectangle","fixDoc","setBounds","spriteRectToSvg","location","axisLocation","_axisRanges","createDataItem","processAxisRange","createAxisBreak","a","b","order","adjustedStartValue","processBreak","_series","axisLetter","dataItemsIterator","findNearest","key","stackKey","range","min","max","difference","eachContinue","startValue","endValue","adjustedEndValue","breakSize","intersection","find","axisBreaks","toArray","update","firstAxisBreak","first","previousEndValue_1","_chart","addDisposer","reset","config","hasValue","isArray","i","len","isString","map","hasKey","createSeriesRange","getKey","processConfig","configOrder","changed","setDisabled","_title","dispose","registeredClasses","relevant","maybeXS","state","target","stateId","states","properties"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\axes\\Axis.ts"],"sourcesContent":["/**\r\n * Base class for all Axis\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentDataFields, IComponentAdapters, IComponentEvents } from \"../../core/Component\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { DataItem, IDataItemAdapters } from \"../../core/DataItem\";\r\n\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\n\r\n// Charts\r\nimport { Chart } from \"../Chart\";\r\n\r\n// Series\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\n\r\n// Elements\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Tooltip, PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { PointedRectangle } from \"../../core/elements/PointedRectangle\";\r\n\r\n// Types\r\nimport { IRange } from \"../../core/defs/IRange\";\r\n\r\n// Utils\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { SortedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { List, ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[Axis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class AxisDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Reference to a related [[Grid]] element.\r\n\t */\r\n\tprotected _grid: Grid;\r\n\r\n\t/**\r\n\t * Reference to a related [[AxisTick]] element.\r\n\t */\r\n\tprotected _tick: AxisTick;\r\n\r\n\t/**\r\n\t * Reference to a related [[AxisLabel]] element.\r\n\t */\r\n\tprotected _label: AxisLabel;\r\n\r\n\t/**\r\n\t * Reference to a related [[AxisFill]] element.\r\n\t */\r\n\tprotected _axisFill: AxisFill;\r\n\r\n\t/**\r\n\t * A mask for axis. We're using [[AxisFill]] since the mask, basically, has\r\n\t * the same shape and features.\r\n\t */\r\n\tprotected _mask: AxisFill;\r\n\r\n\t/**\r\n\t * Container which might be used to hold some extra items, like series\r\n\t * segments when data item is used for axis range.\r\n\t */\r\n\tprotected _contents: Container;\r\n\r\n\t/**\r\n\t * A text to be used as label for this data item.\r\n\t */\r\n\tprotected _text: string;\r\n\r\n\t/**\r\n\t * Holds a physical position of the grid line associated with this data item,\r\n\t * so that it can be used when measuring distance between points, and hiding\r\n\t * some of them so they don't overlap.\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\r\n\t * If the data item is within an existing [[AxisBreak]] this property will\r\n\t * hold a reference to that [[AxisBreak]].\r\n\t */\r\n\tpublic _axisBreak: AxisBreak;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: Axis;\r\n\r\n\t/**\r\n\t * Used to distinguish from real data points and those data items that are\r\n\t * used for ranges, like `series.axisRanges` or `axis.axisRanges`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic isRange: boolean;\r\n\r\n\t/**\r\n\t * relative position of data item on axis\r\n\t */\r\n\tpublic position: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _bullet: Sprite;\r\n\r\n\t/**\r\n\t * Allows hiding axis item (tick, label, grid) if it is closer to axis\r\n\t * beginning than this relative position (0-1).\r\n\t *\r\n\t * For axis labels it overrides `minLabelPosition` if set.\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Hide all ticks and labels closer than 20% to axis beginning.\r\n\t * axis.dataItems.template.minPosition = 0.2;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Hide all ticks and labels closer than 20% to axis beginning.\r\n\t * axis.dataItems.template.minPosition = 0.2;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     // Hide all ticks and labels closer than 20% to axis beginning.\r\n\t *     \"dataItems\": {\r\n\t *       \"minPosition\": 0.2\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t * \r\n\t * @since 4.5.11\r\n\t */\r\n\tpublic minPosition?: number;\r\n\r\n\t/**\r\n\t * Allows hiding axis item (tick, label, grid) if it is closer to axis\r\n\t * end than this relative position (0-1).\r\n\t *\r\n\t * For axis labels it overrides `maxLabelPosition` if set.\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Hide all ticks and labels closer than 20% to axis end.\r\n\t * axis.dataItems.template.maxPosition = 0.8;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Hide all ticks and labels closer than 20% to axis end.\r\n\t * axis.dataItems.template.maxPosition = 0.8;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     // Hide all ticks and labels closer than 20% to axis end.\r\n\t *     \"dataItems\": {\r\n\t *       \"maxPosition\": 0.8\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t * \r\n\t * @since 4.5.11\r\n\t */\r\n\tpublic maxPosition?: number;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Actual index of the axis data item.\r\n\t * \r\n\t * @since 4.7.8\r\n\t */\r\n\tpublic itemIndex: number;\r\n\r\n\t/**\r\n\t * A [[Grid]] element associated with this data item.\r\n\t *\r\n\t * If there is no grid element associated with data item, a new one is\r\n\t * created and returned.\r\n\t *\r\n\t * @param grid  Grid element\r\n\t */\r\n\tpublic set grid(grid: Grid) {\r\n\t\tif (this._grid && this._grid != grid) {\r\n\t\t\t$array.remove(this.sprites, this._grid);\r\n\t\t\tthis._grid.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tif (grid) {\r\n\t\t\tif (grid.dataItem && grid.dataItem != this) {\r\n\t\t\t\t$array.remove(grid.dataItem.sprites, grid);\r\n\t\t\t\tgrid.dataItem.grid = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(grid);\r\n\t\t}\r\n\t\tthis._grid = grid;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Grid element\r\n\t */\r\n\tpublic get grid(): Grid {\r\n\t\tif (!this._grid) {\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\r\n\t\t\t\tlet template: Grid;\r\n\t\t\t\tlet grid: Grid;\r\n\r\n\t\t\t\tif (this.isRange) {\r\n\t\t\t\t\ttemplate = component.axisRanges.template.grid;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tgrid = template.clone();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttemplate = component.renderer.grid.template;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tgrid = component.renderer.grid.create();\r\n\t\t\t\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t\t\t\tcomponent.renderer.grid.removeValue(grid);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.grid = grid;\r\n\t\t\t\tgrid.shouldClone = false;\r\n\t\t\t\tthis._disposers.push(grid);\r\n\t\t\t\tgrid.axis = this.component;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._grid;\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisTick]] element associated with this data item.\r\n\t *\r\n\t * If there is no tick element associated with data item, a new one is\r\n\t * created and returned.\r\n\t *\r\n\t * @param tick  Tick element\r\n\t */\r\n\tpublic set tick(tick: AxisTick) {\r\n\t\tif (this._tick && this._tick != tick) {\r\n\t\t\t$array.remove(this.sprites, this._tick);\r\n\t\t\tthis._tick.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tif (tick) {\r\n\t\t\tif (tick.dataItem && tick.dataItem != this) {\r\n\t\t\t\t$array.remove(tick.dataItem.sprites, tick);\r\n\t\t\t\ttick.dataItem.tick = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(tick);\r\n\t\t}\r\n\t\tthis._tick = tick;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tick element\r\n\t */\r\n\tpublic get tick(): AxisTick {\r\n\t\tif (!this._tick) {\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\r\n\t\t\t\tlet template: AxisTick;\r\n\t\t\t\tlet tick: AxisTick;\r\n\r\n\t\t\t\tif (this.isRange) {\r\n\t\t\t\t\ttemplate = component.axisRanges.template.tick;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttick = template.clone();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttemplate = component.renderer.ticks.template;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttick = component.renderer.ticks.create();\r\n\t\t\t\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t\t\t\tcomponent.renderer.ticks.removeValue(tick);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.tick = tick;\r\n\t\t\t\ttick.axis = this.component;\r\n\t\t\t\ttick.shouldClone = false;\r\n\t\t\t\tthis._disposers.push(tick);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._tick;\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisLabel]] element associated with this data item.\r\n\t *\r\n\t * If there is no label element associated with data item, a new one is\r\n\t * created and returned.\r\n\t *\r\n\t * @param label Label element\r\n\t */\r\n\tpublic set label(label: AxisLabel) {\r\n\t\tif (this._label && this._label != label) {\r\n\t\t\t$array.remove(this.sprites, this._label);\r\n\t\t\tthis._label.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tif (label) {\r\n\t\t\tif (label.dataItem && label.dataItem != this) {\r\n\t\t\t\t$array.remove(label.dataItem.sprites, label);\r\n\t\t\t\tlabel.dataItem.label = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(label);\r\n\t\t}\r\n\t\tthis._label = label;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label element\r\n\t */\r\n\tpublic get label(): AxisLabel {\r\n\t\tif (!this._label) {\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\r\n\t\t\t\tlet template: AxisLabel;\r\n\t\t\t\tlet label: AxisLabel;\r\n\r\n\t\t\t\tif (this.isRange) {\r\n\t\t\t\t\ttemplate = component.axisRanges.template.label;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlabel = template.clone();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttemplate = component.renderer.labels.template;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlabel = component.renderer.labels.create();\r\n\t\t\t\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t\t\t\tcomponent.renderer.labels.removeValue(label);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._disposers.push(label);\r\n\t\t\t\tthis.label = label;\r\n\t\t\t\tlabel.shouldClone = false;\r\n\t\t\t\tlabel.axis = this.component;\r\n\t\t\t\tlabel.virtualParent = component;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisFill]] associated element with this data item.\r\n\t *\r\n\t * If there is no fill element associated with data item, a new one is\r\n\t * created and returned.\r\n\t *\r\n\t * @param label Label element\r\n\t */\r\n\tpublic set axisFill(axisFill: AxisFill) {\r\n\t\tif (this._axisFill && this._axisFill != axisFill) {\r\n\t\t\t$array.remove(this.sprites, this._axisFill);\r\n\t\t\tthis._axisFill.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tif (axisFill) {\r\n\t\t\tif (axisFill.dataItem && axisFill.dataItem != this) {\r\n\t\t\t\t$array.remove(axisFill.dataItem.sprites, axisFill);\r\n\t\t\t\taxisFill.dataItem.axisFill = undefined;\r\n\t\t\t}\r\n\t\t\taxisFill.axis = this.component;\r\n\t\t\tthis.addSprite(axisFill);\r\n\t\t}\r\n\t\tthis._axisFill = axisFill;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label element\r\n\t */\r\n\tpublic get axisFill(): AxisFill {\r\n\t\tif (!this._axisFill) {\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\r\n\t\t\t\tlet template: AxisFill;\r\n\t\t\t\tlet axisFill: AxisFill;\r\n\r\n\t\t\t\tif (this.isRange) {\r\n\t\t\t\t\ttemplate = component.axisRanges.template.axisFill;\r\n\t\t\t\t\tif (!this.isTemplate && template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\taxisFill = template.clone();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttemplate = component.renderer.axisFills.template;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\taxisFill = component.renderer.axisFills.create();\r\n\t\t\t\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t\t\t\tcomponent.renderer.axisFills.removeValue(axisFill);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.axisFill = axisFill;\r\n\t\t\t\taxisFill.shouldClone = false;\r\n\t\t\t\tthis._disposers.push(axisFill);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._axisFill;\r\n\t}\r\n\r\n\t/**\r\n\t * Text to be used as data item's label.\r\n\t *\r\n\t * @param text Text label\r\n\t */\r\n\tpublic set text(text: string) {\r\n\t\tthis._text = text;\r\n\t\tif (this._label) { // do not use getter, it will create unwanted instances!\r\n\t\t\tthis._label.text = text;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Text label\r\n\t */\r\n\tpublic get text(): string {\r\n\t\treturn this._text;\r\n\t}\r\n\r\n\t/**\r\n\t * Data item's mask.\r\n\t *\r\n\t * @return Mask\r\n\t */\r\n\tpublic get mask(): AxisFill {\r\n\t\treturn this._mask;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[Container]] to place all visual elements, related to data item\r\n\t * in.\r\n\t *\r\n\t * If there is no Container, a new one is created.\r\n\t *\r\n\t * @return Contents container\r\n\t */\r\n\tpublic get contents(): Container {\r\n\t\tif (!this._contents) {\r\n\t\t\tlet contents = new Container();\r\n\t\t\tthis.addSprite(contents);\r\n\t\t\tcontents.isMeasured = false;\r\n\t\t\tthis._contents = contents;\r\n\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\t\t\t\tlet mask: AxisFill = component.renderer.createFill(this.component);\r\n\t\t\t\tmask.disabled = false;\r\n\t\t\t\tmask.axis = component;\r\n\t\t\t\tthis.addSprite(mask);\r\n\t\t\t\tthis._mask = mask;\r\n\t\t\t\tcontents.mask = mask;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._contents;\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisBreak]] this data item falls within.\r\n\t *\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic set axisBreak(axisBreak: this[\"_axisBreak\"]) {\r\n\t\tif (this._axisBreak) {\r\n\t\t\tthis._axisBreak.dataItems.removeValue(this);\r\n\t\t}\r\n\t\tif (axisBreak) {\r\n\t\t\taxisBreak.dataItems.push(this);\r\n\t\t}\r\n\t\tthis._axisBreak = axisBreak;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis break\r\n\t */\r\n\tpublic get axisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn this._axisBreak;\r\n\t}\r\n\r\n\t/**\r\n\t * Re-draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tif (this.component) {\r\n\t\t\tthis.component.validateDataElement(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Appends data item's elements to the parent [[Container]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic appendChildren() {\r\n\t\tif (this.component) {\r\n\t\t\tthis.component.appendDataItem(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if data item has particular property set.\r\n\t *\r\n\t * @param prop  Property name\r\n\t * @return Property set?\r\n\t */\r\n\tprotected hasProperty(prop: string): boolean {\r\n\t\treturn prop == \"component\" ? true : super.hasProperty(prop);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[AxisDataItem]].\r\n\t *\r\n\t * @param source Source AxisDataItem\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.text = source.text;\r\n\t\tif (source.bullet) {\r\n\t\t\tthis.bullet = source.bullet.clone();\r\n\t\t}\r\n\r\n\t\tthis.minPosition = source.minPosition;\r\n\t\tthis.maxPosition = source.maxPosition;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets visibility of the Data Item.\r\n\t *\r\n\t * @param value Data Item\r\n\t */\r\n\tpublic setVisibility(value: boolean, noChangeValues?: boolean): void {\r\n\t\tsuper.setVisibility(value, noChangeValues);\r\n\t\tif (this._contents) {\r\n\t\t\tthis._contents.visible = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set it to an instance of any [[Sprite]]. It will be displayed as an axis\r\n\t * bullet in the middle of the cell, or specific value.\r\n\t *\r\n\t * If you need position bullet relatively to the cell, use [[AxisBullet]]\r\n\t * instead. It has a `location` property which can be used to indicate\r\n\t * precise relative location within cell/range.\r\n\t *\r\n\t * Also, [[AxisBullet]] is a [[Container]] so you can push any other element\r\n\t * into it.\r\n\t *\r\n\t * NOTE: `location` is relative to the parent axis range's scope, i.e.\r\n\t * between its `date` and `endDate` for [[DateAxis]], or `value`/`endValue`\r\n\t * ([[ValueAxis]]), or `category`/`endCategory` ([[categoryAxis]]).\r\n\t * \r\n\t * ```TypeScript\r\n\t * let range = dateAxis.axisRanges.create();\r\n\t * range.date = new Date(2018, 0, 5);\r\n\t * \r\n\t * let flag = new am4plugins_bullets.FlagBullet();\r\n\t * flag.label.text = \"Hello\";\r\n\t *\r\n\t * range.bullet = flag;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * var range = dateAxis.axisRanges.create();\r\n\t * range.date = new Date(2018, 0, 5);\r\n\t * \r\n\t * var flag = new am4plugins_bullets.FlagBullet();\r\n\t * flag.label.text = \"Hello\";\r\n\t *\r\n\t * range.bullet = flag;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     \"type\": \"DateAxis\",\r\n\t *     // ...\r\n\t *     \"axisRanges\": [{\r\n\t *       \"date\": new Date(2018, 0, 5),\r\n\t *       \"bullet: {\r\n\t *         \"type\": \"FlagBullet\",\r\n\t *         \"label\": {\r\n\t *           \"text\": \"Hello\"\r\n\t *         }\r\n\t *       }\r\n\t *     }]\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @since 4.5.9\r\n\t * @param  value  Bullet\r\n\t */\r\n\tpublic set bullet(value: Sprite) {\r\n\t\tif (this._bullet && this._bullet != value) {\r\n\t\t\t$array.remove(this.sprites, this._bullet);\r\n\t\t\tthis._bullet.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tthis._bullet = value;\r\n\t\tif (value) {\r\n\t\t\tthis.addSprite(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Bullet\r\n\t */\r\n\tpublic get bullet(): Sprite {\r\n\t\treturn this._bullet;\r\n\t}\r\n\r\n\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[AxisDataItem]]\r\n * Includes both the [[DataItemAdapter]] definitions and properties\r\n * @see {@link DataItemAdapter}\r\n */\r\nexport interface IAxisDataItemAdapters extends IDataItemAdapters {\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines named positions for data item's location within [[Axis]].\r\n */\r\nexport enum AxisItemLocation {\r\n\tStart = 0,\r\n\tMiddle = 0.5,\r\n\tEnd = 1\r\n}\r\n\r\n/**\r\n * Defines data fields for [[Axis]].\r\n */\r\nexport interface IAxisDataFields extends IComponentDataFields { }\r\n\r\n/**\r\n * Defines properties for [[Axis]].\r\n */\r\nexport interface IAxisProperties extends IComponentProperties {\r\n\r\n\t/**\r\n\t * Axis start location.\r\n\t *\r\n\t * * 0 - None of the first cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the first cell is shown.\r\n\t * * 1 - Full first cell is shown.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tstartLocation?: number;\r\n\r\n\r\n\t/**\r\n\t * Axis end location.\r\n\t *\r\n\t * * 0 - None of the last cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the last cell is shown.\r\n\t * * 1 - Full last cell is shown.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tendLocation?: number;\r\n\r\n\t/**\r\n\t * Indicates if cusor's tooltip should be shown on this Axis.\r\n\t */\r\n\tcursorTooltipEnabled?: boolean;\r\n\r\n\t/**\r\n\t * Normally, when axis is zoomed in, a zoom out button is shown by a chart,\r\n\t * and vice versa: when axis is zoomed out completely, zoom out button is\r\n\t * hidden.\r\n\t *\r\n\t * Setting this to `false` will disable this behavior. Zooming in our out\r\n\t * this axis will not reveal or hide zoom out button.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\ttoggleZoomOutButton?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if axis' tooltip should be hidden while axis range is animating\r\n\t * (zooming)\r\n\t *\r\n\t * @since 4.7.16\r\n\t * @default true\r\n\t */\r\n\thideTooltipWhileZooming?: boolean;\r\n\r\n\r\n\tzoomable?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[Axis]].\r\n */\r\nexport interface IAxisEvents extends IComponentEvents {\r\n\r\n\t/**\r\n\t * Invoked when available axis lenght changes, e.g. after resizing the whole\r\n\t * chart.\r\n\t */\r\n\tlengthchanged: {}\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Axis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisAdapters extends IComponentAdapters, IAxisProperties {\r\n\t/**\r\n\t * Applied to the tooltip text before it is shown.\r\n\t */\r\n\tgetTooltipText: string;\r\n\r\n}\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all Axis elements.\r\n *\r\n * @see {@link IAxisEvents} for a list of available Events\r\n * @see {@link IAxisAdapters} for a list of available Adapters\r\n */\r\nexport class Axis<T extends AxisRenderer = AxisRenderer> extends Component {\r\n\r\n\t/**\r\n\t * Defines list of data fields.\r\n\t */\r\n\tpublic _dataFields: IAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines the type of the [[DataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * A list of Axis Ranges.\r\n\t */\r\n\tprotected _axisRanges: ListTemplate<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: AxisBreak;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisEvents;\r\n\r\n\t/**\r\n\t * A [[Label]] instance that is used for Axis title label.\r\n\t */\r\n\tprotected _title: Label;\r\n\r\n\t/**\r\n\t * \"X\", \"Y\", etc.\r\n\t *\r\n\t * This is needed so that Axis knows which of the values from series' data\r\n\t * items it should use.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic axisLetter: string;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t */\r\n\tprotected _chart: Chart;\r\n\r\n\t/**\r\n\t * A type for renderer used for this Axis.\r\n\t */\r\n\tpublic _renderer: T;\r\n\r\n\t/**\r\n\t * Number of Grid elements on the axis.\r\n\t */\r\n\tprotected _gridCount: number = 10;\r\n\r\n\t/**\r\n\t * A list of [[XYSeries]] that are using this Axis.\r\n\t */\r\n\tprotected _series: List<XYSeries> = new List<XYSeries>();\r\n\r\n\t/**\r\n\t * Holds the length of the Axis, so that we can check if it changed after\r\n\t * other changes and we need to update layouts.\r\n\t */\r\n\tprotected _prevLength: number;\r\n\r\n\t/**\r\n\t * A list of Axis Breaks associated with this Axis.\r\n\t */\r\n\tprotected _axisBreaks: SortedListTemplate<this[\"_axisBreak\"]>;\r\n\r\n\t/**\r\n\t * A reference to the Iterator for Axis' data items.\r\n\t */\r\n\tprotected _dataItemsIterator: $iter.ListIterator<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * A name of the data field this Axis looks for its data in, e.g. \"category\".\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic axisFieldName: string;\r\n\r\n\t// we save these values so that cursur could use them if axis line is a fill\r\n\r\n\t/**\r\n\t * [currentItemStartPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic currentItemStartPoint: IPoint;\r\n\r\n\t/**\r\n\t * [currentItemEndPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic currentItemEndPoint: IPoint;\r\n\r\n\tprotected _tooltipPosition: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic relativePositionSprite?: Sprite;\r\n\r\n\t/**\r\n\t * Holds reference to a function that accepts a DataItem and its index as\r\n\t * parameters.\r\n\t *\r\n\t * It can either return a fill opacity for a fill, or manipulate data item\r\n\t * directly, to create various highlighting scenarios.\r\n\t *\r\n\t * For example, you can set it up to highlight only weekends on a\r\n\t * [[DateAxis]].\r\n\t */\r\n\tpublic fillRule(dataItem: this[\"_dataItem\"], index?: number): void {\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = dataItem.index;\r\n\t\t}\r\n\t\tif (index / 2 == Math.round(index / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t\tdataItem.axisFill.opacity = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.opacity = 1;\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Full length of the axis, in pixels.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic axisFullLength: number;\r\n\r\n\t/**\r\n\t * Ghost label is used to prevent chart shrinking/expanding when zooming or\r\n\t * when data is invalidated. You can set custom text on it so that it would\r\n\t * be bigger/smaller,\r\n\t */\r\n\tpublic ghostLabel: AxisLabel;\r\n\r\n\t/**\r\n\t * Specifies if axis should be automatically disposed when removing from\r\n\t * chart's axis list.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic autoDispose: boolean = true;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _axisItemCount: number = 0;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tif (this.constructor === Axis) {\r\n\t\t\tthrow new Error(\"'Axis' cannot be instantiated directly. Please use a specific axis type.\");\r\n\t\t}\r\n\r\n\t\tthis.hideTooltipWhileZooming = true;\r\n\t\tthis.minWidth = 0.0001;\r\n\t\tthis.minHeight = 0.0001;\r\n\t\tthis.className = \"Axis\";\r\n\t\tthis.shouldClone = false;\r\n\t\tthis.setPropertyValue(\"cursorTooltipEnabled\", true);\r\n\t\tthis.toggleZoomOutButton = true;\r\n\t\tthis.zoomable = true;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create title\r\n\t\tthis.title = new Label();\r\n\t\tthis.title.shouldClone = false;\r\n\t\tthis._disposers.push(this.title);\r\n\t\tthis.setPropertyValue(\"startLocation\", 0);\r\n\t\tthis.setPropertyValue(\"endLocation\", 1);\r\n\r\n\t\t// Data item iterator\r\n\t\tthis._dataItemsIterator = new $iter.ListIterator<this[\"_dataItem\"]>(this.dataItems, () => this.dataItems.create());\r\n\t\tthis._dataItemsIterator.createNewItems = true;\r\n\r\n\t\t// Create tooltip\r\n\t\tlet tooltip: Tooltip = new Tooltip();\r\n\t\tthis._disposers.push(tooltip);\r\n\t\ttooltip.label.padding(5, 10, 5, 10);\r\n\t\ttooltip.background.pointerLength = 5;\r\n\t\ttooltip.fitPointerToBounds = true;\r\n\t\ttooltip.background.filters.clear();\r\n\r\n\t\t// Set virtual parentfor the tooltip so that it can properly inheirt\r\n\t\t// formatters from the axis.\r\n\t\ttooltip.virtualParent = this;\r\n\r\n\t\t// Create background element for the tooltip\r\n\t\tlet background: PointedRectangle = <PointedRectangle>tooltip.background;\r\n\t\tbackground.cornerRadius = 0;\r\n\t\tbackground.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tbackground.stroke = background.fill;\r\n\t\tbackground.strokeWidth = 1;\r\n\t\tbackground.fillOpacity = 1;\r\n\t\ttooltip.label.fill = interfaceColors.getFor(\"alternativeText\");\r\n\r\n\t\tthis.tooltip = tooltip;\r\n\r\n\t\t// Accessibility\r\n\t\tthis.readerHidden = true;\r\n\r\n\t\tthis.events.on(\"rangechangestarted\", () => {\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.hideTooltipWhileZooming) {\r\n\t\t\t\t\tseries.tooltip.hide();\r\n\t\t\t\t\tseries.tooltip.preventShow = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tif (this.hideTooltipWhileZooming) {\r\n\t\t\t\tthis.tooltip.hide();\r\n\t\t\t\tthis.tooltip.preventShow = true;\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\r\n\t\tthis.events.on(\"rangechangeended\", () => {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.hideTooltipWhileZooming) {\r\n\t\t\t\t\tseries.tooltip.hide();\r\n\t\t\t\t\tseries.tooltip.preventShow = false;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tif (this.hideTooltipWhileZooming) {\r\n\t\t\t\tthis.tooltip.hide();\r\n\t\t\t\tthis.tooltip.preventShow = false;\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new AxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates layout.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLayout(): void {\r\n\t\tsuper.invalidateLayout();\r\n\t\t// this puts series after axis in invalidation order also makes series update it's data items in case widht/height of a series is not 100%\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidateLayout();\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates series of this axis.\r\n\t */\r\n\tpublic invalidateSeries(): void {\r\n\t\t// this puts series after axis in invalidation order also makes series update it's data items in case widht/height of a series is not 100%\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Override to cancel super call for data element validation.\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataElements() {\r\n\t\tthis._axisItemCount = 0;\r\n\t\tif (this.ghostLabel) {\r\n\t\t\tthis.renderer.updateLabelElement(this.ghostLabel, this.start, this.end);\r\n\t\t\tthis.ghostLabel.validate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the number of grid items on the axis.\r\n\t */\r\n\tprotected updateGridCount() {\r\n\t\tif (this.renderer) {\r\n\t\t\tlet gridCount = this.axisLength / this.renderer.minGridDistance;\r\n\t\t\tif (gridCount != this._gridCount) {\r\n\t\t\t\tthis._gridCount = gridCount;\r\n\t\t\t\tthis.clearCache();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout(): void {\r\n\r\n\t\tthis.axisFullLength = this.axisLength / (this.end - this.start);\r\n\r\n\t\tsuper.validateLayout();\r\n\t\tthis.updateGridCount();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\trenderer.updateAxisLine();\r\n\t\t\trenderer.updateTooltip();\r\n\t\t\trenderer.updateBaseGridElement();\r\n\t\t}\r\n\r\n\t\tif (this._prevLength != this.axisLength) {\r\n\t\t\tthis.dispatchImmediately(\"lengthchanged\");\r\n\t\t\tthis._prevLength = this.axisLength;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a data item to the Axis.\r\n\t *\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic appendDataItem(dataItem: this[\"_dataItem\"]) {\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\r\n\t\tlet tick = dataItem.tick;\r\n\t\tif (tick) {\r\n\t\t\tif (tick.above) {\r\n\t\t\t\ttick.parent = renderer.bulletsContainer;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.parent = renderer.gridContainer;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem.label) {\r\n\t\t\tdataItem.label.parent = renderer;\r\n\t\t}\r\n\r\n\t\tlet axisFill = dataItem.axisFill;\r\n\t\tif (axisFill) {\r\n\t\t\tif (axisFill.above) {\r\n\t\t\t\taxisFill.parent = renderer.bulletsContainer;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\taxisFill.parent = renderer.gridContainer;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet grid = dataItem.grid;\r\n\t\tif (grid) {\r\n\t\t\tif (grid.above) {\r\n\t\t\t\tgrid.parent = renderer.bulletsContainer;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tgrid.parent = renderer.gridContainer;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem.bullet) {\r\n\t\t\tdataItem.bullet.parent = renderer.bulletsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws Axis' related items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis.validateLayout();\r\n\r\n\t\tthis.renderer.updateGridContainer();\r\n\t}\r\n\r\n\t/**\r\n\t * Redars Axis ranges.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateAxisRanges(): void {\r\n\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\tthis.appendDataItem(axisRange);\r\n\t\t\tthis.validateDataElement(axisRange);\r\n\t\t\tif (axisRange.grid) {\r\n\t\t\t\taxisRange.grid.validate();\r\n\t\t\t}\r\n\t\t\tif (axisRange.tick) {\r\n\t\t\t\taxisRange.tick.validate();\r\n\t\t\t}\r\n\t\t\tif (axisRange.axisFill) {\r\n\t\t\t\taxisRange.axisFill.validate();\r\n\t\t\t}\r\n\t\t\tif (axisRange.label) {\r\n\t\t\t\taxisRange.label.validate();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates all axis breaks, so they are redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateBreaks(): void {\r\n\t\tif (this._axisBreaks) {\r\n\t\t\t$iter.each(this._axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\taxisBreak.invalidate();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Associates an Axis break with this Axis, after it is inserted into\r\n\t * `axisBreaks`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Event\r\n\t */\r\n\tpublic processBreak(event: IListEvents<this[\"_axisBreak\"]>[\"inserted\"]) {\r\n\t\tlet axisBreak: this[\"_axisBreak\"] = event.newValue;\r\n\t\taxisBreak.parent = this.renderer.breakContainer;\r\n\t\taxisBreak.axis = this;\r\n\t}\r\n\r\n\t/**\r\n\t * Registers a [[XYSeries]] element with this Axis.\r\n\t *\r\n\t * Returns a [[Disposer]] for all events, added to Series for watching\r\n\t * changes in Axis, and vice versa.\r\n\t * @ignore\r\n\t * @param series  Series\r\n\t * @return Event disposer\r\n\t */\r\n\tpublic registerSeries(series: XYSeries): IDisposer {\r\n\t\tthis.series.moveValue(series);\r\n\r\n\t\treturn new MultiDisposer([\r\n\t\t\tnew Disposer(() => {\r\n\t\t\t\tthis.series.removeValue(series);\r\n\t\t\t}),\r\n\r\n\t\t\tthis.events.on(\"lengthchanged\", series.invalidate, series, false),\r\n\t\t\tthis.events.on(\"lengthchanged\", series.createMask, series, false),\r\n\t\t\tthis.events.on(\"startchanged\", series.invalidate, series, false),\r\n\t\t\tthis.events.on(\"endchanged\", series.invalidate, series, false),\r\n\t\t\t//axis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\t\t\t\r\n\r\n\t\t\t// TODO should these be disposed of ?\r\n\t\t\t//series.events.on(\"datavalidated\", this.processSeriesDataItems, this),\r\n\t\t\t//series.events.on(\"visibilitychanged\", this.processSeriesDataItems, this),\r\n\t\t\t//series.events.on(\"hidden\", this.processSeriesDataItems, this)\r\n\t\t]);\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisRenderer]] to be used to render this Axis.\r\n\t *\r\n\t * Please note that most of the settings, related to Axis' appearance are set\r\n\t * via its renderer. Not directly on the Axis.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.renderer.inside = true;\r\n\t * axis.renderer.minLabelPosition = 0.1;\r\n\t * axis.renderer.maxLabelPosition = 0.9;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.renderer.inside = true;\r\n\t * axis.renderer.minLabelPosition = 0.1;\r\n\t * axis.renderer.maxLabelPosition = 0.9;\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/} for more info\r\n\t * @param renderer  Renderer\r\n\t */\r\n\tpublic set renderer(renderer: this[\"_renderer\"]) {\r\n\t\tif (renderer != this._renderer) {\r\n\t\t\tthis._renderer = renderer;\r\n\t\t\trenderer.chart = this.chart;\r\n\t\t\trenderer.axis = this;\r\n\t\t\trenderer.parent = this;\r\n\t\t\tthis.title.parent = this; // we add title to axis and set layout in renderer to avoid one extra container, as otherwise axis container would be used for holding renderer only\r\n\t\t\tthis.initRenderer();\r\n\r\n\t\t\tthis._disposers.push(renderer.gridContainer.events.on(\"maxsizechanged\", this.invalidate, this, false));\r\n\r\n\t\t\tlet ghostLabel = this.renderer.labels.create();\r\n\t\t\tthis._disposers.push(ghostLabel);\r\n\t\t\tghostLabel.dataItem = this.dataItems.template.clone(); // just for the adapters not to fail\r\n\t\t\tghostLabel.text = \"L\";\r\n\t\t\tghostLabel.parent = this.renderer;\r\n\t\t\tghostLabel.shouldClone = false;\r\n\t\t\tghostLabel.fillOpacity = 0;\r\n\t\t\tghostLabel.opacity = 0;\r\n\t\t\tghostLabel.strokeOpacity = 0;\r\n\t\t\tghostLabel.interactionsEnabled = false;\r\n\t\t\tghostLabel.validate();\r\n\r\n\t\t\tthis.ghostLabel = ghostLabel;\r\n\r\n\t\t\tthis.events.on(\"beforedatavalidated\", () => {\r\n\t\t\t\tghostLabel.text = \"L\";\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Renderer\r\n\t */\r\n\tpublic get renderer(): this[\"_renderer\"] {\r\n\t\treturn this._renderer;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a relative position to angle. (for circular axes)\r\n\t *\r\n\t * @param position Position (0-1)\r\n\t * @return Angle\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\treturn this.renderer.positionToAngle(position);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel coordinates to a relative position. (0-1)\r\n\t *\r\n\t * @param point  Coorinates (px)\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint): number {\r\n\t\treturn this.renderer.pointToPosition(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position to coordinate.\r\n\t *\r\n\t * @since 4.7.15\r\n\t * @param position (0-1)\r\n\t * @return coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\treturn this.renderer.positionToCoordinate(position);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param start  [description]\r\n\t * @param end    [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: any, end: any): string {\r\n\t\treturn this.renderer.getPositionRangePath(start, end);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts any positional parameter to a relative position on axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param value  Pisition\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic anyToPosition(value: any): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts any positional parameter to a relative position on axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param value  Pisition\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic anyToPoint(value: any): IOrientationPoint {\r\n\t\treturn { x: 0, y: 0, angle: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition [description]\r\n\t * @param endPosition   [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tif (this.renderer) {\r\n\t\t\treturn this.renderer.getPositionRangePath(startPosition, endPosition);\r\n\t\t}\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * Actual axis length in pixels.\r\n\t *\r\n\t * @return Axis length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\tif (this.renderer) {\r\n\t\t\treturn this.renderer.axisLength;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if axis should display a tooltip for chart's cursor.\r\n\t *\r\n\t * @param value Display tooltip?\r\n\t */\r\n\tpublic set cursorTooltipEnabled(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"cursorTooltipEnabled\", value)) {\r\n\t\t\tif (value && this.renderer) {\r\n\t\t\t\tthis.renderer.updateTooltip();\r\n\t\t\t}\r\n\t\t\telse if (this.tooltip) {\r\n\t\t\t\tthis.tooltip.hide(0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Normally, when axis is zoomed in, a zoom out button is shown by a chart,\r\n\t * and vice versa: when axis is zoomed out completely, zoom out button is\r\n\t * hidden.\r\n\t *\r\n\t * Setting this to `false` will disable this behavior. Zooming in our out\r\n\t * this axis will not reveal or hide zoom out button.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.6.2\r\n\t * @param  value  Toggle zoom out button?\r\n\t */\r\n\tpublic set toggleZoomOutButton(value: boolean) {\r\n\t\tthis.setPropertyValue(\"toggleZoomOutButton\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Toggle zoom out button?\r\n\t */\r\n\tpublic get toggleZoomOutButton(): boolean {\r\n\t\treturn this.getPropertyValue(\"toggleZoomOutButton\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Display tooltip?\r\n\t */\r\n\tpublic get cursorTooltipEnabled(): boolean {\r\n\t\treturn this.getPropertyValue(\"cursorTooltipEnabled\");\r\n\t}\r\n\r\n\t/**\r\n\t * Hides element's [[Tooltip]].\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t */\r\n\tpublic hideTooltip(duration?: number): void {\r\n\t\tsuper.hideTooltip(duration);\r\n\t\tthis._tooltipPosition = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows Axis tooltip at specific relative position within Axis. (0-1)\r\n\t *\r\n\t * @param position Position (0-1)\r\n\t * @param local or global position\r\n\t */\r\n\tpublic showTooltipAtPosition(position: number, local?: boolean) {\r\n\t\tlet tooltip: Tooltip = this._tooltip;\r\n\r\n\t\tif (!tooltip || this.dataItems.length <= 0) {\r\n\t\t\tthis._tooltipPosition = undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (!local) {\r\n\t\t\t\tposition = this.toAxisPosition(position);\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(position) || position < this.start || position > this.end) {\r\n\t\t\t\ttooltip.hide(0);\r\n\t\t\t\tthis._tooltipPosition = undefined;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet renderer = this.renderer;\r\n\r\n\t\t\t//@todo: think of how to solve this better\r\n\t\t\tif (!tooltip.parent) {\r\n\t\t\t\ttooltip.parent = this.tooltipContainer;\r\n\t\t\t}\r\n\r\n\t\t\tlet tooltipLocation = renderer.tooltipLocation;\r\n\r\n\t\t\tlet startPosition: number = this.getCellStartPosition(position);\r\n\t\t\tlet endPosition: number = this.getCellEndPosition(position);\r\n\r\n\t\t\tif (this.tooltipPosition == \"fixed\") {\r\n\t\t\t\tposition = startPosition + (endPosition - startPosition) * tooltipLocation;\r\n\t\t\t}\r\n\r\n\t\t\tposition = $math.fitToRange(position, this.start, this.end);\r\n\r\n\t\t\tif (this._tooltipPosition != position) {\r\n\t\t\t\tthis._tooltipPosition = position;\r\n\r\n\t\t\t\tlet tooltipLocation2 = renderer.tooltipLocation2;\r\n\r\n\t\t\t\tlet startPoint: IPoint = renderer.positionToPoint(startPosition, tooltipLocation2);\r\n\t\t\t\tlet endPoint: IPoint = renderer.positionToPoint(endPosition, tooltipLocation2);\r\n\r\n\t\t\t\t// save values so cursor could use them\r\n\t\t\t\tthis.currentItemStartPoint = startPoint;\r\n\t\t\t\tthis.currentItemEndPoint = endPoint;\r\n\r\n\t\t\t\tif (renderer.fullWidthTooltip) {\r\n\t\t\t\t\ttooltip.width = endPoint.x - startPoint.x;\r\n\t\t\t\t\ttooltip.height = endPoint.y - startPoint.y;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet point: IPoint = renderer.positionToPoint(position, tooltipLocation2);\r\n\t\t\t\tlet globalPoint: IPoint = $utils.spritePointToSvg(point, this.renderer.line);\r\n\t\t\t\ttooltip.text = this.getTooltipText(position);\r\n\r\n\t\t\t\tif (tooltip.text) {\r\n\t\t\t\t\ttooltip.delayedPointTo(globalPoint);\r\n\t\t\t\t\ttooltip.show();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.cursorTooltipEnabled || this.tooltip.disabled) {\r\n\t\t\t\ttooltip.hide(0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) to Axis position with zoom level and\r\n\t * inversed taken into account.\r\n\t *\r\n\t * @param position Global position (0-1)\r\n\t * @return Position within Axis (0-1)\r\n\t */\r\n\tpublic toAxisPosition(position: number): number {\r\n\r\n\t\tposition = this.renderer.toAxisPosition(position);\r\n\r\n\t\tif (position == undefined) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tposition = position * (this.end - this.start);\r\n\t\tif (this.renderer.inversed) {\r\n\t\t\tposition = this.end - position;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = this.start + position;\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts position on the axis with zoom level and\r\n\t * inversed taken into account to global position.\r\n\t *\r\n\t * @param position Axis position (0-1)\r\n\t * @return Global position (0-1)\r\n\t */\r\n\tpublic toGlobalPosition(position: number): number {\r\n\t\tif (this.renderer.inversed) {\r\n\t\t\tposition = this.end - position;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = position - this.start;\r\n\t\t}\r\n\r\n\t\treturn position / (this.end - this.start);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to be used for cursor's Axis tooltip.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position coordinate (px)\r\n\t * @return Label text\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Axis' tooltip's position and possibly size, and pointer (stem)\r\n\t * place.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param pointerOrientation  Pointer (stem) orientation\r\n\t * @param boundingRectangle   A rectangle for tooltip to fit within\r\n\t */\r\n\tpublic updateTooltip(pointerOrientation: PointerOrientation, boundingRectangle: IRectangle): void {\r\n\t\tlet tooltip: Tooltip = this._tooltip;\r\n\t\tif (tooltip) {\r\n\t\t\ttooltip.fixDoc = false;\r\n\t\t\ttooltip.pointerOrientation = pointerOrientation;\r\n\t\t\ttooltip.setBounds($utils.spriteRectToSvg(boundingRectangle, this.renderer.line));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [roundPosition description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param position  Relative position\r\n\t * @param location  Location on axis\r\n\t * @return Rounded position\r\n\t */\r\n\tpublic roundPosition(position: number, location: AxisItemLocation, axisLocation?: number): number {\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * [getCellStartPosition description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param position [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * [getCellEndPosition description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param position [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of axis ranges for this Axis.\r\n\t *\r\n\t * @return Axis ranges\r\n\t */\r\n\tpublic get axisRanges(): ListTemplate<this[\"_dataItem\"]> {\r\n\t\tif (!this._axisRanges) {\r\n\t\t\tlet dataItem: AxisDataItem = this.createDataItem();\r\n\t\t\tdataItem.isRange = true;\r\n\t\t\tdataItem.axisFill = this.renderer.axisFills.template.clone();\r\n\t\t\tdataItem.grid = this.renderer.grid.template.clone();\r\n\t\t\tdataItem.tick = this.renderer.ticks.template.clone();\r\n\t\t\tdataItem.label = this.renderer.labels.template.clone();\r\n\r\n\t\t\tdataItem.isTemplate = true;\r\n\t\t\tdataItem.component = this;\r\n\t\t\tdataItem.axisFill.disabled = false;\r\n\t\t\tdataItem.tick.disabled = false;\r\n\t\t\tdataItem.grid.disabled = false;\r\n\t\t\tdataItem.label.disabled = false;\r\n\r\n\t\t\tthis._axisRanges = new ListTemplate<this[\"_dataItem\"]>(dataItem);\r\n\t\t\tthis._axisRanges.events.on(\"inserted\", this.processAxisRange, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._axisRanges));\r\n\t\t\tthis._disposers.push(this._axisRanges.template);\r\n\t\t}\r\n\t\treturn this._axisRanges;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an axis range after it has been added to the axis range list.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected processAxisRange(event: IListEvents<this[\"_dataItem\"]>[\"inserted\"]) {\r\n\t\tlet axisRange: AxisDataItem = event.newValue;\r\n\t\taxisRange.component = this;\r\n\t\taxisRange.isRange = true;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of axis breaks on this Axis.\r\n\t *\r\n\t * @return Axis breaks.\r\n\t */\r\n\tpublic get axisBreaks(): SortedListTemplate<this[\"_axisBreak\"]> {\r\n\t\tif (!this._axisBreaks) {\r\n\t\t\tthis._axisBreaks = new SortedListTemplate<this[\"_axisBreak\"]>(this.createAxisBreak(), (a, b) => {\r\n\t\t\t\treturn $number.order(a.adjustedStartValue, b.adjustedStartValue);\r\n\t\t\t});\r\n\r\n\t\t\tthis._axisBreaks.events.on(\"inserted\", this.processBreak, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._axisBreaks));\r\n\t\t\tthis._disposers.push(this._axisBreaks.template);\r\n\t\t}\r\n\t\treturn this._axisBreaks;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new axis break.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new AxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Series currently associated with this Axis.\r\n\t *\r\n\t * @return Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes Series' data items.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processSeriesDataItems(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes Series' single data item.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Post-processes Serie's data items.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic postProcessSeriesDataItems(series?: XYSeries): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Post-processes Serie's single data item.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\t/**\r\n\t * Updates Axis based on all Series that might influence it.\r\n\t *\r\n\t * Called by Series after Series data is validated.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisBySeries(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Hides unused data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic hideUnusedDataItems(): void {\r\n\t\t// hide all unused\r\n\t\tlet dataItemsIterator: $iter.ListIterator<this[\"_dataItem\"]> = this._dataItemsIterator;\r\n\r\n\t\tdataItemsIterator.createNewItems = false;\r\n\r\n\t\t$iter.each(dataItemsIterator.iterator(), (dataItem) => {\r\n\t\t\tthis.validateDataElement(dataItem); // solves shrinking\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t});\r\n\r\n\t\tdataItemsIterator.clear();\r\n\t\tdataItemsIterator.createNewItems = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series' data item that corresponds to specific position on Axis.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param series    Series\r\n\t * @param position  Position (0-1)\r\n\t * @param findNearest  Should axis try to find nearest tooltip if there is no data item at exact position\r\n\t * @return Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number, findNearest?: boolean): XYSeriesDataItem {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle that corresponds to specific position on axis.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       ???\r\n\t * @param location  Location\r\n\t * @param stackKey  ???\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * [getX description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem [description]\r\n\t * @param key      [description]\r\n\t * @param location [description]\r\n\t * @param stackKey [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getX description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem [description]\r\n\t * @param key      [description]\r\n\t * @param location [description]\r\n\t * @param stackKey [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getPositionX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getY description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem [description]\r\n\t * @param key      [description]\r\n\t * @param location [description]\r\n\t * @param stackKey [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * [getY description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem [description]\r\n\t * @param key      [description]\r\n\t * @param location [description]\r\n\t * @param stackKey [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getPositionY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point coordinates\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataChangeUpdate(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic seriesDataChangeUpdate(series: XYSeries): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes axis breaks that fall between `min` and `max` (???)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param min  Start value\r\n\t * @param max  End value\r\n\t * @return Spread o\r\n\t */\r\n\tprotected adjustDifference(min: number, max: number): number {\r\n\t\tlet difference: number = max - min;\r\n\t\tif ($type.isNumber(difference)) {\r\n\t\t\tif (this._axisBreaks) {\r\n\t\t\t\t$iter.eachContinue(this._axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\t\t\t\t\tif ($type.isNumber(startValue) && $type.isNumber(endValue)) {\r\n\t\t\t\t\t\t// breaks are sorted, we don't need go further anymore\r\n\t\t\t\t\t\tif (startValue > max) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (endValue >= min) {\r\n\t\t\t\t\t\t\tif ($type.isNumber(startValue) && $type.isNumber(endValue)) {\r\n\t\t\t\t\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t\t\t\t\tlet intersection: IRange = $math.intersection({ start: startValue, end: endValue }, { start: min, end: max });\r\n\r\n\t\t\t\t\t\t\t\tif (intersection) {\r\n\t\t\t\t\t\t\t\t\tdifference -= (intersection.end - intersection.start) * (1 - breakSize);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn difference;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if specific value falls within a break.\r\n\t *\r\n\t * Returns [[AxisBreak]] the value falls into.\r\n\t *\r\n\t * @param value  Value to check\r\n\t * @return Axis break\r\n\t */\r\n\tprotected isInBreak(value: number): this[\"_axisBreak\"] {\r\n\t\tif (this._axisBreaks) {\r\n\t\t\treturn $iter.find(this._axisBreaks.iterator(), (axisBreak) =>\r\n\t\t\t\tvalue >= axisBreak.adjustedStartValue &&\r\n\t\t\t\tvalue <= axisBreak.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [fixAxisBreaks description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected fixAxisBreaks(): void {\r\n\t\tif (this._axisBreaks) {\r\n\t\t\tlet axisBreaks: SortedListTemplate<this[\"_axisBreak\"]> = this._axisBreaks;\r\n\t\t\tif (axisBreaks.length > 0) {\r\n\t\t\t\t// first make sure that startValue is <= end value\r\n\t\t\t\t// This needs to make a copy of axisBreaks because it mutates the list while traversing\r\n\t\t\t\t// TODO very inefficient\r\n\t\t\t\t$array.each($iter.toArray(axisBreaks.iterator()), (axisBreak) => {\r\n\t\t\t\t\tlet startValue: number = $math.min(axisBreak.startValue, axisBreak.endValue);\r\n\t\t\t\t\tlet endValue: number = $math.max(axisBreak.startValue, axisBreak.endValue);\r\n\r\n\t\t\t\t\taxisBreak.adjustedStartValue = startValue;\r\n\t\t\t\t\taxisBreak.adjustedEndValue = endValue;\r\n\r\n\t\t\t\t\tthis._axisBreaks.update(axisBreak);\r\n\t\t\t\t});\r\n\r\n\r\n\t\t\t\tlet firstAxisBreak: this[\"_axisBreak\"] = axisBreaks.first;\r\n\t\t\t\tlet previousEndValue: number = Math.min(firstAxisBreak.startValue, firstAxisBreak.endValue);\r\n\r\n\t\t\t\t// process breaks\r\n\t\t\t\t// TODO does this need to call axisBreaks.update ?\r\n\t\t\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t\t// breaks can't overlap\r\n\t\t\t\t\t// if break starts before previous break ends\r\n\t\t\t\t\tif (startValue < previousEndValue) {\r\n\t\t\t\t\t\tstartValue = previousEndValue;\r\n\r\n\t\t\t\t\t\tif (endValue < previousEndValue) {\r\n\t\t\t\t\t\t\tendValue = previousEndValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\taxisBreak.adjustedStartValue = startValue;\r\n\t\t\t\t\taxisBreak.adjustedEndValue = endValue;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * We need start/end indexes of axes to be 0 - `dataItems.length`.\r\n\t *\r\n\t * Yes, also for category axis, this helps to avoid jumping of categories\r\n\t * while scrolling and does not do a lot of extra work as we use\r\n\t * protected `_startIndex` and `_endIndex` when working with items.\r\n\t *\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * [startIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set startIndex(value: number) {\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return [description]\r\n\t */\r\n\tpublic get startIndex(): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * [endIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set endIndex(value: number) {\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return [description]\r\n\t */\r\n\tpublic get endIndex(): number {\r\n\t\treturn this.dataItems.length;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a formatted label based on position.\r\n\t *\r\n\t * Individual axis types should override this method to generate a label\r\n\t * that is relevant to axis type.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\treturn Math.round(position * 100) + \"%x\";\r\n\t}\r\n\r\n\t/**\r\n\t * A Chart this Axis belongs to.\r\n\t *\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: Chart) {\r\n\t\tthis._chart = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): Chart {\r\n\t\treturn this._chart;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a data item for a Series range.\r\n\t *\r\n\t * @param series  Target Series\r\n\t * @return Range data item\r\n\t */\r\n\tpublic createSeriesRange(series: XYSeries): this[\"_dataItem\"] {\r\n\t\tlet range = this.axisRanges.create();\r\n\t\trange.component = this;\r\n\t\trange.axisFill = this.renderer.axisFills.template.clone();\r\n\t\trange.axisFill.disabled = false;\r\n\t\trange.axisFill.fillOpacity = 0;\r\n\r\n\t\trange.grid = this.renderer.grid.template.clone();\r\n\t\trange.grid.disabled = true;\r\n\r\n\t\trange.tick = this.renderer.ticks.template.clone();\r\n\t\trange.tick.disabled = true;\r\n\r\n\t\trange.label = this.renderer.labels.template.clone();\r\n\t\trange.label.disabled = true;\r\n\r\n\t\trange.addDisposer(new Disposer(() => {\r\n\t\t\tseries.axisRanges.removeValue(range);\r\n\t\t}))\r\n\r\n\t\tseries.axisRanges.push(range);\r\n\t\treturn range;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.renderer) {\r\n\t\t\tthis.renderer.copyFrom(source.renderer);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (source.renderer) {\r\n\t\t\t\tthis.renderer = source.renderer.clone();\r\n\t\t\t\tthis._disposers.push(this.renderer);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (source.title) {\r\n\t\t\tif (!this.title) {\r\n\t\t\t\tthis.title = source.title.clone();\r\n\t\t\t\tthis.title.parent = this;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.title.copyFrom(source.title);\r\n\t\t\t}\r\n\t\t\tthis._disposers.push(this.title);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Resets internal iterator.\r\n\t */\r\n\tprotected resetIterators(): void {\r\n\t\tthis._dataItemsIterator.reset();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\r\n\t\t\t\t\t// If `series` is set, we know it's a series range\r\n\t\t\t\t\tif ($type.hasValue(range[\"series\"])) {\r\n\t\t\t\t\t\tif ($type.isString(range[\"series\"])) {\r\n\t\t\t\t\t\t\tif (this.map.hasKey(range[\"series\"])) {\r\n\t\t\t\t\t\t\t\t//range[\"series\"] = this.map.getKey(range[\"series\"]);\r\n\t\t\t\t\t\t\t\tconfig.axisRanges[i] = this.createSeriesRange(this.map.getKey(range[\"series\"]));\r\n\t\t\t\t\t\t\t\tdelete (range[\"series\"]);\r\n\t\t\t\t\t\t\t\tconfig.axisRanges[i].config = range;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Ordering function used in JSON setup.\r\n\t *\r\n\t * @param a  Item A\r\n\t * @param b  Item B\r\n\t * @return Order\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t// last\r\n\t\telse if (a == \"title\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"title\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\r\n\t\t// first\r\n\t\telse if (a == \"component\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (b == \"component\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Axis start location. Works on Date/Category axis, doesn't work on Value axis.\r\n\t *\r\n\t * * 0 - Full first cell is shown.\r\n\t * * 0.5 - Half of first cell is shown.\r\n\t * * 1 - None of the first cell is visible. (you probably don't want that)\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"startLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Axis end location. Works on Date/Category axis, doesn't work on Value axis.\r\n\t *\r\n\t * * 0 - None of the last cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the last cell is shown.\r\n\t * * 1 - Full last cell is shown.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"endLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n\r\n\tprotected setDisabled(value: boolean) {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (this.renderer) {\r\n\t\t\tthis.renderer.gridContainer.disabled = value;\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Label]] element which serves as a title to the axis.\r\n\t *\r\n\t * When axis is created it aleready has an element, so you can just modify\r\n\t * it.\r\n\t *\r\n\t * Or you can replace it with your own instance of `Label`.\r\n\t * \r\n\t * @param  value  Title label\r\n\t */\r\n\tpublic set title(value: Label) {\r\n\t\tif (this._title && this._title != value) {\r\n\t\t\tthis._title.dispose();\r\n\t\t}\r\n\t\tif (value) {\r\n\t\t\tthis._title = value;\r\n\t\t\tvalue.parent = this;\r\n\t\t\tvalue.shouldClone = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Title label\r\n\t */\r\n\tpublic get title(): Label {\r\n\t\treturn this._title;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Indicates if axis' tooltip should be hidden while axis range is animating\r\n\t * (zooming)\r\n\t * \r\n\t * @default true\r\n\t * @since 4.7.16\r\n\t * @param  value  Hide tooltip while zooming?\r\n\t */\r\n\tpublic set hideTooltipWhileZooming(value: boolean) {\r\n\t\tthis.setPropertyValue(\"hideTooltipWhileZooming\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hide tooltip while zooming?\r\n\t */\r\n\tpublic get hideTooltipWhileZooming(): boolean {\r\n\t\treturn this.getPropertyValue(\"hideTooltipWhileZooming\");\r\n\t}\r\n\r\n\t/**\r\n\t * Should the axis be zoomed with scrollbar/cursor?\r\n\t *\r\n\t * @default true\r\n\t * @since 4.9.28\r\n\t * @param  value  Zoomable?\r\n\t */\r\n\tpublic set zoomable(value: boolean) {\r\n\t\tthis.setPropertyValue(\"zoomable\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoomable?\r\n\t */\r\n\tpublic get zoomable(): boolean {\r\n\t\treturn this.getPropertyValue(\"zoomable\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Axis\"] = Axis;\r\nregistry.registeredClasses[\"AxisDataItem\"] = AxisDataItem;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Disable axis tooltips.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Axis && target.tooltip) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.cursorTooltipEnabled = false;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});"]},"metadata":{},"sourceType":"module","externalDependencies":[]}