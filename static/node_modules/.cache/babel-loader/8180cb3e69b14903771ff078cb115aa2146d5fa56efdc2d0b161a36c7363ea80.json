{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Layout, eachChildren } from \"./Layout\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\n/**\r\n * A vertical children layout for [[Container]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info\r\n */\nvar VerticalLayout = /** @class */function (_super) {\n  __extends(VerticalLayout, _super);\n  function VerticalLayout() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @ignore\r\n   */\n  Object.defineProperty(VerticalLayout.prototype, \"updateContainer\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (container) {\n      var paddingTop = container.get(\"paddingTop\", 0);\n      var availableHeight = container.innerHeight();\n      var totalPercent = 0;\n      eachChildren(container, function (child) {\n        if (child.isVisible()) {\n          if (child.get(\"position\") == \"relative\") {\n            var childHeight = child.get(\"height\");\n            if (childHeight instanceof Percent) {\n              totalPercent += childHeight.value;\n              var h = availableHeight * childHeight.value;\n              var minHeight = child.get(\"minHeight\", child.getPrivate(\"minHeight\", -Infinity));\n              if (minHeight > h) {\n                availableHeight -= minHeight;\n                totalPercent -= childHeight.value;\n              }\n              var maxHeight = child.get(\"maxHeight\", child.getPrivate(\"maxHeight\", Infinity));\n              if (h > maxHeight) {\n                availableHeight -= maxHeight;\n                totalPercent -= childHeight.value;\n              }\n            } else {\n              if (!$type.isNumber(childHeight)) {\n                childHeight = child.height();\n              }\n              availableHeight -= childHeight + child.get(\"marginTop\", 0) + child.get(\"marginBottom\", 0);\n            }\n          }\n        }\n      });\n      if (availableHeight < 0) {\n        availableHeight = 0.01;\n      }\n      //if (availableHeight > 0) {\n      eachChildren(container, function (child) {\n        if (child.isVisible()) {\n          if (child.get(\"position\") == \"relative\") {\n            var childHeight = child.get(\"height\");\n            if (childHeight instanceof Percent) {\n              var privateHeight = availableHeight * childHeight.value / totalPercent - child.get(\"marginTop\", 0) - child.get(\"marginBottom\", 0);\n              var minHeight = child.get(\"minHeight\", child.getPrivate(\"minHeight\", -Infinity));\n              var maxHeight = child.get(\"maxHeight\", child.getPrivate(\"maxHeight\", Infinity));\n              privateHeight = Math.min(Math.max(minHeight, privateHeight), maxHeight);\n              child.setPrivate(\"height\", privateHeight);\n            }\n          }\n        }\n      });\n      //}\n      var prevY = paddingTop;\n      eachChildren(container, function (child) {\n        if (child.get(\"position\") == \"relative\") {\n          if (child.isVisible()) {\n            var bounds = child.adjustedLocalBounds();\n            var marginTop = child.get(\"marginTop\", 0);\n            var top_1 = bounds.top;\n            var bottom = bounds.bottom;\n            var maxHeight = child.get(\"maxHeight\");\n            if (maxHeight) {\n              if (bottom - top_1 > maxHeight) {\n                bottom = top_1 + maxHeight;\n              }\n            }\n            var marginBottom = child.get(\"marginBottom\", 0);\n            var y = prevY + marginTop - top_1;\n            child.setPrivate(\"y\", y);\n            prevY = y + bottom + marginBottom;\n          } else {\n            child.setPrivate(\"y\", undefined);\n          }\n        }\n      });\n    }\n  });\n  Object.defineProperty(VerticalLayout, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"VerticalLayout\"\n  });\n  Object.defineProperty(VerticalLayout, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Layout.classNames.concat([VerticalLayout.className])\n  });\n  return VerticalLayout;\n}(Layout);\nexport { VerticalLayout };","map":{"version":3,"mappings":"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","names":["Layout","eachChildren","$type","Percent","__extends","container","paddingTop","get","availableHeight","innerHeight","totalPercent","child","isVisible","childHeight","value","h","minHeight","getPrivate","Infinity","maxHeight","isNumber","height","privateHeight","Math","min","max","setPrivate","prevY","bounds","adjustedLocalBounds","marginTop","top_1","top","bottom","marginBottom","y","undefined","Object","classNames","concat","VerticalLayout","className"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\core\\render\\VerticalLayout.ts"],"sourcesContent":["import { Layout, eachChildren } from \"./Layout\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\nimport type { Container } from \"./Container\";\n\n\n/**\n * A vertical children layout for [[Container]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info\n */\nexport class VerticalLayout extends Layout {\n\n\tpublic static className: string = \"VerticalLayout\";\n\tpublic static classNames: Array<string> = Layout.classNames.concat([VerticalLayout.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateContainer(container: Container): void {\n\t\tlet paddingTop = container.get(\"paddingTop\", 0);\n\n\t\tlet availableHeight = container.innerHeight();\n\t\tlet totalPercent = 0;\n\n\t\teachChildren(container, (child) => {\n\t\t\tif (child.isVisible()) {\n\t\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\t\tlet childHeight = child.get(\"height\");\n\t\t\t\t\tif (childHeight instanceof Percent) {\n\t\t\t\t\t\ttotalPercent += childHeight.value;\n\n\t\t\t\t\t\tlet h = availableHeight * childHeight.value;\n\t\t\t\t\t\tlet minHeight = child.get(\"minHeight\", child.getPrivate(\"minHeight\", -Infinity));\n\t\t\t\t\t\tif (minHeight > h) {\n\t\t\t\t\t\t\tavailableHeight -= minHeight;\n\t\t\t\t\t\t\ttotalPercent -= childHeight.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet maxHeight = child.get(\"maxHeight\", child.getPrivate(\"maxHeight\", Infinity));\n\t\t\t\t\t\tif (h > maxHeight) {\n\t\t\t\t\t\t\tavailableHeight -= maxHeight;\n\t\t\t\t\t\t\ttotalPercent -= childHeight.value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (!$type.isNumber(childHeight)) {\n\t\t\t\t\t\t\tchildHeight = child.height();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tavailableHeight -= childHeight + child.get(\"marginTop\", 0) + child.get(\"marginBottom\", 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tif (availableHeight < 0) {\n\t\t\tavailableHeight = 0.01;\n\t\t}\n\n\t\t//if (availableHeight > 0) {\n\t\teachChildren(container, (child) => {\n\t\t\tif (child.isVisible()) {\n\t\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\t\tlet childHeight = child.get(\"height\");\n\n\t\t\t\t\tif (childHeight instanceof Percent) {\n\t\t\t\t\t\tlet privateHeight = availableHeight * childHeight.value / totalPercent - child.get(\"marginTop\", 0) - child.get(\"marginBottom\", 0);\n\n\t\t\t\t\t\tlet minHeight = child.get(\"minHeight\", child.getPrivate(\"minHeight\", -Infinity));\n\t\t\t\t\t\tlet maxHeight = child.get(\"maxHeight\", child.getPrivate(\"maxHeight\", Infinity));\n\t\t\t\t\t\tprivateHeight = Math.min(Math.max(minHeight, privateHeight), maxHeight);\n\n\t\t\t\t\t\tchild.setPrivate(\"height\", privateHeight);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t//}\n\n\t\tlet prevY = paddingTop;\n\n\t\teachChildren(container, (child) => {\n\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\tif (child.isVisible()) {\n\t\t\t\t\tlet bounds = child.adjustedLocalBounds();\n\t\t\t\t\tlet marginTop = child.get(\"marginTop\", 0);\n\n\t\t\t\t\tlet top = bounds.top;\n\t\t\t\t\tlet bottom = bounds.bottom;\n\n\t\t\t\t\tlet maxHeight = child.get(\"maxHeight\");\n\t\t\t\t\tif (maxHeight) {\n\t\t\t\t\t\tif (bottom - top > maxHeight) {\n\t\t\t\t\t\t\tbottom = top + maxHeight;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlet marginBottom = child.get(\"marginBottom\", 0);\n\t\t\t\t\tlet y = prevY + marginTop - top;\n\t\t\t\t\tchild.setPrivate(\"y\", y);\n\t\t\t\t\tprevY = y + bottom + marginBottom;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tchild.setPrivate(\"y\", undefined);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}