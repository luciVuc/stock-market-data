{"ast":null,"code":"/**\r\n * Chord diagram module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { FlowDiagram, FlowDiagramDataItem } from \"./FlowDiagram\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { Container } from \"../../core/Container\";\nimport { registry } from \"../../core/Registry\";\nimport { ChordNode } from \"../elements/ChordNode\";\nimport { ChordLink } from \"../elements/ChordLink\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo rearange notes after dragged\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar ChordDiagramDataItem = /** @class */function (_super) {\n  __extends(ChordDiagramDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ChordDiagramDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"ChordDiagramDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return ChordDiagramDataItem;\n}(FlowDiagramDataItem);\nexport { ChordDiagramDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\nvar ChordDiagram = /** @class */function (_super) {\n  __extends(ChordDiagram, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ChordDiagram() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * [valueAngle description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n    _this.valueAngle = 0;\n    _this.className = \"ChordDiagram\";\n    _this.startAngle = -90;\n    _this.endAngle = 270;\n    _this.radius = percent(80);\n    _this.innerRadius = -15;\n    _this.nodePadding = 5;\n    var chordContainer = _this.chartContainer.createChild(Container);\n    chordContainer.align = \"center\";\n    chordContainer.valign = \"middle\";\n    chordContainer.shouldClone = false;\n    chordContainer.layout = \"absolute\";\n    _this.chordContainer = chordContainer;\n    _this.nodesContainer.parent = chordContainer;\n    _this.linksContainer.parent = chordContainer;\n    _this.chartContainer.events.on(\"maxsizechanged\", _this.invalidate, _this, false);\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Redraws the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  ChordDiagram.prototype.validate = function () {\n    var _this = this;\n    var chartContainer = this.chartContainer;\n    var endAngle = this.endAngle;\n    var startAngle = this.startAngle + this.nodePadding / 2;\n    var rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\n    var innerRect = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    rect = $math.getCommonRectangle([rect, innerRect]);\n    var maxRadius = Math.min(chartContainer.innerWidth / rect.width, chartContainer.innerHeight / rect.height);\n    if (!$type.isNumber(maxRadius)) {\n      maxRadius = 0;\n    }\n    var radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\n    var pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\n    var total = this.dataItem.values.value.sum;\n    var count = 0;\n    var newTotal = 0;\n    $iter.each(this._sorted, function (strNode) {\n      var node = strNode[1];\n      _this.getNodeValue(node);\n      count++;\n      var value = node.total;\n      if (node.total / total < _this.minNodeSize) {\n        value = total * _this.minNodeSize;\n      }\n      newTotal += value;\n    });\n    this.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\n    $iter.each(this._sorted, function (strNode) {\n      var node = strNode[1];\n      var slice = node.slice;\n      slice.radius = radius;\n      slice.innerRadius = pixelInnerRadius;\n      var value = node.total;\n      if (node.total / total < _this.minNodeSize) {\n        value = total * _this.minNodeSize;\n      }\n      node.adjustedTotal = value;\n      var arc;\n      if (_this.nonRibbon) {\n        arc = (endAngle - _this.startAngle) / count - _this.nodePadding;\n      } else {\n        arc = _this.valueAngle * value;\n      }\n      slice.arc = arc;\n      slice.startAngle = startAngle;\n      node.trueStartAngle = startAngle;\n      node.parent = _this.nodesContainer;\n      node.validate(); // otherwise flickers - nodes are already created, but not yet positioned etc.\n      startAngle += arc + _this.nodePadding;\n    });\n    this.chordContainer.definedBBox = {\n      x: radius * rect.x,\n      y: radius * rect.y,\n      width: radius * rect.width,\n      height: radius * rect.height\n    };\n    this.chordContainer.invalidateLayout();\n    _super.prototype.validate.call(this);\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n  ChordDiagram.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Chord diagram\");\n    }\n  };\n  /**\r\n   * Creates and returns a new data item.\r\n   *\r\n   * @return Data item\r\n   */\n  ChordDiagram.prototype.createDataItem = function () {\n    return new ChordDiagramDataItem();\n  };\n  Object.defineProperty(ChordDiagram.prototype, \"startAngle\", {\n    /**\r\n     * @return Start angle (degrees)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startAngle\");\n    },\n    /**\r\n     * Starting angle of the Radar face. (degrees)\r\n     *\r\n     * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n     * top center. (at -90 degrees)\r\n     *\r\n     * You can use `startAngle` to change this setting.\r\n     *\r\n     * E.g. setting this to 0 will make the radial axis start horizontally to\r\n     * the right, as opposed to vertical.\r\n     *\r\n     * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n     * needs to be 360.\r\n     *\r\n     * However, it's **not** necessary to do so. You can set those to lesser\r\n     * numbers, to create semi-circles.\r\n     *\r\n     * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n     * looks like a quarter of a circle.\r\n     *\r\n     * @default -90\r\n     * @param value  Start angle (degrees)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ChordDiagram.prototype, \"endAngle\", {\n    /**\r\n     * @return End angle (degrees)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endAngle\");\n    },\n    /**\r\n     * Starting angle of the Radar face. (degrees)\r\n     *\r\n     * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n     * where it has started, forming a full 360 circle. (at 270 degrees)\r\n     *\r\n     * You can use `endAngle` to end the circle somewhere else.\r\n     *\r\n     * E.g. setting this to 180 will make the radar face end at horizontal line\r\n     * to the left off the center.\r\n     *\r\n     * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n     * needs to be 360.\r\n     *\r\n     * However, it's **not** necessary to do so. You can set those to lesser\r\n     * numbers, to create semi-circles.\r\n     *\r\n     * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n     * looks like a quarter of a circle.\r\n     *\r\n     * @default -90\r\n     * @param value  End angle (degrees)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ChordDiagram.prototype, \"radius\", {\n    /**\r\n     * @return Outer radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n    /**\r\n     * Outer radius of the Radar face.\r\n     *\r\n     * This can either be in absolute pixel value, or relative [[Percent]].\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ChordDiagram.prototype, \"innerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n    /**\r\n     * Inner radius of the Chord nodes.\r\n     *\r\n     * This can either be in absolute pixel value, or relative [[Percent]].\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ChordDiagram.prototype, \"nonRibbon\", {\n    /**\r\n     * @return Non-ribbon\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"nonRibbon\");\n    },\n    /**\r\n     *\r\n     * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n     *\r\n     * @param value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"nonRibbon\", value, true);\n      this.links.template.middleLine.strokeOpacity = 1;\n      this.links.template.link.fillOpacity = 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n  ChordDiagram.prototype.createNode = function () {\n    var node = new ChordNode();\n    this._disposers.push(node);\n    return node;\n  };\n  /**\r\n   * @ignore\r\n   */\n  ChordDiagram.prototype.createLink = function () {\n    var link = new ChordLink();\n    this._disposers.push(link);\n    return link;\n  };\n  return ChordDiagram;\n}(FlowDiagram);\nexport { ChordDiagram };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;","map":{"version":3,"mappings":"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","names":["FlowDiagram","FlowDiagramDataItem","percent","Container","registry","ChordNode","ChordLink","$iter","$math","$type","$utils","__extends","_super","_this","className","applyTheme","startAngle","endAngle","radius","innerRadius","nodePadding","chordContainer","chartContainer","createChild","align","valign","shouldClone","layout","nodesContainer","parent","linksContainer","events","on","invalidate","ChordDiagram","rect","getArcRect","innerRect","x","y","width","height","getCommonRectangle","maxRadius","Math","min","innerWidth","innerHeight","isNumber","relativeRadiusToValue","pixelInnerRadius","total","dataItem","values","value","sum","count","newTotal","each","_sorted","strNode","node","getNodeValue","minNodeSize","valueAngle","slice","adjustedTotal","arc","nonRibbon","trueStartAngle","validate","definedBBox","invalidateLayout","applyInternalDefaults","hasValue","readerTitle","language","translate","ChordDiagramDataItem","Object","getPropertyValue","setPropertyValue","setPercentProperty","links","template","middleLine","strokeOpacity","link","fillOpacity","_disposers","push","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\types\\ChordDiagram.ts"],"sourcesContent":["/**\r\n * Chord diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DictionaryTemplate } from \"../../core/utils/Dictionary\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChordDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ChordDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: ChordNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: ChordNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ChordDiagram]]\r\n */\r\nexport interface IChordDiagramProperties extends IFlowDiagramProperties {\r\n\t/**\r\n\t * Radius of the Chord. Absolute or relative.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes. Absolute or relative. Negative value means that the inner radius will be calculated from the radius, not from the center.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * If you set this to true, all the lines will be of the same width.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tnonRibbon?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordDiagramAdapters extends IFlowDiagramAdapters, IChordDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\r\nexport class ChordDiagram extends FlowDiagram {\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IChordDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordDiagramEvents;\r\n\r\n\t/**\r\n\t * A list of chart's Chord nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, ChordNode>}\r\n\t */\r\n\tpublic nodes: DictionaryTemplate<string, ChordNode>;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, ChordNode]>;\r\n\r\n\t/**\r\n\t * [valueAngle description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic valueAngle: number = 0;\r\n\r\n\t/**\r\n\t * A container for chord elemens.\r\n\t */\r\n\tpublic chordContainer:Container;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node:ChordNode;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagram\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\r\n\t\tthis.innerRadius = - 15;\r\n\r\n\t\tthis.nodePadding = 5;\r\n\r\n\t\tlet chordContainer = this.chartContainer.createChild(Container);\r\n\t\tchordContainer.align = \"center\";\r\n\t\tchordContainer.valign = \"middle\";\r\n\t\tchordContainer.shouldClone = false;\r\n\t\tchordContainer.layout = \"absolute\";\r\n\t\tthis.chordContainer = chordContainer;\r\n\r\n\t\tthis.nodesContainer.parent = chordContainer;\r\n\t\tthis.linksContainer.parent = chordContainer;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.invalidate, this, false);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chartContainer = this.chartContainer;\r\n\r\n\t\tlet endAngle = this.endAngle;\r\n\t\tlet startAngle = this.startAngle + this.nodePadding / 2;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartContainer.innerWidth / rect.width, chartContainer.innerHeight / rect.height);\r\n\r\n\t\tif(!$type.isNumber(maxRadius)){\r\n\t\t\tmaxRadius = 0;\r\n\t\t}\r\n\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\t\tlet count = 0;\r\n\r\n\t\tlet newTotal = 0;\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t\tcount++;\r\n\t\t\tlet value = node.total;\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\t\t\tnewTotal += value;\r\n\t\t});\r\n\r\n\t\tthis.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet slice = node.slice;\r\n\r\n\t\t\tslice.radius = radius;\r\n\t\t\tslice.innerRadius = pixelInnerRadius;\r\n\r\n\t\t\tlet value = node.total;\r\n\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tnode.adjustedTotal = value;\r\n\r\n\t\t\tlet arc: number;\r\n\t\t\tif (this.nonRibbon) {\r\n\t\t\t\tarc = (endAngle - this.startAngle) / count - this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tarc = this.valueAngle * value;\r\n\t\t\t}\r\n\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.startAngle = startAngle;\r\n\t\t\tnode.trueStartAngle = startAngle;\r\n\t\t\tnode.parent = this.nodesContainer;\r\n\t\t\tnode.validate(); // otherwise flickers - nodes are already created, but not yet positioned etc.\r\n\t\t\tstartAngle += arc + this.nodePadding;\r\n\t\t})\r\n\r\n\t\tthis.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.chordContainer.invalidateLayout();\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chord diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ChordDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set nonRibbon(value: boolean) {\r\n\t\tthis.setPropertyValue(\"nonRibbon\", value, true);\r\n\t\tthis.links.template.middleLine.strokeOpacity = 1;\r\n\t\tthis.links.template.link.fillOpacity = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Non-ribbon\r\n\t */\r\n\tpublic get nonRibbon(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonRibbon\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode():this[\"_node\"]{\r\n\t\tlet node = new ChordNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink():this[\"_link\"]{\r\n\t\tlet link = new ChordLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}