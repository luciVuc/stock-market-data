{"ast":null,"code":"/**\r\n * FlowDiagram module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Chart, ChartDataItem } from \"../Chart\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\nimport { Container } from \"../../core/Container\";\nimport { registry } from \"../../core/Registry\";\nimport { FlowDiagramNode } from \"../elements/FlowDiagramNode\";\nimport { FlowDiagramLink } from \"../elements/FlowDiagramLink\";\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\nimport { ColorSet } from \"../../core/utils/ColorSet\";\nimport { toColor, Color } from \"../../core/utils/Color\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $number from \"../../core/utils/Number\";\nimport * as $order from \"../../core/utils/Order\";\nimport { Disposer } from \"../../core/utils/Disposer\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo rearange notes after dragged\n/**\r\n * Defines a [[DataItem]] for [[FlowDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar FlowDiagramDataItem = /** @class */function (_super) {\n  __extends(FlowDiagramDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function FlowDiagramDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"FlowDiagramDataItem\";\n    _this.values.value = {};\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(FlowDiagramDataItem.prototype, \"fromName\", {\n    /**\r\n     * @return name\r\n     */\n    get: function () {\n      return this.properties.fromName;\n    },\n    /**\r\n     * Source node's name.\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function (value) {\n      this.setProperty(\"fromName\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramDataItem.prototype, \"toName\", {\n    /**\r\n     * @return name\r\n     */\n    get: function () {\n      return this.properties.toName;\n    },\n    /**\r\n     * Destination node's name.\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function (value) {\n      this.setProperty(\"toName\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramDataItem.prototype, \"color\", {\n    /**\r\n     * @return color\r\n     */\n    get: function () {\n      return this.properties.color;\n    },\n    /**\r\n     * Node color\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function (value) {\n      this.setProperty(\"color\", toColor(value));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramDataItem.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.values.value.value;\n    },\n    /**\r\n     * Link's value.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setValue(\"value\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramDataItem.prototype, \"link\", {\n    /**\r\n     * A visual element, representing link between the source and target nodes.\r\n     *\r\n     * Link's actual thickness will be determined by `value` of this link and\r\n     * `value` of the source node.\r\n     *\r\n     * @readonly\r\n     * @return Link element\r\n     */\n    get: function () {\n      var _this = this;\n      if (!this._link) {\n        var link_1 = this.component.links.create();\n        this._link = link_1;\n        this.addSprite(link_1);\n        this._disposers.push(new Disposer(function () {\n          if (_this.component) {\n            _this.component.links.removeValue(link_1);\n          }\n        }));\n      }\n      return this._link;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return FlowDiagramDataItem;\n}(ChartDataItem);\nexport { FlowDiagramDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates a Pie chart\r\n * @see {@link IFlowDiagramEvents} for a list of available Events\r\n * @see {@link IFlowDiagramAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar FlowDiagram = /** @class */function (_super) {\n  __extends(FlowDiagram, _super);\n  /**\r\n   * Constructor\r\n   */\n  function FlowDiagram() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * A Color Set to use when applying/generating colors for each subsequent\r\n     * node.\r\n     */\n    _this.colors = new ColorSet();\n    _this.className = \"FlowDiagram\";\n    _this.nodePadding = 20;\n    _this.sortBy = \"none\";\n    _this.sequencedInterpolation = true;\n    _this.colors.step = 2;\n    _this.minNodeSize = 0.02;\n    var linksContainer = _this.chartContainer.createChild(Container);\n    linksContainer.shouldClone = false;\n    linksContainer.layout = \"none\";\n    linksContainer.isMeasured = false;\n    _this.linksContainer = linksContainer;\n    var nodesContainer = _this.chartContainer.createChild(Container);\n    nodesContainer.shouldClone = false;\n    nodesContainer.layout = \"none\";\n    nodesContainer.isMeasured = false;\n    _this.nodesContainer = nodesContainer;\n    // this data item holds sums, averages, etc\n    _this.dataItem = _this.createDataItem();\n    _this.dataItem.component = _this;\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  FlowDiagram.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n    this.dataItem.dispose();\n  };\n  /**\r\n   * (Re)validates chart's data, effectively causing the chart to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  FlowDiagram.prototype.validateData = function () {\n    var _this = this;\n    if (this._parseDataFrom == 0) {\n      this.nodes.clear();\n    }\n    this.sortNodes();\n    this.colors.reset();\n    _super.prototype.validateData.call(this);\n    var sum = 0;\n    var count = 0;\n    var low;\n    var high;\n    // build blocks\n    $iter.each(this.dataItems.iterator(), function (dataItem) {\n      var fromName = dataItem.fromName;\n      if (fromName) {\n        var node = _this.nodes.getKey(fromName);\n        if (!node) {\n          node = _this.nodes.create(fromName);\n          node.name = fromName;\n          node.chart = _this;\n          node.dataItem = dataItem;\n        }\n        dataItem.fromNode = node;\n        dataItem.fromNode.outgoingDataItems.push(dataItem);\n      }\n      var toName = dataItem.toName;\n      if (toName) {\n        var node = _this.nodes.getKey(toName);\n        if (!node) {\n          node = _this.nodes.create(toName);\n          node.name = toName;\n          node.chart = _this;\n          node.dataItem = dataItem;\n        }\n        dataItem.toNode = node;\n        dataItem.toNode.incomingDataItems.push(dataItem);\n      }\n      if (!dataItem.fromNode) {\n        var strokeModifier = new LinearGradientModifier();\n        strokeModifier.opacities = [0, 1];\n        dataItem.link.strokeModifier = strokeModifier;\n      }\n      if (!dataItem.toNode) {\n        var fillModifier = new LinearGradientModifier();\n        fillModifier.opacities = [1, 0];\n        dataItem.link.strokeModifier = fillModifier;\n      }\n      var value = dataItem.value;\n      if ($type.isNumber(value)) {\n        sum += value;\n        count++;\n        if (low > value || !$type.isNumber(low)) {\n          low = value;\n        }\n        if (high < value || !$type.isNumber(high)) {\n          high = value;\n        }\n      }\n    });\n    var key = \"value\";\n    this.dataItem.setCalculatedValue(key, high, \"high\");\n    this.dataItem.setCalculatedValue(key, low, \"low\");\n    this.dataItem.setCalculatedValue(key, sum, \"sum\");\n    this.dataItem.setCalculatedValue(key, sum / count, \"average\");\n    this.dataItem.setCalculatedValue(key, count, \"count\");\n    $iter.each(this.nodes.iterator(), function (strNode) {\n      var node = strNode[1];\n      if (node.fill instanceof Color) {\n        node.color = node.fill;\n      }\n      if (node.color == undefined) {\n        node.color = _this.colors.next();\n      }\n      if (node.dataItem.color != undefined) {\n        node.color = node.dataItem.color;\n      }\n      if (!node.dataItem.visible) {\n        node.hide(0);\n      }\n      _this.getNodeValue(node);\n    });\n    this.sortNodes();\n    this.feedLegend();\n  };\n  /**\r\n   * [handleDataItemWorkingValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  FlowDiagram.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\n    this.invalidate();\n  };\n  /**\r\n   * Sorts nodes by either their values or names, based on `sortBy` setting.\r\n   */\n  FlowDiagram.prototype.sortNodes = function () {\n    if (this.sortBy == \"name\") {\n      this._sorted = this.nodes.sortedIterator();\n    } else if (this.sortBy == \"value\") {\n      this._sorted = $iter.sort(this.nodes.iterator(), function (x, y) {\n        return $order.reverse($number.order(x[1].total, y[1].total));\n      });\n    } else {\n      this._sorted = this.nodes.iterator();\n    }\n  };\n  /**\r\n   * Updates a cummulative value of the node.\r\n   *\r\n   * A node's value is determined by summing values of all of the incoming\r\n   * links or all of the outgoing links, whichever results in bigger number.\r\n   *\r\n   * @param node  Node value\r\n   */\n  FlowDiagram.prototype.getNodeValue = function (node) {\n    // todo: totalIncomming totalOutgoing, total\n    var incomingTotal = 0;\n    var outgoingTotal = 0;\n    $iter.each(node.incomingDataItems.iterator(), function (dataItem) {\n      var value = dataItem.getWorkingValue(\"value\");\n      if ($type.isNumber(value)) {\n        incomingTotal += value;\n      }\n    });\n    $iter.each(node.outgoingDataItems.iterator(), function (dataItem) {\n      var value = dataItem.getWorkingValue(\"value\");\n      if ($type.isNumber(value)) {\n        outgoingTotal += value;\n      }\n    });\n    node.total = incomingTotal + outgoingTotal;\n    node.totalIncoming = incomingTotal;\n    node.totalOutgoing = outgoingTotal;\n  };\n  ;\n  /**\r\n   * Changes the sort type of the nodes.\r\n   *\r\n   * This will actually reshuffle nodes using nice animation.\r\n   */\n  FlowDiagram.prototype.changeSorting = function () {\n    this.sortNodes();\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n  FlowDiagram.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Flow diagram\");\n    }\n  };\n  /**\r\n   * Creates and returns a new data item.\r\n   *\r\n   * @return Data item\r\n   */\n  FlowDiagram.prototype.createDataItem = function () {\n    return new FlowDiagramDataItem();\n  };\n  Object.defineProperty(FlowDiagram.prototype, \"nodePadding\", {\n    /**\r\n     * @return Padding (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"nodePadding\");\n    },\n    /**\r\n     * Padding for node square in pixels.\r\n     *\r\n     * Padding will add extra space around node's name label.\r\n     *\r\n     * @param value Padding (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"nodePadding\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagram.prototype, \"sortBy\", {\n    /**\r\n     * @returns Node sorting\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"sortBy\");\n    },\n    /**\r\n     * Sort nodes by \"name\" or \"value\" or do not sort at all. If not sorted, nodes will appear in the same order as they are in the data.\r\n     * @default \"none\"\r\n     * @param value  Node sorting\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"sortBy\", value);\n      this.changeSorting();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagram.prototype, \"minNodeSize\", {\n    /**\r\n     * @returns min node size\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minNodeSize\");\n    },\n    /**\r\n     * Sometimes nodes can get very small if their value is little. With this setting you\r\n     * can set min size of a node (this is relative value from the total size of all nodes)\r\n     * @default 0.02\r\n     * @param value  Node sorting\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"minNodeSize\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagram.prototype, \"nodes\", {\n    /**\r\n     * A list of chart's nodes.\r\n     *\r\n     * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n     */\n    get: function () {\n      if (!this._nodes) {\n        var template = this.createNode();\n        template.events.on(\"hit\", function (event) {\n          event.target.handleHit(event);\n        });\n        this._nodes = new DictionaryTemplate(template);\n        this._disposers.push(new DictionaryDisposer(this._nodes));\n      }\n      return this._nodes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n  FlowDiagram.prototype.createNode = function () {\n    var node = new FlowDiagramNode();\n    this._disposers.push(node);\n    return node;\n  };\n  Object.defineProperty(FlowDiagram.prototype, \"links\", {\n    /**\r\n     * A list of chart's links.\r\n     *\r\n     * @param {ListTemplate<this[\"_link\"]>}\r\n     */\n    get: function () {\n      if (!this._links) {\n        this._links = new ListTemplate(this.createLink());\n        this._disposers.push(new ListDisposer(this._links));\n      }\n      return this._links;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n  FlowDiagram.prototype.createLink = function () {\n    var link = new FlowDiagramLink();\n    this._disposers.push(link);\n    return link;\n  };\n  /**\r\n   * Setups the legend to use the chart's data.\r\n   * @ignore\r\n   */\n  FlowDiagram.prototype.feedLegend = function () {\n    var legend = this.legend;\n    if (legend) {\n      var legendData_1 = [];\n      this.nodes.each(function (key, node) {\n        legendData_1.push(node);\n      });\n      legend.data = legendData_1;\n      legend.dataFields.name = \"name\";\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  FlowDiagram.prototype.disposeData = function () {\n    _super.prototype.disposeData.call(this);\n    this.nodes.clear();\n  };\n  return FlowDiagram;\n}(Chart);\nexport { FlowDiagram };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"FlowDiagram\"] = FlowDiagram;","map":{"version":3,"mappings":"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","names":["Chart","ChartDataItem","ListTemplate","ListDisposer","DictionaryTemplate","DictionaryDisposer","Container","registry","FlowDiagramNode","FlowDiagramLink","LinearGradientModifier","ColorSet","toColor","Color","$iter","$type","$number","$order","Disposer","__extends","_super","_this","className","values","value","applyTheme","Object","FlowDiagramDataItem","properties","fromName","setProperty","toName","color","setValue","_link","link_1","component","links","create","addSprite","_disposers","push","removeValue","nodePadding","sortBy","sequencedInterpolation","colors","step","minNodeSize","linksContainer","chartContainer","createChild","shouldClone","layout","isMeasured","nodesContainer","dataItem","createDataItem","FlowDiagram","dispose","_parseDataFrom","nodes","clear","sortNodes","reset","validateData","sum","count","low","high","each","dataItems","iterator","node","getKey","name","chart","fromNode","outgoingDataItems","toNode","incomingDataItems","strokeModifier","opacities","link","fillModifier","isNumber","key","setCalculatedValue","strNode","fill","undefined","next","visible","hide","getNodeValue","feedLegend","invalidate","_sorted","sortedIterator","sort","x","y","reverse","order","total","incomingTotal","outgoingTotal","getWorkingValue","totalIncoming","totalOutgoing","applyInternalDefaults","hasValue","readerTitle","language","translate","getPropertyValue","setPropertyValue","changeSorting","_nodes","template","createNode","events","on","event","target","handleHit","_links","createLink","legend","legendData_1","data","dataFields","disposeData","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\types\\FlowDiagram.ts"],"sourcesContent":["/**\r\n * FlowDiagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { FlowDiagramNode } from \"../elements/FlowDiagramNode\";\r\nimport { FlowDiagramLink } from \"../elements/FlowDiagramLink\";\r\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[FlowDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class FlowDiagramDataItem extends ChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: FlowDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: FlowDiagramLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: FlowDiagramNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: FlowDiagramNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Source node's name.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set fromName(value: string) {\r\n\t\tthis.setProperty(\"fromName\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return name\r\n\t */\r\n\tpublic get fromName(): string {\r\n\t\treturn this.properties.fromName;\r\n\t}\r\n\r\n\t/**\r\n\t * Destination node's name.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set toName(value: string) {\r\n\t\tthis.setProperty(\"toName\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return name\r\n\t */\r\n\tpublic get toName(): string {\r\n\t\treturn this.properties.toName;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Node color\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", toColor(value));\r\n\t}\r\n\r\n\t/**\r\n\t * @return color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\treturn this.properties.color;\r\n\t}\r\n\r\n\t/**\r\n\t * Link's value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values.value.value;\r\n\t}\r\n\r\n\t/**\r\n\t * A visual element, representing link between the source and target nodes.\r\n\t *\r\n\t * Link's actual thickness will be determined by `value` of this link and\r\n\t * `value` of the source node.\r\n\t *\r\n\t * @readonly\r\n\t * @return Link element\r\n\t */\r\n\tpublic get link(): this[\"_link\"] {\r\n\t\tif (!this._link) {\r\n\t\t\tlet link = this.component.links.create();\r\n\t\t\tthis._link = link;\r\n\r\n\t\t\tthis.addSprite(link);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.links.removeValue(link);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._link;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[FlowDiagram]].\r\n */\r\nexport interface IFlowDiagramDataFields extends IChartDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n\r\n\t/**\r\n\t * Visibility of a node\r\n\t */\r\n\tvisible?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[FlowDiagram]]\r\n */\r\nexport interface IFlowDiagramProperties extends IChartProperties {\r\n\r\n\t/**\r\n\t * Padding for node square in pixels.\r\n\t */\r\n\tnodePadding?: number;\r\n\r\n\t/**\r\n\t * Sort nodes by name or value or do not sort a\r\n\t */\r\n\tsortBy?: \"none\" | \"name\" | \"value\";\r\n\r\n\t/**\r\n\t * Sometimes nodes can get very small if their value is little. With this setting you\r\n\t * can set min size of a node (this is relative value from the total size of all nodes)\r\n\t */\r\n\tminNodeSize: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagram]].\r\n */\r\nexport interface IFlowDiagramEvents extends IChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramAdapters extends IChartAdapters, IFlowDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart\r\n * @see {@link IFlowDiagramEvents} for a list of available Events\r\n * @see {@link IFlowDiagramAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagram extends Chart {\r\n\r\n\t/**\r\n\t * A Color Set to use when applying/generating colors for each subsequent\r\n\t * node.\r\n\t */\r\n\tpublic colors: ColorSet = new ColorSet();\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IFlowDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramEvents;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node: FlowDiagramNode;\r\n\r\n\r\n\t/**\r\n\t * A list of chart's FlowDiagram nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n\t */\r\n\tprotected _nodes: DictionaryTemplate<string, this[\"_node\"]>;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _link: FlowDiagramLink;\r\n\r\n\t/**\r\n\t * A list of FlowDiagram links connecting nodes.\r\n\t *\r\n\t * @param {ListTemplate<this[\"_link\"]>}\r\n\t */\r\n\tprotected _links: ListTemplate<this[\"_link\"]>;\r\n\r\n\t/**\r\n\t * A container that holds all of the link elements.\r\n\t */\r\n\tpublic linksContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds all of the node elements.\r\n\t */\r\n\tpublic nodesContainer: Container;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, FlowDiagramNode]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagram\";\r\n\t\tthis.nodePadding = 20;\r\n\t\tthis.sortBy = \"none\";\r\n\t\tthis.sequencedInterpolation = true;\r\n\r\n\t\tthis.colors.step = 2;\r\n\t\tthis.minNodeSize = 0.02;\r\n\r\n\t\tlet linksContainer = this.chartContainer.createChild(Container);\r\n\t\tlinksContainer.shouldClone = false;\r\n\t\tlinksContainer.layout = \"none\";\r\n\t\tlinksContainer.isMeasured = false;\r\n\t\tthis.linksContainer = linksContainer;\r\n\r\n\t\tlet nodesContainer = this.chartContainer.createChild(Container);\r\n\t\tnodesContainer.shouldClone = false;\r\n\t\tnodesContainer.layout = \"none\";\r\n\t\tnodesContainer.isMeasured = false;\r\n\t\tthis.nodesContainer = nodesContainer;\r\n\r\n\t\t// this data item holds sums, averages, etc\r\n\t\tthis.dataItem = this.createDataItem();\r\n\t\tthis.dataItem.component = this;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\t\tthis.dataItem.dispose();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart's data, effectively causing the chart to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\tthis.nodes.clear();\r\n\t\t}\r\n\r\n\t\tthis.sortNodes();\r\n\r\n\t\tthis.colors.reset();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tlet sum = 0;\r\n\t\tlet count = 0;\r\n\t\tlet low: number;\r\n\t\tlet high: number;\r\n\r\n\t\t// build blocks\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tlet fromName = dataItem.fromName;\r\n\r\n\t\t\tif (fromName) {\r\n\t\t\t\tlet node = this.nodes.getKey(fromName);\r\n\t\t\t\tif (!node) {\r\n\t\t\t\t\tnode = this.nodes.create(fromName);\r\n\t\t\t\t\tnode.name = fromName;\r\n\t\t\t\t\tnode.chart = this;\r\n\t\t\t\t\tnode.dataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t\tdataItem.fromNode = node;\r\n\t\t\t\tdataItem.fromNode.outgoingDataItems.push(dataItem);\r\n\t\t\t}\r\n\t\t\tlet toName = dataItem.toName;\r\n\t\t\tif (toName) {\r\n\t\t\t\tlet node = this.nodes.getKey(toName);\r\n\t\t\t\tif (!node) {\r\n\t\t\t\t\tnode = this.nodes.create(toName);\r\n\t\t\t\t\tnode.name = toName;\r\n\t\t\t\t\tnode.chart = this;\r\n\t\t\t\t\tnode.dataItem = dataItem;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdataItem.toNode = node;\r\n\t\t\t\tdataItem.toNode.incomingDataItems.push(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\tlet strokeModifier = new LinearGradientModifier();\r\n\t\t\t\tstrokeModifier.opacities = [0, 1];\r\n\t\t\t\tdataItem.link.strokeModifier = strokeModifier;\r\n\t\t\t}\r\n\r\n\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\tlet fillModifier = new LinearGradientModifier();\r\n\t\t\t\tfillModifier.opacities = [1, 0];\r\n\t\t\t\tdataItem.link.strokeModifier = fillModifier;\r\n\t\t\t}\r\n\r\n\t\t\tlet value = dataItem.value;\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\tsum += value;\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif (low > value || !$type.isNumber(low)) {\r\n\t\t\t\t\tlow = value;\r\n\t\t\t\t}\r\n\t\t\t\tif (high < value || !$type.isNumber(high)) {\r\n\t\t\t\t\thigh = value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet key = \"value\";\r\n\r\n\t\tthis.dataItem.setCalculatedValue(key, high, \"high\");\r\n\t\tthis.dataItem.setCalculatedValue(key, low, \"low\");\r\n\t\tthis.dataItem.setCalculatedValue(key, sum, \"sum\");\r\n\t\tthis.dataItem.setCalculatedValue(key, sum / count, \"average\");\r\n\t\tthis.dataItem.setCalculatedValue(key, count, \"count\");\r\n\r\n\r\n\t\t$iter.each(this.nodes.iterator(), (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\r\n\t\t\tif (node.fill instanceof Color) {\r\n\t\t\t\tnode.color = node.fill;\r\n\t\t\t}\r\n\r\n\t\t\tif (node.color == undefined) {\r\n\t\t\t\tnode.color = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (node.dataItem.color != undefined) {\r\n\t\t\t\tnode.color = node.dataItem.color;\r\n\t\t\t}\r\n\r\n\t\t\tif (!node.dataItem.visible) {\r\n\t\t\t\tnode.hide(0);\r\n\t\t\t}\r\n\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t});\r\n\r\n\t\tthis.sortNodes();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sorts nodes by either their values or names, based on `sortBy` setting.\r\n\t */\r\n\tprotected sortNodes() {\r\n\t\tif (this.sortBy == \"name\") {\r\n\t\t\tthis._sorted = this.nodes.sortedIterator();\r\n\t\t}\r\n\t\telse if (this.sortBy == \"value\") {\r\n\t\t\tthis._sorted = $iter.sort(this.nodes.iterator(), (x, y) => $order.reverse($number.order(x[1].total, y[1].total)));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._sorted = this.nodes.iterator();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a cummulative value of the node.\r\n\t *\r\n\t * A node's value is determined by summing values of all of the incoming\r\n\t * links or all of the outgoing links, whichever results in bigger number.\r\n\t *\r\n\t * @param node  Node value\r\n\t */\r\n\tprotected getNodeValue(node: FlowDiagramNode) {\r\n\r\n\t\t// todo: totalIncomming totalOutgoing, total\r\n\r\n\t\tlet incomingTotal = 0;\r\n\t\tlet outgoingTotal = 0;\r\n\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (dataItem: FlowDiagramDataItem) => {\r\n\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\tincomingTotal += value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$iter.each(node.outgoingDataItems.iterator(), (dataItem: FlowDiagramDataItem) => {\r\n\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\toutgoingTotal += value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tnode.total = incomingTotal + outgoingTotal;\r\n\t\tnode.totalIncoming = incomingTotal;\r\n\t\tnode.totalOutgoing = outgoingTotal;\r\n\t};\r\n\r\n\t/**\r\n\t * Changes the sort type of the nodes.\r\n\t *\r\n\t * This will actually reshuffle nodes using nice animation.\r\n\t */\r\n\tprotected changeSorting() {\r\n\t\tthis.sortNodes();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Flow diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new FlowDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Padding for node square in pixels.\r\n\t *\r\n\t * Padding will add extra space around node's name label.\r\n\t *\r\n\t * @param value Padding (px)\r\n\t */\r\n\tpublic set nodePadding(value: number) {\r\n\t\tthis.setPropertyValue(\"nodePadding\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Padding (px)\r\n\t */\r\n\tpublic get nodePadding(): number {\r\n\t\treturn this.getPropertyValue(\"nodePadding\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sort nodes by \"name\" or \"value\" or do not sort at all. If not sorted, nodes will appear in the same order as they are in the data.\r\n\t * @default \"none\"\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set sortBy(value: \"none\" | \"name\" | \"value\") {\r\n\t\tthis.setPropertyValue(\"sortBy\", value);\r\n\t\tthis.changeSorting();\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Node sorting\r\n\t */\r\n\tpublic get sortBy(): \"none\" | \"name\" | \"value\" {\r\n\t\treturn this.getPropertyValue(\"sortBy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sometimes nodes can get very small if their value is little. With this setting you\r\n\t * can set min size of a node (this is relative value from the total size of all nodes)\r\n\t * @default 0.02\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set minNodeSize(value: number) {\r\n\t\tthis.setPropertyValue(\"minNodeSize\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @returns min node size\r\n\t */\r\n\tpublic get minNodeSize(): number {\r\n\t\treturn this.getPropertyValue(\"minNodeSize\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of chart's nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n\t */\r\n\tpublic get nodes(): DictionaryTemplate<string, this[\"_node\"]> {\r\n\t\tif (!this._nodes) {\r\n\t\t\tlet template = this.createNode();\r\n\t\t\ttemplate.events.on(\"hit\", (event) => {\r\n\t\t\t\tevent.target.handleHit(event);\r\n\t\t\t});\r\n\t\t\tthis._nodes = new DictionaryTemplate<string, this[\"_node\"]>(template);\r\n\t\t\tthis._disposers.push(new DictionaryDisposer(this._nodes));\r\n\t\t}\r\n\t\treturn this._nodes;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode(): this[\"_node\"] {\r\n\t\tlet node = new FlowDiagramNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of chart's links.\r\n\t *\r\n\t * @param {ListTemplate<this[\"_link\"]>}\r\n\t */\r\n\tpublic get links(): ListTemplate<this[\"_link\"]> {\r\n\t\tif (!this._links) {\r\n\t\t\tthis._links = new ListTemplate<this[\"_link\"]>(this.createLink());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._links));\r\n\t\t}\r\n\t\treturn this._links;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink(): this[\"_link\"] {\r\n\t\tlet link = new FlowDiagramLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: any[] = [];\r\n\r\n\t\t\tthis.nodes.each((key, node) => {\r\n\t\t\t\tlegendData.push(node);\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.nodes.clear();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagram\"] = FlowDiagram;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}