{"ast":null,"code":"/**\r\n * ChordNode module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { FlowDiagramNode } from \"./FlowDiagramNode\";\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\nimport { registry } from \"../../core/Registry\";\nimport { Slice } from \"../../core/elements/Slice\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport { Bullet } from \"../elements/Bullet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar ChordNode = /** @class */function (_super) {\n  __extends(ChordNode, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ChordNode() {\n    var _this = _super.call(this) || this;\n    _this.className = \"ChordNode\";\n    var label = _this.createChild(AxisLabelCircular);\n    label.location = 0.5;\n    label.radius = 5;\n    label.text = \"{name}\";\n    label.zIndex = 1;\n    label.shouldClone = false;\n    _this.label = label;\n    _this.layout = \"none\";\n    _this.events.on(\"positionchanged\", _this.updateRotation, _this, false);\n    _this.isMeasured = false;\n    _this.slice = _this.createChild(Slice);\n    _this.slice.isMeasured = false;\n    var hiddenState = _this.hiddenState;\n    hiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\n    hiddenState.properties.opacity = 0.5;\n    hiddenState.properties.visible = true;\n    _this.setStateOnChildren = false;\n    _this.slice.hiddenState.properties.visible = true;\n    _this.adapter.add(\"tooltipX\", function (tooltipX, target) {\n      return target.slice.ix * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\n    });\n    _this.adapter.add(\"tooltipY\", function (tooltipY, target) {\n      return target.slice.iy * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\n    });\n    return _this;\n  }\n  /**\r\n   * Invalidates all links, attached to this node.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  ChordNode.prototype.invalidateLinks = function () {\n    var _this = this;\n    _super.prototype.invalidateLinks.call(this);\n    var label = this.label;\n    var slice = this.slice;\n    var chart = this.chart;\n    if (chart && slice) {\n      var sum = this.total;\n      var arc_1 = slice.arc;\n      var sliceStartAngle_1 = slice.startAngle;\n      this.children.each(function (child) {\n        if (child instanceof Bullet) {\n          var locationX = child.locationX;\n          if (!$type.isNumber(locationX)) {\n            locationX = 0.5;\n          }\n          var locationY = child.locationY;\n          if (!$type.isNumber(locationY)) {\n            locationY = 1;\n          }\n          var childAngle = sliceStartAngle_1 + arc_1 * locationX;\n          var childRadius = locationY * slice.radius;\n          child.x = childRadius * $math.cos(childAngle);\n          child.y = childRadius * $math.sin(childAngle);\n        }\n      });\n      var labelAngle = sliceStartAngle_1 + arc_1 * label.location;\n      var startAngle = sliceStartAngle_1 + (1 - sum / this.adjustedTotal) * arc_1 * 0.5; // if value of a node is > then sum of the links, add to center link\n      if ($type.isNaN(startAngle)) {\n        startAngle = sliceStartAngle_1;\n      }\n      label.fixPosition(labelAngle, slice.radius);\n      this.nextAngle = startAngle;\n      if (this._outgoingSorted) {\n        $iter.each(this._outgoingSorted, function (dataItem) {\n          var link = dataItem.link;\n          link.parent = _this.chart.linksContainer;\n          var value = dataItem.getWorkingValue(\"value\");\n          if ($type.isNumber(value)) {\n            if (chart.nonRibbon) {\n              var percentWidth = link.percentWidth;\n              if (!$type.isNumber(percentWidth)) {\n                percentWidth = 5;\n              }\n              percentWidth = percentWidth / 100;\n              link.startAngle = sliceStartAngle_1 + arc_1 / 2 - arc_1 / 2 * percentWidth;\n              link.arc = arc_1 * percentWidth;\n            } else {\n              link.arc = value * chart.valueAngle;\n              link.startAngle = _this.nextAngle;\n              _this.nextAngle += link.arc;\n            }\n            if (!dataItem.toNode) {\n              link.endAngle = link.startAngle;\n            }\n            link.radius = slice.pixelInnerRadius;\n          }\n          //link.validate();\n        });\n      }\n\n      if (this._incomingSorted) {\n        $iter.each(this._incomingSorted, function (dataItem) {\n          var link = dataItem.link;\n          link.radius = slice.pixelInnerRadius;\n          if (chart.nonRibbon) {\n            var percentWidth = link.percentWidth;\n            if (!$type.isNumber(percentWidth)) {\n              percentWidth = 5;\n            }\n            percentWidth = percentWidth / 100;\n            link.endAngle = sliceStartAngle_1 + arc_1 / 2 - arc_1 / 2 * percentWidth;\n            link.arc = arc_1 * percentWidth;\n          } else {\n            link.endAngle = _this.nextAngle;\n            var value = dataItem.getWorkingValue(\"value\");\n            if ($type.isNumber(value)) {\n              link.arc = value * chart.valueAngle; // yes, this is needed\n              _this.nextAngle += link.arc;\n            }\n          }\n          if (!dataItem.fromNode) {\n            link.startAngle = link.endAngle;\n          }\n          //link.validate();\n        });\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   * updates slice start angle so that when we drag a node it would face the center\r\n   */\n  ChordNode.prototype.updateRotation = function () {\n    var slice = this.slice;\n    var mAngle = this.trueStartAngle + slice.arc / 2;\n    var radius = slice.radius;\n    var tx = radius * $math.cos(mAngle);\n    var ty = radius * $math.sin(mAngle);\n    var angle = $math.getAngle({\n      x: tx + this.pixelX,\n      y: ty + this.pixelY\n    });\n    slice.startAngle = this.trueStartAngle + (angle - mAngle);\n    this.dx = -this.pixelX;\n    this.dy = -this.pixelY;\n  };\n  /**\r\n   * Copies properties and labels from another [[ChordNode]].\r\n   *\r\n   * @param source  Source node\r\n   */\n  ChordNode.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    this.label.copyFrom(source.label);\n    this.slice.copyFrom(source.slice);\n  };\n  return ChordNode;\n}(FlowDiagramNode);\nexport { ChordNode };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;","map":{"version":3,"mappings":"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","names":["FlowDiagramNode","AxisLabelCircular","registry","Slice","InterfaceColorSet","$iter","$math","$type","Bullet","__extends","_super","_this","className","label","createChild","location","radius","text","zIndex","shouldClone","layout","events","on","updateRotation","isMeasured","slice","hiddenState","properties","fill","getFor","opacity","visible","setStateOnChildren","adapter","add","tooltipX","target","ix","pixelInnerRadius","tooltipY","iy","ChordNode","invalidateLinks","chart","sum","total","arc_1","arc","sliceStartAngle_1","startAngle","children","each","child","locationX","isNumber","locationY","childAngle","childRadius","x","cos","y","sin","labelAngle","adjustedTotal","isNaN","fixPosition","nextAngle","_outgoingSorted","dataItem","link","parent","linksContainer","value","getWorkingValue","nonRibbon","percentWidth","valueAngle","toNode","endAngle","_incomingSorted","fromNode","mAngle","trueStartAngle","tx","ty","angle","getAngle","pixelX","pixelY","dx","dy","source","copyFrom","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\elements\\ChordNode.ts"],"sourcesContent":["/**\r\n * ChordNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { ChordDiagram, ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordNode]].\r\n */\r\nexport interface IChordNodeProperties extends IFlowDiagramNodeProperties { }\r\n\r\n/**\r\n * Defines events for [[ChordNode]].\r\n */\r\nexport interface IChordNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordNodeAdapters extends IFlowDiagramNodeAdapters, IChordNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t */\r\n\tprotected _incomingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t */\r\n\tprotected _outgoingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: ChordDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[ChordDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\r\n\t/**\r\n\t * Slice sprite of a node\r\n\t */\r\n\tpublic slice: Slice;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t */\r\n\tpublic label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic nextAngle: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic trueStartAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordNode\";\r\n\r\n\t\tlet label = this.createChild(AxisLabelCircular);\r\n\t\tlabel.location = 0.5;\r\n\t\tlabel.radius = 5;\r\n\t\tlabel.text = \"{name}\";\r\n\t\tlabel.zIndex = 1;\r\n\t\tlabel.shouldClone = false;\r\n\t\tthis.label = label;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.updateRotation, this, false);\r\n\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.slice = this.createChild(Slice);\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.setStateOnChildren = false;\r\n\r\n\t\tthis.slice.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.adapter.add(\"tooltipX\", (tooltipX, target)=>{\r\n\t\t    return target.slice.ix * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\r\n\t\tthis.adapter.add(\"tooltipY\", (tooltipY, target)=>{\r\n\t\t    return target.slice.iy * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\r\n\t\tlet label = this.label;\r\n\t\tlet slice = this.slice;\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && slice) {\r\n\r\n\t\t\tlet sum = this.total;\r\n\t\t\tlet arc = slice.arc;\r\n\t\t\tlet sliceStartAngle = slice.startAngle;\r\n\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tif (child instanceof Bullet) {\r\n\t\t\t\t\tlet locationX = child.locationX;\r\n\t\t\t\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\t\t\t\tlocationX = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet locationY = child.locationY;\r\n\t\t\t\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\t\t\t\tlocationY = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet childAngle = sliceStartAngle + arc * locationX;\r\n\t\t\t\t\tlet childRadius = locationY * slice.radius;\r\n\r\n\t\t\t\t\tchild.x = childRadius * $math.cos(childAngle);\r\n\t\t\t\t\tchild.y = childRadius * $math.sin(childAngle);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tlet labelAngle = sliceStartAngle + arc * label.location;\r\n\t\t\tlet startAngle = sliceStartAngle + (1 - sum / this.adjustedTotal) * arc * 0.5; // if value of a node is > then sum of the links, add to center link\r\n\r\n\t\t\tif ($type.isNaN(startAngle)) {\r\n\t\t\t\tstartAngle = sliceStartAngle;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.fixPosition(labelAngle, slice.radius);\r\n\r\n\t\t\tthis.nextAngle = startAngle;\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\t\tlink.startAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle;\r\n\t\t\t\t\t\t\tlink.startAngle = this.nextAngle;\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tlink.endAngle = link.startAngle;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\r\n\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\r\n\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\tlink.endAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlink.endAngle = this.nextAngle;\r\n\t\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle; // yes, this is needed\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlink.startAngle = link.endAngle;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * updates slice start angle so that when we drag a node it would face the center\r\n\t */\r\n\tprotected updateRotation() {\r\n\t\tlet slice = this.slice;\r\n\t\tlet mAngle = this.trueStartAngle + slice.arc / 2;\r\n\t\tlet radius = slice.radius;\r\n\r\n\t\tlet tx = radius * $math.cos(mAngle);\r\n\t\tlet ty = radius * $math.sin(mAngle);\r\n\r\n\t\tlet angle = $math.getAngle({ x: tx + this.pixelX, y: ty + this.pixelY });\r\n\r\n\t\tslice.startAngle = this.trueStartAngle + (angle - mAngle);\r\n\r\n\t\tthis.dx = - this.pixelX;\r\n\t\tthis.dy = - this.pixelY;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[ChordNode]].\r\n\t *\r\n\t * @param source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t\tthis.slice.copyFrom(source.slice);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}