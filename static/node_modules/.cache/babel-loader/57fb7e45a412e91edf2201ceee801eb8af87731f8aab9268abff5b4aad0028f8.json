{"ast":null,"code":"/**\r\n * Provides functionality used to build scrollbars.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../Container\";\nimport { ResizeButton } from \"../elements/ResizeButton\";\nimport { Button } from \"../elements/Button\";\nimport { getInteraction } from \"../interaction/Interaction\";\nimport { MouseCursorStyle } from \"../interaction/Mouse\";\nimport { RoundedRectangle } from \"../elements/RoundedRectangle\";\nimport { registry } from \"../Registry\";\nimport { keyboard } from \"../utils/Keyboard\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { percent, Percent } from \"../utils/Percent\";\nimport * as $math from \"../utils/Math\";\nimport * as $ease from \"../utils/Ease\";\nimport * as $type from \"../utils/Type\";\nimport * as $utils from \"../utils/Utils\";\n;\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Scrollbar is a generic control allowing to select a range of values or pan\r\n * the selection.\r\n *\r\n * @see {@link IScrollbarEvents} for a list of available events\r\n * @see {@link IScrollbarAdapters} for a list of available Adapters\r\n */\nvar Scrollbar = /** @class */function (_super) {\n  __extends(Scrollbar, _super);\n  /**\r\n   * Construtor\r\n   */\n  function Scrollbar() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Previously selected lower (start) value.\r\n     */\n    _this._previousStart = 0;\n    /**\r\n     * Previously selected upper (end) value.\r\n     */\n    _this._previousEnd = 1;\n    /**\r\n     * A value of previously selected lower value, used for doubleclick function.\r\n     */\n    _this._prevStart = 0;\n    /**\r\n     * A value of previously selected upper value, used for doubleclick function.\r\n     */\n    _this._prevEnd = 1;\n    /**\r\n     * Indicates if the Scrollbar is currently \"busy\" (animating and or\r\n     * performing zoom by user interaction).\r\n     */\n    _this._isBusy = false;\n    /**\r\n     * [_skipRangeEvents description]\r\n     *\r\n     * @todo Description\r\n     */\n    _this._skipRangeEvents = false;\n    /**\r\n     * Update the selection when dragging the grips.\r\n     *\r\n     * If set to `false` selection will be updated only when the grip is\r\n     * released.\r\n     *\r\n     * @default true\r\n     */\n    _this.updateWhileMoving = true;\n    _this.className = \"Scrollbar\";\n    _this.minHeight = 12;\n    _this.minWidth = 12;\n    _this.animationDuration = 0;\n    _this.animationEasing = $ease.cubicOut;\n    _this.margin(10, 10, 10, 10);\n    var interfaceColors = new InterfaceColorSet();\n    // background is also container as it might contain graphs, grid, etc\n    var background = _this.background;\n    background.cornerRadius(10, 10, 10, 10);\n    background.fill = interfaceColors.getFor(\"fill\");\n    background.fillOpacity = 0.5;\n    // Make system tooltips appear by default\n    _this.showSystemTooltip = true;\n    _this.startGrip = new ResizeButton();\n    _this.endGrip = new ResizeButton();\n    // Default orientation...\n    // ... is set in `applyInternalDefaults()` because it accesses `language`\n    // and should only be started to access when parent is set\n    // Set events\n    _this.events.on(\"transformed\", function () {\n      _this.updateThumb();\n    }, _this, false);\n    // Initial positions\n    _this.start = 0;\n    _this.end = 1;\n    // Set roles\n    _this.role = \"scrollbar\";\n    _this.thumb.role = \"slider\";\n    _this.thumb.readerLive = \"polite\";\n    _this.startGrip.role = \"slider\";\n    _this.endGrip.role = \"slider\";\n    // otherwise range changed won't be registered\n    _this.events.once(\"inited\", function () {\n      _this._previousStart = undefined;\n      _this.dispatchRangeChange();\n    }, undefined, false);\n    _this.hideGrips = false;\n    _this.orientation = \"horizontal\";\n    // Min/max values for accessibility\n    _this.setSVGAttribute({\n      \"aria-valuemin\": \"0\"\n    });\n    _this.setSVGAttribute({\n      \"aria-valuemax\": \"100\"\n    });\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n  Scrollbar.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    // Set screen reader tetxt accordingly\n    if (this.orientation === \"horizontal\") {\n      if (!$type.hasValue(this.readerTitle)) {\n        this.readerTitle = this.language.translate(\"Use TAB to select grip buttons or left and right arrows to change selection\");\n      }\n      if (!$type.hasValue(this.thumb.readerDescription)) {\n        this.thumb.readerDescription = this.language.translate(\"Use left and right arrows to move selection\");\n      }\n      if (!$type.hasValue(this.startGrip.readerDescription)) {\n        this.startGrip.readerDescription = this.language.translate(\"Use left and right arrows to move left selection\");\n      }\n      if (!$type.hasValue(this.endGrip.readerDescription)) {\n        this.endGrip.readerDescription = this.language.translate(\"Use left and right arrows to move right selection\");\n      }\n      this.readerOrientation = \"horizontal\";\n    } else {\n      if (!$type.hasValue(this.readerTitle)) {\n        this.readerTitle = this.language.translate(\"Use TAB select grip buttons or up and down arrows to change selection\");\n      }\n      if (!$type.hasValue(this.thumb.readerDescription)) {\n        this.thumb.readerDescription = this.language.translate(\"Use up and down arrows to move selection\");\n      }\n      if (!$type.hasValue(this.startGrip.readerDescription)) {\n        this.startGrip.readerDescription = this.language.translate(\"Use up and down arrows to move upper selection\");\n      }\n      if (!$type.hasValue(this.endGrip.readerDescription)) {\n        this.endGrip.readerDescription = this.language.translate(\"Use up and down arrows to move lower selection\");\n      }\n      this.readerOrientation = \"vertical\";\n    }\n    this.readerControls = this.baseSprite.uidAttr();\n  };\n  /**\r\n   * Validates the layout of the scrollbar's elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Scrollbar.prototype.validateLayout = function () {\n    this.updateSize();\n    _super.prototype.validateLayout.call(this);\n    // when size changes, need to update extremes\n    this.updateExtremes();\n  };\n  /**\r\n   * Update background for the scrollbar.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Scrollbar.prototype.processBackground = function () {\n    _super.prototype.processBackground.call(this);\n    var background = this.background;\n    background.clickable = true;\n    background.events.on(\"hit\", this.handleBgHit, this, undefined);\n  };\n  /**\r\n   * Zooms to the particular place when clicked/tapped on the scrollbar\r\n   * background.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n  Scrollbar.prototype.handleBgHit = function (event) {\n    this.makeBusy();\n    var point = event.spritePoint;\n    point = $utils.spritePointToSprite(point, this.background, this);\n    var thumb = this.thumb;\n    if (this.orientation == \"horizontal\") {\n      var thumbX = point.x - thumb.pixelWidth / 2;\n      thumbX = $math.fitToRange(thumbX, 0, this.innerWidth - thumb.pixelWidth);\n      this._thumbAnimation = thumb.animate({\n        property: \"x\",\n        to: thumbX\n      }, this.animationDuration, this.animationEasing);\n    } else {\n      var thumbY = point.y - thumb.pixelHeight / 2;\n      thumbY = $math.fitToRange(thumbY, 0, this.innerHeight - thumb.pixelHeight);\n      this._thumbAnimation = thumb.animate({\n        property: \"y\",\n        to: thumbY\n      }, this.animationDuration, this.animationEasing);\n    }\n    if (this.animationDuration > 0) {\n      this._thumbAnimation.events.on(\"animationended\", this.makeUnbusy, this, false);\n    } else {\n      this._thumb.validate();\n      this.makeUnbusy();\n    }\n  };\n  /**\r\n   * Set scrollbar as busy. (currently zooming)\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Scrollbar.prototype.makeBusy = function () {\n    this._isBusy = true;\n    this._skipRangeEvents = false;\n    if (this._unbusyTimeout) {\n      this.removeDispose(this._unbusyTimeout);\n    }\n    this._unbusyTimeout = undefined;\n    this.stopAnimations();\n  };\n  /**\r\n   * Stops all animations, currently playing for the scrollbar.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Scrollbar.prototype.stopAnimations = function () {\n    if (this._thumbAnimation) {\n      this._thumbAnimation.stop(true);\n    }\n    if (this._zoomAnimation) {\n      this._zoomAnimation.stop(true);\n    }\n  };\n  /**\r\n   * Cancels \"busy\" status of the Scrollbar.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Scrollbar.prototype.makeUnbusy = function () {\n    /**\r\n     * We cannot make Scrollbar not busy right after release, because then axes\r\n     * will take over controll and Scrollbar will start to animate.\r\n     * Theorethically, it's not right to set timeout by `animationDuration`,\r\n     * however we can not know all the durations of elements we scroll, so we\r\n     * assume that animation duration will be the same as\r\n     * `interpolationDuration` or `rangeChange` duration.\r\n     */\n    this._unbusyTimeout = this.setTimeout(this.makeUnbusyReal.bind(this), this.animationDuration * 1.1);\n  };\n  /**\r\n   * [makeUnbusyReal description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n  Scrollbar.prototype.makeUnbusyReal = function () {\n    this._usingGrip = undefined;\n    this._isBusy = false;\n    if (!this.updateWhileMoving) {\n      this.dispatchRangeChange();\n    }\n  };\n  /**\r\n   * Disptatches rangechanged event if it really changed\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Scrollbar.prototype.dispatchRangeChange = function () {\n    if (this._previousEnd != this.end || this._previousStart != this.start) {\n      this._previousStart = this.start;\n      this._previousEnd = this.end;\n      this.dispatch(\"rangechanged\");\n    }\n  };\n  /**\r\n   * Updates the \"thumb\" element. A draggable element between the grips.\r\n   * @ignore\r\n   */\n  Scrollbar.prototype.updateThumb = function (dispatchEvents) {\n    if (dispatchEvents === void 0) {\n      dispatchEvents = true;\n    }\n    if (!this.parent) {\n      return;\n    }\n    var thumb = this.thumb;\n    var start = this.start;\n    var end = this.end;\n    var startGrip = this.startGrip;\n    var endGrip = this.endGrip;\n    if (this.orientation == \"horizontal\") {\n      var innerWidth_1 = this.innerWidth;\n      thumb.width = innerWidth_1 * (end - start);\n      thumb.maxX = innerWidth_1 - thumb.pixelWidth;\n      thumb.x = start * innerWidth_1;\n      startGrip.moveTo({\n        x: thumb.pixelX,\n        y: 0\n      }, undefined, undefined, true); // overrides dragging\n      endGrip.moveTo({\n        x: thumb.pixelX + thumb.pixelWidth,\n        y: 0\n      }, undefined, undefined, true);\n      startGrip.readerTitle = this.language.translate(\"From %1\", undefined, this.adapter.apply(\"positionValue\", {\n        value: Math.round(start * 100) + \"%\",\n        position: start\n      }).value);\n      startGrip.readerValueNow = \"\" + Math.round(start * 100);\n      startGrip.readerValueText = startGrip.readerTitle;\n      endGrip.readerTitle = this.language.translate(\"To %1\", undefined, this.adapter.apply(\"positionValue\", {\n        value: Math.round(end * 100) + \"%\",\n        position: end\n      }).value);\n      endGrip.readerValueNow = \"\" + Math.round(end * 100);\n      endGrip.readerValueText = endGrip.readerTitle;\n    } else {\n      var innerHeight_1 = this.innerHeight;\n      thumb.height = innerHeight_1 * (end - start);\n      thumb.maxY = innerHeight_1 - thumb.pixelHeight;\n      thumb.y = (1 - end) * innerHeight_1;\n      startGrip.moveTo({\n        x: 0,\n        y: thumb.pixelY + thumb.pixelHeight\n      }, undefined, undefined, true);\n      endGrip.moveTo({\n        x: 0,\n        y: thumb.pixelY\n      }, undefined, undefined, true);\n      startGrip.readerTitle = this.language.translate(\"To %1\", undefined, this.adapter.apply(\"positionValue\", {\n        value: Math.round((1 - start) * 100) + \"%\",\n        position: 1 - start\n      }).value);\n      startGrip.readerValueNow = \"\" + Math.round(start * 100);\n      startGrip.readerValueText = startGrip.readerTitle;\n      endGrip.readerTitle = this.language.translate(\"From %1\", undefined, this.adapter.apply(\"positionValue\", {\n        value: Math.round((1 - end) * 100) + \"%\",\n        position: 1 - end\n      }).value);\n      endGrip.readerValueNow = \"\" + Math.round(end * 100);\n      endGrip.readerValueText = endGrip.readerTitle;\n    }\n    // Add accessibility\n    thumb.readerTitle = this.language.translate(\"From %1 to %2\", undefined, this.adapter.apply(\"positionValue\", {\n      value: Math.round(start * 100) + \"%\",\n      position: start\n    }).value, this.adapter.apply(\"positionValue\", {\n      value: Math.round(end * 100) + \"%\",\n      position: end\n    }).value);\n    thumb.readerValueNow = \"\" + Math.round(start * 100);\n    thumb.readerValueText = thumb.readerTitle;\n    this.readerValueNow = \"\" + Math.round(start * 100);\n    this.readerValueText = thumb.readerTitle;\n    if (!this._skipRangeEvents && this.updateWhileMoving && dispatchEvents) {\n      this.dispatchRangeChange();\n    }\n  };\n  /**\r\n   * Updates extremes of the scrollbar.\r\n   */\n  Scrollbar.prototype.updateExtremes = function () {\n    var orientation = this.orientation;\n    var minX = 0;\n    var minY = 0;\n    var maxX = 0;\n    var maxY = 0;\n    if (orientation == \"horizontal\") {\n      maxX = this.innerWidth;\n      minY = maxY = this.innerHeight / 2;\n    } else {\n      maxY = this.innerHeight;\n      minX = maxX = this.innerWidth / 2;\n    }\n    var startGrip = this.startGrip;\n    startGrip.minX = minX;\n    startGrip.maxX = maxX;\n    startGrip.minY = minY;\n    startGrip.maxY = maxY;\n    var endGrip = this.endGrip;\n    endGrip.minX = minX;\n    endGrip.maxX = maxX;\n    endGrip.minY = minY;\n    endGrip.maxY = maxY;\n    var thumb = this.thumb;\n    thumb.minX = minX;\n    thumb.maxX = maxX;\n    thumb.minY = minY;\n    thumb.maxY = maxY;\n  };\n  /**\r\n   * Updates size of the scrollbar.\r\n   */\n  Scrollbar.prototype.updateSize = function () {\n    var orientation = this.orientation;\n    var startGrip = this.startGrip;\n    if (startGrip) {\n      startGrip.orientation = orientation;\n    }\n    if (this.endGrip) {\n      this.endGrip.orientation = orientation;\n    }\n    var thumb = this.thumb;\n    if (thumb) {\n      if (orientation == \"horizontal\") {\n        if (!$type.isNumber(this._pixelWidth)) {\n          if (!(this.width instanceof Percent)) {\n            this.width = percent(100);\n          }\n        }\n        // this teorethically might be wrong, if user indeed sets height of a horizontal scrollbar in percent\n        // however without this height might be equal to 100% if previous orientation was set to horizontal\n        // so this is ok solution, in case user really wants to have scrollbar height set in percent,\n        // he should do this after orientation.\n        if ($type.hasValue(this.percentHeight)) {\n          this.height = this.minHeight;\n        }\n        thumb.height = this.innerHeight;\n        thumb.verticalCenter = \"middle\";\n        thumb.horizontalCenter = \"left\";\n      } else {\n        if (!$type.isNumber(this._pixelHeight)) {\n          if (!(this.height instanceof Percent)) {\n            this.height = percent(100);\n          }\n        }\n        // same as above with percentHeight\n        if ($type.hasValue(this.percentWidth)) {\n          this.width = this.minWidth;\n        }\n        thumb.width = this.innerWidth;\n        thumb.verticalCenter = \"top\";\n        thumb.horizontalCenter = \"middle\";\n      }\n    }\n  };\n  Object.defineProperty(Scrollbar.prototype, \"isBusy\", {\n    /**\r\n     * Indicates if the Scrollbar is currently \"busy\" (animating and or\r\n     * performing zoom by user interaction).\r\n     * @return boolean\r\n     */\n    get: function () {\n      return this._isBusy;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"start\", {\n    /**\r\n     * @return Position (0-1)\r\n     */\n    get: function () {\n      return Math.min(this.getPosition(this._start), this.getPosition(this._end));\n    },\n    /**\r\n     * ==========================================================================\r\n     * POSITIONS\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Relative position (0-1) of the start grip.\r\n     *\r\n     * @param position  Position (0-1)\r\n     */\n    set: function (position) {\n      if (!this._isBusy) {\n        this.__start = position;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"__start\", {\n    /**\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this._start;\n    },\n    /**\r\n     * [__start description]\r\n     *\r\n     * @todo Description\r\n     * @param position [description]\r\n     */\n    set: function (position) {\n      this._start = this.getPosition(position);\n      this.updateThumb();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"end\", {\n    /**\r\n     * @return Position (0-1)\r\n     */\n    get: function () {\n      return Math.max(this.getPosition(this._start), this.getPosition(this._end));\n    },\n    /**\r\n     * Relative position (0-1) of the end grip.\r\n     *\r\n     * @param position  Position (0-1)\r\n     */\n    set: function (position) {\n      if (!this._isBusy) {\n        this.__end = position;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"__end\", {\n    /**\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this._end;\n    },\n    /**\r\n     * [__end description]\r\n     *\r\n     * @todo Description\r\n     * @param position [description]\r\n     */\n    set: function (position) {\n      this._end = this.getPosition(position);\n      this.updateThumb();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"range\", {\n    /**\r\n     * Current selection range.\r\n     *\r\n     * @readonly\r\n     * @return Range\r\n     */\n    get: function () {\n      return {\n        start: this.start,\n        end: this.end,\n        priority: this._usingGrip\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Disables range change events.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Scrollbar.prototype.skipRangeEvents = function () {\n    if (!this._isBusy) {\n      this._skipRangeEvents = true;\n    }\n  };\n  /**\r\n   * [fixRange description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   * @param range  Range\r\n   */\n  Scrollbar.prototype.fixRange = function (range) {\n    if (range.start != $math.round(this._start, 2) || range.end != $math.round(this._end, 2)) {\n      this._start = range.start;\n      this._end = range.end;\n      this._skipRangeEvents = true;\n      this.updateThumb();\n      this._skipRangeEvents = false;\n      this.thumb.validate();\n      this.thumb.background.validate();\n    }\n  };\n  /**\r\n   * [getPosition description]\r\n   *\r\n   * @todo Description\r\n   * @param position  [description]\r\n   * @return [description]\r\n   */\n  Scrollbar.prototype.getPosition = function (position) {\n    return $math.fitToRange($math.round(position, 4), 0, 1);\n  };\n  Object.defineProperty(Scrollbar.prototype, \"orientation\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"orientation\");\n    },\n    /**\r\n     * ==========================================================================\r\n     * MISC\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Orientation of the scrollbar.\r\n     *\r\n     * Available options: \"horizontal\" (default) and \"vertical\".\r\n     *\r\n     * @default \"horizontal\"\r\n     * @param value  Orientation\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"orientation\", value)) {\n        // Set mouse cursors and screen reader tetxt accordingly\n        if (value === \"horizontal\") {\n          // Mouse styles\n          this.startGrip.cursorOverStyle = MouseCursorStyle.horizontalResize;\n          this.endGrip.cursorOverStyle = MouseCursorStyle.horizontalResize;\n          // Reader text\n          /*this.readerTitle = this.language.translate(\"Use TAB to select grip buttons or left and right arrows to change selection\");\r\n          this.thumb.readerDescription = this.language.translate(\"Use left and right arrows to move selection\");\r\n          this.startGrip.readerDescription = this.language.translate(\"Use left and right arrows to move left selection\");\r\n          this.endGrip.readerDescription = this.language.translate(\"Use left and right arrows to move right selection\");*/\n        } else {\n          // Mouse styles\n          this.startGrip.cursorOverStyle = MouseCursorStyle.verticalResize;\n          this.endGrip.cursorOverStyle = MouseCursorStyle.verticalResize;\n          // Reader text\n          /*this.readerTitle = this.language.translate(\"Use TAB select grip buttons or up and down arrows to change selection\");\r\n          this.thumb.readerDescription = this.language.translate(\"Use up and down arrows to move selection\");\r\n          this.startGrip.readerDescription = this.language.translate(\"Use up and down arrows to move upper selection\");\r\n          this.endGrip.readerDescription = this.language.translate(\"Use up and down arrows to move lower selection\");*/\n        }\n\n        this.updateByOrientation();\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n  Scrollbar.prototype.updateByOrientation = function () {};\n  Object.defineProperty(Scrollbar.prototype, \"startGrip\", {\n    /**\r\n     * @return Grip element\r\n     */\n    get: function () {\n      return this._startGrip;\n    },\n    /**\r\n     * ==========================================================================\r\n     * GRIPS\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Start grip element. (button)\r\n     *\r\n     * @param button  Grip element\r\n     */\n    set: function (button) {\n      if (this._startGrip) {\n        this.removeDispose(this._startGrip);\n      }\n      this._startGrip = button;\n      this.processGrip(button);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"endGrip\", {\n    /**\r\n     * @return Grip element\r\n     */\n    get: function () {\n      return this._endGrip;\n    },\n    /**\r\n     * End grip element. (button)\r\n     *\r\n     * @param button  Grip element\r\n     */\n    set: function (button) {\n      if (this._endGrip) {\n        this.removeDispose(this._endGrip);\n      }\n      this._endGrip = button;\n      this.processGrip(button);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Decorates the grip button with properties and events.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param button Grip button\r\n   */\n  Scrollbar.prototype.processGrip = function (button) {\n    button.parent = this;\n    button.isMeasured = false;\n    button.focusable = true;\n    button.shouldClone = false;\n    // Set button defaults\n    //button.showSystemTooltip = true; // setting this here is not right because we break inheritance\n    button.zIndex = 100;\n    button.events.on(\"drag\", this.handleGripDrag, this, false);\n    button.events.on(\"dragstop\", this.makeUnbusy, this, false);\n    button.events.on(\"down\", this.makeBusy, this, false);\n    button.events.on(\"up\", this.makeUnbusy, this, false);\n    this._disposers.push(button);\n  };\n  /**\r\n   * Updates positions of related elements after grip element is dragged.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n  Scrollbar.prototype.handleGripDrag = function (event) {\n    this.makeBusy();\n    if (event.target === this._startGrip) {\n      this._usingGrip = \"start\";\n    } else {\n      this._usingGrip = \"end\";\n    }\n    if (this.orientation == \"horizontal\") {\n      this._start = this.startGrip.pixelX / this.innerWidth;\n      this._end = this.endGrip.pixelX / this.innerWidth;\n    } else {\n      this._start = 1 - this.startGrip.pixelY / this.innerHeight;\n      this._end = 1 - this.endGrip.pixelY / this.innerHeight;\n    }\n    this.updateThumb();\n  };\n  Object.defineProperty(Scrollbar.prototype, \"thumb\", {\n    /**\r\n     * @return Thumb element\r\n     */\n    get: function () {\n      if (!this._thumb) {\n        // Create scrollbar controls (setters will handle adding disposers)\n        var thumb = new Button();\n        thumb.background.cornerRadius(10, 10, 10, 10);\n        thumb.padding(0, 0, 0, 0);\n        this.thumb = thumb;\n      }\n      return this._thumb;\n    },\n    /**\r\n     * A \"thumb\" element.\r\n     *\r\n     * It's a draggable square space between the grips, that can be used to\r\n     * pan the selection.\r\n     *\r\n     * @param thumb  Thumb element\r\n     */\n    set: function (thumb) {\n      var _this = this;\n      if (thumb) {\n        if (this._thumb) {\n          this.removeDispose(this._thumb);\n        }\n        this._thumb = thumb;\n        thumb.parent = this;\n        thumb.isMeasured = false;\n        thumb.inert = true;\n        thumb.draggable = true;\n        thumb.clickable = true;\n        thumb.hoverable = true;\n        thumb.focusable = true;\n        thumb.shouldClone = false;\n        thumb.zIndex = 0;\n        // TODO remove closures ?\n        // Add events\n        // Add cursor styles to thumb\n        thumb.cursorOverStyle = MouseCursorStyle.grab;\n        thumb.cursorDownStyle = MouseCursorStyle.grabbing;\n        thumb.events.on(\"dragstart\", this.makeBusy, this, false);\n        thumb.events.on(\"dragstop\", this.makeUnbusy, this, false);\n        thumb.events.on(\"positionchanged\", this.handleThumbPosition, this, false);\n        thumb.events.on(\"sizechanged\", this.handleThumbPosition, this, false);\n        thumb.events.on(\"doublehit\", this.handleDoubleClick, this, false);\n        // Add event for space and ENTER to toggle full zoom out and back\n        // (same as doubleclick)\n        this._disposers.push(getInteraction().body.events.on(\"keyup\", function (ev) {\n          if (keyboard.isKey(ev.event, [\"space\", \"enter\"]) && _this.thumb.isFocused) {\n            ev.event.preventDefault();\n            _this.handleDoubleClick();\n          }\n        }));\n        this._disposers.push(this._thumb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Zooms-in and out the selection on double-click of the thumb.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Scrollbar.prototype.handleDoubleClick = function () {\n    this.makeBusy();\n    var newStart = 0;\n    var newEnd = 1;\n    if (this.start != 0 || this.end != 1) {\n      this._prevStart = this.start;\n      this._prevEnd = this.end;\n    } else {\n      newStart = this._prevStart;\n      newEnd = this._prevEnd;\n    }\n    var zoomAnimation = this.animate([{\n      property: \"__start\",\n      to: newStart\n    }, {\n      property: \"__end\",\n      to: newEnd\n    }], this.animationDuration, this.animationEasing);\n    if (zoomAnimation && !zoomAnimation.isFinished()) {\n      zoomAnimation.events.on(\"animationended\", this.makeUnbusy, this, false);\n      this._zoomAnimation = zoomAnimation;\n    } else {\n      this.makeUnbusy();\n    }\n  };\n  /**\r\n   * Updates positions of other elements when thumb is moved.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Scrollbar.prototype.handleThumbPosition = function () {\n    var thumb = this.thumb;\n    if (this.orientation == \"horizontal\") {\n      var innerWidth_2 = this.innerWidth;\n      var w = thumb.innerWidth;\n      var x = thumb.pixelX;\n      this._start = x / innerWidth_2;\n      this._end = (x + w) / innerWidth_2;\n      this.updateThumb();\n    } else {\n      var innerHeight_2 = this.innerHeight;\n      var h = thumb.innerHeight;\n      var y = thumb.pixelY;\n      if (y + h > innerHeight_2) {\n        y = innerHeight_2 - h;\n        thumb.y = y;\n      }\n      this._start = 1 - (y + h) / innerHeight_2;\n      this._end = 1 - y / innerHeight_2;\n      this.updateThumb();\n    }\n  };\n  /**\r\n   * Creates a background element for the scrollbar.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Background\r\n   */\n  Scrollbar.prototype.createBackground = function () {\n    return new RoundedRectangle();\n  };\n  Object.defineProperty(Scrollbar.prototype, \"hideGrips\", {\n    /**\r\n     * @return Show only on hover?\r\n     */\n    get: function () {\n      return this._hideGrips;\n    },\n    /**\r\n     * Use this property to set whether grips should be always visible (`false`),\r\n     * or they should just appear on scrollbar hover (`true`).\r\n     *\r\n     * @param value  Show only on hover?\r\n     */\n    set: function (value) {\n      var _this = this;\n      this._hideGrips = value;\n      if (this._overDisposer) {\n        this.removeDispose(this._overDisposer);\n      }\n      if (this._outDisposer) {\n        this.removeDispose(this._outDisposer);\n      }\n      if (value) {\n        this._overDisposer = this.events.on(\"over\", function () {\n          _this.startGrip.show();\n          _this.endGrip.show();\n        }, undefined, false);\n        this._outDisposer = this.events.on(\"out\", function () {\n          _this.startGrip.hide();\n          _this.endGrip.hide();\n        }, undefined, false);\n        this.startGrip.hide();\n        this.endGrip.hide();\n      } else {\n        this.startGrip.show();\n        this.endGrip.show();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"animationDuration\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"animationDuration\");\n    },\n    /**\r\n     * Duration in milliseconds of scrollbar animation (happens when user clicks on a background of a scrollbar)\r\n     * @default 0\r\n     * @param value number\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"animationDuration\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"animationEasing\", {\n    /**\r\n     * @return {Function}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"animationEasing\");\n    },\n    /**\r\n     * Animation easing function.\r\n     * @todo: review description and default\r\n     * @default $ease.cubicOut\r\n     * @param value (value: number) => number\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"animationEasing\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Adds easing functions to \"function\" fields.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as function?\r\n   */\n  Scrollbar.prototype.asFunction = function (field) {\n    return field == \"animationEasing\" || _super.prototype.asIs.call(this, field);\n  };\n  return Scrollbar;\n}(Container);\nexport { Scrollbar };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Scrollbar\"] = Scrollbar;","map":{"version":3,"mappings":"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","names":["Container","ResizeButton","Button","getInteraction","MouseCursorStyle","RoundedRectangle","registry","keyboard","InterfaceColorSet","percent","Percent","$math","$ease","$type","$utils","__extends","_super","_this","className","minHeight","minWidth","animationDuration","animationEasing","cubicOut","margin","interfaceColors","background","cornerRadius","fill","getFor","fillOpacity","showSystemTooltip","startGrip","endGrip","events","on","updateThumb","start","end","role","thumb","readerLive","once","_previousStart","undefined","dispatchRangeChange","hideGrips","orientation","setSVGAttribute","applyTheme","Scrollbar","applyInternalDefaults","hasValue","readerTitle","language","translate","readerDescription","readerOrientation","readerControls","baseSprite","uidAttr","updateSize","validateLayout","updateExtremes","processBackground","clickable","handleBgHit","event","makeBusy","point","spritePoint","spritePointToSprite","thumbX","x","pixelWidth","fitToRange","innerWidth","_thumbAnimation","animate","property","to","thumbY","y","pixelHeight","innerHeight","makeUnbusy","_thumb","validate","_isBusy","_skipRangeEvents","_unbusyTimeout","removeDispose","stopAnimations","stop","_zoomAnimation","setTimeout","makeUnbusyReal","bind","_usingGrip","updateWhileMoving","_previousEnd","dispatch","dispatchEvents","parent","innerWidth_1","width","maxX","moveTo","pixelX","adapter","apply","value","Math","round","position","readerValueNow","readerValueText","innerHeight_1","height","maxY","pixelY","minX","minY","isNumber","_pixelWidth","percentHeight","verticalCenter","horizontalCenter","_pixelHeight","percentWidth","Object","min","getPosition","_start","_end","__start","max","__end","priority","range","getPropertyValue","setPropertyValue","cursorOverStyle","horizontalResize","verticalResize","updateByOrientation","invalidate","_startGrip","button","processGrip","_endGrip","isMeasured","focusable","shouldClone","zIndex","handleGripDrag","_disposers","push","target","padding","inert","draggable","hoverable","grab","cursorDownStyle","grabbing","handleThumbPosition","handleDoubleClick","body","ev","isKey","isFocused","preventDefault","newStart","newEnd","_prevStart","_prevEnd","zoomAnimation","isFinished","innerWidth_2","w","innerHeight_2","h","_hideGrips","_overDisposer","_outDisposer","show","hide","field","asIs","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\core\\elements\\Scrollbar.ts"],"sourcesContent":["/**\r\n * Provides functionality used to build scrollbars.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../Container\";\r\nimport { IRange } from \"../defs/IRange\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../Sprite\";\r\nimport { Orientation } from \"../defs/Orientation\";\r\nimport { ResizeButton } from \"../elements/ResizeButton\";\r\nimport { Button } from \"../elements/Button\";\r\nimport { getInteraction } from \"../interaction/Interaction\";\r\nimport { MouseCursorStyle } from \"../interaction/Mouse\";\r\nimport { RoundedRectangle } from \"../elements/RoundedRectangle\";\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { Animation } from \"../utils/Animation\";\r\nimport { IDisposer } from \"../utils/Disposer\";\r\nimport { registry } from \"../Registry\";\r\nimport { keyboard } from \"../utils/Keyboard\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent, Percent } from \"../utils/Percent\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $ease from \"../utils/Ease\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $utils from \"../utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Scrollbar]].\r\n */\r\nexport interface IScrollbarProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Duration in milliseconds of Scrollbar animation.\r\n\t *\r\n\t * This affects how fast Scrollbar elements move/resize. For example when\r\n\t * chart zooms or pans, Scrollbar elements' positions need to be adjusted\r\n\t * as well. This setting will affect whether they will be relocated\r\n\t * instantenously (0), or will animte gradually.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n\t */\r\n\tanimationDuration?: number;\r\n\r\n\t/**\r\n\t * An easing function to use when animating (moving/sizing) Scrollbar\r\n\t * elements.\r\n\t */\r\n\tanimationEasing?: (value: number) => number;\r\n\r\n\t/**\r\n\t * Orientation of a scrollbar\r\n\t */\r\n\torientation?: Orientation;\r\n}\r\n\r\n/**\r\n * Defines events for [[Scrollbar]].\r\n */\r\nexport interface IScrollbarEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when range of scrollbar selection changes.\r\n\t */\r\n\trangechanged: {};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Scrollbar]].\r\n */\r\nexport interface IScrollbarAdapters extends IContainerAdapters, IScrollbarProperties {\r\n\r\n\t/**\r\n\t * Applied to a position value when it is retrieved.\r\n\t */\r\n\tpositionValue: {\r\n\t\tvalue: any,\r\n\t\tposition: number\r\n\t}\r\n\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Scrollbar is a generic control allowing to select a range of values or pan\r\n * the selection.\r\n *\r\n * @see {@link IScrollbarEvents} for a list of available events\r\n * @see {@link IScrollbarAdapters} for a list of available Adapters\r\n */\r\nexport class Scrollbar extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IScrollbarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IScrollbarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IScrollbarEvents;\r\n\r\n\t/**\r\n\t * Holds a reference to a draggable rectangle that fills the space between\r\n\t * two selection grips. It can be used to pan the selection maintaining the\r\n\t * distance between start and end grips.\r\n\t */\r\n\tprotected _thumb: $type.Optional<Button>;\r\n\r\n\t/**\r\n\t * Orientation of the scrollbar.\r\n\t */\r\n\tprotected _orientation: Orientation;\r\n\r\n\t/**\r\n\t * A button (grip) instance to be used to select lower range value.\r\n\t */\r\n\tprotected _startGrip!: ResizeButton;\r\n\r\n\t/**\r\n\t * A button (grip) instance to be used to select upper range value.\r\n\t */\r\n\tprotected _endGrip!: ResizeButton;\r\n\r\n\t/**\r\n\t * Currently selected lower (start) value.\r\n\t */\r\n\tprotected _start!: number;\r\n\r\n\t/**\r\n\t * Currently selected upper (end) value.\r\n\t */\r\n\tprotected _end!: number;\r\n\r\n\t/**\r\n\t * Previously selected lower (start) value.\r\n\t */\r\n\tprotected _previousStart: $type.Optional<number> = 0;\r\n\r\n\t/**\r\n\t * Previously selected upper (end) value.\r\n\t */\r\n\tprotected _previousEnd: $type.Optional<number> = 1;\r\n\r\n\t/**\r\n\t * An [[Animation]] instance that moves \"thumb\".\r\n\t */\r\n\tprotected _thumbAnimation: $type.Optional<Animation>;\r\n\r\n\t/**\r\n\t * An [[Animation]] instance that moves zoom grip buttons.\r\n\t */\r\n\tprotected _zoomAnimation: $type.Optional<Animation>;\r\n\r\n\t/**\r\n\t * A value of previously selected lower value, used for doubleclick function.\r\n\t */\r\n\tprotected _prevStart: number = 0;\r\n\r\n\t/**\r\n\t * A value of previously selected upper value, used for doubleclick function.\r\n\t */\r\n\tprotected _prevEnd: number = 1;\r\n\r\n\t/**\r\n\t * Indicates if the Scrollbar is currently \"busy\" (animating and or\r\n\t * performing zoom by user interaction).\r\n\t */\r\n\tprotected _isBusy: boolean = false;\r\n\r\n\t/**\r\n\t * [_skipRangeEvents description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _skipRangeEvents: boolean = false;\r\n\r\n\t/**\r\n\t * Holds timeout reference that resets \"busy\" status.\r\n\t */\r\n\tprotected _unbusyTimeout: $type.Optional<IDisposer>;\r\n\r\n\t/**\r\n\t * [undefined description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _usingGrip: \"start\" | \"end\" | undefined;\r\n\r\n\t/**\r\n\t * Sets the type of the element to use as background.\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Hide grips when not hovered over scrollbar?\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tprotected _hideGrips!: boolean;\r\n\r\n\t/**\r\n\t * A disposer for the hover event.\r\n\t */\r\n\tprotected _overDisposer: $type.Optional<IDisposer>;\r\n\r\n\t/**\r\n\t * A disposer for the out event.\r\n\t */\r\n\tprotected _outDisposer: $type.Optional<IDisposer>;\r\n\r\n\t/**\r\n\t * Update the selection when dragging the grips.\r\n\t *\r\n\t * If set to `false` selection will be updated only when the grip is\r\n\t * released.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic updateWhileMoving: boolean = true;\r\n\r\n\t/**\r\n\t * Construtor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"Scrollbar\";\r\n\r\n\t\tthis.minHeight = 12;\r\n\t\tthis.minWidth = 12;\r\n\r\n\t\tthis.animationDuration = 0;\r\n\t\tthis.animationEasing = $ease.cubicOut;\r\n\r\n\t\tthis.margin(10, 10, 10, 10);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// background is also container as it might contain graphs, grid, etc\r\n\t\tlet background: RoundedRectangle = this.background;\r\n\t\tbackground.cornerRadius(10, 10, 10, 10);\r\n\t\tbackground.fill = interfaceColors.getFor(\"fill\");\r\n\t\tbackground.fillOpacity = 0.5;\r\n\r\n\t\t// Make system tooltips appear by default\r\n\t\tthis.showSystemTooltip = true;\r\n\r\n\t\tthis.startGrip = new ResizeButton();\r\n\t\tthis.endGrip = new ResizeButton();\r\n\r\n\t\t// Default orientation...\r\n\t\t// ... is set in `applyInternalDefaults()` because it accesses `language`\r\n\t\t// and should only be started to access when parent is set\r\n\r\n\t\t// Set events\r\n\t\tthis.events.on(\"transformed\", () => {\r\n\t\t\tthis.updateThumb()\r\n\t\t}, this, false);\r\n\r\n\t\t// Initial positions\r\n\t\tthis.start = 0;\r\n\t\tthis.end = 1;\r\n\r\n\t\t// Set roles\r\n\t\tthis.role = \"scrollbar\";\r\n\t\tthis.thumb.role = \"slider\";\r\n\t\tthis.thumb.readerLive = \"polite\";\r\n\t\tthis.startGrip.role = \"slider\";\r\n\t\tthis.endGrip.role = \"slider\";\r\n\r\n\t\t// otherwise range changed won't be registered\r\n\t\tthis.events.once(\"inited\", () => {\r\n\t\t\tthis._previousStart = undefined;\r\n\t\t\tthis.dispatchRangeChange();\r\n\t\t}, undefined, false)\r\n\r\n\r\n\t\tthis.hideGrips = false;\r\n\r\n\t\tthis.orientation = \"horizontal\";\r\n\r\n\t\t// Min/max values for accessibility\r\n\t\tthis.setSVGAttribute({ \"aria-valuemin\": \"0\" });\r\n\t\tthis.setSVGAttribute({ \"aria-valuemax\": \"100\" });\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Set screen reader tetxt accordingly\r\n\t\tif (this.orientation === \"horizontal\") {\r\n\t\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\t\tthis.readerTitle = this.language.translate(\"Use TAB to select grip buttons or left and right arrows to change selection\");\r\n\t\t\t}\r\n\t\t\tif (!$type.hasValue(this.thumb.readerDescription)) {\r\n\t\t\t\tthis.thumb.readerDescription = this.language.translate(\"Use left and right arrows to move selection\");\r\n\t\t\t}\r\n\t\t\tif (!$type.hasValue(this.startGrip.readerDescription)) {\r\n\t\t\t\tthis.startGrip.readerDescription = this.language.translate(\"Use left and right arrows to move left selection\");\r\n\t\t\t}\r\n\t\t\tif (!$type.hasValue(this.endGrip.readerDescription)) {\r\n\t\t\t\tthis.endGrip.readerDescription = this.language.translate(\"Use left and right arrows to move right selection\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.readerOrientation = \"horizontal\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\t\tthis.readerTitle = this.language.translate(\"Use TAB select grip buttons or up and down arrows to change selection\");\r\n\t\t\t}\r\n\t\t\tif (!$type.hasValue(this.thumb.readerDescription)) {\r\n\t\t\t\tthis.thumb.readerDescription = this.language.translate(\"Use up and down arrows to move selection\");\r\n\t\t\t}\r\n\t\t\tif (!$type.hasValue(this.startGrip.readerDescription)) {\r\n\t\t\t\tthis.startGrip.readerDescription = this.language.translate(\"Use up and down arrows to move upper selection\");\r\n\t\t\t}\r\n\t\t\tif (!$type.hasValue(this.endGrip.readerDescription)) {\r\n\t\t\t\tthis.endGrip.readerDescription = this.language.translate(\"Use up and down arrows to move lower selection\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.readerOrientation = \"vertical\";\r\n\t\t}\r\n\r\n\t\tthis.readerControls = this.baseSprite.uidAttr();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the layout of the scrollbar's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout(): void {\r\n\t\tthis.updateSize();\r\n\t\tsuper.validateLayout();\r\n\r\n\t\t// when size changes, need to update extremes\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * Update background for the scrollbar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processBackground(): void {\r\n\t\tsuper.processBackground();\r\n\t\tlet background = this.background;\r\n\r\n\t\tbackground.clickable = true;\r\n\t\tbackground.events.on(\"hit\", this.handleBgHit, this, undefined);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to the particular place when clicked/tapped on the scrollbar\r\n\t * background.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleBgHit(event: ISpriteEvents[\"hit\"]): void {\r\n\t\tthis.makeBusy();\r\n\t\tlet point: IPoint = event.spritePoint;\r\n\t\tpoint = $utils.spritePointToSprite(point, this.background, this);\r\n\t\tlet thumb: Sprite = this.thumb;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tlet thumbX: number = point.x - thumb.pixelWidth / 2;\r\n\t\t\tthumbX = $math.fitToRange(thumbX, 0, this.innerWidth - thumb.pixelWidth);\r\n\t\t\tthis._thumbAnimation = thumb.animate({ property: \"x\", to: thumbX }, this.animationDuration, this.animationEasing);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet thumbY: number = point.y - thumb.pixelHeight / 2;\r\n\t\t\tthumbY = $math.fitToRange(thumbY, 0, this.innerHeight - thumb.pixelHeight);\r\n\t\t\tthis._thumbAnimation = thumb.animate({ property: \"y\", to: thumbY }, this.animationDuration, this.animationEasing);\r\n\t\t}\r\n\t\tif (this.animationDuration > 0) {\r\n\t\t\tthis._thumbAnimation.events.on(\"animationended\", this.makeUnbusy, this, false);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._thumb.validate();\r\n\t\t\tthis.makeUnbusy();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set scrollbar as busy. (currently zooming)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic makeBusy(): void {\r\n\t\tthis._isBusy = true;\r\n\t\tthis._skipRangeEvents = false;\r\n\t\tif (this._unbusyTimeout) {\r\n\t\t\tthis.removeDispose(this._unbusyTimeout);\r\n\t\t}\r\n\t\tthis._unbusyTimeout = undefined;\r\n\t\tthis.stopAnimations();\r\n\t}\r\n\r\n\t/**\r\n\t * Stops all animations, currently playing for the scrollbar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic stopAnimations(): void {\r\n\t\tif (this._thumbAnimation) {\r\n\t\t\tthis._thumbAnimation.stop(true);\r\n\t\t}\r\n\t\tif (this._zoomAnimation) {\r\n\t\t\tthis._zoomAnimation.stop(true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Cancels \"busy\" status of the Scrollbar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic makeUnbusy(): void {\r\n\t\t/**\r\n\t\t * We cannot make Scrollbar not busy right after release, because then axes\r\n\t\t * will take over controll and Scrollbar will start to animate.\r\n\t\t * Theorethically, it's not right to set timeout by `animationDuration`,\r\n\t\t * however we can not know all the durations of elements we scroll, so we\r\n\t\t * assume that animation duration will be the same as\r\n\t\t * `interpolationDuration` or `rangeChange` duration.\r\n\t\t */\r\n\t\tthis._unbusyTimeout = this.setTimeout(this.makeUnbusyReal.bind(this), this.animationDuration * 1.1);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [makeUnbusyReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic makeUnbusyReal(): void {\r\n\t\tthis._usingGrip = undefined;\r\n\t\tthis._isBusy = false;\r\n\t\tif (!this.updateWhileMoving) {\r\n\t\t\tthis.dispatchRangeChange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Disptatches rangechanged event if it really changed\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected dispatchRangeChange() {\r\n\t\tif (this._previousEnd != this.end || this._previousStart != this.start) {\r\n\t\t\tthis._previousStart = this.start;\r\n\t\t\tthis._previousEnd = this.end;\r\n\t\t\tthis.dispatch(\"rangechanged\");\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates the \"thumb\" element. A draggable element between the grips.\r\n\t * @ignore\r\n\t */\r\n\tpublic updateThumb(dispatchEvents: boolean = true): void {\r\n\r\n\t\tif (!this.parent) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet thumb: Sprite = this.thumb;\r\n\r\n\t\tlet start: number = this.start;\r\n\t\tlet end: number = this.end;\r\n\r\n\t\tlet startGrip: ResizeButton = this.startGrip;\r\n\t\tlet endGrip: ResizeButton = this.endGrip;\r\n\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\r\n\t\t\tlet innerWidth: number = this.innerWidth;\r\n\r\n\t\t\tthumb.width = innerWidth * (end - start);\r\n\t\t\tthumb.maxX = innerWidth - thumb.pixelWidth;\r\n\t\t\tthumb.x = start * innerWidth;\r\n\r\n\t\t\tstartGrip.moveTo({ x: thumb.pixelX, y: 0 }, undefined, undefined, true); // overrides dragging\r\n\t\t\tendGrip.moveTo({ x: thumb.pixelX + thumb.pixelWidth, y: 0 }, undefined, undefined, true);\r\n\r\n\t\t\tstartGrip.readerTitle = this.language.translate(\r\n\t\t\t\t\"From %1\",\r\n\t\t\t\tundefined,\r\n\t\t\t\tthis.adapter.apply(\"positionValue\", {\r\n\t\t\t\t\tvalue: Math.round(start * 100) + \"%\",\r\n\t\t\t\t\tposition: start\r\n\t\t\t\t}).value\r\n\t\t\t);\r\n\t\t\tstartGrip.readerValueNow = \"\" + Math.round(start * 100);\r\n\t\t\tstartGrip.readerValueText = startGrip.readerTitle;\r\n\r\n\t\t\tendGrip.readerTitle = this.language.translate(\r\n\t\t\t\t\"To %1\",\r\n\t\t\t\tundefined,\r\n\t\t\t\tthis.adapter.apply(\"positionValue\", {\r\n\t\t\t\t\tvalue: Math.round(end * 100) + \"%\",\r\n\t\t\t\t\tposition: end\r\n\t\t\t\t}).value\r\n\t\t\t);\r\n\t\t\tendGrip.readerValueNow = \"\" + Math.round(end * 100);\r\n\t\t\tendGrip.readerValueText = endGrip.readerTitle;\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet innerHeight: number = this.innerHeight;\r\n\r\n\t\t\tthumb.height = innerHeight * (end - start);\r\n\t\t\tthumb.maxY = innerHeight - thumb.pixelHeight;\r\n\t\t\tthumb.y = (1 - end) * innerHeight;\r\n\r\n\t\t\tstartGrip.moveTo({ x: 0, y: thumb.pixelY + thumb.pixelHeight }, undefined, undefined, true);\r\n\t\t\tendGrip.moveTo({ x: 0, y: thumb.pixelY }, undefined, undefined, true);\r\n\r\n\t\t\tstartGrip.readerTitle = this.language.translate(\r\n\t\t\t\t\"To %1\",\r\n\t\t\t\tundefined,\r\n\t\t\t\tthis.adapter.apply(\"positionValue\", {\r\n\t\t\t\t\tvalue: Math.round((1 - start) * 100) + \"%\",\r\n\t\t\t\t\tposition: (1 - start)\r\n\t\t\t\t}).value\r\n\t\t\t);\r\n\t\t\tstartGrip.readerValueNow = \"\" + Math.round(start * 100);\r\n\t\t\tstartGrip.readerValueText = startGrip.readerTitle;\r\n\r\n\t\t\tendGrip.readerTitle = this.language.translate(\r\n\t\t\t\t\"From %1\",\r\n\t\t\t\tundefined,\r\n\t\t\t\tthis.adapter.apply(\"positionValue\", {\r\n\t\t\t\t\tvalue: Math.round((1 - end) * 100) + \"%\",\r\n\t\t\t\t\tposition: (1 - end)\r\n\t\t\t\t}).value\r\n\t\t\t);\r\n\t\t\tendGrip.readerValueNow = \"\" + Math.round(end * 100);\r\n\t\t\tendGrip.readerValueText = endGrip.readerTitle;\r\n\t\t}\r\n\r\n\t\t// Add accessibility\r\n\t\tthumb.readerTitle = this.language.translate(\r\n\t\t\t\"From %1 to %2\",\r\n\t\t\tundefined,\r\n\t\t\tthis.adapter.apply(\"positionValue\", {\r\n\t\t\t\tvalue: Math.round(start * 100) + \"%\",\r\n\t\t\t\tposition: start\r\n\t\t\t}).value,\r\n\t\t\tthis.adapter.apply(\"positionValue\", {\r\n\t\t\t\tvalue: Math.round(end * 100) + \"%\",\r\n\t\t\t\tposition: end\r\n\t\t\t}).value\r\n\t\t);\r\n\r\n\t\tthumb.readerValueNow = \"\" + Math.round(start * 100);\r\n\t\tthumb.readerValueText = thumb.readerTitle;\r\n\r\n\t\tthis.readerValueNow = \"\" + Math.round(start * 100);\r\n\t\tthis.readerValueText = thumb.readerTitle;\r\n\r\n\t\tif (!this._skipRangeEvents && this.updateWhileMoving && dispatchEvents) {\r\n\t\t\tthis.dispatchRangeChange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates extremes of the scrollbar.\r\n\t */\r\n\tprotected updateExtremes(): void {\r\n\t\tlet orientation = this.orientation;\r\n\t\tlet minX: number = 0;\r\n\t\tlet minY: number = 0;\r\n\t\tlet maxX: number = 0;\r\n\t\tlet maxY: number = 0;\r\n\r\n\t\tif (orientation == \"horizontal\") {\r\n\t\t\tmaxX = this.innerWidth;\r\n\t\t\tminY = maxY = this.innerHeight / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tmaxY = this.innerHeight;\r\n\t\t\tminX = maxX = this.innerWidth / 2;\r\n\t\t}\r\n\r\n\t\tlet startGrip: ResizeButton = this.startGrip;\r\n\t\tstartGrip.minX = minX;\r\n\t\tstartGrip.maxX = maxX;\r\n\t\tstartGrip.minY = minY;\r\n\t\tstartGrip.maxY = maxY;\r\n\r\n\t\tlet endGrip: ResizeButton = this.endGrip;\r\n\t\tendGrip.minX = minX;\r\n\t\tendGrip.maxX = maxX;\r\n\t\tendGrip.minY = minY;\r\n\t\tendGrip.maxY = maxY;\r\n\r\n\t\tlet thumb = this.thumb;\r\n\t\tthumb.minX = minX;\r\n\t\tthumb.maxX = maxX;\r\n\t\tthumb.minY = minY;\r\n\t\tthumb.maxY = maxY;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates size of the scrollbar.\r\n\t */\r\n\tprotected updateSize(): void {\r\n\t\tlet orientation = this.orientation;\r\n\r\n\t\tlet startGrip = this.startGrip;\r\n\t\tif (startGrip) {\r\n\t\t\tstartGrip.orientation = orientation;\r\n\t\t}\r\n\t\tif (this.endGrip) {\r\n\t\t\tthis.endGrip.orientation = orientation;\r\n\t\t}\r\n\r\n\t\tlet thumb: Sprite = this.thumb;\r\n\t\tif (thumb) {\r\n\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\tif (!$type.isNumber(this._pixelWidth)) {\r\n\t\t\t\t\tif (!(this.width instanceof Percent)) {\r\n\t\t\t\t\t\tthis.width = percent(100);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// this teorethically might be wrong, if user indeed sets height of a horizontal scrollbar in percent\r\n\t\t\t\t// however without this height might be equal to 100% if previous orientation was set to horizontal\r\n\t\t\t\t// so this is ok solution, in case user really wants to have scrollbar height set in percent,\r\n\t\t\t\t// he should do this after orientation.\r\n\t\t\t\tif ($type.hasValue(this.percentHeight)) {\r\n\t\t\t\t\tthis.height = this.minHeight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthumb.height = this.innerHeight;\r\n\r\n\t\t\t\tthumb.verticalCenter = \"middle\";\r\n\t\t\t\tthumb.horizontalCenter = \"left\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (!$type.isNumber(this._pixelHeight)) {\r\n\t\t\t\t\tif (!(this.height instanceof Percent)) {\r\n\t\t\t\t\t\tthis.height = percent(100);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// same as above with percentHeight\r\n\t\t\t\tif ($type.hasValue(this.percentWidth)) {\r\n\t\t\t\t\tthis.width = this.minWidth;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthumb.width = this.innerWidth;\r\n\t\t\t\tthumb.verticalCenter = \"top\";\r\n\t\t\t\tthumb.horizontalCenter = \"middle\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if the Scrollbar is currently \"busy\" (animating and or\r\n\t * performing zoom by user interaction).\r\n\t * @return boolean\r\n\t */\r\n\tpublic get isBusy():boolean{\r\n\t\treturn this._isBusy;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * POSITIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Relative position (0-1) of the start grip.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t */\r\n\tpublic set start(position: number) {\r\n\t\tif (!this._isBusy) {\r\n\t\t\tthis.__start = position;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic get start(): number {\r\n\t\treturn Math.min(this.getPosition(this._start), this.getPosition(this._end));\r\n\t}\r\n\r\n\t/**\r\n\t * [__start description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param position [description]\r\n\t */\r\n\tprotected set __start(position: number) {\r\n\t\tthis._start = this.getPosition(position);\r\n\t\tthis.updateThumb();\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tprotected get __start(): number {\r\n\t\treturn this._start;\r\n\t}\r\n\r\n\t/**\r\n\t * Relative position (0-1) of the end grip.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t */\r\n\tpublic set end(position: number) {\r\n\t\tif (!this._isBusy) {\r\n\t\t\tthis.__end = position;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic get end(): number {\r\n\t\treturn Math.max(this.getPosition(this._start), this.getPosition(this._end));\r\n\t}\r\n\r\n\t/**\r\n\t * [__end description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param position [description]\r\n\t */\r\n\tprotected set __end(position: number) {\r\n\t\tthis._end = this.getPosition(position);\r\n\t\tthis.updateThumb();\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tprotected get __end(): number {\r\n\t\treturn this._end;\r\n\t}\r\n\r\n\t/**\r\n\t * Current selection range.\r\n\t *\r\n\t * @readonly\r\n\t * @return Range\r\n\t */\r\n\tpublic get range(): IRange {\r\n\t\treturn { start: this.start, end: this.end, priority: this._usingGrip };\r\n\t}\r\n\r\n\t/**\r\n\t * Disables range change events.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic skipRangeEvents(): void {\r\n\t\tif (!this._isBusy) {\r\n\t\t\tthis._skipRangeEvents = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [fixRange description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t * @param range  Range\r\n\t */\r\n\tpublic fixRange(range: IRange): void {\r\n\t\tif (range.start != $math.round(this._start, 2) || range.end != $math.round(this._end, 2)) {\r\n\t\t\tthis._start = range.start;\r\n\t\t\tthis._end = range.end;\r\n\r\n\t\t\tthis._skipRangeEvents = true;\r\n\t\t\tthis.updateThumb();\r\n\t\t\tthis._skipRangeEvents = false;\r\n\t\t\tthis.thumb.validate();\r\n\t\t\tthis.thumb.background.validate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getPosition description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param position  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getPosition(position: number): number {\r\n\t\treturn $math.fitToRange($math.round(position, 4), 0, 1);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * MISC\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Orientation of the scrollbar.\r\n\t *\r\n\t * Available options: \"horizontal\" (default) and \"vertical\".\r\n\t *\r\n\t * @default \"horizontal\"\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\r\n\t\tif (this.setPropertyValue(\"orientation\", value)) {\r\n\r\n\t\t\t// Set mouse cursors and screen reader tetxt accordingly\r\n\t\t\tif (value === \"horizontal\") {\r\n\r\n\t\t\t\t// Mouse styles\r\n\t\t\t\tthis.startGrip.cursorOverStyle = MouseCursorStyle.horizontalResize;\r\n\t\t\t\tthis.endGrip.cursorOverStyle = MouseCursorStyle.horizontalResize;\r\n\r\n\t\t\t\t// Reader text\r\n\t\t\t\t/*this.readerTitle = this.language.translate(\"Use TAB to select grip buttons or left and right arrows to change selection\");\r\n\t\t\t\tthis.thumb.readerDescription = this.language.translate(\"Use left and right arrows to move selection\");\r\n\t\t\t\tthis.startGrip.readerDescription = this.language.translate(\"Use left and right arrows to move left selection\");\r\n\t\t\t\tthis.endGrip.readerDescription = this.language.translate(\"Use left and right arrows to move right selection\");*/\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\t// Mouse styles\r\n\t\t\t\tthis.startGrip.cursorOverStyle = MouseCursorStyle.verticalResize;\r\n\t\t\t\tthis.endGrip.cursorOverStyle = MouseCursorStyle.verticalResize;\r\n\r\n\t\t\t\t// Reader text\r\n\t\t\t\t/*this.readerTitle = this.language.translate(\"Use TAB select grip buttons or up and down arrows to change selection\");\r\n\t\t\t\tthis.thumb.readerDescription = this.language.translate(\"Use up and down arrows to move selection\");\r\n\t\t\t\tthis.startGrip.readerDescription = this.language.translate(\"Use up and down arrows to move upper selection\");\r\n\t\t\t\tthis.endGrip.readerDescription = this.language.translate(\"Use up and down arrows to move lower selection\");*/\r\n\r\n\t\t\t}\r\n\t\t\tthis.updateByOrientation();\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateByOrientation() {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * GRIPS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Start grip element. (button)\r\n\t *\r\n\t * @param button  Grip element\r\n\t */\r\n\tpublic set startGrip(button: ResizeButton) {\r\n\t\tif (this._startGrip) {\r\n\t\t\tthis.removeDispose(this._startGrip);\r\n\t\t}\r\n\t\tthis._startGrip = button;\r\n\t\tthis.processGrip(button);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Grip element\r\n\t */\r\n\tpublic get startGrip(): ResizeButton {\r\n\t\treturn this._startGrip;\r\n\t}\r\n\r\n\t/**\r\n\t * End grip element. (button)\r\n\t *\r\n\t * @param button  Grip element\r\n\t */\r\n\tpublic set endGrip(button: ResizeButton) {\r\n\t\tif (this._endGrip) {\r\n\t\t\tthis.removeDispose(this._endGrip);\r\n\t\t}\r\n\t\tthis._endGrip = button;\r\n\t\tthis.processGrip(button);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Grip element\r\n\t */\r\n\tpublic get endGrip(): ResizeButton {\r\n\t\treturn this._endGrip;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates the grip button with properties and events.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param button Grip button\r\n\t */\r\n\tpublic processGrip(button: ResizeButton) {\r\n\t\tbutton.parent = this;\r\n\t\tbutton.isMeasured = false;\r\n\t\tbutton.focusable = true;\r\n\t\tbutton.shouldClone = false;\r\n\r\n\t\t// Set button defaults\r\n\t\t//button.showSystemTooltip = true; // setting this here is not right because we break inheritance\r\n\t\tbutton.zIndex = 100;\r\n\r\n\t\tbutton.events.on(\"drag\", this.handleGripDrag, this, false);\r\n\t\tbutton.events.on(\"dragstop\", this.makeUnbusy, this, false);\r\n\t\tbutton.events.on(\"down\", this.makeBusy, this, false);\r\n\t\tbutton.events.on(\"up\", this.makeUnbusy, this, false);\r\n\r\n\t\tthis._disposers.push(button);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positions of related elements after grip element is dragged.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleGripDrag(event: AMEvent<ResizeButton, ISpriteEvents>[\"drag\"]): void {\r\n\t\tthis.makeBusy();\r\n\r\n\t\tif (event.target === this._startGrip) {\r\n\t\t\tthis._usingGrip = \"start\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._usingGrip = \"end\";\r\n\t\t}\r\n\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tthis._start = this.startGrip.pixelX / this.innerWidth;\r\n\t\t\tthis._end = this.endGrip.pixelX / this.innerWidth;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._start = 1 - this.startGrip.pixelY / this.innerHeight;\r\n\t\t\tthis._end = 1 - this.endGrip.pixelY / this.innerHeight;\r\n\t\t}\r\n\r\n\t\tthis.updateThumb();\r\n\t}\r\n\r\n\t/**\r\n\t * A \"thumb\" element.\r\n\t *\r\n\t * It's a draggable square space between the grips, that can be used to\r\n\t * pan the selection.\r\n\t *\r\n\t * @param thumb  Thumb element\r\n\t */\r\n\tpublic set thumb(thumb: Button) {\r\n\t\tif (thumb) {\r\n\r\n\t\t\tif (this._thumb) {\r\n\t\t\t\tthis.removeDispose(this._thumb);\r\n\t\t\t}\r\n\r\n\t\t\tthis._thumb = thumb;\r\n\t\t\tthumb.parent = this;\r\n\t\t\tthumb.isMeasured = false;\r\n\t\t\tthumb.inert = true;\r\n\t\t\tthumb.draggable = true;\r\n\t\t\tthumb.clickable = true;\r\n\t\t\tthumb.hoverable = true;\r\n\t\t\tthumb.focusable = true;\r\n\t\t\tthumb.shouldClone = false;\r\n\t\t\tthumb.zIndex = 0;\r\n\r\n\t\t\t// TODO remove closures ?\r\n\t\t\t// Add events\r\n\r\n\t\t\t// Add cursor styles to thumb\r\n\t\t\tthumb.cursorOverStyle = MouseCursorStyle.grab;\r\n\t\t\tthumb.cursorDownStyle = MouseCursorStyle.grabbing;\r\n\r\n\t\t\tthumb.events.on(\"dragstart\", this.makeBusy, this, false);\r\n\t\t\tthumb.events.on(\"dragstop\", this.makeUnbusy, this, false);\r\n\t\t\tthumb.events.on(\"positionchanged\", this.handleThumbPosition, this, false);\r\n\t\t\tthumb.events.on(\"sizechanged\", this.handleThumbPosition, this, false);\r\n\t\t\tthumb.events.on(\"doublehit\", this.handleDoubleClick, this, false);\r\n\r\n\t\t\t// Add event for space and ENTER to toggle full zoom out and back\r\n\t\t\t// (same as doubleclick)\r\n\t\t\tthis._disposers.push(getInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\t\tif (keyboard.isKey(ev.event, [\"space\", \"enter\"]) && this.thumb.isFocused) {\r\n\t\t\t\t\tev.event.preventDefault();\r\n\t\t\t\t\tthis.handleDoubleClick();\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tthis._disposers.push(this._thumb);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Thumb element\r\n\t */\r\n\tpublic get thumb(): Button {\r\n\t\tif (!this._thumb) {\r\n\t\t\t// Create scrollbar controls (setters will handle adding disposers)\r\n\t\t\tlet thumb = new Button();\r\n\t\t\tthumb.background.cornerRadius(10, 10, 10, 10);\r\n\t\t\tthumb.padding(0, 0, 0, 0);\r\n\t\t\tthis.thumb = thumb;\r\n\t\t}\r\n\t\treturn this._thumb;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms-in and out the selection on double-click of the thumb.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDoubleClick(): void {\r\n\r\n\t\tthis.makeBusy();\r\n\r\n\t\tlet newStart: number = 0;\r\n\t\tlet newEnd: number = 1;\r\n\r\n\t\tif (this.start != 0 || this.end != 1) {\r\n\t\t\tthis._prevStart = this.start;\r\n\t\t\tthis._prevEnd = this.end;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tnewStart = this._prevStart;\r\n\t\t\tnewEnd = this._prevEnd;\r\n\t\t}\r\n\r\n\t\tlet zoomAnimation = this.animate([{ property: \"__start\", to: newStart }, { property: \"__end\", to: newEnd }], this.animationDuration, this.animationEasing);\r\n\r\n\t\tif (zoomAnimation && !zoomAnimation.isFinished()) {\r\n\t\t\tzoomAnimation.events.on(\"animationended\", this.makeUnbusy, this, false);\r\n\t\t\tthis._zoomAnimation = zoomAnimation;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.makeUnbusy();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positions of other elements when thumb is moved.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleThumbPosition(): void {\r\n\t\tlet thumb = this.thumb;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tlet innerWidth = this.innerWidth;\r\n\t\t\tlet w = thumb.innerWidth;\r\n\t\t\tlet x = thumb.pixelX;\r\n\r\n\t\t\tthis._start = x / innerWidth;\r\n\t\t\tthis._end = (x + w) / innerWidth;\r\n\t\t\tthis.updateThumb();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet innerHeight = this.innerHeight;\t\t\t\r\n\t\t\tlet h = thumb.innerHeight;\r\n\t\t\tlet y = thumb.pixelY;\r\n\t\t\t\r\n\t\t\tif(y + h > innerHeight){\r\n\t\t\t\ty = innerHeight - h;\r\n\t\t\t\tthumb.y = y;\r\n\t\t\t}\r\n\r\n\t\t\tthis._start = 1 - (y + h) / innerHeight;\r\n\t\t\tthis._end = 1 - y / innerHeight;\r\n\r\n\r\n\t\t\tthis.updateThumb();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a background element for the scrollbar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Background\r\n\t */\r\n\tpublic createBackground(): this[\"_background\"] {\r\n\t\treturn new RoundedRectangle();\r\n\t}\r\n\r\n\t/**\r\n\t * Use this property to set whether grips should be always visible (`false`),\r\n\t * or they should just appear on scrollbar hover (`true`).\r\n\t *\r\n\t * @param value  Show only on hover?\r\n\t */\r\n\tpublic set hideGrips(value: boolean) {\r\n\r\n\t\tthis._hideGrips = value;\r\n\r\n\t\tif (this._overDisposer) {\r\n\t\t\tthis.removeDispose(this._overDisposer);\r\n\t\t}\r\n\t\tif (this._outDisposer) {\r\n\t\t\tthis.removeDispose(this._outDisposer);\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tthis._overDisposer = this.events.on(\"over\", () => {\r\n\t\t\t\tthis.startGrip.show();\r\n\t\t\t\tthis.endGrip.show();\r\n\t\t\t}, undefined, false)\r\n\t\t\tthis._outDisposer = this.events.on(\"out\", () => {\r\n\t\t\t\tthis.startGrip.hide();\r\n\t\t\t\tthis.endGrip.hide();\r\n\t\t\t}, undefined, false)\r\n\t\t\tthis.startGrip.hide();\r\n\t\t\tthis.endGrip.hide();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.startGrip.show();\r\n\t\t\tthis.endGrip.show();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Show only on hover?\r\n\t */\r\n\tpublic get hideGrips(): boolean {\r\n\t\treturn this._hideGrips;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Duration in milliseconds of scrollbar animation (happens when user clicks on a background of a scrollbar)\r\n\t * @default 0\r\n\t * @param value number\r\n\t */\r\n\tpublic set animationDuration(value: number) {\r\n\t\tthis.setPropertyValue(\"animationDuration\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get animationDuration(): number {\r\n\t\treturn this.getPropertyValue(\"animationDuration\");\r\n\t}\r\n\r\n\t/**\r\n\t * Animation easing function.\r\n\t * @todo: review description and default\r\n\t * @default $ease.cubicOut\r\n\t * @param value (value: number) => number\r\n\t */\r\n\tpublic set animationEasing(value: (value: number) => number) {\r\n\t\tthis.setPropertyValue(\"animationEasing\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Function}\r\n\t */\r\n\tpublic get animationEasing(): (value: number) => number {\r\n\t\treturn this.getPropertyValue(\"animationEasing\");\r\n\t}\r\n\r\n\t/**\r\n\t * Adds easing functions to \"function\" fields.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as function?\r\n\t */\r\n\tprotected asFunction(field: string): boolean {\r\n\t\treturn field == \"animationEasing\" || super.asIs(field);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Scrollbar\"] = Scrollbar;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}