{"ast":null,"code":"/**\r\n * Radar column series module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { ColumnSeries, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\nimport { visualProperties } from \"../../core/Sprite\";\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\nimport { RadarColumn } from \"../elements/RadarColumn\";\nimport { registry } from \"../../core/Registry\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $object from \"../../core/utils/Object\";\nimport { Percent } from \"../../core/utils/Percent\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar RadarColumnSeriesDataItem = /** @class */function (_super) {\n  __extends(RadarColumnSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function RadarColumnSeriesDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"ColumnSeriesDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return RadarColumnSeriesDataItem;\n}(ColumnSeriesDataItem);\nexport { RadarColumnSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\nvar RadarColumnSeries = /** @class */function (_super) {\n  __extends(RadarColumnSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n  function RadarColumnSeries() {\n    var _this = _super.call(this) || this;\n    _this.className = \"RadarColumnSeries\";\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Creates and returns a RadarColumn element to use as column in radar chart.\r\n   *\r\n   * @return RadarColumn.\r\n   */\n  RadarColumnSeries.prototype.createColumnTemplate = function () {\n    return new RadarColumn();\n  };\n  /**\r\n   * (Re)validates the whole series, effectively causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  RadarColumnSeries.prototype.validate = function () {\n    // so that radius would be updated\n    if (this.chart.invalid) {\n      this.chart.validate();\n    }\n    _super.prototype.validate.call(this);\n  };\n  /**\r\n   * @ignore\r\n   */\n  RadarColumnSeries.prototype.disableUnusedColumns = function (dataItem) {\n    if (dataItem) {\n      if (dataItem.column) {\n        dataItem.column.__disabled = true;\n      }\n      $iter.each(this.axisRanges.iterator(), function (axisRange) {\n        var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\n        if (rangeColumn) {\n          rangeColumn.__disabled = true;\n        }\n      });\n    }\n  };\n  /**\r\n   * Validates data item's element, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n  RadarColumnSeries.prototype.validateDataElementReal = function (dataItem) {\n    var _this = this;\n    var startAngle = this.chart.startAngle;\n    var endAngle = this.chart.endAngle;\n    var yField = this.yField;\n    var yOpenField = this.yOpenField;\n    var xField = this.xField;\n    var xOpenField = this.xOpenField;\n    var lAngle;\n    var rAngle;\n    var tRadius;\n    var bRadius;\n    var startLocation = this.getStartLocation(dataItem);\n    var endLocation = this.getEndLocation(dataItem);\n    var cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\n    var radarColumn = dataItem.column;\n    if (!radarColumn) {\n      radarColumn = this.columns.create();\n      dataItem.column = radarColumn;\n      $object.copyProperties(this, radarColumn, visualProperties); // need this \n      $object.copyProperties(this.columns.template, radarColumn, visualProperties); // second time, no force, so that columns.template would override series properties\t\t\t\n      dataItem.addSprite(radarColumn);\n      radarColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\n      this.setColumnStates(radarColumn);\n    }\n    var width = radarColumn.width;\n    var percentWidth = 100;\n    if (width instanceof Percent) {\n      percentWidth = width.percent;\n    }\n    var offset = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\n    startLocation += offset;\n    endLocation -= offset;\n    // two category axes\n    if (this.xAxis instanceof CategoryAxis && this.yAxis instanceof CategoryAxis) {\n      tRadius = $math.getDistance({\n        x: this.yAxis.getX(dataItem, yField, 0, \"valueY\"),\n        y: this.yAxis.getY(dataItem, yField, 0, \"valueY\")\n      });\n      bRadius = $math.getDistance({\n        x: this.yAxis.getX(dataItem, yOpenField, 1, \"valueY\"),\n        y: this.yAxis.getY(dataItem, yOpenField, 1, \"valueY\")\n      });\n      lAngle = this.xAxis.getAngle(dataItem, xOpenField, 0, \"valueX\");\n      rAngle = this.xAxis.getAngle(dataItem, xField, 1, \"valueX\");\n      startAngle = startAngle + startLocation * cellAngle;\n      endAngle = endAngle - (1 - endLocation) * cellAngle;\n    } else if (this.baseAxis == this.xAxis) {\n      tRadius = $math.getDistance({\n        x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"),\n        y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\")\n      });\n      bRadius = $math.getDistance({\n        x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"),\n        y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\")\n      });\n      lAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\n      rAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\n      startAngle = startAngle + startLocation * cellAngle;\n      endAngle = endAngle - (1 - endLocation) * cellAngle;\n    } else {\n      tRadius = $math.getDistance({\n        x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"),\n        y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\")\n      });\n      bRadius = $math.getDistance({\n        x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"),\n        y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\")\n      });\n      if ($type.isNumber(width)) {\n        var abs = Math.abs(tRadius - bRadius);\n        if (abs > width) {\n          var d = (abs - width) / 2;\n          tRadius += d;\n          bRadius -= d;\n        }\n      }\n      lAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\n      rAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\n    }\n    if (rAngle < lAngle) {\n      var temp = rAngle;\n      rAngle = lAngle;\n      lAngle = temp;\n    }\n    lAngle = $math.fitToRange(lAngle, startAngle, endAngle);\n    rAngle = $math.fitToRange(rAngle, startAngle, endAngle);\n    var slice = radarColumn.radarColumn;\n    slice.startAngle = lAngle;\n    var arc = rAngle - lAngle;\n    if (arc > 0) {\n      slice.arc = arc;\n      slice.radius = tRadius;\n      slice.innerRadius = bRadius;\n      radarColumn.__disabled = false;\n      radarColumn.parent = this.columnsContainer;\n      $iter.each(this.axisRanges.iterator(), function (axisRange) {\n        var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\n        if (!rangeColumn) {\n          rangeColumn = _this.columns.create();\n          $object.forceCopyProperties(_this.columns.template, rangeColumn, visualProperties);\n          $object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\n          if (rangeColumn.dataItem) {\n            $array.remove(rangeColumn.dataItem.sprites, rangeColumn);\n          }\n          dataItem.addSprite(rangeColumn);\n          rangeColumn.paper = _this.paper; // sometimes pattern is not drawn if is set with adapter without this.\t\t\t\t\t\n          _this.setColumnStates(rangeColumn);\n          dataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\n        }\n        var slice = rangeColumn.radarColumn;\n        slice.startAngle = lAngle;\n        slice.arc = arc;\n        slice.radius = tRadius;\n        slice.innerRadius = bRadius;\n        if (slice.invalid) {\n          slice.paper = _this.paper;\n          slice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\n        }\n\n        rangeColumn.__disabled = false;\n        rangeColumn.parent = axisRange.contents;\n      });\n    } else {\n      this.disableUnusedColumns(dataItem);\n    }\n  };\n  /**\r\n   * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n   *\r\n   * @param    dataItem   Data item\r\n   * @param    xKey       Name of X data field\r\n   * @param    yKey       Name of Y data field\r\n   * @param    locationX  X location\r\n   * @param    locationY  Y location\r\n   * @param    stackKeyX  ?\r\n   * @param    stackKeyY  ?\r\n   * @returns             Coordinates\r\n   */\n  RadarColumnSeries.prototype.getPoint = function (dataItem, xKey, yKey, locationX, locationY, stackKeyX, stackKeyY) {\n    if (!stackKeyX) {\n      stackKeyX = \"valueX\";\n    }\n    if (!stackKeyY) {\n      stackKeyY = \"valueY\";\n    }\n    var x = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\n    var y = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\n    var radius = $math.getDistance({\n      x: x,\n      y: y\n    });\n    // hack to be able to determine angle later\n    if (radius == 0) {\n      radius = 0.00001;\n    }\n    var angle = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\n    return {\n      x: radius * $math.cos(angle),\n      y: radius * $math.sin(angle)\n    };\n  };\n  /**\r\n   * Returns an SVG path to be used as a mask for the series.\r\n   *\r\n   * @return SVG path\r\n   */\n  RadarColumnSeries.prototype.getMaskPath = function () {\n    var renderer = this.yAxis.renderer;\n    return $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\n  };\n  RadarColumnSeries.prototype.positionBulletReal = function (bullet, positionX, positionY) {\n    var xAxis = this.xAxis;\n    var yAxis = this.yAxis;\n    if (positionX < xAxis.start || positionX > xAxis.end || positionY < yAxis.start || positionY > yAxis.end) {\n      bullet.visible = false;\n    }\n    bullet.moveTo(this.xAxis.renderer.positionToPoint(positionX, positionY));\n  };\n  RadarColumnSeries.prototype.setXAxis = function (axis) {\n    _super.prototype.setXAxis.call(this, axis);\n    this.updateRendererRefs();\n  };\n  RadarColumnSeries.prototype.setYAxis = function (axis) {\n    _super.prototype.setYAxis.call(this, axis);\n    this.updateRendererRefs();\n  };\n  RadarColumnSeries.prototype.updateRendererRefs = function () {\n    var rendererX = this.xAxis.renderer;\n    var rendererY = this.yAxis.renderer;\n    rendererX.axisRendererY = rendererY;\n  };\n  return RadarColumnSeries;\n}(ColumnSeries);\nexport { RadarColumnSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;","map":{"version":3,"mappings":"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","names":["ColumnSeries","ColumnSeriesDataItem","visualProperties","CategoryAxis","RadarColumn","registry","$path","$math","$object","Percent","$iter","$array","$type","__extends","_super","_this","className","applyTheme","RadarColumnSeries","chart","invalid","validate","dataItem","column","__disabled","each","axisRanges","iterator","axisRange","rangeColumn","rangesColumns","getKey","uid","startAngle","endAngle","yField","yOpenField","xField","xOpenField","lAngle","rAngle","tRadius","bRadius","startLocation","getStartLocation","endLocation","getEndLocation","cellAngle","dataItems","length","end","start","radarColumn","columns","create","copyProperties","template","addSprite","paper","setColumnStates","width","percentWidth","percent","offset","round","xAxis","yAxis","getDistance","x","getX","y","getY","getAngle","baseAxis","locations","isNumber","abs","Math","d","temp","fitToRange","slice","arc","radius","innerRadius","parent","columnsContainer","forceCopyProperties","contents","remove","sprites","setKey","disableUnusedColumns","xKey","yKey","locationX","locationY","stackKeyX","stackKeyY","angle","cos","sin","renderer","pixelRadius","pixelInnerRadius","bullet","positionX","positionY","visible","moveTo","positionToPoint","axis","setXAxis","updateRendererRefs","setYAxis","rendererX","rendererY","axisRendererY","registeredClasses","RadarColumnSeriesDataItem"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\series\\RadarColumnSeries.ts"],"sourcesContent":["/**\r\n * Radar column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnSeriesAdapters extends IColumnSeriesAdapters, IRadarColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Type of data item.\r\n\t */\r\n\tpublic _dataItem: RadarColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IRadarColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a RadarColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return RadarColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new RadarColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected disableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem) {\r\n\t\t\tif (dataItem.column) {\r\n\t\t\t\tdataItem.column.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet lAngle: number;\r\n\t\tlet rAngle: number;\r\n\r\n\t\tlet tRadius: number;\r\n\t\tlet bRadius: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tlet radarColumn = dataItem.column;\r\n\t\tif (!radarColumn) {\r\n\t\t\tradarColumn = this.columns.create();\r\n\t\t\tdataItem.column = radarColumn;\r\n\t\t\t$object.copyProperties(this, radarColumn, visualProperties); // need this \r\n\t\t\t$object.copyProperties(this.columns.template, radarColumn, visualProperties); // second time, no force, so that columns.template would override series properties\t\t\t\r\n\t\t\tdataItem.addSprite(radarColumn);\r\n\t\t\tradarColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n\t\t\tthis.setColumnStates(radarColumn);\r\n\t\t}\r\n\r\n\t\tlet width = radarColumn.width;\r\n\t\tlet percentWidth = 100;\r\n\r\n\t\tif (width instanceof Percent) {\r\n\t\t\tpercentWidth = width.percent;\r\n\t\t}\r\n\r\n\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\tstartLocation += offset;\r\n\t\tendLocation -= offset;\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, 0, \"valueY\"), y: this.yAxis.getY(dataItem, yField, 0, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, 1, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, 1, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, 0, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, 1, \"valueX\");\r\n\r\n\t\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n\r\n\t\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n\r\n\t\t\tif ($type.isNumber(width)) {\t\t\t\t\r\n\t\t\t\tlet abs = Math.abs(tRadius - bRadius);\r\n\t\t\t\tif (abs > width) {\r\n\t\t\t\t\tlet d = (abs - width) / 2;\r\n\t\t\t\t\ttRadius += d;\r\n\t\t\t\t\tbRadius -= d;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n\t\t}\r\n\r\n\t\tif (rAngle < lAngle) {\r\n\t\t\tlet temp = rAngle;\r\n\t\t\trAngle = lAngle;\r\n\t\t\tlAngle = temp;\r\n\t\t}\r\n\r\n\t\tlAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n\t\trAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n\r\n\t\tlet slice = radarColumn.radarColumn;\r\n\r\n\t\tslice.startAngle = lAngle;\r\n\r\n\t\tlet arc = rAngle - lAngle;\r\n\r\n\t\tif (arc > 0) {\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.radius = tRadius;\r\n\t\t\tslice.innerRadius = bRadius;\r\n\t\t\tradarColumn.__disabled = false;\r\n\r\n\t\t\tradarColumn.parent = this.columnsContainer;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\trangeColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\t\t\t\t\t\r\n\t\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet slice = rangeColumn.radarColumn;\r\n\t\t\t\tslice.startAngle = lAngle;\r\n\t\t\t\tslice.arc = arc;\r\n\t\t\t\tslice.radius = tRadius;\r\n\t\t\t\tslice.innerRadius = bRadius;\r\n\r\n\t\t\t\tif (slice.invalid) {\r\n\t\t\t\t\tslice.paper = this.paper;\r\n\t\t\t\t\tslice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: RadarColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\t\t// hack to be able to determine angle later\r\n\t\tif (radius == 0) {\r\n\t\t\tradius = 0.00001;\r\n\t\t}\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\tprotected positionBulletReal(bullet: Sprite, positionX: number, positionY: number) {\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (positionX < xAxis.start || positionX > xAxis.end || positionY < yAxis.start || positionY > yAxis.end) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\r\n\t\tbullet.moveTo(this.xAxis.renderer.positionToPoint(positionX, positionY));\r\n\t}\r\n\r\n\tprotected setXAxis(axis: Axis) {\r\n\t\tsuper.setXAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\r\n\r\n\tprotected setYAxis(axis: Axis) {\r\n\t\tsuper.setYAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\r\n\r\n\tprotected updateRendererRefs() {\r\n\t\tlet rendererX = <AxisRendererCircular>this.xAxis.renderer;\r\n\t\tlet rendererY = <AxisRendererRadial>this.yAxis.renderer;\r\n\r\n\t\trendererX.axisRendererY = rendererY;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}