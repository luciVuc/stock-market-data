{"ast":null,"code":"/**\r\n * Module for building 3D serial charts.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { XYChart, XYChartDataItem } from \"./XYChart\";\nimport { Container } from \"../../core/Container\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\nimport { registry } from \"../../core/Registry\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar XYChart3DDataItem = /** @class */function (_super) {\n  __extends(XYChart3DDataItem, _super);\n  function XYChart3DDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"XYChart3DDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return XYChart3DDataItem;\n}(XYChartDataItem);\nexport { XYChart3DDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\nvar XYChart3D = /** @class */function (_super) {\n  __extends(XYChart3D, _super);\n  /**\r\n   * Constructor\r\n   */\n  function XYChart3D() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * Type of the axis renderer to use for X axes.\r\n     */\n    _this._axisRendererX = AxisRendererX3D;\n    /**\r\n     * Type of the axis renderer to use for Y axes.\r\n     */\n    _this._axisRendererY = AxisRendererY3D;\n    _this.className = \"XYChart3D\";\n    // Set defaults\n    _this.depth = 30;\n    _this.angle = 30;\n    // Creeate container for columns\n    var columnsContainer = _this.seriesContainer.createChild(Container);\n    columnsContainer.shouldClone = false;\n    columnsContainer.isMeasured = false;\n    columnsContainer.layout = \"none\";\n    _this.columnsContainer = columnsContainer;\n    _this.columnsContainer.mask = _this.createChild(Sprite);\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * This is done because for some reason IE doesn't change mask if path of a\r\n   * mask changes.\r\n   */\n  XYChart3D.prototype.updateSeriesMasks = function () {\n    _super.prototype.updateSeriesMasks.call(this);\n    if ($utils.isIE()) {\n      var columnsContainer = this.columnsContainer;\n      var mask = columnsContainer.mask;\n      columnsContainer.mask = undefined;\n      columnsContainer.mask = mask;\n    }\n  };\n  Object.defineProperty(XYChart3D.prototype, \"depth\", {\n    /**\r\n     * @return Depth (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"depth\");\n    },\n    /**\r\n     * Depth of the 3D chart / columns in pixels.\r\n     *\r\n     * @param value  Depth (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"depth\", value);\n      this.fixLayout();\n      this.invalidateDataUsers();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart3D.prototype, \"angle\", {\n    /**\r\n     * @return Angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"angle\");\n    },\n    /**\r\n     * Angle the chart is viewed at.\r\n     *\r\n     * @todo Description (review)\r\n     * @param value  Angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"angle\", value);\n      this.fixLayout();\n      this.invalidateDataUsers();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart3D.prototype, \"dx3D\", {\n    /**\r\n     * A calculated horizontal 3D offset (px).\r\n     *\r\n     * @readonly\r\n     * @return Offset (px)\r\n     */\n    get: function () {\n      return $math.cos(this.angle) * this.depth;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart3D.prototype, \"dy3D\", {\n    /**\r\n     * A calculated vertical 3D offset (px).\r\n     *\r\n     * @readonly\r\n     * @return Offset (px)\r\n     */\n    get: function () {\n      return -$math.sin(this.angle) * this.depth;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * (Re)validates layout\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  XYChart3D.prototype.validateLayout = function () {\n    _super.prototype.validateLayout.call(this);\n    this.fixColumns();\n  };\n  /**\r\n   * Updates the layout (padding and scrollbar positions) to accommodate for\r\n   * 3D depth and angle.\r\n   */\n  XYChart3D.prototype.fixLayout = function () {\n    this.chartContainer.paddingTop = -this.dy3D;\n    this.chartContainer.paddingRight = this.dx3D;\n    if (this.scrollbarX) {\n      this.scrollbarX.dy = this.dy3D;\n      this.scrollbarX.dx = this.dx3D;\n    }\n    if (this.scrollbarY) {\n      this.scrollbarY.dy = this.dy3D;\n      this.scrollbarY.dx = this.dx3D;\n    }\n    this.fixColumns();\n    _super.prototype.fixLayout.call(this);\n  };\n  /**\r\n   * Updates column positions, offset and dimensions based on chart's angle\r\n   * and depth.\r\n   */\n  XYChart3D.prototype.fixColumns = function () {\n    var _this = this;\n    var count = 1;\n    var i = 0;\n    $iter.each(this.series.iterator(), function (series) {\n      if (series instanceof ColumnSeries3D) {\n        if (!series.clustered && i > 0) {\n          count++;\n        }\n        series.depthIndex = count - 1;\n        i++;\n      }\n    });\n    var s = 0;\n    $iter.each(this.series.iterator(), function (series) {\n      if (series instanceof ColumnSeries3D) {\n        series.depth = _this.depth / count;\n        series.angle = _this.angle;\n        if (series.columnsContainer == _this.columnsContainer) {\n          series.dx = _this.depth / count * $math.cos(_this.angle) * series.depthIndex;\n          series.dy = -_this.depth / count * $math.sin(_this.angle) * series.depthIndex;\n        }\n        var inversed_1 = false;\n        if (series.baseAxis == series.xAxis && series.xAxis.renderer.inversed || series.baseAxis == series.yAxis && series.yAxis.renderer.inversed) {\n          inversed_1 = true;\n        }\n        var i_1 = 1;\n        series.dataItems.each(function (dataItem) {\n          var column = dataItem.column;\n          if (column) {\n            if (inversed_1) {\n              column.zIndex = 1000 * (1000 - i_1) + s - series.depthIndex * 100;\n            } else {\n              column.zIndex = 1000 * i_1 + s - series.depthIndex * 100;\n            }\n          }\n          i_1++;\n        });\n        if (inversed_1) {\n          s--;\n        } else {\n          s++;\n        }\n      }\n    });\n    this.maskColumns();\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n  XYChart3D.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up series\n      if ($type.hasValue(config.series) && $type.isArray(config.series)) {\n        for (var i = 0, len = config.series.length; i < len; i++) {\n          config.series[i].type = config.series[i].type || \"ColumnSeries3D\";\n        }\n      }\n    }\n    _super.prototype.processConfig.call(this, config);\n  };\n  XYChart3D.prototype.maskColumns = function () {\n    var w = this.plotContainer.pixelWidth;\n    var h = this.plotContainer.pixelHeight;\n    var dx = this.dx3D;\n    var dy = this.dy3D;\n    var path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: dx,\n      y: dy\n    }) + $path.lineTo({\n      x: w + dx,\n      y: dy\n    }) + $path.lineTo({\n      x: w + dx,\n      y: h + dy\n    }) + $path.lineTo({\n      x: w,\n      y: h\n    }) + $path.lineTo({\n      x: w,\n      y: h\n    }) + $path.lineTo({\n      x: 0,\n      y: h\n    }) + $path.closePath();\n    var columnsContainer = this.columnsContainer;\n    if (columnsContainer && columnsContainer.mask) {\n      columnsContainer.mask.path = path;\n    }\n  };\n  return XYChart3D;\n}(XYChart);\nexport { XYChart3D };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;","map":{"version":3,"mappings":"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","names":["XYChart","XYChartDataItem","Container","Sprite","AxisRendererX3D","AxisRendererY3D","ColumnSeries3D","registry","$iter","$math","$type","$path","$utils","__extends","_super","_this","className","applyTheme","depth","angle","columnsContainer","seriesContainer","createChild","shouldClone","isMeasured","layout","mask","XYChart3D","updateSeriesMasks","isIE","undefined","Object","getPropertyValue","value","setPropertyValue","fixLayout","invalidateDataUsers","cos","sin","validateLayout","fixColumns","chartContainer","paddingTop","dy3D","paddingRight","dx3D","scrollbarX","dy","dx","scrollbarY","count","i","each","series","iterator","clustered","depthIndex","s","inversed_1","baseAxis","xAxis","renderer","inversed","yAxis","i_1","dataItems","dataItem","column","zIndex","maskColumns","config","hasValue","isArray","len","length","type","processConfig","w","plotContainer","pixelWidth","h","pixelHeight","path","moveTo","x","y","lineTo","closePath","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\types\\XYChart3D.ts"],"sourcesContent":["/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChart3DEvents;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tlet columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis.columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columnsContainer.mask = this.createChild(Sprite);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This is done because for some reason IE doesn't change mask if path of a\r\n\t * mask changes.\r\n\t */\r\n\tprotected updateSeriesMasks(): void {\r\n\t\tsuper.updateSeriesMasks();\r\n\t\tif ($utils.isIE()) {\r\n\t\t\tlet columnsContainer = this.columnsContainer;\r\n\t\t\tlet mask = columnsContainer.mask;\r\n\t\t\tcolumnsContainer.mask = undefined;\r\n\t\t\tcolumnsContainer.mask = mask;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t *\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates layout\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\r\n\t\tthis.chartContainer.paddingTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\r\n\t\tsuper.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\t\tlet i = 0;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered && i > 0) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / (count);\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tif (series.columnsContainer == this.columnsContainer) {\r\n\t\t\t\t\tseries.dx = this.depth / (count) * $math.cos(this.angle) * (series.depthIndex);\r\n\t\t\t\t\tseries.dy = -this.depth / (count) * $math.sin(this.angle) * (series.depthIndex);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet inversed = false;\r\n\t\t\t\tif ((series.baseAxis == series.xAxis && series.xAxis.renderer.inversed) || (series.baseAxis == series.yAxis && series.yAxis.renderer.inversed)) {\r\n\t\t\t\t\tinversed = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tlet column = dataItem.column;\r\n\t\t\t\t\tif (column) {\r\n\t\t\t\t\t\tif (inversed) {\r\n\t\t\t\t\t\t\tcolumn.zIndex = 1000 * (1000 - i) + s - series.depthIndex * 100;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\t\t\t\tif (inversed) {\r\n\t\t\t\t\ts--;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ts++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.maskColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\tprotected maskColumns() {\r\n\t\tlet w: number = this.plotContainer.pixelWidth;\r\n\t\tlet h: number = this.plotContainer.pixelHeight;\r\n\r\n\t\tlet dx: number = this.dx3D;\r\n\t\tlet dy: number = this.dy3D;\r\n\r\n\t\tlet path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\r\n\t\tlet columnsContainer = this.columnsContainer;\r\n\t\tif (columnsContainer && columnsContainer.mask) {\r\n\t\t\tcolumnsContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}