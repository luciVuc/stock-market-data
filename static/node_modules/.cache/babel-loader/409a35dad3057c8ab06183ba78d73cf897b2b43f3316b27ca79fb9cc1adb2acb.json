{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { dataLoader } from \"./DataLoader\";\nimport { JSONParser } from \"./JSONParser\";\nimport { CSVParser } from \"./CSVParser\";\nimport { BaseObjectEvents } from \"../Base\";\nimport { Adapter } from \"../utils/Adapter\";\nimport { Language } from \"../utils/Language\";\nimport { DateFormatter } from \"../formatters/DateFormatter\";\nimport { registry } from \"../Registry\";\nimport * as $type from \"../utils/Type\";\nimport * as $object from \"../utils/Object\";\n;\n;\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Represents a single data source - external file with all of its settings,\r\n * such as format, data parsing, etc.\r\n *\r\n * ```TypeScript\r\n * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n * chart.dataSource.parser = am4core.JSONParser;\r\n * ```\r\n * ```JavaScript\r\n * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n * chart.dataSource.parser = am4core.JSONParser;\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"dataSource\": {\r\n *     \"url\": \"http://www.myweb.com/data.json\",\r\n *     \"parser\": \"JSONParser\"\r\n *   },\r\n *   // ...\r\n * }\r\n * ```\r\n *\r\n * @see {@link IDataSourceEvents} for a list of available events\r\n * @see {@link IDataSourceAdapters} for a list of available Adapters\r\n */\nvar DataSource = /** @class */function (_super) {\n  __extends(DataSource, _super);\n  /**\r\n   * Constructor\r\n   */\n  function DataSource(url, parser) {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * Adapter.\r\n     */\n    _this.adapter = new Adapter(_this);\n    /**\r\n     * Custom options for HTTP(S) request.\r\n     */\n    _this._requestOptions = {};\n    /**\r\n     * If set to `true`, any subsequent data loads will be considered incremental\r\n     * (containing only new data points that are supposed to be added to existing\r\n     * data).\r\n     *\r\n     * NOTE: this setting works only with element's `data` property. It won't\r\n     * work with any other externally-loadable data property.\r\n     *\r\n     * @default false\r\n     */\n    _this._incremental = false;\n    /**\r\n     * A collection of key/value pairs to attach to a data source URL when making\r\n     * an incremental request.\r\n     */\n    _this._incrementalParams = {};\n    /**\r\n     * This setting is used only when `incremental = true`. If set to `true`,\r\n     * it will try to retain the same number of data items across each load.\r\n     *\r\n     * E.g. if incremental load yeilded 5 new records, then 5 items from the\r\n     * beginning of data will be removed so that we end up with the same number\r\n     * of data items.\r\n     *\r\n     * @default false\r\n     */\n    _this._keepCount = false;\n    /**\r\n     * If set to `true`, each subsequent load will be treated as an update to\r\n     * currently loaded data, meaning that it will try to update values on\r\n     * existing data items, not overwrite the whole data.\r\n     *\r\n     * This will work faster than complete update, and also will animate the\r\n     * values to their new positions.\r\n     *\r\n     * Data sources across loads must contain the same number of data items.\r\n     *\r\n     * Loader will not truncate the data set if loaded data has fewer data items,\r\n     * and if it is longer, the excess data items will be ignored.\r\n     *\r\n     * @default false\r\n     * @since 4.5.5\r\n     */\n    _this._updateCurrentData = false;\n    /**\r\n     * Will show loading indicator when loading files.\r\n     */\n    _this.showPreloader = true;\n    _this.className = \"DataSource\";\n    // Set defaults\n    if (url) {\n      _this.url = url;\n    }\n    // Set parser\n    if (parser) {\n      if (typeof parser == \"string\") {\n        _this.parser = dataLoader.getParserByType(parser);\n      } else {\n        _this.parser = parser;\n      }\n    }\n    return _this;\n  }\n  /**\r\n   * Processes the loaded data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param data         Raw (unparsed) data\r\n   * @param contentType  Content type of the loaded data (optional)\r\n   */\n  DataSource.prototype.processData = function (data, contentType) {\n    // Parsing started\n    this.dispatchImmediately(\"parsestarted\");\n    // Check if parser is set\n    if (!this.parser) {\n      // Try to resolve from data\n      this.parser = dataLoader.getParserByData(data, contentType);\n      if (!this.parser) {\n        // We have a problem - nobody knows what to do with the data\n        // Raise error\n        if (this.events.isEnabled(\"parseerror\")) {\n          var event_1 = {\n            type: \"parseerror\",\n            message: this.language.translate(\"No parser available for file: %1\", null, this.url),\n            target: this\n          };\n          this.events.dispatchImmediately(\"parseerror\", event_1);\n        }\n        this.dispatchImmediately(\"parseended\");\n        return;\n      }\n    }\n    // Apply options adapters\n    this.parser.options = this.adapter.apply(\"parserOptions\", this.parser.options);\n    this.parser.options.dateFields = this.adapter.apply(\"dateFields\", this.parser.options.dateFields || []);\n    this.parser.options.numberFields = this.adapter.apply(\"numberFields\", this.parser.options.numberFields || []);\n    // Check if we need to pass in date formatter\n    if (this.parser.options.dateFields && !this.parser.options.dateFormatter) {\n      this.parser.options.dateFormatter = this.dateFormatter;\n    }\n    // Parse\n    this.data = this.adapter.apply(\"parsedData\", this.parser.parse(this.adapter.apply(\"unparsedData\", data)));\n    // Check for parsing errors\n    if (!$type.hasValue(this.data) && this.events.isEnabled(\"parseerror\")) {\n      var event_2 = {\n        type: \"parseerror\",\n        message: this.language.translate(\"Error parsing file: %1\", null, this.url),\n        target: this\n      };\n      this.events.dispatchImmediately(\"parseerror\", event_2);\n    }\n    // Wrap up\n    this.dispatchImmediately(\"parseended\");\n    if ($type.hasValue(this.data)) {\n      this.dispatchImmediately(\"done\", {\n        \"data\": this.data\n      });\n    }\n    // The component is responsible for updating its own data vtriggered via\n    // events.\n    // Update last data load\n    this.lastLoad = new Date();\n  };\n  Object.defineProperty(DataSource.prototype, \"url\", {\n    /**\r\n     * @return URL\r\n     */\n    get: function () {\n      // Get URL\n      var url = this.disableCache ? this.timestampUrl(this._url) : this._url;\n      // Add incremental params\n      if (this.incremental && this.component.data.length) {\n        url = this.addUrlParams(url, this.incrementalParams);\n      }\n      return this.adapter.apply(\"url\", url);\n    },\n    /**\r\n     * URL of the data source.\r\n     *\r\n     * @param value  URL\r\n     */\n    set: function (value) {\n      this._url = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"requestOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      return this.adapter.apply(\"requestOptions\", this._requestOptions);\n    },\n    /**\r\n     * Custom options for HTTP(S) request.\r\n     *\r\n     * At this moment the only option supported is: `requestHeaders`, which holds\r\n     * an array of objects for custom request headers, e.g.:\r\n     *\r\n     * ```TypeScript\r\n     * chart.dataSource.requestOptions.requestHeaders = [{\r\n     *   \"key\": \"x-access-token\",\r\n     *   \"value\": \"123456789\"\r\n     * }];\r\n     * ``````JavaScript\r\n     * chart.dataSource.requestOptions.requestHeaders = [{\r\n     *   \"key\": \"x-access-token\",\r\n     *   \"value\": \"123456789\"\r\n     * }];\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"dataSource\": {\r\n     *     // ...\r\n     *     \"requestOptions\": {\r\n     *       \"requestHeaders\": [{\r\n     *         \"key\": \"x-access-token\",\r\n     *         \"value\": \"123456789\"\r\n     *       }]\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * NOTE: setting this options on an-already loaded DataSource will not\r\n     * trigger a reload.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._requestOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"parser\", {\n    /**\r\n     * @return Data parser\r\n     */\n    get: function () {\n      if (!this._parser) {\n        this._parser = new JSONParser();\n      }\n      return this.adapter.apply(\"parser\", this._parser);\n    },\n    /**\r\n     * A parser to be used to parse data.\r\n     *\r\n     * ```TypeScript\r\n     * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n     * chart.dataSource.parser = am4core.JSONParser;\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n     * chart.dataSource.parser = am4core.JSONParser;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"dataSource\": {\r\n     *     \"url\": \"http://www.myweb.com/data.json\",\r\n     *     \"parser\": {\r\n     *       \"type\": \"JSONParser\"\r\n     *     }\r\n     *   },\r\n     *   // ...\r\n     * }\r\n     * ```\r\n     *\r\n     * @default JSONParser\r\n     * @param value  Data parser\r\n     */\n    set: function (value) {\n      this._parser = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"reloadFrequency\", {\n    /**\r\n     * @return Reload frequency (ms)\r\n     */\n    get: function () {\n      return this.adapter.apply(\"reloadTimeout\", this._reloadFrequency);\n    },\n    /**\r\n     * Data source reload frequency.\r\n     *\r\n     * If set, it will reload the same URL every X milliseconds.\r\n     *\r\n     * @param value Reload frequency (ms)\r\n     */\n    set: function (value) {\n      var _this = this;\n      if (this._reloadFrequency != value) {\n        this._reloadFrequency = value;\n        // Should we schedule a reload?\n        if (value) {\n          if (!$type.hasValue(this._reloadDisposer)) {\n            this._reloadDisposer = this.events.on(\"ended\", function (ev) {\n              _this._reloadTimeout = setTimeout(function () {\n                _this.load();\n              }, _this.reloadFrequency);\n            });\n          }\n        } else if ($type.hasValue(this._reloadDisposer)) {\n          this._reloadDisposer.dispose();\n          this._reloadDisposer = undefined;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"incremental\", {\n    /**\r\n     * @return Incremental load?\r\n     */\n    get: function () {\n      return this.adapter.apply(\"incremental\", this._incremental);\n    },\n    /**\r\n     * Should subsequent reloads be treated as incremental?\r\n     *\r\n     * Incremental loads will assume that they contain only new data items\r\n     * since the last load.\r\n     *\r\n     * If `incremental = false` the loader will replace all of the target's\r\n     * data with each load.\r\n     *\r\n     * This setting does not have any effect trhe first time data is loaded.\r\n     *\r\n     * NOTE: this setting works only with element's `data` property. It won't\r\n     * work with any other externally-loadable data property.\r\n     *\r\n     * @default false\r\n     * @param Incremental load?\r\n     */\n    set: function (value) {\n      this._incremental = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"incrementalParams\", {\n    /**\r\n     * @return Incremental request parameters\r\n     */\n    get: function () {\n      return this.adapter.apply(\"incrementalParams\", this._incrementalParams);\n    },\n    /**\r\n     * An object consisting of key/value pairs to apply to an URL when data\r\n     * source is making an incremental request.\r\n     *\r\n     * @param value  Incremental request parameters\r\n     */\n    set: function (value) {\n      this._incrementalParams = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"keepCount\", {\n    /**\r\n     * @return keepCount load?\r\n     */\n    get: function () {\n      return this.adapter.apply(\"keepCount\", this._keepCount);\n    },\n    /**\r\n     * This setting is used only when `incremental = true`. If set to `true`,\r\n     * it will try to retain the same number of data items across each load.\r\n     *\r\n     * E.g. if incremental load yeilded 5 new records, then 5 items from the\r\n     * beginning of data will be removed so that we end up with the same number\r\n     * of data items.\r\n     *\r\n     * @default false\r\n     * @param Keep record count?\r\n     */\n    set: function (value) {\n      this._keepCount = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"updateCurrentData\", {\n    /**\r\n     * @return Update current data?\r\n     */\n    get: function () {\n      return this.adapter.apply(\"updateCurrentData\", this._updateCurrentData);\n    },\n    /**\r\n     * If set to `true`, each subsequent load will be treated as an update to\r\n     * currently loaded data, meaning that it will try to update values on\r\n     * existing data items, not overwrite the whole data.\r\n     *\r\n     * This will work faster than complete update, and also will animate the\r\n     * values to their new positions.\r\n     *\r\n     * Data sources across loads must contain the same number of data items.\r\n     *\r\n     * Loader will not truncate the data set if loaded data has fewer data items,\r\n     * and if it is longer, the excess data items will be ignored.\r\n     *\r\n     * NOTE: this setting is ignored if `incremental = true`.\r\n     *\r\n     * @default false\r\n     * @since 2.5.5\r\n     * @param Update current data?\r\n     */\n    set: function (value) {\n      this._updateCurrentData = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"language\", {\n    /**\r\n     * @return A [[Language]] instance to be used\r\n     */\n    get: function () {\n      if (this._language) {\n        return this._language;\n      } else if (this.component) {\n        this._language = this.component.language;\n        return this._language;\n      }\n      this.language = new Language();\n      return this.language;\n    },\n    /**\r\n     * Language instance to use.\r\n     *\r\n     * Will inherit and use chart's language, if not set.\r\n     *\r\n     * @param value An instance of Language\r\n     */\n    set: function (value) {\n      this._language = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"dateFormatter\", {\n    /**\r\n     * @return A [[DateFormatter]] instance to be used\r\n     */\n    get: function () {\n      if (this._dateFormatter) {\n        return this._dateFormatter;\n      } else if (this.component) {\n        this._dateFormatter = this.component.dateFormatter;\n        return this._dateFormatter;\n      }\n      this.dateFormatter = new DateFormatter();\n      return this.dateFormatter;\n    },\n    /**\r\n     * A [[DateFormatter]] to use when parsing dates from string formats.\r\n     *\r\n     * Will inherit and use chart's DateFormatter if not ser.\r\n     *\r\n     * @param value An instance of [[DateFormatter]]\r\n     */\n    set: function (value) {\n      this._dateFormatter = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Adds current timestamp to the URL.\r\n   *\r\n   * @param url  Source URL\r\n   * @return Timestamped URL\r\n   */\n  DataSource.prototype.timestampUrl = function (url) {\n    var tstamp = new Date().getTime().toString();\n    var params = {};\n    params[tstamp] = \"\";\n    return this.addUrlParams(url, params);\n  };\n  /**\r\n   * Disposes of this object.\r\n   */\n  DataSource.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n    if (this._reloadTimeout) {\n      clearTimeout(this._reloadTimeout);\n    }\n    if ($type.hasValue(this._reloadDisposer)) {\n      this._reloadDisposer.dispose();\n      this._reloadDisposer = undefined;\n    }\n  };\n  /**\r\n   * Initiate the load.\r\n   *\r\n   * All loading in JavaScript is asynchronous. This function will trigger the\r\n   * load and will exit immediately.\r\n   *\r\n   * Use DataSource's events to watch for loaded data and errors.\r\n   */\n  DataSource.prototype.load = function () {\n    if (this.url) {\n      if (this._reloadTimeout) {\n        clearTimeout(this._reloadTimeout);\n      }\n      dataLoader.load(this);\n    }\n  };\n  /**\r\n   * Adds parameters to `url` as query strings. Will take care of proper\r\n   * separators.\r\n   *\r\n   * @param url     Source URL\r\n   * @param params  Parameters\r\n   * @return New URL\r\n   */\n  DataSource.prototype.addUrlParams = function (url, params) {\n    var join = url.match(/\\?/) ? \"&\" : \"?\";\n    var add = [];\n    $object.each(params, function (key, value) {\n      if (value != \"\") {\n        add.push(key + \"=\" + encodeURIComponent(value));\n      } else {\n        add.push(key);\n      }\n    });\n    if (add.length) {\n      return url + join + add.join(\"&\");\n    }\n    return url;\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n  DataSource.prototype.processConfig = function (config) {\n    registry.registeredClasses[\"json\"] = JSONParser;\n    registry.registeredClasses[\"JSONParser\"] = JSONParser;\n    registry.registeredClasses[\"csv\"] = CSVParser;\n    registry.registeredClasses[\"CSVParser\"] = CSVParser;\n    _super.prototype.processConfig.call(this, config);\n  };\n  return DataSource;\n}(BaseObjectEvents);\nexport { DataSource };","map":{"version":3,"mappings":"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","names":["dataLoader","JSONParser","CSVParser","BaseObjectEvents","Adapter","Language","DateFormatter","registry","$type","$object","__extends","url","parser","_super","_this","className","getParserByType","DataSource","data","contentType","dispatchImmediately","getParserByData","events","isEnabled","event_1","type","message","language","translate","target","options","adapter","apply","dateFields","numberFields","dateFormatter","parse","hasValue","event_2","lastLoad","Date","Object","disableCache","timestampUrl","_url","incremental","component","length","addUrlParams","incrementalParams","value","_requestOptions","_parser","_reloadFrequency","_reloadDisposer","on","ev","_reloadTimeout","setTimeout","load","reloadFrequency","dispose","undefined","_incremental","_incrementalParams","_keepCount","_updateCurrentData","_language","_dateFormatter","tstamp","getTime","toString","params","clearTimeout","join","match","add","each","key","push","encodeURIComponent","config","registeredClasses","processConfig"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\core\\data\\DataSource.ts"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { dataLoader } from \"./DataLoader\";\r\nimport { DataParser } from \"./DataParser\";\r\nimport { JSONParser } from \"./JSONParser\";\r\nimport { CSVParser } from \"./CSVParser\";\r\nimport { BaseObjectEvents, IBaseObjectEvents } from \"../Base\";\r\nimport { Component } from \"../Component\";\r\nimport { Adapter } from \"../utils/Adapter\";\r\nimport { AMEvent } from \"../utils/EventDispatcher\";\r\nimport { Language } from \"../utils/Language\";\r\nimport { DateFormatter } from \"../formatters/DateFormatter\";\r\nimport { INetRequestOptions } from \"../utils/Net\";\r\nimport { IDisposer } from \"../utils/Disposer\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $object from \"../utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines events for [[DataSource]].\r\n */\r\nexport interface IDataSourceEvents extends IBaseObjectEvents {\r\n\r\n\t/**\r\n\t * Invoked when loading of the data starts.\r\n\t */\r\n\tstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when loading of the data starts.\r\n\t */\r\n\tloadstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when the loading of the data finishes.\r\n\t */\r\n\tloadended: {};\r\n\r\n\t/**\r\n\t * Invoked when parsing of the loaded data starts.\r\n\t */\r\n\tparsestarted: {};\r\n\r\n\t/**\r\n\t * Invoked when parsing of the loaded data finishes.\r\n\t */\r\n\tparseended: {};\r\n\r\n\t/**\r\n\t * Invoked when loading and parsing finishes.\r\n\t */\r\n\tended: {};\r\n\r\n\t/**\r\n\t * Invoked when data source was successfully loaded and parsed.\r\n\t */\r\n\tdone: {\r\n\t\tdata: any\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when data source encounters a loading error.\r\n\t */\r\n\terror: {\r\n\t\tcode: number,\r\n\t\tmessage: string\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when data source encounters a parsing error.\r\n\t */\r\n\tparseerror: {\r\n\t\tmessage: string\r\n\t};\r\n\r\n};\r\n\r\n/**\r\n * Defines adapters for [[DataSource]].\r\n */\r\nexport interface IDataSourceAdapters {\r\n\r\n\t/**\r\n\t * Applied to a data source URL before it is loaded.\r\n\t */\r\n\turl: string;\r\n\r\n\t/**\r\n\t * Applied to a parser type, before parsing starts.\r\n\t *\r\n\t * Can be used to supply different parser than the one set/determined by\r\n\t * Data Loader.\r\n\t */\r\n\tparser: DataParser;\r\n\r\n\t/**\r\n\t * Applied to the timeout setting.\r\n\t */\r\n\treloadTimeout: number;\r\n\r\n\t/**\r\n\t * Applied to the loaded data **before** it is passed to parser.\r\n\t */\r\n\tunparsedData: string;\r\n\r\n\t/**\r\n\t * Applied to the loaded data **after** it was parsed by a parser.\r\n\t */\r\n\tparsedData: any;\r\n\r\n\t/**\r\n\t * Applied to `incremental` setting.\r\n\t */\r\n\tincremental: boolean;\r\n\r\n\t/**\r\n\t * Applied to `incrementalParams` setting.\r\n\t */\r\n\tincrementalParams: { [index: string]: string };\r\n\r\n\t/**\r\n\t * Applied to `updateCurrentData` setting.\r\n\t */\r\n\tupdateCurrentData: boolean;\r\n\r\n\t/**\r\n\t * Applied to `keepCount` setting.\r\n\t */\r\n\tkeepCount: boolean;\r\n\r\n\t/**\r\n\t * Applied to parser options.\r\n\t */\r\n\tparserOptions: any;\r\n\r\n\t/**\r\n\t * Applied to the array that lists fields in data that hold date-based values.\r\n\t */\r\n\tdateFields: string[];\r\n\r\n\t/**\r\n\t * Applied to the array that lists fields in data that hold numeric values.\r\n\t */\r\n\tnumberFields: string[];\r\n\r\n\t/**\r\n\t * Applied to the custom request options object.\r\n\t */\r\n\trequestOptions: INetRequestOptions;\r\n\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a single data source - external file with all of its settings,\r\n * such as format, data parsing, etc.\r\n *\r\n * ```TypeScript\r\n * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n * chart.dataSource.parser = am4core.JSONParser;\r\n * ```\r\n * ```JavaScript\r\n * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n * chart.dataSource.parser = am4core.JSONParser;\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"dataSource\": {\r\n *     \"url\": \"http://www.myweb.com/data.json\",\r\n *     \"parser\": \"JSONParser\"\r\n *   },\r\n *   // ...\r\n * }\r\n * ```\r\n *\r\n * @see {@link IDataSourceEvents} for a list of available events\r\n * @see {@link IDataSourceAdapters} for a list of available Adapters\r\n */\r\nexport class DataSource extends BaseObjectEvents {\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDataSourceEvents;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDataSourceAdapters;\r\n\r\n\t/**\r\n\t * Adapter.\r\n\t */\r\n\tpublic adapter: Adapter<DataSource, IDataSourceAdapters> = new Adapter<DataSource, IDataSourceAdapters>(this);\r\n\r\n\t/**\r\n\t * A [[Component]] recipient of the data.\r\n\t */\r\n\tpublic component: Component;\r\n\r\n\t/**\r\n\t * An instance of [[Language]].\r\n\t */\r\n\tprotected _language: Language;\r\n\r\n\t/**\r\n\t * An instance of [[DateFormatter]].\r\n\t */\r\n\tprotected _dateFormatter: DateFormatter;\r\n\r\n\t/**\r\n\t * An instance of parser class that can understand and parse data from the\r\n\t * source URL.\r\n\t */\r\n\tprotected _parser: DataParser;\r\n\r\n\t/**\r\n\t * An URL of the data source.\r\n\t */\r\n\tprotected _url: string;\r\n\r\n\t/**\r\n\t * Custom options for HTTP(S) request.\r\n\t */\r\n\tprotected _requestOptions: INetRequestOptions = {};\r\n\r\n\t/**\r\n\t * Reload full data source every X ms.\r\n\t */\r\n\tprotected _reloadFrequency: number;\r\n\r\n\t/**\r\n\t * Holds timeout reference for next reload.\r\n\t */\r\n\tprotected _reloadTimeout: any;\r\n\r\n\t/**\r\n\t * Holds disposer for the reload event handler.\r\n\t */\r\n\tprivate _reloadDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * If set to `true`, any subsequent data loads will be considered incremental\r\n\t * (containing only new data points that are supposed to be added to existing\r\n\t * data).\r\n\t *\r\n\t * NOTE: this setting works only with element's `data` property. It won't\r\n\t * work with any other externally-loadable data property.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tprotected _incremental: boolean = false;\r\n\r\n\t/**\r\n\t * A collection of key/value pairs to attach to a data source URL when making\r\n\t * an incremental request.\r\n\t */\r\n\tprotected _incrementalParams: { [index: string]: string } = {};\r\n\r\n\t/**\r\n\t * This setting is used only when `incremental = true`. If set to `true`,\r\n\t * it will try to retain the same number of data items across each load.\r\n\t *\r\n\t * E.g. if incremental load yeilded 5 new records, then 5 items from the\r\n\t * beginning of data will be removed so that we end up with the same number\r\n\t * of data items.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tprotected _keepCount: boolean = false;\r\n\r\n\t/**\r\n\t * If set to `true`, each subsequent load will be treated as an update to\r\n\t * currently loaded data, meaning that it will try to update values on\r\n\t * existing data items, not overwrite the whole data.\r\n\t *\r\n\t * This will work faster than complete update, and also will animate the\r\n\t * values to their new positions.\r\n\t *\r\n\t * Data sources across loads must contain the same number of data items.\r\n\t *\r\n\t * Loader will not truncate the data set if loaded data has fewer data items,\r\n\t * and if it is longer, the excess data items will be ignored.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.5.5\r\n\t */\r\n\tprotected _updateCurrentData: boolean = false;\r\n\r\n\t/**\r\n\t * Holds the date of the last load.\r\n\t */\r\n\tpublic lastLoad: Date;\r\n\r\n\t/**\r\n\t * If set to `true` it will timestamp all requested URLs to work around\r\n\t * browser cache.\r\n\t */\r\n\tpublic disableCache: boolean;\r\n\r\n\t/**\r\n\t * Will show loading indicator when loading files.\r\n\t */\r\n\tpublic showPreloader: boolean = true;\r\n\r\n\t/**\r\n\t * Loaded and parsed data.\r\n\t */\r\n\tpublic data: any;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor(url?: string, parser?: string | DataParser) {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DataSource\";\r\n\r\n\t\t// Set defaults\r\n\t\tif (url) {\r\n\t\t\tthis.url = url;\r\n\t\t}\r\n\r\n\t\t// Set parser\r\n\t\tif (parser) {\r\n\t\t\tif (typeof parser == \"string\") {\r\n\t\t\t\tthis.parser = dataLoader.getParserByType(parser);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.parser = parser;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes the loaded data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param data         Raw (unparsed) data\r\n\t * @param contentType  Content type of the loaded data (optional)\r\n\t */\r\n\tpublic processData(data: string, contentType?: string): void {\r\n\t\t// Parsing started\r\n\t\tthis.dispatchImmediately(\"parsestarted\");\r\n\r\n\t\t// Check if parser is set\r\n\t\tif (!this.parser) {\r\n\r\n\t\t\t// Try to resolve from data\r\n\t\t\tthis.parser = dataLoader.getParserByData(data, contentType);\r\n\r\n\t\t\tif (!this.parser) {\r\n\t\t\t\t// We have a problem - nobody knows what to do with the data\r\n\t\t\t\t// Raise error\r\n\t\t\t\tif (this.events.isEnabled(\"parseerror\")) {\r\n\t\t\t\t\tconst event: AMEvent<this, IDataSourceEvents>[\"parseerror\"] = {\r\n\t\t\t\t\t\ttype: \"parseerror\",\r\n\t\t\t\t\t\tmessage: this.language.translate(\"No parser available for file: %1\", null, this.url),\r\n\t\t\t\t\t\ttarget: this\r\n\t\t\t\t\t};\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"parseerror\", event);\r\n\t\t\t\t}\r\n\t\t\t\tthis.dispatchImmediately(\"parseended\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Apply options adapters\r\n\t\tthis.parser.options = this.adapter.apply(\"parserOptions\", this.parser.options);\r\n\t\tthis.parser.options.dateFields = this.adapter.apply(\"dateFields\", this.parser.options.dateFields || []);\r\n\t\tthis.parser.options.numberFields = this.adapter.apply(\"numberFields\", this.parser.options.numberFields || []);\r\n\r\n\t\t// Check if we need to pass in date formatter\r\n\t\tif (this.parser.options.dateFields && !this.parser.options.dateFormatter) {\r\n\t\t\tthis.parser.options.dateFormatter = this.dateFormatter;\r\n\t\t}\r\n\r\n\t\t// Parse\r\n\t\tthis.data = this.adapter.apply(\r\n\t\t\t\"parsedData\",\r\n\t\t\tthis.parser.parse(\r\n\t\t\t\tthis.adapter.apply(\"unparsedData\", data)\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\t// Check for parsing errors\r\n\t\tif (!$type.hasValue(this.data) && this.events.isEnabled(\"parseerror\")) {\r\n\t\t\tconst event: AMEvent<this, IDataSourceEvents>[\"parseerror\"] = {\r\n\t\t\t\ttype: \"parseerror\",\r\n\t\t\t\tmessage: this.language.translate(\"Error parsing file: %1\", null, this.url),\r\n\t\t\t\ttarget: this\r\n\t\t\t};\r\n\t\t\tthis.events.dispatchImmediately(\"parseerror\", event);\r\n\t\t}\r\n\r\n\t\t// Wrap up\r\n\t\tthis.dispatchImmediately(\"parseended\");\r\n\r\n\t\tif ($type.hasValue(this.data)) {\r\n\t\t\tthis.dispatchImmediately(\"done\", {\r\n\t\t\t\t\"data\": this.data\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// The component is responsible for updating its own data vtriggered via\r\n\t\t// events.\r\n\r\n\t\t// Update last data load\r\n\t\tthis.lastLoad = new Date();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * URL of the data source.\r\n\t *\r\n\t * @param value  URL\r\n\t */\r\n\tpublic set url(value: string) {\r\n\t\tthis._url = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return URL\r\n\t */\r\n\tpublic get url(): string {\r\n\r\n\t\t// Get URL\r\n\t\tlet url = this.disableCache\r\n\t\t\t? this.timestampUrl(this._url)\r\n\t\t\t: this._url;\r\n\r\n\t\t// Add incremental params\r\n\t\tif (this.incremental && this.component.data.length) {\r\n\t\t\turl = this.addUrlParams(url, this.incrementalParams);\r\n\t\t}\r\n\r\n\t\treturn this.adapter.apply(\"url\", url);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Custom options for HTTP(S) request.\r\n\t *\r\n\t * At this moment the only option supported is: `requestHeaders`, which holds\r\n\t * an array of objects for custom request headers, e.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.dataSource.requestOptions.requestHeaders = [{\r\n\t *   \"key\": \"x-access-token\",\r\n\t *   \"value\": \"123456789\"\r\n\t * }];\r\n\t * ``````JavaScript\r\n\t * chart.dataSource.requestOptions.requestHeaders = [{\r\n\t *   \"key\": \"x-access-token\",\r\n\t *   \"value\": \"123456789\"\r\n\t * }];\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"dataSource\": {\r\n\t *     // ...\r\n\t *     \"requestOptions\": {\r\n\t *       \"requestHeaders\": [{\r\n\t *         \"key\": \"x-access-token\",\r\n\t *         \"value\": \"123456789\"\r\n\t *       }]\r\n\t *     }\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * NOTE: setting this options on an-already loaded DataSource will not\r\n\t * trigger a reload.\r\n\t *\r\n\t * @param value  Options\r\n\t */\r\n\tpublic set requestOptions(value: INetRequestOptions) {\r\n\t\tthis._requestOptions = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Options\r\n\t */\r\n\tpublic get requestOptions(): INetRequestOptions {\r\n\t\treturn this.adapter.apply(\"requestOptions\", this._requestOptions);\r\n\t}\r\n\r\n\t/**\r\n\t * A parser to be used to parse data.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n\t * chart.dataSource.parser = am4core.JSONParser;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n\t * chart.dataSource.parser = am4core.JSONParser;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"dataSource\": {\r\n\t *     \"url\": \"http://www.myweb.com/data.json\",\r\n\t *     \"parser\": {\r\n\t *       \"type\": \"JSONParser\"\r\n\t *     }\r\n\t *   },\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default JSONParser\r\n\t * @param value  Data parser\r\n\t */\r\n\tpublic set parser(value: DataParser) {\r\n\t\tthis._parser = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Data parser\r\n\t */\r\n\tpublic get parser(): DataParser {\r\n\t\tif (!this._parser) {\r\n\t\t\tthis._parser = new JSONParser();\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"parser\", this._parser);\r\n\t}\r\n\r\n\t/**\r\n\t * Data source reload frequency.\r\n\t *\r\n\t * If set, it will reload the same URL every X milliseconds.\r\n\t *\r\n\t * @param value Reload frequency (ms)\r\n\t */\r\n\tpublic set reloadFrequency(value: number) {\r\n\t\tif (this._reloadFrequency != value) {\r\n\t\t\tthis._reloadFrequency = value;\r\n\r\n\t\t\t// Should we schedule a reload?\r\n\t\t\tif (value) {\r\n\t\t\t\tif (!$type.hasValue(this._reloadDisposer)) {\r\n\t\t\t\t\tthis._reloadDisposer = this.events.on(\"ended\", (ev) => {\r\n\t\t\t\t\t\tthis._reloadTimeout = setTimeout(() => {\r\n\t\t\t\t\t\t\tthis.load();\r\n\t\t\t\t\t\t}, this.reloadFrequency);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if ($type.hasValue(this._reloadDisposer)) {\r\n\t\t\t\tthis._reloadDisposer.dispose();\r\n\t\t\t\tthis._reloadDisposer = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Reload frequency (ms)\r\n\t */\r\n\tpublic get reloadFrequency(): number {\r\n\t\treturn this.adapter.apply(\"reloadTimeout\", this._reloadFrequency);\r\n\t}\r\n\r\n\t/**\r\n\t * Should subsequent reloads be treated as incremental?\r\n\t *\r\n\t * Incremental loads will assume that they contain only new data items\r\n\t * since the last load.\r\n\t *\r\n\t * If `incremental = false` the loader will replace all of the target's\r\n\t * data with each load.\r\n\t *\r\n\t * This setting does not have any effect trhe first time data is loaded.\r\n\t *\r\n\t * NOTE: this setting works only with element's `data` property. It won't\r\n\t * work with any other externally-loadable data property.\r\n\t *\r\n\t * @default false\r\n\t * @param Incremental load?\r\n\t */\r\n\tpublic set incremental(value: boolean) {\r\n\t\tthis._incremental = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Incremental load?\r\n\t */\r\n\tpublic get incremental(): boolean {\r\n\t\treturn this.adapter.apply(\"incremental\", this._incremental);\r\n\t}\r\n\r\n\t/**\r\n\t * An object consisting of key/value pairs to apply to an URL when data\r\n\t * source is making an incremental request.\r\n\t *\r\n\t * @param value  Incremental request parameters\r\n\t */\r\n\tpublic set incrementalParams(value: { [index: string]: string }) {\r\n\t\tthis._incrementalParams = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Incremental request parameters\r\n\t */\r\n\tpublic get incrementalParams(): { [index: string]: string } {\r\n\t\treturn this.adapter.apply(\"incrementalParams\", this._incrementalParams);\r\n\t}\r\n\r\n\t/**\r\n\t * This setting is used only when `incremental = true`. If set to `true`,\r\n\t * it will try to retain the same number of data items across each load.\r\n\t *\r\n\t * E.g. if incremental load yeilded 5 new records, then 5 items from the\r\n\t * beginning of data will be removed so that we end up with the same number\r\n\t * of data items.\r\n\t *\r\n\t * @default false\r\n\t * @param Keep record count?\r\n\t */\r\n\tpublic set keepCount(value: boolean) {\r\n\t\tthis._keepCount = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return keepCount load?\r\n\t */\r\n\tpublic get keepCount(): boolean {\r\n\t\treturn this.adapter.apply(\"keepCount\", this._keepCount);\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true`, each subsequent load will be treated as an update to\r\n\t * currently loaded data, meaning that it will try to update values on\r\n\t * existing data items, not overwrite the whole data.\r\n\t *\r\n\t * This will work faster than complete update, and also will animate the\r\n\t * values to their new positions.\r\n\t *\r\n\t * Data sources across loads must contain the same number of data items.\r\n\t *\r\n\t * Loader will not truncate the data set if loaded data has fewer data items,\r\n\t * and if it is longer, the excess data items will be ignored.\r\n\t *\r\n\t * NOTE: this setting is ignored if `incremental = true`.\r\n\t *\r\n\t * @default false\r\n\t * @since 2.5.5\r\n\t * @param Update current data?\r\n\t */\r\n\tpublic set updateCurrentData(value: boolean) {\r\n\t\tthis._updateCurrentData = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Update current data?\r\n\t */\r\n\tpublic get updateCurrentData(): boolean {\r\n\t\treturn this.adapter.apply(\"updateCurrentData\", this._updateCurrentData);\r\n\t}\r\n\r\n\t/**\r\n\t * Language instance to use.\r\n\t *\r\n\t * Will inherit and use chart's language, if not set.\r\n\t *\r\n\t * @param value An instance of Language\r\n\t */\r\n\tpublic set language(value: Language) {\r\n\t\tthis._language = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return A [[Language]] instance to be used\r\n\t */\r\n\tpublic get language(): Language {\r\n\t\tif (this._language) {\r\n\t\t\treturn this._language;\r\n\t\t}\r\n\t\telse if (this.component) {\r\n\t\t\tthis._language = this.component.language;\r\n\t\t\treturn this._language;\r\n\t\t}\r\n\t\tthis.language = new Language();\r\n\t\treturn this.language;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[DateFormatter]] to use when parsing dates from string formats.\r\n\t *\r\n\t * Will inherit and use chart's DateFormatter if not ser.\r\n\t *\r\n\t * @param value An instance of [[DateFormatter]]\r\n\t */\r\n\tpublic set dateFormatter(value: DateFormatter) {\r\n\t\tthis._dateFormatter = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return A [[DateFormatter]] instance to be used\r\n\t */\r\n\tpublic get dateFormatter(): DateFormatter {\r\n\t\tif (this._dateFormatter) {\r\n\t\t\treturn this._dateFormatter;\r\n\t\t}\r\n\t\telse if (this.component) {\r\n\t\t\tthis._dateFormatter = this.component.dateFormatter;\r\n\t\t\treturn this._dateFormatter;\r\n\t\t}\r\n\t\tthis.dateFormatter = new DateFormatter();\r\n\t\treturn this.dateFormatter;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds current timestamp to the URL.\r\n\t *\r\n\t * @param url  Source URL\r\n\t * @return Timestamped URL\r\n\t */\r\n\tpublic timestampUrl(url: string): string {\r\n\t\tlet tstamp = new Date().getTime().toString();\r\n\t\tlet params: { [index: string]: string } = {};\r\n\t\tparams[tstamp] = \"\";\r\n\t\treturn this.addUrlParams(url, params);\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes of this object.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\t\tif (this._reloadTimeout) {\r\n\t\t\tclearTimeout(this._reloadTimeout);\r\n\t\t}\r\n\t\tif ($type.hasValue(this._reloadDisposer)) {\r\n\t\t\tthis._reloadDisposer.dispose();\r\n\t\t\tthis._reloadDisposer = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Initiate the load.\r\n\t *\r\n\t * All loading in JavaScript is asynchronous. This function will trigger the\r\n\t * load and will exit immediately.\r\n\t *\r\n\t * Use DataSource's events to watch for loaded data and errors.\r\n\t */\r\n\tpublic load(): void {\r\n\t\tif (this.url) {\r\n\t\t\tif (this._reloadTimeout) {\r\n\t\t\t\tclearTimeout(this._reloadTimeout);\r\n\t\t\t}\r\n\t\t\tdataLoader.load(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds parameters to `url` as query strings. Will take care of proper\r\n\t * separators.\r\n\t *\r\n\t * @param url     Source URL\r\n\t * @param params  Parameters\r\n\t * @return New URL\r\n\t */\r\n\tpublic addUrlParams(url: string, params: { [index: string]: string }): string {\r\n\t\tlet join = url.match(/\\?/) ? \"&\" : \"?\";\r\n\t\tlet add: string[] = [];\r\n\t\t$object.each(params, (key, value) => {\r\n\t\t\tif (value != \"\") {\r\n\t\t\t\tadd.push(key + \"=\" + encodeURIComponent(value));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tadd.push(key);\r\n\t\t\t}\r\n\t\t});\r\n\t\tif (add.length) {\r\n\t\t\treturn url + join + add.join(\"&\");\r\n\t\t}\r\n\t\treturn url;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tregistry.registeredClasses[\"json\"] = JSONParser;\r\n\t\tregistry.registeredClasses[\"JSONParser\"] = JSONParser;\r\n\t\tregistry.registeredClasses[\"csv\"] = CSVParser;\r\n\t\tregistry.registeredClasses[\"CSVParser\"] = CSVParser;\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}