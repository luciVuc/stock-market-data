{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as $type from \"../util/Type\";\nimport * as $math from \"../util/Math\";\nimport * as $utils from \"../util/Utils\";\nimport { Rectangle } from \"./Rectangle\";\n/**\r\n * Draws a rectangle with rounded corners.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\nvar RoundedRectangle = /** @class */function (_super) {\n  __extends(RoundedRectangle, _super);\n  function RoundedRectangle() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Object.defineProperty(RoundedRectangle.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n      if (this.isDirty(\"cornerRadiusTL\") || this.isDirty(\"cornerRadiusTR\") || this.isDirty(\"cornerRadiusBR\") || this.isDirty(\"cornerRadiusBL\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(RoundedRectangle.prototype, \"_draw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var width = this.width();\n      var height = this.height();\n      var w = width;\n      var h = height;\n      var wSign = w / Math.abs(width);\n      var hSign = h / Math.abs(height);\n      if ($type.isNumber(w) && $type.isNumber(h)) {\n        var minSide = Math.min(w, h) / 2;\n        var crtl = $utils.relativeToValue(this.get(\"cornerRadiusTL\", 8), minSide);\n        var crtr = $utils.relativeToValue(this.get(\"cornerRadiusTR\", 8), minSide);\n        var crbr = $utils.relativeToValue(this.get(\"cornerRadiusBR\", 8), minSide);\n        var crbl = $utils.relativeToValue(this.get(\"cornerRadiusBL\", 8), minSide);\n        var maxcr = Math.min(Math.abs(w / 2), Math.abs(h / 2));\n        crtl = $math.fitToRange(crtl, 0, maxcr);\n        crtr = $math.fitToRange(crtr, 0, maxcr);\n        crbr = $math.fitToRange(crbr, 0, maxcr);\n        crbl = $math.fitToRange(crbl, 0, maxcr);\n        var display = this._display;\n        display.moveTo(crtl * wSign, 0);\n        display.lineTo(w - crtr * wSign, 0);\n        if (crtr > 0) {\n          display.arcTo(w, 0, w, crtr * hSign, crtr);\n        }\n        display.lineTo(w, h - crbr * hSign);\n        if (crbr > 0) {\n          display.arcTo(w, h, w - crbr * wSign, h, crbr);\n        }\n        display.lineTo(crbl * wSign, h);\n        if (crbl > 0) {\n          display.arcTo(0, h, 0, h - crbl * hSign, crbl);\n        }\n        display.lineTo(0, crtl * hSign);\n        if (crtl > 0) {\n          display.arcTo(0, 0, crtl * wSign, 0, crtl);\n        }\n        display.closePath();\n      }\n    }\n  });\n  Object.defineProperty(RoundedRectangle, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"RoundedRectangle\"\n  });\n  Object.defineProperty(RoundedRectangle, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Rectangle.classNames.concat([RoundedRectangle.className])\n  });\n  return RoundedRectangle;\n}(Rectangle);\nexport { RoundedRectangle };","map":{"version":3,"mappings":"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","names":["$type","$math","$utils","Rectangle","__extends","_super","_beforeChanged","isDirty","_clear","width","height","w","h","wSign","Math","abs","hSign","isNumber","minSide","min","crtl","relativeToValue","get","crtr","crbr","crbl","maxcr","fitToRange","display","_display","moveTo","lineTo","arcTo","closePath","Object","classNames","concat","RoundedRectangle","className"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\core\\render\\RoundedRectangle.ts"],"sourcesContent":["import * as $type from \"../util/Type\";\nimport * as $math from \"../util/Math\";\nimport * as $utils from \"../util/Utils\";\nimport { Rectangle, IRectangleSettings, IRectanglePrivate } from \"./Rectangle\";\n\n\nexport interface IRoundedRectangleSettings extends IRectangleSettings {\n\n\t/**\n\t * Radius of the top-left corner in pixels.\n\t */\n\tcornerRadiusTL?: number;\n\n\t/**\n\t * Radius of the top-right corner in pixels.\n\t */\n\tcornerRadiusTR?: number;\n\n\t/**\n\t * Radius of the botttom-right corner in pixels.\n\t */\n\tcornerRadiusBR?: number;\n\n\t/**\n\t * Radius of the bottom-left corner in pixels.\n\t */\n\tcornerRadiusBL?: number;\n\n}\n\nexport interface IRoundedRectanglePrivate extends IRectanglePrivate {\n}\n\n/**\n * Draws a rectangle with rounded corners.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\n * @important\n */\nexport class RoundedRectangle extends Rectangle {\n\n\tdeclare public _settings: IRoundedRectangleSettings;\n\tdeclare public _privateSettings: IRoundedRectanglePrivate;\n\n\tpublic static className: string = \"RoundedRectangle\";\n\tpublic static classNames: Array<string> = Rectangle.classNames.concat([RoundedRectangle.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"cornerRadiusTL\") || this.isDirty(\"cornerRadiusTR\") || this.isDirty(\"cornerRadiusBR\") || this.isDirty(\"cornerRadiusBL\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tpublic _draw() {\n\t\tlet width = this.width();\n\t\tlet height = this.height();\n\n\t\tlet w = width;\n\t\tlet h = height;\n\n\t\tlet wSign = w / Math.abs(width);\n\t\tlet hSign = h / Math.abs(height);\n\n\t\tif ($type.isNumber(w) && $type.isNumber(h)) {\n\n\t\t\tlet minSide = Math.min(w, h) / 2;\n\n\t\t\tlet crtl = $utils.relativeToValue(this.get(\"cornerRadiusTL\", 8), minSide);\n\t\t\tlet crtr = $utils.relativeToValue(this.get(\"cornerRadiusTR\", 8), minSide);\n\t\t\tlet crbr = $utils.relativeToValue(this.get(\"cornerRadiusBR\", 8), minSide);\n\t\t\tlet crbl = $utils.relativeToValue(this.get(\"cornerRadiusBL\", 8), minSide);\n\n\t\t\tlet maxcr = Math.min(Math.abs(w / 2), Math.abs(h / 2));\n\n\t\t\tcrtl = $math.fitToRange(crtl, 0, maxcr);\n\t\t\tcrtr = $math.fitToRange(crtr, 0, maxcr);\n\t\t\tcrbr = $math.fitToRange(crbr, 0, maxcr);\n\t\t\tcrbl = $math.fitToRange(crbl, 0, maxcr);\n\n\t\t\tconst display = this._display;\n\t\t\tdisplay.moveTo(crtl * wSign, 0);\n\t\t\tdisplay.lineTo(w - crtr * wSign, 0);\n\t\t\tif (crtr > 0) {\n\t\t\t\tdisplay.arcTo(w, 0, w, crtr * hSign, crtr);\n\t\t\t}\n\t\t\tdisplay.lineTo(w, h - crbr * hSign);\n\t\t\tif (crbr > 0) {\n\t\t\t\tdisplay.arcTo(w, h, w - crbr * wSign, h, crbr);\n\t\t\t}\n\t\t\tdisplay.lineTo(crbl * wSign, h);\n\t\t\tif (crbl > 0) {\n\t\t\t\tdisplay.arcTo(0, h, 0, h - crbl * hSign, crbl);\n\t\t\t}\n\t\t\tdisplay.lineTo(0, crtl * hSign);\n\t\t\tif (crtl > 0) {\n\t\t\t\tdisplay.arcTo(0, 0, crtl * wSign, 0, crtl);\n\t\t\t}\n\t\t\tdisplay.closePath();\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}