{"ast":null,"code":"/**\r\n * Radar chart module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { XYChart, XYChartDataItem } from \"./XYChart\";\nimport { percent, Percent } from \"../../core/utils/Percent\";\nimport { RadarSeries } from \"../series/RadarSeries\";\nimport { Container } from \"../../core/Container\";\nimport { Circle } from \"../../core/elements/Circle\";\nimport { registry } from \"../../core/Registry\";\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar RadarChartDataItem = /** @class */function (_super) {\n  __extends(RadarChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function RadarChartDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"RadarChartDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return RadarChartDataItem;\n}(XYChartDataItem);\nexport { RadarChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/radar-chart/} for documentation\r\n * @important\r\n */\nvar RadarChart = /** @class */function (_super) {\n  __extends(RadarChart, _super);\n  /**\r\n   * Constructor\r\n   */\n  function RadarChart() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * Defines X axis renderer type.\r\n     */\n    _this._axisRendererX = AxisRendererCircular;\n    /**\r\n     * Defines Y axis renderer type.\r\n     */\n    _this._axisRendererY = AxisRendererRadial;\n    /**\r\n     * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n     * @ignore Exclude from docs\r\n     */\n    _this.innerRadiusModifyer = 1;\n    /**\r\n     * @ignore\r\n     */\n    _this.mr = 1;\n    _this.className = \"RadarChart\";\n    _this.startAngle = -90;\n    _this.endAngle = 270;\n    _this.radius = percent(80);\n    _this.innerRadius = 0;\n    var radarContainer = _this.plotContainer.createChild(Container);\n    radarContainer.shouldClone = false;\n    radarContainer.layout = \"absolute\";\n    radarContainer.align = \"center\";\n    radarContainer.valign = \"middle\";\n    _this.seriesContainer.parent = radarContainer;\n    _this.radarContainer = radarContainer;\n    _this.bulletsContainer.parent = radarContainer;\n    _this.axisBulletsContainer = radarContainer;\n    _this._cursorContainer = radarContainer;\n    _this.chartContainer.events.on(\"maxsizechanged\", _this.invalidate, _this, false); // need this for the chart to change radius if legend is removed/disabled\n    _this._bulletMask = radarContainer.createChild(Circle);\n    _this._bulletMask.shouldClone = false;\n    _this._bulletMask.element = _this.paper.add(\"path\");\n    _this._bulletMask.opacity = 0;\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n  RadarChart.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Radar chart\");\n    }\n  };\n  /**\r\n   * Decorates Axis with required properties for this chart.\r\n   *\r\n   * @param axis  Axis\r\n   */\n  RadarChart.prototype.processAxis = function (axis) {\n    _super.prototype.processAxis.call(this, axis);\n    var renderer = axis.renderer;\n    renderer.gridContainer.parent = renderer;\n    renderer.breakContainer.parent = renderer;\n    axis.parent = this.radarContainer;\n    renderer.toBack();\n  };\n  /**\r\n   * Updates all X axes after range change event.\r\n   */\n  RadarChart.prototype.handleXAxisRangeChange = function () {\n    _super.prototype.handleXAxisRangeChange.call(this);\n    $iter.each(this.yAxes.iterator(), function (axis) {\n      axis.invalidate();\n    });\n  };\n  /**\r\n   * Updates all Y axes after range change event.\r\n   */\n  RadarChart.prototype.handleYAxisRangeChange = function () {\n    _super.prototype.handleYAxisRangeChange.call(this);\n    $iter.each(this.xAxes.iterator(), function (axis) {\n      axis.invalidate();\n    });\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n  RadarChart.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up cursor\n      if ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\n        config.cursor.type = \"RadarCursor\";\n      }\n      // Set up series\n      if ($type.hasValue(config.series) && $type.isArray(config.series)) {\n        for (var i = 0, len = config.series.length; i < len; i++) {\n          config.series[i].type = config.series[i].type || \"RadarSeries\";\n        }\n      }\n      // Set up axes\n      /*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n          for (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n              config.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n          }\r\n      }\r\n      if ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n          for (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n              config.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n          }\r\n      }*/\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n  /**\r\n   * Does calculations before drawing the chart.\r\n   */\n  RadarChart.prototype.beforeDraw = function () {\n    _super.prototype.beforeDraw.call(this);\n    var plotContainer = this.plotContainer;\n    var rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\n    var innerRect = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    var wr = plotContainer.innerWidth / rect.width;\n    var hr = plotContainer.innerHeight / rect.height;\n    var innerRadius = this.innerRadius;\n    if (innerRadius instanceof Percent) {\n      var value = innerRadius.value;\n      var mr = Math.min(wr, hr);\n      this.mr = mr;\n      value = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\n      innerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\n      this.innerRadiusModifyer = value / innerRadius.value;\n      innerRadius = percent(value * 100);\n    }\n    // @todo handle this when innerRadius set in pixels (do it for pie also)\n    rect = $math.getCommonRectangle([rect, innerRect]);\n    var maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\n    var diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2 || 0;\n    var radius = diameter / 2;\n    var startAngle = this.startAngle;\n    var endAngle = this.endAngle;\n    this._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\n    this._bulletMask.path = $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius);\n    $iter.each(this.xAxes.iterator(), function (axis) {\n      if (axis.renderer.useChartAngles) {\n        axis.renderer.startAngle = startAngle;\n        axis.renderer.endAngle = endAngle;\n      }\n      axis.width = diameter;\n      axis.height = diameter;\n      //axis.renderer.width = diameter;\n      //axis.renderer.height = diameter;\n      axis.renderer.pixelRadiusReal = radius;\n      //axis.renderer.innerRadius = innerRadius;\n    });\n\n    $iter.each(this.yAxes.iterator(), function (axis) {\n      axis.renderer.startAngle = startAngle;\n      axis.renderer.endAngle = endAngle;\n      axis.width = diameter;\n      axis.height = diameter;\n      //axis.renderer.width = diameter;\n      //axis.renderer.height = diameter;\n      axis.renderer.pixelRadiusReal = radius;\n      //axis.renderer.innerRadius = innerRadius;\n    });\n\n    var cursor = this.cursor;\n    if (cursor) {\n      cursor.width = diameter;\n      cursor.height = diameter;\n      cursor.startAngle = startAngle;\n      cursor.endAngle = endAngle;\n    }\n    this.radarContainer.definedBBox = {\n      x: radius * rect.x,\n      y: radius * rect.y,\n      width: radius * rect.width,\n      height: radius * rect.height\n    };\n    this.radarContainer.validatePosition();\n  };\n  /**\r\n   * Creates and returns a new Series, suitable for RadarChart.\r\n   *\r\n   * @return New Series\r\n   */\n  RadarChart.prototype.createSeries = function () {\n    return new RadarSeries();\n  };\n  Object.defineProperty(RadarChart.prototype, \"startAngle\", {\n    /**\r\n     * @return Start angle (degrees)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startAngle\");\n    },\n    /**\r\n     * Starting angle of the Radar face. (degrees)\r\n     *\r\n     * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n     * top center. (at -90 degrees)\r\n     *\r\n     * You can use `startAngle` to change this setting.\r\n     *\r\n     * E.g. setting this to 0 will make the radial axis start horizontally to\r\n     * the right, as opposed to vertical.\r\n     *\r\n     * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n     * needs to be 360.\r\n     *\r\n     * However, it's **not** necessary to do so. You can set those to lesser\r\n     * numbers, to create semi-circles.\r\n     *\r\n     * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n     * looks like a quarter of a circle.\r\n     *\r\n     * @default -90\r\n     * @param value  Start angle (degrees)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadarChart.prototype, \"endAngle\", {\n    /**\r\n     * @return End angle (degrees)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endAngle\");\n    },\n    /**\r\n     * Starting angle of the Radar face. (degrees)\r\n     *\r\n     * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n     * where it has started, forming a full 360 circle. (at 270 degrees)\r\n     *\r\n     * You can use `endAngle` to end the circle somewhere else.\r\n     *\r\n     * E.g. setting this to 180 will make the radar face end at horizontal line\r\n     * to the left off the center.\r\n     *\r\n     * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n     * needs to be 360.\r\n     *\r\n     * However, it's **not** necessary to do so. You can set those to lesser\r\n     * numbers, to create semi-circles.\r\n     *\r\n     * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n     * looks like a quarter of a circle.\r\n     *\r\n     * @default -90\r\n     * @param value  End angle (degrees)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadarChart.prototype, \"radius\", {\n    /**\r\n     * @return Outer radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n    /**\r\n     * Outer radius of the Radar face.\r\n     *\r\n     * This can either be in absolute pixel value, or relative [[Percent]].\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadarChart.prototype, \"pixelInnerRadius\", {\n    /**\r\n     * @return Inner radius in pixels\r\n     */\n    get: function () {\n      return this._pixelInnerRadius;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadarChart.prototype, \"innerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n    /**\r\n     * Inner radius of the radar face.\r\n     *\r\n     * This can either be in absolute pixel value, or relative [[Percent]].\r\n     *\r\n     * If set in Percent, it will be relative to `radius`. (outer radius)\r\n     *\r\n     * @param value Inner radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Triggers (re)rendering of the horizontal (X) axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axis Axis\r\n   */\n  RadarChart.prototype.updateXAxis = function (renderer) {\n    //do not call super!\n    if (renderer) {\n      renderer.processRenderer();\n    }\n  };\n  /**\r\n   * Triggers (re)rendering of the vertical (Y) axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axis Axis\r\n   */\n  RadarChart.prototype.updateYAxis = function (renderer) {\n    // do not call super!\n    if (renderer) {\n      renderer.processRenderer();\n    }\n  };\n  return RadarChart;\n}(XYChart);\nexport { RadarChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;","map":{"version":3,"mappings":"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","names":["XYChart","XYChartDataItem","percent","Percent","RadarSeries","Container","Circle","registry","AxisRendererCircular","AxisRendererRadial","$utils","$iter","$type","$math","$path","__extends","_super","_this","className","applyTheme","startAngle","endAngle","radius","innerRadius","radarContainer","plotContainer","createChild","shouldClone","layout","align","valign","seriesContainer","parent","bulletsContainer","axisBulletsContainer","_cursorContainer","chartContainer","events","on","invalidate","_bulletMask","element","paper","add","opacity","RadarChart","applyInternalDefaults","hasValue","readerTitle","language","translate","axis","processAxis","renderer","gridContainer","breakContainer","toBack","handleXAxisRangeChange","each","yAxes","iterator","handleYAxisRangeChange","xAxes","config","cursor","type","series","isArray","i","len","length","processConfig","beforeDraw","rect","getArcRect","innerRect","x","y","width","height","wr","innerWidth","hr","innerHeight","value","mr","Math","min","max","innerRadiusModifyer","getCommonRectangle","maxRadius","diameter","relativeRadiusToValue","_pixelInnerRadius","path","arc","useChartAngles","pixelRadiusReal","definedBBox","validatePosition","Object","getPropertyValue","setPropertyValue","setPercentProperty","processRenderer","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\types\\RadarChart.ts"],"sourcesContent":["/**\r\n * Radar chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { RadarColumnSeries } from \"../series/RadarColumnSeries\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { RadarCursor } from \"../cursors/RadarCursor\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarChart]].\r\n */\r\nexport interface IRadarChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarChart]].\r\n */\r\nexport interface IRadarChartProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Radius of the Radar face. Absolute or relative.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Radar face. Percent value is relative to radius.\r\n\t *\r\n\t * @todo review desc\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarChart]].\r\n */\r\nexport interface IRadarChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarChartAdapters extends IXYChartAdapters, IRadarChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/radar-chart/} for documentation\r\n * @important\r\n */\r\nexport class RadarChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IRadarChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: RadarSeries | RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCircular = AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererRadial = AxisRendererRadial;\r\n\r\n\t/**\r\n\t * [_cursor description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic _cursor: RadarCursor;\r\n\r\n\t/**\r\n\t * A container that holds Radar visual elements.\r\n\t */\r\n\tpublic radarContainer: Container;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic innerRadiusModifyer: number = 1;\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic mr: number = 1;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChart\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.innerRadius = 0;\r\n\r\n\t\tlet radarContainer = this.plotContainer.createChild(Container);\r\n\t\tradarContainer.shouldClone = false;\r\n\t\tradarContainer.layout = \"absolute\";\r\n\t\tradarContainer.align = \"center\";\r\n\t\tradarContainer.valign = \"middle\";\r\n\r\n\t\tthis.seriesContainer.parent = radarContainer;\r\n\t\tthis.radarContainer = radarContainer;\r\n\t\tthis.bulletsContainer.parent = radarContainer;\r\n\t\tthis.axisBulletsContainer = radarContainer;\r\n\r\n\t\tthis._cursorContainer = radarContainer;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.invalidate, this, false); // need this for the chart to change radius if legend is removed/disabled\r\n\r\n\t\tthis._bulletMask = radarContainer.createChild(Circle);\r\n\t\tthis._bulletMask.shouldClone = false;\r\n\t\tthis._bulletMask.element = this.paper.add(\"path\");\r\n\t\tthis._bulletMask.opacity = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Radar chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.radarContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tsuper.handleXAxisRangeChange();\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tsuper.handleYAxisRangeChange();\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"RadarCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"RadarSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\t/*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Does calculations before drawing the chart.\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\t\tsuper.beforeDraw();\r\n\r\n\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet wr = plotContainer.innerWidth / rect.width;\r\n\t\tlet hr = plotContainer.innerHeight / rect.height;\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tlet value = innerRadius.value;\r\n\t\t\tlet mr = Math.min(wr, hr);\r\n\r\n\t\t\tthis.mr = mr;\r\n\r\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n\r\n\t\t\tthis.innerRadiusModifyer = value / innerRadius.value;\r\n\r\n\t\t\tinnerRadius = percent(value * 100);\r\n\t\t}\r\n\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for pie also)\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\r\n\r\n\t\tlet diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2 || 0;\r\n\t\tlet radius = diameter / 2;\r\n\t\tlet startAngle = this.startAngle;\r\n\t\tlet endAngle = this.endAngle;\r\n\r\n\t\tthis._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\r\n\r\n\t\tthis._bulletMask.path = $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius);\r\n\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\tif (axis.renderer.useChartAngles) {\r\n\t\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\t\taxis.renderer.endAngle = endAngle;\r\n\t\t\t}\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\t//axis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\t//axis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\r\n\r\n\t\tlet cursor = this.cursor;\r\n\t\tif (cursor) {\r\n\t\t\tcursor.width = diameter;\r\n\t\t\tcursor.height = diameter;\r\n\t\t\tcursor.startAngle = startAngle;\r\n\t\t\tcursor.endAngle = endAngle;\r\n\t\t}\r\n\r\n\t\tthis.radarContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.radarContainer.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for RadarChart.\r\n\t *\r\n\t * @return New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new RadarSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius in pixels\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * If set in Percent, it will be relative to `radius`. (outer radius)\r\n\t *\r\n\t * @param value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}