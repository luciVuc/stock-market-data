{"ast":null,"code":"/**\r\n * Pie chart module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { PercentChart, PercentChartDataItem } from \"./PercentChart\";\nimport { percent, Percent } from \"../../core/utils/Percent\";\nimport { PieSeries } from \"../series/PieSeries\";\nimport { registry } from \"../../core/Registry\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[PieChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar PieChartDataItem = /** @class */function (_super) {\n  __extends(PieChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function PieChartDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"PieChartDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return PieChartDataItem;\n}(PercentChartDataItem);\nexport { PieChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates a Pie chart.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"PieSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czechia\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChartEvents} for a list of available Events\r\n * @see {@link IPieChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\nvar PieChart = /** @class */function (_super) {\n  __extends(PieChart, _super);\n  /**\r\n   * Constructor\r\n   */\n  function PieChart() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"PieChart\";\n    // Set defaults\n    _this.innerRadius = 0;\n    _this.radius = percent(80);\n    _this.align = \"none\";\n    _this.valign = \"none\";\n    _this.startAngle = -90;\n    _this.endAngle = 270;\n    var seriesContainer = _this.seriesContainer;\n    seriesContainer.isMeasured = true;\n    seriesContainer.valign = \"middle\";\n    seriesContainer.align = \"center\";\n    seriesContainer.layout = \"absolute\";\n    seriesContainer.width = undefined;\n    seriesContainer.height = undefined;\n    // so that the pie is always drawn, even the legend wants all the space\n    _this.chartContainer.minHeight = 50;\n    _this.chartContainer.minWidth = 50;\n    _this.chartContainer.events.on(\"maxsizechanged\", _this.updateRadius, _this, false); // need this for the chart to change radius if legend is removed/disabled\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n  PieChart.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Pie chart\");\n    }\n  };\n  /**\r\n   * (Re)validates the chart, causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  PieChart.prototype.validateLayout = function () {\n    _super.prototype.validateLayout.call(this);\n    this.updateRadius();\n  };\n  /**\r\n   * Decorates a new [[Series]] object with required parameters when it is\r\n   * added to the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n  PieChart.prototype.handleSeriesAdded = function (event) {\n    _super.prototype.handleSeriesAdded.call(this, event);\n    this._chartPixelRadius = undefined;\n    this.updateSeriesAngles();\n  };\n  PieChart.prototype.updateSeriesAngles = function () {\n    var _this = this;\n    this.series.each(function (series) {\n      series._startAngleInternal = _this.startAngle;\n      series._endAngleInternal = _this.endAngle;\n      //series.defaultState.properties.startAngle = this.startAngle;\n      //series.defaultState.properties.endAngle = this.endAngle;\n    });\n  };\n  /**\r\n   * Recalculates pie's radius, based on a number of criteria.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  PieChart.prototype.updateRadius = function () {\n    var chartCont = this.chartContainer;\n    var rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\n    var innerRect = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    var innerRadius = this.innerRadius;\n    if (innerRadius instanceof Percent) {\n      innerRect = $math.getArcRect(this.startAngle, this.endAngle, innerRadius.value);\n    }\n    // @todo handle this when innerRadius set in pixels (do it for radar also)\n    rect = $math.getCommonRectangle([rect, innerRect]);\n    var maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);\n    if (!$type.isNumber(maxRadius)) {\n      maxRadius = 0;\n    }\n    var chartRadius = $utils.relativeRadiusToValue(this.radius, maxRadius);\n    var chartPixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, maxRadius);\n    var seriesRadius = (chartRadius - chartPixelInnerRadius) / this.series.length;\n    if (chartRadius != this._chartPixelRadius || chartPixelInnerRadius != this._chartPixelInnerRadius) {\n      this._chartPixelRadius = chartRadius;\n      this._chartPixelInnerRadius = chartPixelInnerRadius;\n      //@todo: make it possible to set series radius in percent\n      $iter.each($iter.indexed(this.series.iterator()), function (a) {\n        var i = a[0];\n        var series = a[1];\n        var radius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.radius, chartRadius - chartPixelInnerRadius);\n        var innerRadius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.innerRadius, chartRadius - chartPixelInnerRadius);\n        if (!$type.isNumber(radius)) {\n          radius = chartPixelInnerRadius + seriesRadius * (i + 1);\n        }\n        if (!$type.isNumber(innerRadius)) {\n          innerRadius = chartPixelInnerRadius + seriesRadius * i;\n        }\n        series.pixelRadius = radius;\n        series.pixelInnerRadius = innerRadius;\n      });\n      this.seriesContainer.definedBBox = {\n        x: chartRadius * rect.x,\n        y: chartRadius * rect.y,\n        width: chartRadius * rect.width,\n        height: chartRadius * rect.height\n      };\n      this.seriesContainer.invalidateLayout();\n      this.bulletsContainer.x = this.seriesContainer.x;\n      this.bulletsContainer.y = this.seriesContainer.y;\n    }\n  };\n  Object.defineProperty(PieChart.prototype, \"radius\", {\n    /**\r\n     * @return Radius (px or relative)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n    /**\r\n     * Sets radius of the pie chart.\r\n     *\r\n     * Setting to a number will mean a fixed pixel radius.\r\n     *\r\n     * Setting to an instance of [[Percent]] will mean a relative radius to\r\n     * available space.\r\n     *\r\n     * E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * // Set pie chart to be at 50% of the available space\r\n     * pieChart.radius = am4core.percent(50);\r\n     * ```\r\n     * ```JavaScript\r\n     * // Set pie chart to be at 50% of the available space\r\n     * pieChart.radius = am4core.percent(50);\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // Set pie chart to be at 50% of the available space\r\n     *   \"radius\": \"50%\"\r\n     * }\r\n     * ```\r\n     *\r\n     * @default 80%\r\n     * @param value  Radius (px or relative)\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"radius\", value, true, false, 10, false)) {\n        this.invalidateLayout();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PieChart.prototype, \"innerRadius\", {\n    /**\r\n     * @return Relative inner radius (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n    /**\r\n     * Sets relative inner radius (to create a donut chart).\r\n     *\r\n     * Setting to a number will mean a fixed pixel radius.\r\n     *\r\n     * Setting to an instance of [[Percent]] will mean a relative radius to\r\n     * available space.\r\n     *\r\n     * NOTE: it's not related to `radius`.\r\n     *\r\n     * E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * // Set pie chart to be at 50% of the available space\r\n     * pieChart.innerRadius = am4core.percent(50);\r\n     * ```\r\n     * ```JavaScript\r\n     * // Set pie chart to be at 50% of the available space\r\n     * pieChart.innerRadius = am4core.percent(50);\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // Set pie chart to be at 50% of the available space\r\n     *   \"innerRadius\": \"50%\"\r\n     * }\r\n     * ```\r\n     *\r\n     * @default 0\r\n     * @param value  Relative inner radius (0-1)\r\n     * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates a new [[PieSeries]].\r\n   *\r\n   * @return New series\r\n   */\n  PieChart.prototype.createSeries = function () {\n    return new PieSeries();\n  };\n  Object.defineProperty(PieChart.prototype, \"startAngle\", {\n    /**\r\n     * @return Start angle (degrees)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startAngle\");\n    },\n    /**\r\n     * Starting angle of the Pie circle. (degrees)\r\n     *\r\n     * Normally, a pie chart begins (the left side of the first slice is drawn)\r\n     * at the top center. (at -90 degrees)\r\n     *\r\n     * You can use `startAngle` to change this setting.\r\n     *\r\n     * E.g. setting this to 0 will make the first slice be drawn to the right.\r\n     *\r\n     * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n     * needs to be 360.\r\n     *\r\n     * However, it's **not** necessary to do so. You can set to those lesser\r\n     * numbers, to create semi-circles.\r\n     *\r\n     * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n     * looks like a quarter of a circle.\r\n     *\r\n     * NOTE: This setting is not supported in a 3D pie chart.\r\n     *\r\n     * @default -90\r\n     * @param value  Start angle (degrees)\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"startAngle\", value)) {\n        this.updateRadius();\n        this.updateSeriesAngles();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PieChart.prototype, \"endAngle\", {\n    /**\r\n     * @return End angle (degrees)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endAngle\");\n    },\n    /**\r\n     * End angle of the Pie circle. (degrees)\r\n     *\r\n     * Normally, a pie chart ends (the right side of the last slice is drawn)\r\n     * at the top center. (at 270 degrees)\r\n     *\r\n     * You can use `endAngle` to change this setting.\r\n     *\r\n     * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n     * needs to be 360.\r\n     *\r\n     * However, it's **not** necessary to do so. You can set to those lesser\r\n     * numbers, to create semi-circles.\r\n     *\r\n     * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n     * looks like a quarter of a circle.\r\n     *\r\n     * NOTE: This setting is not supported in a 3D pie chart.\r\n     *\r\n     * @default 270\r\n     * @param value  End angle (degrees)\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"endAngle\", value)) {\n        this.updateRadius();\n        this.updateSeriesAngles();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PieChart;\n}(PercentChart);\nexport { PieChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"PieChart\"] = PieChart;\nregistry.registeredClasses[\"PieChartDataItem\"] = PieChartDataItem;","map":{"version":3,"mappings":"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","names":["PercentChart","PercentChartDataItem","percent","Percent","PieSeries","registry","$iter","$utils","$math","$type","__extends","_super","_this","className","applyTheme","innerRadius","radius","align","valign","startAngle","endAngle","seriesContainer","isMeasured","layout","width","undefined","height","chartContainer","minHeight","minWidth","events","on","updateRadius","PieChart","applyInternalDefaults","hasValue","readerTitle","language","translate","validateLayout","event","handleSeriesAdded","_chartPixelRadius","updateSeriesAngles","series","each","_startAngleInternal","_endAngleInternal","chartCont","rect","getArcRect","innerRect","x","y","value","getCommonRectangle","maxRadius","Math","min","innerWidth","innerHeight","isNumber","chartRadius","relativeRadiusToValue","chartPixelInnerRadius","seriesRadius","length","_chartPixelInnerRadius","indexed","iterator","a","i","pixelRadius","pixelInnerRadius","definedBBox","invalidateLayout","bulletsContainer","Object","getPropertyValue","setPercentProperty","setPropertyValue","registeredClasses","PieChartDataItem"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\types\\PieChart.ts"],"sourcesContent":["/**\r\n * Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PieSeries } from \"../series/PieSeries\";\r\nimport { IListEvents } from \"../../core/utils/List\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart]].\r\n */\r\nexport interface IPieChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart]]\r\n */\r\nexport interface IPieChartProperties extends IPercentChartProperties {\r\n\r\n\t/**\r\n\t * Outer radius of the pie.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Relative inner radius (0-1).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle pie starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle pie ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart]].\r\n */\r\nexport interface IPieChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChartAdapters extends IPercentChartAdapters, IPieChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"PieSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czechia\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChartEvents} for a list of available Events\r\n * @see {@link IPieChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IPieChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: PieSeries;\r\n\r\n\tprotected _chartPixelRadius:number;\r\n\r\n\tprotected _chartPixelInnerRadius:number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.innerRadius = 0;\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.isMeasured = true;\r\n\t\tseriesContainer.valign = \"middle\";\r\n\t\tseriesContainer.align = \"center\";\r\n\t\tseriesContainer.layout = \"absolute\";\r\n\t\tseriesContainer.width = undefined;\r\n\t\tseriesContainer.height = undefined;\r\n\r\n\t\t// so that the pie is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.updateRadius, this, false); // need this for the chart to change radius if legend is removed/disabled\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout(): void {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.updateRadius();\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[Series]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<PieSeries>[\"inserted\"]): void {\r\n\t\tsuper.handleSeriesAdded(event);\r\n\t\tthis._chartPixelRadius = undefined;\r\n\t\tthis.updateSeriesAngles();\r\n\t}\r\n\r\n\tprotected updateSeriesAngles(){\r\n\t\tthis.series.each((series)=>{\r\n\t\t\tseries._startAngleInternal = this.startAngle;\r\n\t\t\tseries._endAngleInternal = this.endAngle;\r\n\t\t\t//series.defaultState.properties.startAngle = this.startAngle;\r\n\t\t\t//series.defaultState.properties.endAngle = this.endAngle;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates pie's radius, based on a number of criteria.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRadius(): void {\r\n\r\n\t\tlet chartCont = this.chartContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, innerRadius.value);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for radar also)\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);\r\n\r\n\t\tif(!$type.isNumber(maxRadius)){\r\n\t\t\tmaxRadius = 0;\r\n\t\t}\r\n\r\n\t\tlet chartRadius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\r\n\t\tlet chartPixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, maxRadius);\r\n\r\n\t\tlet seriesRadius = (chartRadius - chartPixelInnerRadius) / this.series.length;\r\n\r\n\t\tif(chartRadius != this._chartPixelRadius || chartPixelInnerRadius != this._chartPixelInnerRadius){\r\n\t\t\tthis._chartPixelRadius = chartRadius;\r\n\t\t\tthis._chartPixelInnerRadius = chartPixelInnerRadius;\r\n\r\n\t\t\t//@todo: make it possible to set series radius in percent\r\n\t\t\t$iter.each($iter.indexed(this.series.iterator()), (a) => {\r\n\t\t\t\tlet i = a[0];\r\n\t\t\t\tlet series = a[1];\r\n\r\n\t\t\t\tlet radius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.radius, chartRadius - chartPixelInnerRadius);\r\n\t\t\t\tlet innerRadius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.innerRadius, chartRadius - chartPixelInnerRadius);\r\n\r\n\t\t\t\tif(!$type.isNumber(radius)){\r\n\t\t\t\t\tradius = chartPixelInnerRadius + seriesRadius * (i + 1);\r\n\t\t\t\t}\r\n\t\t\t\tif(!$type.isNumber(innerRadius)){\r\n\t\t\t\t\tinnerRadius = chartPixelInnerRadius + seriesRadius * i;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.pixelRadius = radius;\r\n\t\t\t\tseries.pixelInnerRadius = innerRadius;\r\n\t\t\t});\r\n\r\n\r\n\t\t\tthis.seriesContainer.definedBBox = { x: chartRadius * rect.x, y: chartRadius * rect.y, width: chartRadius * rect.width, height: chartRadius * rect.height };\r\n\t\t\tthis.seriesContainer.invalidateLayout();\r\n\r\n\t\t\tthis.bulletsContainer.x = this.seriesContainer.x;\r\n\t\t\tthis.bulletsContainer.y = this.seriesContainer.y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets radius of the pie chart.\r\n\t *\r\n\t * Setting to a number will mean a fixed pixel radius.\r\n\t *\r\n\t * Setting to an instance of [[Percent]] will mean a relative radius to\r\n\t * available space.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent(50);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent(50);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // Set pie chart to be at 50% of the available space\r\n\t *   \"radius\": \"50%\"\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 80%\r\n\t * @param value  Radius (px or relative)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif(this.setPercentProperty(\"radius\", value, true, false, 10, false)){\r\n\t\t\tthis.invalidateLayout();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px or relative)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets relative inner radius (to create a donut chart).\r\n\t *\r\n\t * Setting to a number will mean a fixed pixel radius.\r\n\t *\r\n\t * Setting to an instance of [[Percent]] will mean a relative radius to\r\n\t * available space.\r\n\t *\r\n\t * NOTE: it's not related to `radius`.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.innerRadius = am4core.percent(50);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.innerRadius = am4core.percent(50);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // Set pie chart to be at 50% of the available space\r\n\t *   \"innerRadius\": \"50%\"\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Relative inner radius (0-1)\r\n\t * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Relative inner radius (0-1)\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PieSeries]].\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart begins (the left side of the first slice is drawn)\r\n\t * at the top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the first slice be drawn to the right.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * NOTE: This setting is not supported in a 3D pie chart.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tif(this.setPropertyValue(\"startAngle\", value)){\r\n\t\t\tthis.updateRadius();\r\n\t\t\tthis.updateSeriesAngles()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart ends (the right side of the last slice is drawn)\r\n\t * at the top center. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to change this setting.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * NOTE: This setting is not supported in a 3D pie chart.\r\n\t *\r\n\t * @default 270\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tif(this.setPropertyValue(\"endAngle\", value)){\r\n\t\t\tthis.updateRadius();\r\n\t\t\tthis.updateSeriesAngles()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart\"] = PieChart;\r\nregistry.registeredClasses[\"PieChartDataItem\"] = PieChartDataItem;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}