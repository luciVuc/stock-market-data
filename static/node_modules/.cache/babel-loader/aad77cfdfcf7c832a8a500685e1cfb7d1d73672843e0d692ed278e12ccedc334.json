{"ast":null,"code":"/**\r\n * Base functionality\r\n*/\nimport { __extends } from \"tslib\";\nimport { List, ListTemplate } from \"./utils/List\";\nimport { OrderedListTemplate, SortedListTemplate } from \"./utils/SortedList\";\nimport { Dictionary, DictionaryTemplate } from \"./utils/Dictionary\";\nimport { Disposer } from \"./utils/Disposer\";\nimport { EventDispatcher } from \"./utils/EventDispatcher\";\nimport { Adapter } from \"./utils/Adapter\";\nimport { Color, color } from \"./utils/Color\";\nimport { Percent, percent } from \"./utils/Percent\";\nimport { registry } from \"./Registry\";\nimport { cache } from \"./utils/Cache\";\nimport * as $array from \"./utils/Array\";\nimport * as $object from \"./utils/Object\";\nimport * as $type from \"./utils/Type\";\n//import * as $debug from \"./utils/Debug\";\n/**\r\n * Provides base functionality for all derivative objects, like generating ids,\r\n * handling cache, etc.\r\n */\nvar BaseObject = /** @class */function () {\n  //protected _classes: { [index: string]: any } = {};\n  /**\r\n   * Constructor\r\n   * * Sets class name\r\n   */\n  function BaseObject() {\n    /**\r\n     * Indicates if this object has already been deleted. Any\r\n     * destruction/disposal code should take this into account when deciding\r\n     * wheter to run potentially costly disposal operations if they already have\r\n     * been run.\r\n     */\n    this._disposed = false;\n    /**\r\n     * List of IDisposer which will be disposed when the BaseObject is disposed.\r\n     */\n    this._disposers = [];\n    this.className = \"BaseObject\";\n    //this.debug();\n  }\n\n  BaseObject.prototype.debug = function () {\n    //$debug.debug(this);\n  };\n  Object.defineProperty(BaseObject.prototype, \"uid\", {\n    /**\r\n     * Returns object's internal unique ID.\r\n     *\r\n     * @return Unique ID\r\n     */\n    get: function () {\n      if (!this._uid) {\n        this._uid = registry.getUniqueId();\n        registry.map.setKey(this._uid, this);\n      }\n      return this._uid;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseObject.prototype, \"id\", {\n    /**\r\n     * @return Id\r\n     */\n    get: function () {\n      return this._id;\n    },\n    /**\r\n     * Sets the user-defined id of the element.\r\n     *\r\n     * @param value Id\r\n     */\n    set: function (value) {\n      //registry.map.setKey(value, this); // registry.map only stores by uid\n      this._id = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseObject.prototype, \"map\", {\n    /**\r\n     * Returns a universal collection for mapping ids with objects.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Map collection\r\n     */\n    get: function () {\n      if (!this._map) {\n        this._map = new Dictionary();\n      }\n      return this._map;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseObject.prototype, \"delayedMap\", {\n    /**\r\n     * Returns mapping for objects referenced by id in JSON config that are not yet\r\n     * available at processing time.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Map collection\r\n     */\n    get: function () {\n      if (!this._delayedMap) {\n        this._delayedMap = new Dictionary();\n      }\n      return this._delayedMap;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Logs an id and property of the target element that is not yet available\r\n   * for later assignment.\r\n   *\r\n   * @ignore\r\n   * @param  property  Property to set\r\n   * @param  id        ID of the target element\r\n   */\n  BaseObject.prototype.addDelayedMap = function (property, id) {\n    var map = this.delayedMap;\n    if (!map.hasKey(id)) {\n      map.setKey(id, []);\n    }\n    var list = map.getKey(id);\n    list.push({\n      property: property,\n      target: this\n    });\n  };\n  /**\r\n   * Processes delayed JSON config items.\r\n   *\r\n   * @ignore\r\n   */\n  BaseObject.prototype.processDelayedMap = function () {\n    var _this = this;\n    this.delayedMap.each(function (id, list) {\n      if (_this.map.hasKey(id)) {\n        var target_1 = _this.map.getKey(id);\n        $array.each(list, function (item) {\n          item.target[item.property] = target_1;\n        });\n        _this.delayedMap.removeKey(id);\n      }\n    });\n  };\n  /**\r\n   * Applies properties from all assigned themes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  BaseObject.prototype.applyTheme = function () {\n    var _this = this;\n    // TODO is this needed ?\n    if (registry) {\n      var themes = this.getCurrentThemes();\n      // TODO is this needed ?\n      if (themes) {\n        $array.each(themes, function (theme, index) {\n          theme(_this);\n        });\n      }\n    }\n  };\n  Object.defineProperty(BaseObject.prototype, \"themes\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return An array of themes\r\n     */\n    get: function () {\n      return this._themes;\n    },\n    /**\r\n     * A list of themes to be used for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value An array of themes\r\n     */\n    set: function (value) {\n      this._themes = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a list of themes that should be applied to this element. It could\r\n   * either be a list of themes set explicitly on this element, or system-wide.\r\n   *\r\n   * @return List of themes\r\n   */\n  BaseObject.prototype.getCurrentThemes = function () {\n    return this.themes || registry.themes;\n  };\n  /**\r\n   * Returns if this object has been already been disposed.\r\n   *\r\n   * @return Is disposed?\r\n   */\n  BaseObject.prototype.isDisposed = function () {\n    return this._disposed;\n  };\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n  BaseObject.prototype.dispose = function () {\n    if (!this._disposed) {\n      this._disposed = true;\n      var a = this._disposers;\n      this._disposers = null;\n      while (a.length !== 0) {\n        var disposer = a.shift();\n        disposer.dispose();\n      }\n      // Clear cache\n      this.clearCache();\n      // remove from clones list\n      if (this.clonedFrom) {\n        this.clonedFrom.clones.removeValue(this);\n      }\n      var uid = this._uid;\n      if (uid != null) {\n        registry.map.removeKey(uid);\n      }\n    }\n  };\n  /**\r\n   * Adds an IDisposer, which will be disposed when this object is disposed.\r\n   *\r\n   * @param target Object to dispose\r\n   * @ignore Exclude from docs\r\n   */\n  BaseObject.prototype.addDisposer = function (target) {\n    this._disposers.push(target);\n  };\n  /**\r\n   * Disposes disposable object and removes it from `_disposers`.\r\n   *\r\n   * @param target Object to dispose\r\n   * @ignore Exclude from docs\r\n   */\n  BaseObject.prototype.removeDispose = function (target) {\n    //if(target){\n    if (!this._disposed) {\n      var index = $array.indexOf(this._disposers, target);\n      if (index > -1) {\n        this._disposers.splice(index, 1);\n      }\n    }\n    target.dispose();\n    //}\n  };\n  /**\r\n   * Makes a copy of this object and returns the clone. Try to avoid cloning complex objects like chart, create new instances if you need them.\r\n   *\r\n   * @param cloneId  An id to use for clone (if not set a unique id will be generated)\r\n   * @returns Clone\r\n   */\n  BaseObject.prototype.clone = function (cloneId) {\n    if (!cloneId) {\n      cloneId = \"clone-\" + registry.getUniqueId();\n    }\n    var newObject = new this.constructor();\n    newObject.cloneId = cloneId;\n    newObject.copyFrom(this);\n    // add to clones list\n    // this.clones.push(newObject); // moved this to copyFrom\n    return newObject;\n  };\n  Object.defineProperty(BaseObject.prototype, \"clones\", {\n    /**\r\n     * Returns a collection of object's clones.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Clones\r\n     */\n    get: function () {\n      if (!this._clones) {\n        this._clones = new List();\n      }\n      return this._clones;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all properties and related data from different element.\r\n   *\r\n   * @param object Source element\r\n   */\n  BaseObject.prototype.copyFrom = function (object) {\n    object.clones.push(this); // do not moveValue, as it is expensive! even if there will be several items in clones list, it's not that bad.\n    this.clonedFrom = object;\n  };\n  Object.defineProperty(BaseObject.prototype, \"className\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Class name\r\n     */\n    get: function () {\n      return this._className;\n    },\n    /**\r\n     * Element's class name. (a class that was used to instantiate the element)\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Class name\r\n     */\n    set: function (value) {\n      this._className = value;\n      /*if (registry) {\r\n          registry.registeredClasses[value] = typeof this;\r\n      }*/\n    },\n\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Caches value in object's cache.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param key    Key\r\n   * @param value  Value\r\n   * @param ttl    TTL in seconds\r\n   */\n  BaseObject.prototype.setCache = function (key, value, ttl) {\n    cache.set(this.uid, key, value, ttl);\n  };\n  /**\r\n   * Retrieves cached value.\r\n   *\r\n   * If optional second padarameter is specified, it will return that value\r\n   * if cache is not available or is expired.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param key    Key\r\n   * @param value  Value to return if cache is not available\r\n   * @return Value\r\n   */\n  BaseObject.prototype.getCache = function (key, value) {\n    if (value === void 0) {\n      value = undefined;\n    }\n    return cache.get(this.uid, key, value);\n  };\n  /**\r\n   * Clears object's local cache.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  BaseObject.prototype.clearCache = function () {\n    cache.clear(this.uid);\n  };\n  /**\r\n   * Creates [[Disposer]] for `setTimeout` function call. This ensures that all\r\n   * timeouts created by the object will be cleared when object itself is\r\n   * disposed.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param fn     Callback function\r\n   * @param delay  Timeout (ms)\r\n   * @return Disposer for timeout\r\n   */\n  BaseObject.prototype.setTimeout = function (fn, delay) {\n    var _this = this;\n    var id = setTimeout(function () {\n      _this.removeDispose(disposer);\n      fn();\n    }, delay);\n    var disposer = new Disposer(function () {\n      clearTimeout(id);\n    });\n    this._disposers.push(disposer);\n    return disposer;\n  };\n  /**\r\n   * Creates [[Disposer]] for `setInterval` function call. This ensures that all\r\n   * timeouts created by the object will be cleared when object itself is\r\n   * disposed.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param fn     Callback function\r\n   * @param delay  Timeout (ms)\r\n   * @return Disposer for timeout\r\n   */\n  BaseObject.prototype.setInterval = function (fn, delay) {\n    var _this = this;\n    var id = setInterval(function () {\n      _this.removeDispose(disposer);\n      fn();\n    }, delay);\n    var disposer = new Disposer(function () {\n      clearTimeout(id);\n    });\n    this._disposers.push(disposer);\n    return disposer;\n  };\n  Object.defineProperty(BaseObject.prototype, \"config\", {\n    /**\r\n     * ==========================================================================\r\n     * JSON-BASED CONFIG PROCESSING\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Use this property to set JSON-based config. When set, triggers processing\r\n     * routine, which will go through all properties, and try to apply values,\r\n     * create instances, etc.\r\n     *\r\n     * Use this with caution, as it is a time-consuming process. It's used for\r\n     * initialchart setup only, not routine operations.\r\n     *\r\n     * @param json JSON config\r\n     */\n    set: function (config) {\n      try {\n        this.processConfig(config);\n      } catch (e) {\n        /*if (this instanceof Sprite) {\r\n            this.raiseCriticalError(e);\r\n        }*/\n        this.raiseCriticalError(e);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes the JSON config.\r\n   *\r\n   * @param json  JSON config\r\n   * @ignore Exclude from docs\r\n   */\n  BaseObject.prototype.processConfig = function (config) {\n    var _this = this;\n    if (!config) {\n      return;\n    }\n    // Get target\n    var target = this;\n    // Iterate through all of the items\n    $object.eachOrdered(config, function (configKey, value) {\n      var configValue = value;\n      // Is this a callback?\n      if (configKey == \"callback\" && typeof value == \"function\") {\n        value.call(target);\n      }\n      // Check if there's a property in target\n      if (_this.hasProperty(configKey)) {\n        var item_1;\n        // Do we have instructions to create an object?\n        // We create a new object if \"type\" key is set, but only if the\n        // target object is of different type.\n        if ($type.isObject(configValue) && $type.hasValue(configValue[\"type\"]) && (!$type.isObject(target[configKey]) || !$type.hasValue(target[configKey].className) || configValue[\"forceCreate\"] || target[configKey].className != configValue[\"type\"]) && !_this.asIs(configKey)) {\n          item_1 = _this.createClassInstance(configValue[\"type\"]);\n          // Create new instance\n          if (item_1) {\n            target[configKey] = item_1;\n          } else {\n            item_1 = target[configKey];\n          }\n        } else {\n          // Get item from the object\n          item_1 = target[configKey];\n        }\n        /**\r\n         * It is...\r\n         * --------------------------------------------------------------------\r\n         */\n        if (item_1 instanceof Adapter) {\n          // ... an Adapter, try to add handlers to it\n          // ------------------------------------------------------------------\n          _this.processAdapters(item_1, configValue);\n        } else if (item_1 instanceof EventDispatcher) {\n          // ... an EventDispatcher, try to add handlers to it\n          // ------------------------------------------------------------------\n          _this.processEvents(item_1, configValue);\n        } else if (configKey == \"locale\" && $type.isString(configValue)) {\n          // ... a locale specified as string, e.g. \"fr_FR\"\n          // ------------------------------------------------------------------\n          if (window[\"am4lang_\" + configValue]) {\n            target[configKey] = window[\"am4lang_\" + configValue];\n          }\n        } else if (configKey == \"parent\" && $type.isString(configValue)) {\n          // ... a parent referred via its it\n          // ------------------------------------------------------------------\n          var parent_1 = _this.map.getKey(configValue);\n          if (parent_1) {\n            target[configKey] = parent_1;\n          } else {\n            _this.addDelayedMap(\"parent\", configValue);\n          }\n        } else if (_this.asIs(configKey)) {\n          // ... a special field, just set it to new value\n          // ------------------------------------------------------------------\n          // (no need to add each indvidual item)\n          target[configKey] = configValue;\n        } else if (_this.asFunction(configKey) && $type.isString(configValue)) {\n          // ... a field indicating function name to look for in registry\n          // ------------------------------------------------------------------\n          if ($type.hasValue(registry.registeredClasses[configValue])) {\n            target[configKey] = registry.registeredClasses[configValue];\n          } else {\n            throw Error(\"Invalid easing function: \" + configValue);\n          }\n        } else if (configValue instanceof BaseObject) {\n          // ... a BaseObject object, we just going to use it as it is\n          // ------------------------------------------------------------------\n          target[configKey] = configValue;\n        } else if (item_1 instanceof BaseObject) {\n          // ... another child BaseObject\n          // ------------------------------------------------------------------\n          // Let's just pass in config part in and let itself deal with it\n          item_1.config = configValue;\n        } else if (item_1 instanceof ListTemplate || item_1 instanceof OrderedListTemplate || item_1 instanceof SortedListTemplate) {\n          // ... a list with template\n          // ------------------------------------------------------------------\n          // Let's see what we can do with it\n          if ($type.isArray(configValue)) {\n            // It's an array.\n            // Create a list item for entry, or try to apply properties to an\n            // existing entry if possible and it is present.\n            if (item_1 instanceof ListTemplate) {\n              _this.processListTemplate(configValue, item_1);\n            } else {\n              _this.processOrderedTemplate(configValue, item_1);\n            }\n          } else if ($type.isObject(configValue)) {\n            // It's a single oject.\n            // Treat it as a template.\n            if (configValue instanceof BaseObject) {\n              // Item is already a BaseObject, no need to process it further\n              item_1.template = configValue;\n            } else {\n              // Now let's find out if the whole object if a template, or we\n              // need to get it from `template` key\n              var templateValue = void 0;\n              if ($type.hasValue(configValue.template)) {\n                templateValue = configValue.template;\n              } else {\n                templateValue = configValue;\n              }\n              if (item_1.template instanceof BaseObject) {\n                // Template is a BaseObject so we will just let its config\n                // deal with the configuration\n                item_1.template.config = templateValue;\n              } else {\n                $object.each(templateValue, function (entryKey, entryValue) {\n                  var listItem = item_1.template[entryKey];\n                  if (listItem instanceof Adapter) {\n                    _this.processAdapters(listItem, entryValue);\n                  } else if (listItem instanceof EventDispatcher) {\n                    _this.processEvents(listItem, entryValue);\n                  } else if (listItem instanceof DictionaryTemplate) {\n                    _this.processDictionaryTemplate(listItem, entryValue);\n                  } else if (item_1.template[entryKey] instanceof BaseObject) {\n                    // Template is a BaseObject. Let it deal with its own config.\n                    item_1.template[entryKey].config = entryValue;\n                  } else if ($type.isObject(entryValue) && $type.hasValue(entryValue[\"type\"])) {\n                    listItem = _this.createClassInstance(entryValue[\"type\"]);\n                    if (listItem) {\n                      if (listItem instanceof BaseObject) {\n                        listItem.config = entryValue;\n                      }\n                      item_1.template[entryKey] = listItem;\n                    } else {\n                      item_1.template[entryKey] = entryValue;\n                    }\n                  } else if (listItem instanceof List) {\n                    // It's List, process it\n                    _this.processList(entryValue, listItem);\n                  } else {\n                    // Aything else. Just assing and be done with it.\n                    item_1.template[entryKey] = _this.maybeColorOrPercent(entryValue);\n                  }\n                });\n              }\n              // Check maybe there are `values` to insert\n              if ($type.hasValue(configValue.values)) {\n                if (item_1 instanceof ListTemplate) {\n                  _this.processListTemplate(configValue.values, item_1);\n                } else {\n                  _this.processOrderedTemplate(configValue.values, item_1);\n                }\n              }\n            }\n          } else {\n            // Something else?\n            // Not sure what to do with it on a list - ignore\n          }\n        } else if (item_1 instanceof List) {\n          // ... a list\n          // ------------------------------------------------------------------\n          if (configKey == \"children\") {\n            _this.processList(configValue, item_1, _this);\n          } else {\n            _this.processList(configValue, item_1);\n          }\n        } else if (item_1 instanceof DictionaryTemplate) {\n          // ... a dictionary with template\n          // ------------------------------------------------------------------\n          _this.processDictionaryTemplate(item_1, configValue);\n        } else if (item_1 instanceof Dictionary) {\n          // ... a dictionary\n          // ------------------------------------------------------------------\n          _this.processDictionary(item_1, configValue);\n        } else if (item_1 instanceof Color || item_1 instanceof Percent) {\n          // ... it's a Color or Percent\n          // ------------------------------------------------------------------\n          target[configKey] = _this.maybeColorOrPercent(configValue);\n        } else if ($type.isObject(item_1) && $type.isObject(configValue)) {\n          // ... a regular object\n          // ------------------------------------------------------------------\n          $object.copyAllProperties(configValue, item_1);\n        } else {\n          // ... something else - probably a simple property or object\n          // ------------------------------------------------------------------\n          // Maybe convert to `Percent` or `Color`?\n          configValue = _this.maybeColorOrPercent(configValue);\n          // Assign\n          target[configKey] = configValue;\n        }\n      } else if (!_this.isReserved(configKey)) {\n        // Doesn't have property set. But we're going to assume JSON config\n        // creator knows what he/she is doing and set it anyway.\n        target[configKey] = configValue;\n      }\n    }, this.configOrder);\n    // Any errors?\n    if (this.processingErrors.length) {\n      var errors = this.processingErrors.join(\"\\n\");\n      this._processingErrors = [];\n      throw Error(errors);\n    }\n  };\n  /**\r\n   * Tries to detect if value is color or percent and converts to proper object\r\n   * if necessary.\r\n   *\r\n   * Returns the same source value if no color/percent detected\r\n   *\r\n   * @param value  Source value\r\n   * @return Converted value\r\n   */\n  BaseObject.prototype.maybeColorOrPercent = function (value) {\n    if ($type.isString(value)) {\n      if (value.match(/^[\\-]?[0-9.]+\\%$/)) {\n        return percent($type.toNumber(value));\n      } else if (value.match(/^\\#[0-9abcdef]{3,}$/i)) {\n        return color(value);\n      }\n    }\n    return value;\n  };\n  BaseObject.prototype.processAdapters = function (item, config) {\n    var _this = this;\n    if ($type.isArray(config)) {\n      $array.each(config, function (entry, index) {\n        item.add(entry.key, entry.callback, entry.priority || 0, _this);\n      });\n    } else if ($type.isObject(config)) {\n      $object.each(config, function (key, entry) {\n        if (!item.has(key, entry)) {\n          item.add(key, entry);\n        }\n      });\n    }\n  };\n  BaseObject.prototype.processEvents = function (item, config) {\n    var _this = this;\n    if ($type.isArray(config)) {\n      $array.each(config, function (entry, index) {\n        item.on(entry.type, entry.callback, _this);\n      });\n    } else if ($type.isObject(config)) {\n      $object.each(config, function (key, entry) {\n        if (!item.has(key, entry)) {\n          item.on(key, entry);\n        }\n      });\n    }\n  };\n  /**\r\n   * Processes JSON config for a [[DictionaryTemplate]] item.\r\n   *\r\n   * @todo Description\r\n   * @param item    Item\r\n   * @param config  Config\r\n   */\n  BaseObject.prototype.processDictionaryTemplate = function (item, config) {\n    // We can only process object\n    // Not sure what to do with other types - ignore\n    if ($type.isObject(config)) {\n      // Create an entry for each item, or override properties for\n      // existing one.\n      $object.each(config, function (entryKey, entryValue) {\n        var listItem;\n        // Get existing one, or create a new one\n        if (entryKey == \"template\") {\n          listItem = item.template;\n        } else if (item.hasKey(entryKey)) {\n          listItem = item.getKey(entryKey);\n        } else {\n          listItem = item.create(entryKey);\n        }\n        // Set data\n        if (listItem instanceof BaseObject) {\n          listItem.config = entryValue;\n        } else if ($type.isObject(listItem) && $type.isObject(entryValue)) {\n          $object.copyAllProperties(entryValue, listItem);\n        } else {\n          listItem.setKey(entryKey, entryValue);\n        }\n      });\n    }\n  };\n  /**\r\n   * Processes JSON config for a [[Dictionary]] item.\r\n   *\r\n   * @todo Description\r\n   * @param item    Item\r\n   * @param config  Config\r\n   */\n  BaseObject.prototype.processDictionary = function (item, config) {\n    // We can only process object\n    // Not sure what to do with other types - ignore\n    if ($type.isObject(config)) {\n      // Create an entry for each item, or override properties for\n      // existing one.\n      // @todo support for non-basic types\n      $object.each(config, function (entryKey, entryValue) {\n        item.setKey(entryKey, entryValue);\n      });\n    }\n  };\n  /**\r\n   * Processes [[ListTemplate]].\r\n   *\r\n   * @param configValue  Config value\r\n   * @param item         Item\r\n   */\n  BaseObject.prototype.processListTemplate = function (configValue, item) {\n    var _this = this;\n    $array.each(configValue, function (entry, index) {\n      var type = _this.getConfigEntryType(entry);\n      var listItem;\n      if (item.hasIndex(index) && !entry[\"forceCreate\"]) {\n        listItem = item.getIndex(index);\n      } else if (entry instanceof BaseObject) {\n        // Item is already a BaseObject, no need to process it further\n        item.push(entry);\n        return;\n      } else if (type) {\n        listItem = item.create(type);\n      } else {\n        listItem = item.create();\n      }\n      if (entry === listItem) {\n        // It's already the same item, do nothing\n      } else {\n        if ($type.isObject(entry)) {\n          // If the list item is BaseObject, we just need to let it\n          // deal if its own config\n          if (listItem instanceof BaseObject) {\n            listItem.config = entry;\n          } else if ($type.isObject(listItem) && $type.isObject(entry)) {\n            $object.copyAllProperties(entry, listItem);\n          } else {\n            item.setIndex(item.indexOf(listItem), entry);\n          }\n        }\n      }\n    });\n    // Truncate the list if it contains less items than the config\n    // array\n    while (configValue.length > item.length) {\n      item.pop();\n    }\n  };\n  /**\r\n   * Processes [[OrdererListTemplate]] or [[SortedListTemplate]].\r\n   *\r\n   * @param configValue  Config value\r\n   * @param item         Item\r\n   */\n  BaseObject.prototype.processOrderedTemplate = function (configValue, item) {\n    var _this = this;\n    $array.each(configValue, function (entry, index) {\n      var type = _this.getConfigEntryType(entry);\n      var listItem;\n      if (type) {\n        listItem = item.create(type);\n      } else {\n        listItem = item.create();\n      }\n      if ($type.isObject(entry)) {\n        // If the list item is BaseObject, we just need to let it\n        // deal if its own config\n        if (listItem instanceof BaseObject) {\n          listItem.config = entry;\n        } else if ($type.isObject(listItem) && $type.isObject(entry)) {\n          $object.copyAllProperties(entry, listItem);\n        } else {\n          item.insert(entry);\n        }\n      }\n    });\n  };\n  /**\r\n   * Processes [[List]].\r\n   *\r\n   * @param configValue  Config value\r\n   * @param item         Item\r\n   */\n  BaseObject.prototype.processList = function (configValue, item, parent) {\n    var _this = this;\n    // Convert to array if necessary\n    if (!$type.isArray(configValue)) {\n      configValue = [configValue];\n    }\n    // It's an array\n    // Create a list item for entry\n    var itemCount = item.length;\n    var extraCount = 0;\n    $array.each(configValue, function (entry, index) {\n      if ($type.isObject(entry)) {\n        // An object.\n        //\n        // Let's see if we can instantiate a class out of it, or we need\n        // to push it into list as it is.\n        //\n        // If there are items already at the specified index in the list,\n        // apply properties rather than create a new one.\n        var listItem = void 0;\n        if (index < itemCount && !entry[\"forceCreate\"]) {\n          listItem = item.getIndex(index);\n        } else if (entry instanceof BaseObject) {\n          // Item is already a BaseObject, no need to process it further\n          item.push(entry);\n          return;\n        } else {\n          extraCount++;\n          listItem = _this.createEntryInstance(entry);\n          if (parent) {\n            listItem.parent = parent;\n          } else {\n            item.push(listItem);\n          }\n        }\n        // If the list item is BaseObject, we just need to let it\n        // deal if its own config\n        if (listItem instanceof BaseObject) {\n          listItem.config = entry;\n        } else if ($type.isObject(listItem) && $type.isObject(entry)) {\n          $object.copyAllProperties(entry, listItem);\n        }\n      } else {\n        // Basic value.\n        // Just push it into list, or override existing value\n        if (item.hasIndex(index)) {\n          item.setIndex(index, entry);\n        } else {\n          item.push(entry);\n        }\n      }\n    });\n    // Truncate the list if it contains less items than the config\n    // array\n    while (!parent && configValue.length + extraCount < item.length) {\n      item.pop();\n    }\n  };\n  /**\r\n   * This function is used to sort element's JSON config properties, so that\r\n   * some properties that absolutely need to be processed last, can be put at\r\n   * the end.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param a  Element 1\r\n   * @param b  Element 2\r\n   * @return Sorting number\r\n   */\n  BaseObject.prototype.configOrder = function (a, b) {\n    if (a == b) {\n      return 0;\n    }\n    // Language must come first, so it's all set up when the rest of the\n    // elements are being instantiated\n    else if (a == \"language\") {\n      return -1;\n    } else if (b == \"language\") {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n  /**\r\n   * Checks if field should be just assigned as is, without any checking when\r\n   * processing JSON config.\r\n   *\r\n   * Extending functions can override this function to do their own checks.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as is?\r\n   */\n  BaseObject.prototype.asIs = function (field) {\n    return $array.indexOf([\"locale\"], field) != -1;\n  };\n  /**\r\n   * Checks if field needs to be converted to function, if it is specified\r\n   * as string.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as function?\r\n   */\n  BaseObject.prototype.asFunction = function (field) {\n    return false;\n  };\n  /**\r\n   * Creates a relevant class instance if such class definition exists.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param className  Class name\r\n   * @return Instance\r\n   */\n  BaseObject.prototype.createClassInstance = function (className) {\n    if ($type.hasValue(registry.registeredClasses[className])) {\n      return new registry.registeredClasses[className]();\n    } else {\n      throw Error(\"Invalid type: \\\"\" + className + \"\\\".\");\n    }\n  };\n  /**\r\n   * Creates a class instance for a config entry using it's type. (as set in\r\n   * `type` property)\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config part\r\n   * @return Instance\r\n   */\n  BaseObject.prototype.createEntryInstance = function (config) {\n    var res;\n    if ($type.hasValue(config[\"type\"])) {\n      res = this.createClassInstance(config[\"type\"]);\n    }\n    if (!res) {\n      return config;\n    }\n    return res;\n  };\n  /**\r\n   * Determines config object type.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config part\r\n   * @return Type\r\n   */\n  BaseObject.prototype.getConfigEntryType = function (config) {\n    if ($type.hasValue(config[\"type\"])) {\n      if ($type.hasValue(registry.registeredClasses[config[\"type\"]])) {\n        return registry.registeredClasses[config[\"type\"]];\n      } else {\n        throw Error(\"Invalid type: \\\"\" + config[\"type\"] + \"\\\".\");\n      }\n    }\n    return;\n  };\n  /**\r\n   * Checks if this element has a property.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param prop  Property name\r\n   * @return Has property?\r\n   */\n  BaseObject.prototype.hasProperty = function (prop) {\n    return prop in this ? true : false;\n  };\n  /**\r\n   * Checkes whether JSON key is a reserved keyword.\r\n   *\r\n   * @param key  Key\r\n   * @return Reserved\r\n   */\n  BaseObject.prototype.isReserved = function (key) {\n    return [\"type\", \"forceCreate\"].indexOf(key) !== -1;\n  };\n  Object.defineProperty(BaseObject.prototype, \"processingErrors\", {\n    /**\r\n     * A list of errors that happened during JSON processing.\r\n     *\r\n     * @return Errors\r\n     */\n    get: function () {\n      if (!this._processingErrors) {\n        this._processingErrors = [];\n      }\n      return this._processingErrors;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return BaseObject;\n}();\nexport { BaseObject };\n;\n/**\r\n * A version of [[BaseObject]] with events properties and methods.\r\n * Classes that use [[EventDispatcher]] should extend this instead of\r\n * [[BaseObject]] directly.\r\n */\nvar BaseObjectEvents = /** @class */function (_super) {\n  __extends(BaseObjectEvents, _super);\n  /**\r\n   * Constructor\r\n   */\n  function BaseObjectEvents() {\n    var _this = _super.call(this) || this;\n    _this.className = \"BaseObjectEvents\";\n    return _this;\n  }\n  Object.defineProperty(BaseObjectEvents.prototype, \"events\", {\n    /**\r\n     * An [[EventDispatcher]] instance\r\n     */\n    get: function () {\n      if (!this._eventDispatcher) {\n        this._eventDispatcher = new EventDispatcher();\n        this._disposers.push(this._eventDispatcher);\n      }\n      return this._eventDispatcher;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  //public set events(value:EventDispatcher<AMEvent<this, this[\"_events\"]>>){\n  //\tthis._eventDispatcher = value;\n  //}\n  /**\r\n   * Dispatches an event using own event dispatcher. Will automatically\r\n   * populate event data object with event type and target (this element).\r\n   * It also checks if there are any handlers registered for this sepecific\r\n   * event.\r\n   *\r\n   * @param eventType Event type (name)\r\n   * @param data      Data to pass into event handler(s)\r\n   */\n  BaseObjectEvents.prototype.dispatch = function (eventType, data) {\n    // @todo Implement proper type check\n    if (this._eventDispatcher) {\n      if (this.events.isEnabled(eventType)) {\n        if (data) {\n          data.type = eventType;\n          data.target = data.target || this;\n          this.events.dispatch(eventType, {\n            type: eventType,\n            target: this\n          });\n        } else {\n          this.events.dispatch(eventType, {\n            type: eventType,\n            target: this\n          });\n        }\n      }\n    }\n  };\n  /**\r\n   * Works like `dispatch`, except event is triggered immediately, without\r\n   * waiting for the next frame cycle.\r\n   *\r\n   * @param eventType Event type (name)\r\n   * @param data      Data to pass into event handler(s)\r\n   */\n  BaseObjectEvents.prototype.dispatchImmediately = function (eventType, data) {\n    // @todo Implement proper type check\n    if (this._eventDispatcher) {\n      if (this.events.isEnabled(eventType)) {\n        if (data) {\n          data.type = eventType;\n          data.target = data.target || this;\n          this.events.dispatchImmediately(eventType, data);\n        } else {\n          this.events.dispatchImmediately(eventType, {\n            type: eventType,\n            target: this\n          });\n        }\n      }\n    }\n  };\n  /**\r\n   * Copies all parameters from another [[Sprite]].\r\n   *\r\n   * @param source Source object\r\n   */\n  BaseObjectEvents.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    if (source._eventDispatcher) {\n      this.events.copyFrom(source._eventDispatcher);\n    }\n  };\n  return BaseObjectEvents;\n}(BaseObject);\nexport { BaseObjectEvents };","map":{"version":3,"mappings":"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","names":["List","ListTemplate","OrderedListTemplate","SortedListTemplate","Dictionary","DictionaryTemplate","Disposer","EventDispatcher","Adapter","Color","color","Percent","percent","registry","cache","$array","$object","$type","className","BaseObject","Object","_uid","getUniqueId","map","setKey","_id","value","_map","_delayedMap","property","id","delayedMap","hasKey","list","getKey","push","target","each","_this","target_1","item","removeKey","themes","getCurrentThemes","theme","index","_themes","_disposed","a","_disposers","length","disposer","shift","dispose","clearCache","clonedFrom","clones","removeValue","uid","indexOf","splice","cloneId","newObject","constructor","copyFrom","_clones","object","_className","key","ttl","set","get","clear","fn","delay","setTimeout","removeDispose","clearTimeout","setInterval","config","processConfig","e","raiseCriticalError","eachOrdered","configKey","configValue","call","hasProperty","item_1","isObject","hasValue","asIs","createClassInstance","processAdapters","processEvents","isString","window","parent_1","addDelayedMap","asFunction","registeredClasses","Error","isArray","processListTemplate","processOrderedTemplate","template","templateValue","entryKey","entryValue","listItem","processDictionaryTemplate","processList","maybeColorOrPercent","values","processDictionary","copyAllProperties","isReserved","configOrder","processingErrors","errors","join","_processingErrors","match","toNumber","entry","add","callback","priority","has","on","type","create","getConfigEntryType","hasIndex","getIndex","setIndex","pop","insert","parent","itemCount","extraCount","createEntryInstance","b","field","res","prop","__extends","_super","BaseObjectEvents","_eventDispatcher","eventType","data","events","isEnabled","dispatch","dispatchImmediately","source"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\core\\Base.ts"],"sourcesContent":["/**\r\n * Base functionality\r\n*/\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IClone } from \"./utils/Clone\";\r\nimport { List, ListTemplate } from \"./utils/List\";\r\nimport { OrderedListTemplate, SortedListTemplate } from \"./utils/SortedList\";\r\nimport { Dictionary, DictionaryTemplate } from \"./utils/Dictionary\";\r\nimport { Disposer, IDisposer } from \"./utils/Disposer\";\r\nimport { EventDispatcher, AMEvent } from \"./utils/EventDispatcher\";\r\nimport { Adapter } from \"./utils/Adapter\";\r\nimport { Color, color } from \"./utils/Color\";\r\nimport { Percent, percent } from \"./utils/Percent\";\r\nimport { ITheme } from \"../themes/ITheme\";\r\nimport { Ordering } from \"./utils/Order\";\r\n\r\nimport { registry } from \"./Registry\";\r\nimport { cache } from \"./utils/Cache\";\r\n\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\n\r\n//import * as $debug from \"./utils/Debug\";\r\n\r\n/**\r\n * Provides base functionality for all derivative objects, like generating ids,\r\n * handling cache, etc.\r\n */\r\nexport class BaseObject implements IClone<BaseObject>, IDisposer {\r\n\r\n\t/**\r\n\t * A unique ID for this object.\r\n\t *\r\n\t * Generated on first access by `uid()` getter.\r\n\t */\r\n\tprotected _uid: $type.Optional<string>;\r\n\r\n\t/**\r\n\t * Indicates if this object has already been deleted. Any\r\n\t * destruction/disposal code should take this into account when deciding\r\n\t * wheter to run potentially costly disposal operations if they already have\r\n\t * been run.\r\n\t */\r\n\tprotected _disposed: boolean = false;\r\n\r\n\t/**\r\n\t * List of IDisposer which will be disposed when the BaseObject is disposed.\r\n\t */\r\n\tprotected _disposers: Array<IDisposer> = [];\r\n\r\n\t/**\r\n\t * User-defined id of the object.\r\n\t */\r\n\tprotected _id: $type.Optional<string>;\r\n\r\n\t/**\r\n\t * Holds a universal mapping collection, so that elements and their children\r\n\t * can create and look up all kinds of relations between id and object.\r\n\t */\r\n\tprotected _map: $type.Optional<Dictionary<string, any>>;\r\n\r\n\t/**\r\n\t * Holds mapping for objects referenced by id in JSON config that are not yet\r\n\t * available at processing time.\r\n\t */\r\n\tprotected _delayedMap: $type.Optional<Dictionary<string, any>>;\r\n\r\n\t/**\r\n\t * The theme used by this object.\r\n\t */\r\n\tprotected _themes: $type.Optional<ITheme[]>;\r\n\r\n\t// @review\r\n\t/**\r\n\t * A list of objects that are clones of this object. An object needs to\r\n\t * maintain a list of its clones so that properties can be re-applied to\r\n\t * clones whenever property on the object they were cloned from changes.\r\n\t */\r\n\tprotected _clones: $type.Optional<List<this>>;\r\n\r\n\r\n\t// @review\r\n\t/**\r\n\t * Reference to the original object this object was cloned from. We need to\r\n\t * keep this so we can disassociate it from source object when this object\r\n\t * is disposed.\r\n\t */\r\n\tpublic clonedFrom: $type.Optional<this>;\r\n\r\n\t/**\r\n\t * A class name for the object.\r\n\t *\r\n\t * This property is used by deriving classes to identify which class it is.\r\n\t * We could derive the class name from the object itself, however method of\r\n\t * doing so is too costly, so we are relying on this property to quickly\r\n\t * access type of class.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _className: $type.Optional<string>;\r\n\r\n\t/**\r\n\t * [cloneId description]\r\n\t *\r\n\t * @todo Needs description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic cloneId: $type.Optional<string>;\r\n\r\n\t/**\r\n\t * Holds processing error list.\r\n\t */\r\n\tprotected _processingErrors: string[];\r\n\r\n\t//protected _classes: { [index: string]: any } = {};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t * * Sets class name\r\n\t */\r\n\tconstructor() {\r\n\t\tthis.className = \"BaseObject\";\r\n\t\t//this.debug();\r\n\t}\r\n\r\n\tprotected debug(): void {\r\n\t\t//$debug.debug(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns object's internal unique ID.\r\n\t *\r\n\t * @return Unique ID\r\n\t */\r\n\tpublic get uid(): string {\r\n\t\tif (!this._uid) {\r\n\t\t\tthis._uid = registry.getUniqueId();\r\n\t\t\tregistry.map.setKey(this._uid, this);\r\n\t\t}\r\n\t\treturn this._uid;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the user-defined id of the element.\r\n\t *\r\n\t * @param value Id\r\n\t */\r\n\tpublic set id(value: $type.Optional<string>) {\r\n\t\t//registry.map.setKey(value, this); // registry.map only stores by uid\r\n\t\tthis._id = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Id\r\n\t */\r\n\tpublic get id(): $type.Optional<string> {\r\n\t\treturn this._id;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a universal collection for mapping ids with objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Map collection\r\n\t */\r\n\tpublic get map(): Dictionary<string, any> {\r\n\t\tif (!this._map) {\r\n\t\t\tthis._map = new Dictionary<string, any>();\r\n\t\t}\r\n\t\treturn this._map;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns mapping for objects referenced by id in JSON config that are not yet\r\n\t * available at processing time.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Map collection\r\n\t */\r\n\tpublic get delayedMap(): Dictionary<string, any> {\r\n\t\tif (!this._delayedMap) {\r\n\t\t\tthis._delayedMap = new Dictionary<string, any>();\r\n\t\t}\r\n\t\treturn this._delayedMap;\r\n\t}\r\n\r\n\t/**\r\n\t * Logs an id and property of the target element that is not yet available\r\n\t * for later assignment.\r\n\t * \r\n\t * @ignore\r\n\t * @param  property  Property to set\r\n\t * @param  id        ID of the target element\r\n\t */\r\n\tpublic addDelayedMap(property: string, id: string): void {\r\n\t\tconst map = this.delayedMap;\r\n\t\tif (!map.hasKey(id)) {\r\n\t\t\tmap.setKey(id, []);\r\n\t\t}\r\n\t\tconst list = map.getKey(id);\r\n\t\tlist.push({\r\n\t\t\tproperty: property,\r\n\t\t\ttarget: this\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Processes delayed JSON config items.\r\n\t * \r\n\t * @ignore\r\n\t */\r\n\tpublic processDelayedMap(): void {\r\n\t\tthis.delayedMap.each((id, list) => {\r\n\t\t\tif (this.map.hasKey(id)) {\r\n\t\t\t\tconst target = this.map.getKey(id);\r\n\t\t\t\t$array.each(list, (item: any) => {\r\n\t\t\t\t\titem.target[item.property] = target;\r\n\t\t\t\t});\r\n\t\t\t\tthis.delayedMap.removeKey(id);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Applies properties from all assigned themes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic applyTheme(): void {\r\n\t\t// TODO is this needed ?\r\n\t\tif (registry) {\r\n\t\t\tlet themes = this.getCurrentThemes();\r\n\r\n\t\t\t// TODO is this needed ?\r\n\t\t\tif (themes) {\r\n\t\t\t\t$array.each(themes, (theme, index) => {\r\n\t\t\t\t\ttheme(this);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of themes to be used for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value An array of themes\r\n\t */\r\n\tpublic set themes(value: $type.Optional<ITheme[]>) {\r\n\t\tthis._themes = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return An array of themes\r\n\t */\r\n\tpublic get themes(): $type.Optional<ITheme[]> {\r\n\t\treturn this._themes;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a list of themes that should be applied to this element. It could\r\n\t * either be a list of themes set explicitly on this element, or system-wide.\r\n\t *\r\n\t * @return List of themes\r\n\t */\r\n\tpublic getCurrentThemes(): ITheme[] {\r\n\t\treturn this.themes || registry.themes;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if this object has been already been disposed.\r\n\t *\r\n\t * @return Is disposed?\r\n\t */\r\n\tpublic isDisposed(): boolean {\r\n\t\treturn this._disposed;\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tif (!this._disposed) {\r\n\t\t\tthis._disposed = true;\r\n\r\n\t\t\tconst a = this._disposers;\r\n\r\n\t\t\tthis._disposers = <any>null;\r\n\r\n\t\t\twhile (a.length !== 0) {\r\n\t\t\t\tconst disposer = a.shift();\r\n\t\t\t\tdisposer.dispose();\r\n\t\t\t}\r\n\r\n\t\t\t// Clear cache\r\n\t\t\tthis.clearCache();\r\n\r\n\t\t\t// remove from clones list\r\n\t\t\tif (this.clonedFrom) {\r\n\t\t\t\tthis.clonedFrom.clones.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tconst uid = this._uid;\r\n\r\n\t\t\tif (uid != null) {\r\n\t\t\t\tregistry.map.removeKey(uid);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an IDisposer, which will be disposed when this object is disposed.\r\n\t *\r\n\t * @param target Object to dispose\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic addDisposer(target: IDisposer): void {\r\n\t\tthis._disposers.push(target);\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes disposable object and removes it from `_disposers`.\r\n\t *\r\n\t * @param target Object to dispose\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic removeDispose(target: IDisposer): void {\r\n\t\t//if(target){\r\n\t\tif (!this._disposed) {\r\n\t\t\tlet index = $array.indexOf(this._disposers, target);\r\n\t\t\tif (index > -1) {\r\n\t\t\t\tthis._disposers.splice(index, 1);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\ttarget.dispose();\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Makes a copy of this object and returns the clone. Try to avoid cloning complex objects like chart, create new instances if you need them.\r\n\t *\r\n\t * @param cloneId  An id to use for clone (if not set a unique id will be generated)\r\n\t * @returns Clone\r\n\t */\r\n\tpublic clone<A extends this>(cloneId?: string): this {\r\n\t\tif (!cloneId) {\r\n\t\t\tcloneId = \"clone-\" + registry.getUniqueId();\r\n\t\t}\r\n\r\n\t\tlet newObject: this = new (<{ new(): A; }>this.constructor)();\r\n\t\tnewObject.cloneId = cloneId;\r\n\r\n\t\tnewObject.copyFrom(this);\r\n\r\n\t\t// add to clones list\r\n\t\t// this.clones.push(newObject); // moved this to copyFrom\r\n\r\n\r\n\t\treturn newObject;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a collection of object's clones.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Clones\r\n\t */\r\n\tpublic get clones(): List<this> {\r\n\t\tif (!this._clones) {\r\n\t\t\tthis._clones = new List<this>();\r\n\t\t}\r\n\t\treturn this._clones;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from different element.\r\n\t *\r\n\t * @param object Source element\r\n\t */\r\n\tpublic copyFrom(object: this): void {\r\n\t\tobject.clones.push(this); // do not moveValue, as it is expensive! even if there will be several items in clones list, it's not that bad.\r\n\t\tthis.clonedFrom = object;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's class name. (a class that was used to instantiate the element)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Class name\r\n\t */\r\n\tpublic set className(value: $type.Optional<string>) {\r\n\t\tthis._className = value;\r\n\t\t/*if (registry) {\r\n\t\t\tregistry.registeredClasses[value] = typeof this;\r\n\t\t}*/\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Class name\r\n\t */\r\n\tpublic get className(): $type.Optional<string> {\r\n\t\treturn this._className;\r\n\t}\r\n\r\n\t/**\r\n\t * Caches value in object's cache.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param key    Key\r\n\t * @param value  Value\r\n\t * @param ttl    TTL in seconds\r\n\t */\r\n\tpublic setCache(key: string, value: any, ttl?: number): void {\r\n\t\tcache.set(this.uid, key, value, ttl);\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves cached value.\r\n\t *\r\n\t * If optional second padarameter is specified, it will return that value\r\n\t * if cache is not available or is expired.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param key    Key\r\n\t * @param value  Value to return if cache is not available\r\n\t * @return Value\r\n\t */\r\n\tpublic getCache(key: string, value: any = undefined): any {\r\n\t\treturn cache.get(this.uid, key, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Clears object's local cache.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic clearCache(): void {\r\n\t\tcache.clear(this.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates [[Disposer]] for `setTimeout` function call. This ensures that all\r\n\t * timeouts created by the object will be cleared when object itself is\r\n\t * disposed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fn     Callback function\r\n\t * @param delay  Timeout (ms)\r\n\t * @return Disposer for timeout\r\n\t */\r\n\tpublic setTimeout(fn: () => void, delay: number): IDisposer {\r\n\t\tconst id = setTimeout(() => {\r\n\t\t\tthis.removeDispose(disposer);\r\n\t\t\tfn();\r\n\t\t}, delay);\r\n\r\n\t\tconst disposer = new Disposer(() => {\r\n\t\t\tclearTimeout(id);\r\n\t\t});\r\n\r\n\t\tthis._disposers.push(disposer);\r\n\t\treturn disposer;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates [[Disposer]] for `setInterval` function call. This ensures that all\r\n\t * timeouts created by the object will be cleared when object itself is\r\n\t * disposed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fn     Callback function\r\n\t * @param delay  Timeout (ms)\r\n\t * @return Disposer for timeout\r\n\t */\r\n\tpublic setInterval(fn: () => void, delay: number): IDisposer {\r\n\t\tconst id = setInterval(() => {\r\n\t\t\tthis.removeDispose(disposer);\r\n\t\t\tfn();\r\n\t\t}, delay);\r\n\r\n\t\tconst disposer = new Disposer(() => {\r\n\t\t\tclearTimeout(id);\r\n\t\t});\r\n\r\n\t\tthis._disposers.push(disposer);\r\n\t\treturn disposer;\r\n\t}\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * JSON-BASED CONFIG PROCESSING\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Use this property to set JSON-based config. When set, triggers processing\r\n\t * routine, which will go through all properties, and try to apply values,\r\n\t * create instances, etc.\r\n\t *\r\n\t * Use this with caution, as it is a time-consuming process. It's used for\r\n\t * initialchart setup only, not routine operations.\r\n\t *\r\n\t * @param json JSON config\r\n\t */\r\n\tpublic set config(config: object) {\r\n\t\ttry {\r\n\t\t\tthis.processConfig(config);\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\t/*if (this instanceof Sprite) {\r\n\t\t\t\tthis.raiseCriticalError(e);\r\n\t\t\t}*/\r\n\t\t\t(<any>this).raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes the JSON config.\r\n\t *\r\n\t * @param json  JSON config\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected processConfig(config?: object): void {\r\n\r\n\t\tif (!config) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Get target\r\n\t\tlet target = <any>this;\r\n\r\n\t\t// Iterate through all of the items\r\n\t\t$object.eachOrdered(config, (configKey, value) => {\r\n\t\t\tlet configValue: any = value;\r\n\r\n\t\t\t// Is this a callback?\r\n\t\t\tif (configKey == \"callback\" && typeof value == \"function\") {\r\n\t\t\t\t(<any>value).call(target);\r\n\t\t\t}\r\n\r\n\t\t\t// Check if there's a property in target\r\n\t\t\tif (this.hasProperty(configKey)) {\r\n\r\n\t\t\t\tlet item: any;\r\n\r\n\t\t\t\t// Do we have instructions to create an object?\r\n\t\t\t\t// We create a new object if \"type\" key is set, but only if the\r\n\t\t\t\t// target object is of different type.\r\n\t\t\t\tif (\r\n\t\t\t\t\t$type.isObject(configValue)\r\n\t\t\t\t\t&& $type.hasValue((<any>configValue)[\"type\"])\r\n\t\t\t\t\t&& (\r\n\t\t\t\t\t\t!$type.isObject(target[configKey])\r\n\t\t\t\t\t\t|| !$type.hasValue(target[configKey].className)\r\n\t\t\t\t\t\t|| (<any>configValue)[\"forceCreate\"]\r\n\t\t\t\t\t\t|| target[configKey].className != (<any>configValue)[\"type\"]\r\n\t\t\t\t\t)\r\n\t\t\t\t\t&& !this.asIs(configKey)\r\n\t\t\t\t) {\r\n\t\t\t\t\titem = this.createClassInstance((<any>configValue)[\"type\"]);\r\n\r\n\t\t\t\t\t// Create new instance\r\n\t\t\t\t\tif (item) {\r\n\t\t\t\t\t\ttarget[configKey] = item;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\titem = target[configKey];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Get item from the object\r\n\t\t\t\t\titem = target[configKey];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * It is...\r\n\t\t\t\t * --------------------------------------------------------------------\r\n\t\t\t\t */\r\n\r\n\t\t\t\tif (item instanceof Adapter) {\r\n\r\n\t\t\t\t\t// ... an Adapter, try to add handlers to it\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\tthis.processAdapters(item, configValue);\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (item instanceof EventDispatcher) {\r\n\r\n\t\t\t\t\t// ... an EventDispatcher, try to add handlers to it\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\tthis.processEvents(item, configValue);\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (configKey == \"locale\" && $type.isString(configValue)) {\r\n\r\n\t\t\t\t\t// ... a locale specified as string, e.g. \"fr_FR\"\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\tif ((<any>window)[\"am4lang_\" + configValue]) {\r\n\t\t\t\t\t\ttarget[configKey] = (<any>window)[\"am4lang_\" + configValue];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (configKey == \"parent\" && $type.isString(configValue)) {\r\n\r\n\t\t\t\t\t// ... a parent referred via its it\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\tconst parent = this.map.getKey(configValue);\r\n\t\t\t\t\tif (parent) {\r\n\t\t\t\t\t\ttarget[configKey] = parent;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.addDelayedMap(\"parent\", configValue);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.asIs(configKey)) {\r\n\r\n\t\t\t\t\t// ... a special field, just set it to new value\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\t// (no need to add each indvidual item)\r\n\t\t\t\t\ttarget[configKey] = configValue;\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.asFunction(configKey) && $type.isString(configValue)) {\r\n\r\n\t\t\t\t\t// ... a field indicating function name to look for in registry\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\tif ($type.hasValue(registry.registeredClasses[configValue])) {\r\n\t\t\t\t\t\ttarget[configKey] = registry.registeredClasses[configValue];\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthrow Error(\"Invalid easing function: \" + configValue);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (<any>configValue instanceof BaseObject) {\r\n\r\n\t\t\t\t\t// ... a BaseObject object, we just going to use it as it is\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\ttarget[configKey] = configValue;\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (item instanceof BaseObject) {\r\n\r\n\t\t\t\t\t// ... another child BaseObject\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\t// Let's just pass in config part in and let itself deal with it\r\n\t\t\t\t\titem.config = configValue;\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (item instanceof ListTemplate || item instanceof OrderedListTemplate || item instanceof SortedListTemplate) {\r\n\r\n\t\t\t\t\t// ... a list with template\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\r\n\t\t\t\t\t// Let's see what we can do with it\r\n\t\t\t\t\tif ($type.isArray(configValue)) {\r\n\r\n\t\t\t\t\t\t// It's an array.\r\n\t\t\t\t\t\t// Create a list item for entry, or try to apply properties to an\r\n\t\t\t\t\t\t// existing entry if possible and it is present.\r\n\t\t\t\t\t\tif (item instanceof ListTemplate) {\r\n\t\t\t\t\t\t\tthis.processListTemplate(configValue, item);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.processOrderedTemplate(configValue, item);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.isObject(configValue)) {\r\n\t\t\t\t\t\t// It's a single oject.\r\n\t\t\t\t\t\t// Treat it as a template.\r\n\t\t\t\t\t\tif (<any>configValue instanceof BaseObject) {\r\n\t\t\t\t\t\t\t// Item is already a BaseObject, no need to process it further\r\n\t\t\t\t\t\t\titem.template = configValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\t\t// Now let's find out if the whole object if a template, or we\r\n\t\t\t\t\t\t\t// need to get it from `template` key\r\n\t\t\t\t\t\t\tlet templateValue;\r\n\t\t\t\t\t\t\tif ($type.hasValue((<any>configValue).template)) {\r\n\t\t\t\t\t\t\t\ttemplateValue = (<any>configValue).template;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\ttemplateValue = configValue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (item.template instanceof BaseObject) {\r\n\t\t\t\t\t\t\t\t// Template is a BaseObject so we will just let its config\r\n\t\t\t\t\t\t\t\t// deal with the configuration\r\n\t\t\t\t\t\t\t\t(<any>item.template).config = templateValue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\t\t\t$object.each(templateValue, (entryKey, entryValue) => {\r\n\r\n\t\t\t\t\t\t\t\t\tlet listItem = (<any>item.template)[entryKey];\r\n\r\n\t\t\t\t\t\t\t\t\tif (listItem instanceof Adapter) {\r\n\t\t\t\t\t\t\t\t\t\tthis.processAdapters(listItem, entryValue);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (listItem instanceof EventDispatcher) {\r\n\t\t\t\t\t\t\t\t\t\tthis.processEvents(listItem, entryValue);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (listItem instanceof DictionaryTemplate) {\r\n\t\t\t\t\t\t\t\t\t\tthis.processDictionaryTemplate(listItem, entryValue);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (item.template[entryKey] instanceof BaseObject) {\r\n\t\t\t\t\t\t\t\t\t\t// Template is a BaseObject. Let it deal with its own config.\r\n\t\t\t\t\t\t\t\t\t\t(<any>item.template[entryKey]).config = entryValue;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if ($type.isObject(entryValue) && $type.hasValue((<any>entryValue)[\"type\"])) {\r\n\t\t\t\t\t\t\t\t\t\tlistItem = this.createClassInstance((<any>entryValue)[\"type\"])\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (listItem) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (listItem instanceof BaseObject) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tlistItem.config = <any>entryValue;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\titem.template[entryKey] = listItem;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\titem.template[entryKey] = entryValue;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (listItem instanceof List) {\r\n\t\t\t\t\t\t\t\t\t\t// It's List, process it\r\n\t\t\t\t\t\t\t\t\t\tthis.processList(entryValue, listItem);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t// Aything else. Just assing and be done with it.\r\n\t\t\t\t\t\t\t\t\t\titem.template[entryKey] = this.maybeColorOrPercent(entryValue);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Check maybe there are `values` to insert\r\n\t\t\t\t\t\t\tif ($type.hasValue((<any>configValue).values)) {\r\n\t\t\t\t\t\t\t\tif (item instanceof ListTemplate) {\r\n\t\t\t\t\t\t\t\t\tthis.processListTemplate((<any>configValue).values, item);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tthis.processOrderedTemplate((<any>configValue).values, item);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\t// Something else?\r\n\t\t\t\t\t\t// Not sure what to do with it on a list - ignore\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if (item instanceof List) {\r\n\r\n\t\t\t\t\t// ... a list\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\r\n\t\t\t\t\tif (configKey == \"children\") {\r\n\t\t\t\t\t\tthis.processList(configValue, item, this);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.processList(configValue, item);\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if (item instanceof DictionaryTemplate) {\r\n\r\n\t\t\t\t\t// ... a dictionary with template\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\r\n\t\t\t\t\tthis.processDictionaryTemplate(item, configValue);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if (item instanceof Dictionary) {\r\n\r\n\t\t\t\t\t// ... a dictionary\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\r\n\t\t\t\t\tthis.processDictionary(item, configValue);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if (item instanceof Color || item instanceof Percent) {\r\n\r\n\t\t\t\t\t// ... it's a Color or Percent\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\ttarget[configKey] = this.maybeColorOrPercent(configValue);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if ($type.isObject(item) && $type.isObject(configValue)) {\r\n\r\n\t\t\t\t\t// ... a regular object\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\r\n\t\t\t\t\t$object.copyAllProperties(<Object>configValue, <Object>item);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t\t// ... something else - probably a simple property or object\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\r\n\t\t\t\t\t// Maybe convert to `Percent` or `Color`?\r\n\t\t\t\t\tconfigValue = this.maybeColorOrPercent(configValue);\r\n\r\n\t\t\t\t\t// Assign\r\n\t\t\t\t\ttarget[configKey] = configValue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse if (!this.isReserved(configKey)) {\r\n\r\n\t\t\t\t// Doesn't have property set. But we're going to assume JSON config\r\n\t\t\t\t// creator knows what he/she is doing and set it anyway.\r\n\t\t\t\ttarget[configKey] = configValue;\r\n\r\n\t\t\t}\r\n\t\t}, this.configOrder);\r\n\r\n\t\t// Any errors?\r\n\t\tif (this.processingErrors.length) {\r\n\t\t\tlet errors = this.processingErrors.join(\"\\n\");\r\n\t\t\tthis._processingErrors = [];\r\n\t\t\tthrow Error(errors);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Tries to detect if value is color or percent and converts to proper object\r\n\t * if necessary.\r\n\t *\r\n\t * Returns the same source value if no color/percent detected\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Converted value\r\n\t */\r\n\tprotected maybeColorOrPercent(value: any): any {\r\n\t\tif ($type.isString(value)) {\r\n\t\t\tif (value.match(/^[\\-]?[0-9.]+\\%$/)) {\r\n\t\t\t\treturn percent($type.toNumber(value));\r\n\t\t\t}\r\n\t\t\telse if (value.match(/^\\#[0-9abcdef]{3,}$/i)) {\r\n\t\t\t\treturn color(value);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\tprotected processAdapters(item: Adapter<any, any>, config: any): void {\r\n\t\tif ($type.isArray(config)) {\r\n\t\t\t$array.each(config, (entry: { key: string, callback: any, priority?: number }, index) => {\r\n\t\t\t\titem.add(entry.key, entry.callback, entry.priority || 0, this);\r\n\t\t\t});\r\n\t\t}\r\n\t\telse if ($type.isObject(config)) {\r\n\t\t\t$object.each(config, (key, entry) => {\r\n\t\t\t\tif (!item.has(key, entry)) {\r\n\t\t\t\t\titem.add(key, entry);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tprotected processEvents(item: EventDispatcher<any>, config: any): void {\r\n\t\tif ($type.isArray(config)) {\r\n\t\t\t$array.each(config, (entry: { type: string, callback: any }, index) => {\r\n\t\t\t\titem.on(entry.type, entry.callback, this);\r\n\t\t\t});\r\n\t\t}\r\n\t\telse if ($type.isObject(config)) {\r\n\t\t\t$object.each(config, (key, entry) => {\r\n\t\t\t\tif (!item.has(key, entry)) {\r\n\t\t\t\t\titem.on(key, entry);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON config for a [[DictionaryTemplate]] item.\r\n\t *\r\n\t * @todo Description\r\n\t * @param item    Item\r\n\t * @param config  Config\r\n\t */\r\n\tprotected processDictionaryTemplate(item: DictionaryTemplate<any, any>, config: any): void {\r\n\r\n\t\t// We can only process object\r\n\t\t// Not sure what to do with other types - ignore\r\n\t\tif ($type.isObject(config)) {\r\n\r\n\t\t\t// Create an entry for each item, or override properties for\r\n\t\t\t// existing one.\r\n\t\t\t$object.each(config, (entryKey, entryValue) => {\r\n\t\t\t\tlet listItem;\r\n\r\n\t\t\t\t// Get existing one, or create a new one\r\n\t\t\t\tif (entryKey == \"template\") {\r\n\t\t\t\t\tlistItem = item.template;\r\n\t\t\t\t}\r\n\t\t\t\telse if (item.hasKey(entryKey)) {\r\n\t\t\t\t\tlistItem = item.getKey(entryKey);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlistItem = item.create(entryKey);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Set data\r\n\t\t\t\tif (listItem instanceof BaseObject) {\r\n\t\t\t\t\tlistItem.config = entryValue;\r\n\t\t\t\t}\r\n\t\t\t\telse if ($type.isObject(listItem) && $type.isObject(entryValue)) {\r\n\t\t\t\t\t$object.copyAllProperties(<Object>entryValue, <Object>listItem);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlistItem.setKey(entryKey, entryValue);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON config for a [[Dictionary]] item.\r\n\t *\r\n\t * @todo Description\r\n\t * @param item    Item\r\n\t * @param config  Config\r\n\t */\r\n\tprotected processDictionary(item: Dictionary<any, any>, config: any): void {\r\n\r\n\t\t// We can only process object\r\n\t\t// Not sure what to do with other types - ignore\r\n\t\tif ($type.isObject(config)) {\r\n\r\n\t\t\t// Create an entry for each item, or override properties for\r\n\t\t\t// existing one.\r\n\t\t\t// @todo support for non-basic types\r\n\t\t\t$object.each(config, (entryKey, entryValue) => {\r\n\t\t\t\titem.setKey(entryKey, entryValue);\r\n\t\t\t});\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes [[ListTemplate]].\r\n\t *\r\n\t * @param configValue  Config value\r\n\t * @param item         Item\r\n\t */\r\n\tprotected processListTemplate(configValue: any, item: ListTemplate<any>): void {\r\n\r\n\t\t$array.each(configValue, (entry, index) => {\r\n\t\t\tlet type = this.getConfigEntryType(entry);\r\n\t\t\tlet listItem;\r\n\t\t\tif (item.hasIndex(index) && !(<any>entry)[\"forceCreate\"]) {\r\n\t\t\t\tlistItem = item.getIndex(index);\r\n\t\t\t}\r\n\t\t\telse if (<any>entry instanceof BaseObject) {\r\n\t\t\t\t// Item is already a BaseObject, no need to process it further\r\n\t\t\t\titem.push(entry);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\telse if (type) {\r\n\t\t\t\tlistItem = item.create(type);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlistItem = item.create();\r\n\t\t\t}\r\n\r\n\t\t\tif (entry === listItem) {\r\n\t\t\t\t// It's already the same item, do nothing\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\tif ($type.isObject(entry)) {\r\n\r\n\t\t\t\t\t// If the list item is BaseObject, we just need to let it\r\n\t\t\t\t\t// deal if its own config\r\n\t\t\t\t\tif (listItem instanceof BaseObject) {\r\n\t\t\t\t\t\t(<any>listItem).config = entry;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.isObject(listItem) && $type.isObject(entry)) {\r\n\t\t\t\t\t\t$object.copyAllProperties(<Object>entry, <Object>listItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\titem.setIndex(item.indexOf(listItem), entry);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Truncate the list if it contains less items than the config\r\n\t\t// array\r\n\t\twhile (configValue.length > item.length) {\r\n\t\t\titem.pop();\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes [[OrdererListTemplate]] or [[SortedListTemplate]].\r\n\t *\r\n\t * @param configValue  Config value\r\n\t * @param item         Item\r\n\t */\r\n\tprotected processOrderedTemplate(configValue: any, item: OrderedListTemplate<any> | SortedListTemplate<any>): void {\r\n\r\n\t\t$array.each(configValue, (entry, index) => {\r\n\t\t\tlet type = this.getConfigEntryType(entry);\r\n\t\t\tlet listItem;\r\n\t\t\tif (type) {\r\n\t\t\t\tlistItem = item.create(type);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlistItem = item.create();\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isObject(entry)) {\r\n\r\n\t\t\t\t// If the list item is BaseObject, we just need to let it\r\n\t\t\t\t// deal if its own config\r\n\t\t\t\tif (listItem instanceof BaseObject) {\r\n\t\t\t\t\t(<any>listItem).config = entry;\r\n\t\t\t\t}\r\n\t\t\t\telse if ($type.isObject(listItem) && $type.isObject(entry)) {\r\n\t\t\t\t\t$object.copyAllProperties(<Object>entry, <Object>listItem);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\titem.insert(entry);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes [[List]].\r\n\t *\r\n\t * @param configValue  Config value\r\n\t * @param item         Item\r\n\t */\r\n\tprotected processList(configValue: any, item: List<any>, parent?: any): void {\r\n\r\n\t\t// Convert to array if necessary\r\n\t\tif (!$type.isArray(configValue)) {\r\n\t\t\tconfigValue = [configValue];\r\n\t\t}\r\n\r\n\t\t// It's an array\r\n\t\t// Create a list item for entry\r\n\t\tconst itemCount = item.length;\r\n\t\tlet extraCount = 0;\r\n\t\t$array.each(configValue, (entry, index) => {\r\n\r\n\t\t\tif ($type.isObject(entry)) {\r\n\r\n\t\t\t\t// An object.\r\n\t\t\t\t//\r\n\t\t\t\t// Let's see if we can instantiate a class out of it, or we need\r\n\t\t\t\t// to push it into list as it is.\r\n\t\t\t\t//\r\n\t\t\t\t// If there are items already at the specified index in the list,\r\n\t\t\t\t// apply properties rather than create a new one.\r\n\r\n\t\t\t\tlet listItem;\r\n\t\t\t\tif ((index < itemCount) && !(<any>entry)[\"forceCreate\"]) {\r\n\t\t\t\t\tlistItem = item.getIndex(index);\r\n\t\t\t\t}\r\n\t\t\t\telse if (<any>entry instanceof BaseObject) {\r\n\t\t\t\t\t// Item is already a BaseObject, no need to process it further\r\n\t\t\t\t\titem.push(entry);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\textraCount++;\r\n\t\t\t\t\tlistItem = this.createEntryInstance(entry);\r\n\t\t\t\t\tif (parent) {\r\n\t\t\t\t\t\tlistItem.parent = parent;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\titem.push(listItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If the list item is BaseObject, we just need to let it\r\n\t\t\t\t// deal if its own config\r\n\t\t\t\tif (listItem instanceof BaseObject) {\r\n\t\t\t\t\t(<any>listItem).config = entry;\r\n\t\t\t\t}\r\n\t\t\t\telse if ($type.isObject(listItem) && $type.isObject(entry)) {\r\n\t\t\t\t\t$object.copyAllProperties(<Object>entry, <Object>listItem);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\t// Basic value.\r\n\t\t\t\t// Just push it into list, or override existing value\r\n\t\t\t\tif (item.hasIndex(index)) {\r\n\t\t\t\t\titem.setIndex(index, entry);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\titem.push(entry);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t\t// Truncate the list if it contains less items than the config\r\n\t\t// array\r\n\t\twhile (!parent && (configValue.length + extraCount) < item.length) {\r\n\t\t\titem.pop();\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t// Language must come first, so it's all set up when the rest of the\r\n\t\t// elements are being instantiated\r\n\t\telse if (a == \"language\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (b == \"language\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\r\n\t\telse {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if field should be just assigned as is, without any checking when\r\n\t * processing JSON config.\r\n\t *\r\n\t * Extending functions can override this function to do their own checks.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn $array.indexOf([\"locale\"], field) != -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if field needs to be converted to function, if it is specified\r\n\t * as string.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as function?\r\n\t */\r\n\tprotected asFunction(field: string): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a relevant class instance if such class definition exists.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param className  Class name\r\n\t * @return Instance\r\n\t */\r\n\tprotected createClassInstance(className: string): Object {\r\n\t\tif ($type.hasValue(registry.registeredClasses[className])) {\r\n\t\t\treturn new registry.registeredClasses[className]();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthrow Error(\"Invalid type: \\\"\" + className + \"\\\".\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a class instance for a config entry using it's type. (as set in\r\n\t * `type` property)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config part\r\n\t * @return Instance\r\n\t */\r\n\tprotected createEntryInstance(config: any): any {\r\n\t\tlet res: Object;\r\n\t\tif ($type.hasValue(config[\"type\"])) {\r\n\t\t\tres = this.createClassInstance(config[\"type\"]);\r\n\t\t}\r\n\t\tif (!res) {\r\n\t\t\treturn config;\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Determines config object type.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config part\r\n\t * @return Type\r\n\t */\r\n\tprotected getConfigEntryType(config: any): any {\r\n\t\tif ($type.hasValue(config[\"type\"])) {\r\n\t\t\tif ($type.hasValue(registry.registeredClasses[config[\"type\"]])) {\r\n\t\t\t\treturn registry.registeredClasses[config[\"type\"]];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthrow Error(\"Invalid type: \\\"\" + config[\"type\"] + \"\\\".\");\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if this element has a property.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param prop  Property name\r\n\t * @return Has property?\r\n\t */\r\n\tprotected hasProperty(prop: string): boolean {\r\n\t\treturn prop in this ? true : false;\r\n\t}\r\n\r\n\t/**\r\n\t * Checkes whether JSON key is a reserved keyword.\r\n\t *\r\n\t * @param key  Key\r\n\t * @return Reserved\r\n\t */\r\n\tprotected isReserved(key: string): boolean {\r\n\t\treturn [\"type\", \"forceCreate\"].indexOf(key) !== -1;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of errors that happened during JSON processing.\r\n\t *\r\n\t * @return Errors\r\n\t */\r\n\tprotected get processingErrors(): string[] {\r\n\t\tif (!this._processingErrors) {\r\n\t\t\tthis._processingErrors = [];\r\n\t\t}\r\n\t\treturn this._processingErrors;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[BaseObjectEvents]].\r\n */\r\nexport interface IBaseObjectEvents { };\r\n\r\n/**\r\n * A version of [[BaseObject]] with events properties and methods.\r\n * Classes that use [[EventDispatcher]] should extend this instead of\r\n * [[BaseObject]] directly.\r\n */\r\nexport class BaseObjectEvents extends BaseObject {\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"BaseObjectEvents\";\r\n\t}\r\n\r\n\tpublic _events!: IBaseObjectEvents;\r\n\r\n\t/**\r\n\t * An [[EventDispatcher]] instance\r\n\t * @ignore\r\n\t */\r\n\tpublic _eventDispatcher: EventDispatcher<AMEvent<this, this[\"_events\"]>>;\r\n\r\n\t/**\r\n\t * An [[EventDispatcher]] instance\r\n\t */\r\n\tpublic get events(): EventDispatcher<AMEvent<this, this[\"_events\"]>> {\r\n\t\tif (!this._eventDispatcher) {\r\n\t\t\tthis._eventDispatcher = new EventDispatcher();\r\n\t\t\tthis._disposers.push(this._eventDispatcher);\r\n\t\t}\r\n\t\treturn this._eventDispatcher;\r\n\t}\r\n\r\n\t//public set events(value:EventDispatcher<AMEvent<this, this[\"_events\"]>>){\r\n\t//\tthis._eventDispatcher = value;\r\n\t//}\r\n\r\n\t/**\r\n\t * Dispatches an event using own event dispatcher. Will automatically\r\n\t * populate event data object with event type and target (this element).\r\n\t * It also checks if there are any handlers registered for this sepecific\r\n\t * event.\r\n\t *\r\n\t * @param eventType Event type (name)\r\n\t * @param data      Data to pass into event handler(s)\r\n\t */\r\n\tpublic dispatch<Key extends keyof this[\"_events\"]>(eventType: Key, data?: any): void {\r\n\t\t// @todo Implement proper type check\r\n\t\tif (this._eventDispatcher) {\r\n\t\t\tif (this.events.isEnabled(eventType)) {\r\n\t\t\t\tif (data) {\r\n\t\t\t\t\tdata.type = eventType;\r\n\t\t\t\t\tdata.target = data.target || this;\r\n\t\t\t\t\t(<any>this.events).dispatch(eventType, {\r\n\t\t\t\t\t\ttype: eventType,\r\n\t\t\t\t\t\ttarget: this\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t(<any>this.events).dispatch(eventType, {\r\n\t\t\t\t\t\ttype: eventType,\r\n\t\t\t\t\t\ttarget: this\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Works like `dispatch`, except event is triggered immediately, without\r\n\t * waiting for the next frame cycle.\r\n\t *\r\n\t * @param eventType Event type (name)\r\n\t * @param data      Data to pass into event handler(s)\r\n\t */\r\n\tpublic dispatchImmediately<Key extends keyof this[\"_events\"]>(eventType: Key, data?: any): void {\r\n\t\t// @todo Implement proper type check\r\n\t\tif (this._eventDispatcher) {\r\n\t\t\tif (this.events.isEnabled(eventType)) {\r\n\t\t\t\tif (data) {\r\n\t\t\t\t\tdata.type = eventType;\r\n\t\t\t\t\tdata.target = data.target || this;\r\n\t\t\t\t\t(<any>this.events).dispatchImmediately(eventType, data);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t(<any>this.events).dispatchImmediately(eventType, {\r\n\t\t\t\t\t\ttype: eventType,\r\n\t\t\t\t\t\ttarget: this\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Sprite]].\r\n\t *\r\n\t * @param source Source object\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (source._eventDispatcher) {\r\n\t\t\tthis.events.copyFrom(source._eventDispatcher);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}