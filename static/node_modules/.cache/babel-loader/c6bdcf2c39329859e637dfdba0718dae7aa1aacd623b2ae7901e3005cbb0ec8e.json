{"ast":null,"code":"/**\r\n * ChordLink module\r\n */\nimport { __extends } from \"tslib\";\nimport { FlowDiagramLink } from \"./FlowDiagramLink\";\nimport { registry } from \"../../core/Registry\";\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar ChordLink = /** @class */function (_super) {\n  __extends(ChordLink, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ChordLink() {\n    var _this = _super.call(this) || this;\n    _this.className = \"ChordLink\";\n    _this.middleLine = _this.createChild(QuadraticCurve);\n    _this.middleLine.shouldClone = false;\n    _this.middleLine.strokeOpacity = 0;\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * (Re)validates (redraws) the link.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  ChordLink.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n    if (!this.isTemplate) {\n      var startAngle = this.startAngle;\n      var endAngle = this.endAngle;\n      var arc = this.arc;\n      var radius = this.radius;\n      var fromNode = this.dataItem.fromNode;\n      var toNode = this.dataItem.toNode;\n      var fromX = 0;\n      var fromY = 0;\n      if (fromNode) {\n        fromX = fromNode.pixelX + fromNode.dx;\n        fromY = fromNode.pixelY + fromNode.dy;\n      }\n      var toX = 0;\n      var toY = 0;\n      if (toNode) {\n        toX = toNode.pixelX + toNode.dx;\n        toY = toNode.pixelY + toNode.dy;\n      }\n      if (radius > 0) {\n        var x1 = radius * $math.cos(startAngle) + fromX;\n        var y1 = radius * $math.sin(startAngle) + fromY;\n        var x2 = radius * $math.cos(endAngle) + toX;\n        var y2 = radius * $math.sin(endAngle) + toY;\n        //let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\n        //let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\n        //let cpx = (arcWidth) * $math.cos(cpAngle);\n        //let cpy = (arcWidth) * $math.sin(cpAngle);\n        var cp = {\n          x: 0,\n          y: 0\n        };\n        var path = $path.moveTo({\n          x: x1,\n          y: y1\n        });\n        path += $path.arcTo(startAngle, arc, radius);\n        path += $path.quadraticCurveTo({\n          x: x2,\n          y: y2\n        }, cp);\n        path += $path.arcTo(endAngle, arc, radius);\n        path += $path.quadraticCurveTo({\n          x: x1,\n          y: y1\n        }, cp);\n        if (arc > 0) {\n          this.link.path = path;\n        } else {\n          this.link.path = \"\";\n        }\n        if (this.maskBullets) {\n          this.bulletsMask.path = path;\n          this.bulletsContainer.mask = this.bulletsMask;\n        }\n        var mAngle1 = startAngle + arc / 2;\n        var mAngle2 = endAngle + arc / 2;\n        var middleLine = this.middleLine;\n        middleLine.x1 = radius * $math.cos(mAngle1) + fromX;\n        middleLine.y1 = radius * $math.sin(mAngle1) + fromY;\n        middleLine.x2 = radius * $math.cos(mAngle2) + toX;\n        middleLine.y2 = radius * $math.sin(mAngle2) + toY;\n        middleLine.cpx = 0;\n        middleLine.cpy = 0;\n        middleLine.stroke = this.fill;\n        this.positionBullets();\n      }\n    }\n  };\n  Object.defineProperty(ChordLink.prototype, \"radius\", {\n    /**\r\n     * @return End Y\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n    /**\r\n     * [radius description]\r\n     *\r\n     * @todo Description\r\n     * @param value End Y\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"radius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ChordLink.prototype, \"arc\", {\n    /**\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"arc\");\n    },\n    /**\r\n     * [arc description]\r\n     *\r\n     * @todo Description\r\n     * @param value [description]\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"arc\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ChordLink;\n}(FlowDiagramLink);\nexport { ChordLink };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;","map":{"version":3,"mappings":"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","names":["FlowDiagramLink","registry","QuadraticCurve","$math","$path","__extends","_super","_this","className","middleLine","createChild","shouldClone","strokeOpacity","applyTheme","ChordLink","validate","isTemplate","startAngle","endAngle","arc","radius","fromNode","dataItem","toNode","fromX","fromY","pixelX","dx","pixelY","dy","toX","toY","x1","cos","y1","sin","x2","y2","cp","x","y","path","moveTo","arcTo","quadraticCurveTo","link","maskBullets","bulletsMask","bulletsContainer","mask","mAngle1","mAngle2","cpx","cpy","stroke","fill","positionBullets","Object","getPropertyValue","value","setPropertyValue","registeredClasses"],"sources":["C:\\Users\\Lucian\\Documents\\DEV\\nodejs\\stock-market-api\\dev\\static\\node_modules\\src\\.internal\\charts\\elements\\ChordLink.ts"],"sourcesContent":["/**\r\n * ChordLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordLink]].\r\n */\r\nexport interface IChordLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tradius?: number;\r\n\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tarc?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordLink]].\r\n */\r\nexport interface IChordLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordLinkAdapters extends IFlowDiagramLinkAdapters, IChordLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n     */\r\n\tpublic middleLine: QuadraticCurve;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordLink\";\r\n\r\n\t\tthis.middleLine = this.createChild(QuadraticCurve);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\tlet fromNode = this.dataItem.fromNode;\r\n\t\t\tlet toNode = this.dataItem.toNode;\r\n\r\n\t\t\tlet fromX = 0;\r\n\t\t\tlet fromY = 0;\r\n\r\n\t\t\tif (fromNode) {\r\n\t\t\t\tfromX = fromNode.pixelX + fromNode.dx;\r\n\t\t\t\tfromY = fromNode.pixelY + fromNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tlet toX = 0;\r\n\t\t\tlet toY = 0;\r\n\r\n\t\t\tif (toNode) {\r\n\t\t\t\ttoX = toNode.pixelX + toNode.dx;\r\n\t\t\t\ttoY = toNode.pixelY + toNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tif (radius > 0) {\r\n\t\t\t\tlet x1 = radius * $math.cos(startAngle) + fromX;\r\n\t\t\t\tlet y1 = radius * $math.sin(startAngle) + fromY;\r\n\t\t\t\tlet x2 = radius * $math.cos(endAngle) + toX;\r\n\t\t\t\tlet y2 = radius * $math.sin(endAngle) + toY;\r\n\r\n\t\t\t\t//let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\r\n\t\t\t\t//let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\r\n\r\n\t\t\t\t//let cpx = (arcWidth) * $math.cos(cpAngle);\r\n\t\t\t\t//let cpy = (arcWidth) * $math.sin(cpAngle);\r\n\r\n\t\t\t\tlet cp = { x: 0, y: 0 };\r\n\t\t\t\tlet path = $path.moveTo({ x: x1, y: y1 });\r\n\r\n\t\t\t\tpath += $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x2, y: y2 }, cp);\r\n\t\t\t\tpath += $path.arcTo(endAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x1, y: y1 }, cp);\r\n\r\n\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\tthis.link.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.link.path = \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.maskBullets) {\r\n\t\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet mAngle1 = startAngle + arc / 2;\r\n\t\t\t\tlet mAngle2 = endAngle + arc / 2;\r\n\r\n\t\t\t\tlet middleLine = this.middleLine;\r\n\r\n\t\t\t\tmiddleLine.x1 = radius * $math.cos(mAngle1) + fromX;\r\n\t\t\t\tmiddleLine.y1 = radius * $math.sin(mAngle1) + fromY;\r\n\t\t\t\tmiddleLine.x2 = radius * $math.cos(mAngle2) + toX;\r\n\t\t\t\tmiddleLine.y2 = radius * $math.sin(mAngle2) + toY;\r\n\r\n\t\t\t\tmiddleLine.cpx = 0;\r\n\t\t\t\tmiddleLine.cpy = 0;\r\n\r\n\t\t\t\tmiddleLine.stroke = this.fill;\r\n\r\n\t\t\t\tthis.positionBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value End Y\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End Y\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}